/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);

	__webpack_require__(3);

	var _Counter = __webpack_require__(4);

	var _Counter2 = _interopRequireDefault(_Counter);

	var _Counter3 = __webpack_require__(23);

	var _Counter4 = _interopRequireDefault(_Counter3);

	var _Counter5 = __webpack_require__(205);

	var _Counter6 = _interopRequireDefault(_Counter5);

	var _Counter7 = __webpack_require__(244);

	var _Counter8 = _interopRequireDefault(_Counter7);

	var _Counter9 = __webpack_require__(246);

	var _Counter10 = _interopRequireDefault(_Counter9);

	var _SimpleStore = __webpack_require__(248);

	var _SimpleStore2 = _interopRequireDefault(_SimpleStore);

	var _CollarStore = __webpack_require__(250);

	var _CollarStore2 = _interopRequireDefault(_CollarStore);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* for angular 2 */
	var collar = __webpack_require__(6);
	var DevToolAddon = __webpack_require__(251);

	collar.use(new DevToolAddon());

	var state = { count: 0 };

	/* create the view */
	var vanillaCounter = (0, _Counter2.default)('#vanilla-counter', 'vanilla-counter');
	var reactCounter = (0, _Counter4.default)('#react-counter', 'react-counter');
	var angularCounter = (0, _Counter6.default)('#angular-counter', 'angular-counter');
	var d3Counter = (0, _Counter8.default)('#d3-counter', 'd3-counter');
	var vueCounter = (0, _Counter10.default)('#vue-counter', 'vue-counter');

	/* create the store */
	// const store = new SimpleStore('store', {count : 0});
	var store = new _CollarStore2.default('store', { count: 0 });

	store.registerView('vanilla-counter', vanillaCounter);
	store.registerView('react-counter', reactCounter);
	store.registerView('angular-counter', angularCounter);
	store.registerView('d3-counter', d3Counter);
	store.registerView('vue-counter', vueCounter);

	store.handleAction('INCREMENT', function (msg) {
	  this.state.count++;
	});

	store.handleAction('DECREMENT', function (msg) {
	  this.state.count--;
	});

	/* register handler to handler UI events (action) */
	/*vanillaCounter.addMsgHandler('INCREMENT', (msg) => {
	  state.count++;
	  vanillaCounter.update(state);
	});

	vanillaCounter.addMsgHandler('DECREMENT', (msg) => {
	  state.count--;
	  vanillaCounter.update(state);
	});


	reactCounter.addMsgHandler('INCREMENT', (msg) => {
	  state.count++;
	  reactCounter.update(state);
	});

	reactCounter.addMsgHandler('DECREMENT', (msg) => {
	  state.count--;
	  reactCounter.update(state);
	});*/

	/* finally, we can render the view */
	vanillaCounter.render(state);
	reactCounter.render(state);
	angularCounter.render(state);
	d3Counter.render(state);
	vueCounter.render(state);

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/**
	* @license
	* Copyright Google Inc. All Rights Reserved.
	*
	* Use of this source code is governed by an MIT-style license that can be
	* found in the LICENSE file at https://angular.io/license
	*/
	(function (global, factory) {
		 true ? factory() :
		typeof define === 'function' && define.amd ? define(factory) :
		(factory());
	}(this, (function () { 'use strict';

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Zone$1 = (function (global) {
	    if (global['Zone']) {
	        throw new Error('Zone already loaded.');
	    }
	    var NO_ZONE = { name: 'NO ZONE' };
	    var notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling', unknown = 'unknown';
	    var microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';
	    var Zone = (function () {
	        function Zone(parent, zoneSpec) {
	            this._properties = null;
	            this._parent = parent;
	            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';
	            this._properties = zoneSpec && zoneSpec.properties || {};
	            this._zoneDelegate =
	                new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
	        }
	        Zone.assertZonePatched = function () {
	            if (global.Promise !== ZoneAwarePromise) {
	                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +
	                    'has been overwritten.\n' +
	                    'Most likely cause is that a Promise polyfill has been loaded ' +
	                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +
	                    'If you must load one, do so before loading zone.js.)');
	            }
	        };
	        Object.defineProperty(Zone, "root", {
	            get: function () {
	                var zone = Zone.current;
	                while (zone.parent) {
	                    zone = zone.parent;
	                }
	                return zone;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(Zone, "current", {
	            get: function () {
	                return _currentZoneFrame.zone;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone, "currentTask", {
	            get: function () {
	                return _currentTask;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone.prototype, "parent", {
	            get: function () {
	                return this._parent;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone.prototype, "name", {
	            get: function () {
	                return this._name;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Zone.prototype.get = function (key) {
	            var zone = this.getZoneWith(key);
	            if (zone)
	                return zone._properties[key];
	        };
	        Zone.prototype.getZoneWith = function (key) {
	            var current = this;
	            while (current) {
	                if (current._properties.hasOwnProperty(key)) {
	                    return current;
	                }
	                current = current._parent;
	            }
	            return null;
	        };
	        Zone.prototype.fork = function (zoneSpec) {
	            if (!zoneSpec)
	                throw new Error('ZoneSpec required!');
	            return this._zoneDelegate.fork(this, zoneSpec);
	        };
	        Zone.prototype.wrap = function (callback, source) {
	            if (typeof callback !== 'function') {
	                throw new Error('Expecting function got: ' + callback);
	            }
	            var _callback = this._zoneDelegate.intercept(this, callback, source);
	            var zone = this;
	            return function () {
	                return zone.runGuarded(_callback, this, arguments, source);
	            };
	        };
	        Zone.prototype.run = function (callback, applyThis, applyArgs, source) {
	            if (applyThis === void 0) { applyThis = undefined; }
	            if (applyArgs === void 0) { applyArgs = null; }
	            if (source === void 0) { source = null; }
	            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
	            try {
	                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	            }
	            finally {
	                _currentZoneFrame = _currentZoneFrame.parent;
	            }
	        };
	        Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {
	            if (applyThis === void 0) { applyThis = null; }
	            if (applyArgs === void 0) { applyArgs = null; }
	            if (source === void 0) { source = null; }
	            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
	            try {
	                try {
	                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	                }
	                catch (error) {
	                    if (this._zoneDelegate.handleError(this, error)) {
	                        throw error;
	                    }
	                }
	            }
	            finally {
	                _currentZoneFrame = _currentZoneFrame.parent;
	            }
	        };
	        Zone.prototype.runTask = function (task, applyThis, applyArgs) {
	            if (task.zone != this)
	                throw new Error('A task can only be run in the zone of creation! (Creation: ' +
	                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');
	            var reEntryGuard = task.state != running;
	            reEntryGuard && task._transitionTo(running, scheduled);
	            task.runCount++;
	            var previousTask = _currentTask;
	            _currentTask = task;
	            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
	            try {
	                if (task.type == macroTask && task.data && !task.data.isPeriodic) {
	                    task.cancelFn = null;
	                }
	                try {
	                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
	                }
	                catch (error) {
	                    if (this._zoneDelegate.handleError(this, error)) {
	                        throw error;
	                    }
	                }
	            }
	            finally {
	                // if the task's state is notScheduled or unknown, then it has already been cancelled
	                // we should not reset the state to scheduled
	                if (task.state !== notScheduled && task.state !== unknown) {
	                    if (task.type == eventTask || (task.data && task.data.isPeriodic)) {
	                        reEntryGuard && task._transitionTo(scheduled, running);
	                    }
	                    else {
	                        task.runCount = 0;
	                        this._updateTaskCount(task, -1);
	                        reEntryGuard &&
	                            task._transitionTo(notScheduled, running, notScheduled);
	                    }
	                }
	                _currentZoneFrame = _currentZoneFrame.parent;
	                _currentTask = previousTask;
	            }
	        };
	        Zone.prototype.scheduleTask = function (task) {
	            if (task.zone && task.zone !== this) {
	                // check if the task was rescheduled, the newZone
	                // should not be the children of the original zone
	                var newZone = this;
	                while (newZone) {
	                    if (newZone === task.zone) {
	                        throw Error("can not reschedule task to " + this
	                            .name + " which is descendants of the original zone " + task.zone.name);
	                    }
	                    newZone = newZone.parent;
	                }
	            }
	            task._transitionTo(scheduling, notScheduled);
	            var zoneDelegates = [];
	            task._zoneDelegates = zoneDelegates;
	            task._zone = this;
	            try {
	                task = this._zoneDelegate.scheduleTask(this, task);
	            }
	            catch (err) {
	                // should set task's state to unknown when scheduleTask throw error
	                // because the err may from reschedule, so the fromState maybe notScheduled
	                task._transitionTo(unknown, scheduling, notScheduled);
	                // TODO: @JiaLiPassion, should we check the result from handleError?
	                this._zoneDelegate.handleError(this, err);
	                throw err;
	            }
	            if (task._zoneDelegates === zoneDelegates) {
	                // we have to check because internally the delegate can reschedule the task.
	                this._updateTaskCount(task, 1);
	            }
	            if (task.state == scheduling) {
	                task._transitionTo(scheduled, scheduling);
	            }
	            return task;
	        };
	        Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {
	            return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, null));
	        };
	        Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {
	            return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));
	        };
	        Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {
	            return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));
	        };
	        Zone.prototype.cancelTask = function (task) {
	            if (task.zone != this)
	                throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' +
	                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');
	            task._transitionTo(canceling, scheduled, running);
	            try {
	                this._zoneDelegate.cancelTask(this, task);
	            }
	            catch (err) {
	                // if error occurs when cancelTask, transit the state to unknown
	                task._transitionTo(unknown, canceling);
	                this._zoneDelegate.handleError(this, err);
	                throw err;
	            }
	            this._updateTaskCount(task, -1);
	            task._transitionTo(notScheduled, canceling);
	            task.runCount = 0;
	            return task;
	        };
	        Zone.prototype._updateTaskCount = function (task, count) {
	            var zoneDelegates = task._zoneDelegates;
	            if (count == -1) {
	                task._zoneDelegates = null;
	            }
	            for (var i = 0; i < zoneDelegates.length; i++) {
	                zoneDelegates[i]._updateTaskCount(task.type, count);
	            }
	        };
	        return Zone;
	    }());
	    Zone.__symbol__ = __symbol__;
	    var DELEGATE_ZS = {
	        name: '',
	        onHasTask: function (delegate, _, target, hasTaskState) {
	            return delegate.hasTask(target, hasTaskState);
	        },
	        onScheduleTask: function (delegate, _, target, task) {
	            return delegate.scheduleTask(target, task);
	        },
	        onInvokeTask: function (delegate, _, target, task, applyThis, applyArgs) { return delegate.invokeTask(target, task, applyThis, applyArgs); },
	        onCancelTask: function (delegate, _, target, task) {
	            return delegate.cancelTask(target, task);
	        }
	    };
	    var ZoneDelegate = (function () {
	        function ZoneDelegate(zone, parentDelegate, zoneSpec) {
	            this._taskCounts = { 'microTask': 0, 'macroTask': 0, 'eventTask': 0 };
	            this.zone = zone;
	            this._parentDelegate = parentDelegate;
	            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
	            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
	            this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate.zone);
	            this._interceptZS =
	                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
	            this._interceptDlgt =
	                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
	            this._interceptCurrZone =
	                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate.zone);
	            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
	            this._invokeDlgt =
	                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
	            this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate.zone);
	            this._handleErrorZS =
	                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
	            this._handleErrorDlgt =
	                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
	            this._handleErrorCurrZone =
	                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate.zone);
	            this._scheduleTaskZS =
	                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
	            this._scheduleTaskDlgt =
	                zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
	            this._scheduleTaskCurrZone =
	                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate.zone);
	            this._invokeTaskZS =
	                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
	            this._invokeTaskDlgt =
	                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
	            this._invokeTaskCurrZone =
	                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate.zone);
	            this._cancelTaskZS =
	                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
	            this._cancelTaskDlgt =
	                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
	            this._cancelTaskCurrZone =
	                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate.zone);
	            this._hasTaskZS = null;
	            this._hasTaskDlgt = null;
	            this._hasTaskDlgtOwner = null;
	            this._hasTaskCurrZone = null;
	            var zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;
	            var parentHasTask = parentDelegate && parentDelegate._hasTaskZS;
	            if (zoneSpecHasTask || parentHasTask) {
	                // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such
	                // a case all task related interceptors must go through this ZD. We can't short circuit it.
	                this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;
	                this._hasTaskDlgt = parentDelegate;
	                this._hasTaskDlgtOwner = this;
	                this._hasTaskCurrZone = zone;
	                if (!zoneSpec.onScheduleTask) {
	                    this._scheduleTaskZS = DELEGATE_ZS;
	                    this._scheduleTaskDlgt = parentDelegate;
	                    this._scheduleTaskCurrZone = this.zone;
	                }
	                if (!zoneSpec.onInvokeTask) {
	                    this._invokeTaskZS = DELEGATE_ZS;
	                    this._invokeTaskDlgt = parentDelegate;
	                    this._invokeTaskCurrZone = this.zone;
	                }
	                if (!zoneSpec.onCancelTask) {
	                    this._cancelTaskZS = DELEGATE_ZS;
	                    this._cancelTaskDlgt = parentDelegate;
	                    this._cancelTaskCurrZone = this.zone;
	                }
	            }
	        }
	        ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {
	            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :
	                new Zone(targetZone, zoneSpec);
	        };
	        ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {
	            return this._interceptZS ?
	                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :
	                callback;
	        };
	        ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {
	            return this._invokeZS ?
	                this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :
	                callback.apply(applyThis, applyArgs);
	        };
	        ZoneDelegate.prototype.handleError = function (targetZone, error) {
	            return this._handleErrorZS ?
	                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :
	                true;
	        };
	        ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {
	            var returnTask = task;
	            if (this._scheduleTaskZS) {
	                if (this._hasTaskZS) {
	                    returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);
	                }
	                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);
	                if (!returnTask)
	                    returnTask = task;
	            }
	            else {
	                if (task.scheduleFn) {
	                    task.scheduleFn(task);
	                }
	                else if (task.type == microTask) {
	                    scheduleMicroTask(task);
	                }
	                else {
	                    throw new Error('Task is missing scheduleFn.');
	                }
	            }
	            return returnTask;
	        };
	        ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {
	            return this._invokeTaskZS ?
	                this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :
	                task.callback.apply(applyThis, applyArgs);
	        };
	        ZoneDelegate.prototype.cancelTask = function (targetZone, task) {
	            var value;
	            if (this._cancelTaskZS) {
	                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);
	            }
	            else {
	                if (!task.cancelFn) {
	                    throw Error('Task is not cancelable');
	                }
	                value = task.cancelFn(task);
	            }
	            return value;
	        };
	        ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {
	            // hasTask should not throw error so other ZoneDelegate
	            // can still trigger hasTask callback
	            try {
	                return this._hasTaskZS &&
	                    this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);
	            }
	            catch (err) {
	            }
	        };
	        ZoneDelegate.prototype._updateTaskCount = function (type, count) {
	            var counts = this._taskCounts;
	            var prev = counts[type];
	            var next = counts[type] = prev + count;
	            if (next < 0) {
	                throw new Error('More tasks executed then were scheduled.');
	            }
	            if (prev == 0 || next == 0) {
	                var isEmpty = {
	                    microTask: counts.microTask > 0,
	                    macroTask: counts.macroTask > 0,
	                    eventTask: counts.eventTask > 0,
	                    change: type
	                };
	                // TODO(misko): what should happen if it throws?
	                this.hasTask(this.zone, isEmpty);
	            }
	        };
	        return ZoneDelegate;
	    }());
	    var ZoneTask = (function () {
	        function ZoneTask(type, source, callback, options, scheduleFn, cancelFn) {
	            this._zone = null;
	            this.runCount = 0;
	            this._zoneDelegates = null;
	            this._state = 'notScheduled';
	            this.type = type;
	            this.source = source;
	            this.data = options;
	            this.scheduleFn = scheduleFn;
	            this.cancelFn = cancelFn;
	            this.callback = callback;
	            var self = this;
	            this.invoke = function () {
	                _numberOfNestedTaskFrames++;
	                try {
	                    self.runCount++;
	                    return self.zone.runTask(self, this, arguments);
	                }
	                finally {
	                    if (_numberOfNestedTaskFrames == 1) {
	                        drainMicroTaskQueue();
	                    }
	                    _numberOfNestedTaskFrames--;
	                }
	            };
	        }
	        Object.defineProperty(ZoneTask.prototype, "zone", {
	            get: function () {
	                return this._zone;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ZoneTask.prototype, "state", {
	            get: function () {
	                return this._state;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        ZoneTask.prototype.cancelScheduleRequest = function () {
	            this._transitionTo(notScheduled, scheduling);
	        };
	        ZoneTask.prototype._transitionTo = function (toState, fromState1, fromState2) {
	            if (this._state === fromState1 || this._state === fromState2) {
	                this._state = toState;
	                if (toState == notScheduled) {
	                    this._zoneDelegates = null;
	                }
	            }
	            else {
	                throw new Error(this.type + " '" + this.source + "': can not transition to '" + toState + "', expecting state '" + fromState1 + "'" + (fromState2 ?
	                    ' or \'' + fromState2 + '\'' :
	                    '') + ", was '" + this._state + "'.");
	            }
	        };
	        ZoneTask.prototype.toString = function () {
	            if (this.data && typeof this.data.handleId !== 'undefined') {
	                return this.data.handleId;
	            }
	            else {
	                return Object.prototype.toString.call(this);
	            }
	        };
	        // add toJSON method to prevent cyclic error when
	        // call JSON.stringify(zoneTask)
	        ZoneTask.prototype.toJSON = function () {
	            return {
	                type: this.type,
	                state: this.state,
	                source: this.source,
	                data: this.data,
	                zone: this.zone.name,
	                invoke: this.invoke,
	                scheduleFn: this.scheduleFn,
	                cancelFn: this.cancelFn,
	                runCount: this.runCount,
	                callback: this.callback
	            };
	        };
	        return ZoneTask;
	    }());
	    var ZoneFrame = (function () {
	        function ZoneFrame(parent, zone) {
	            this.parent = parent;
	            this.zone = zone;
	        }
	        return ZoneFrame;
	    }());
	    function __symbol__(name) {
	        return '__zone_symbol__' + name;
	    }
	    
	    var symbolSetTimeout = __symbol__('setTimeout');
	    var symbolPromise = __symbol__('Promise');
	    var symbolThen = __symbol__('then');
	    var _currentZoneFrame = new ZoneFrame(null, new Zone(null, null));
	    var _currentTask = null;
	    var _microTaskQueue = [];
	    var _isDrainingMicrotaskQueue = false;
	    var _uncaughtPromiseErrors = [];
	    var _numberOfNestedTaskFrames = 0;
	    function scheduleQueueDrain() {
	        // if we are not running in any task, and there has not been anything scheduled
	        // we must bootstrap the initial task creation by manually scheduling the drain
	        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {
	            // We are not running in Task, so we need to kickstart the microtask queue.
	            if (global[symbolPromise]) {
	                global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
	            }
	            else {
	                global[symbolSetTimeout](drainMicroTaskQueue, 0);
	            }
	        }
	    }
	    function scheduleMicroTask(task) {
	        scheduleQueueDrain();
	        _microTaskQueue.push(task);
	    }
	    function consoleError(e) {
	        if (Zone[__symbol__('ignoreConsoleErrorUncaughtError')]) {
	            return;
	        }
	        var rejection = e && e.rejection;
	        if (rejection) {
	            console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);
	        }
	        console.error(e);
	    }
	    function handleUnhandledRejection(e) {
	        consoleError(e);
	        try {
	            var handler = Zone[__symbol__('unhandledPromiseRejectionHandler')];
	            if (handler && typeof handler === 'function') {
	                handler.apply(this, [e]);
	            }
	        }
	        catch (err) {
	        }
	    }
	    function drainMicroTaskQueue() {
	        if (!_isDrainingMicrotaskQueue) {
	            _isDrainingMicrotaskQueue = true;
	            while (_microTaskQueue.length) {
	                var queue = _microTaskQueue;
	                _microTaskQueue = [];
	                for (var i = 0; i < queue.length; i++) {
	                    var task = queue[i];
	                    try {
	                        task.zone.runTask(task, null, null);
	                    }
	                    catch (error) {
	                        consoleError(error);
	                    }
	                }
	            }
	            while (_uncaughtPromiseErrors.length) {
	                var _loop_1 = function () {
	                    var uncaughtPromiseError = _uncaughtPromiseErrors.shift();
	                    try {
	                        uncaughtPromiseError.zone.runGuarded(function () {
	                            throw uncaughtPromiseError;
	                        });
	                    }
	                    catch (error) {
	                        handleUnhandledRejection(error);
	                    }
	                };
	                while (_uncaughtPromiseErrors.length) {
	                    _loop_1();
	                }
	            }
	            _isDrainingMicrotaskQueue = false;
	        }
	    }
	    function isThenable(value) {
	        return value && value.then;
	    }
	    function forwardResolution(value) {
	        return value;
	    }
	    function forwardRejection(rejection) {
	        return ZoneAwarePromise.reject(rejection);
	    }
	    var symbolState = __symbol__('state');
	    var symbolValue = __symbol__('value');
	    var source = 'Promise.then';
	    var UNRESOLVED = null;
	    var RESOLVED = true;
	    var REJECTED = false;
	    var REJECTED_NO_CATCH = 0;
	    function makeResolver(promise, state) {
	        return function (v) {
	            try {
	                resolvePromise(promise, state, v);
	            }
	            catch (err) {
	                resolvePromise(promise, false, err);
	            }
	            // Do not return value or you will break the Promise spec.
	        };
	    }
	    var once = function () {
	        var wasCalled = false;
	        return function wrapper(wrappedFunction) {
	            return function () {
	                if (wasCalled) {
	                    return;
	                }
	                wasCalled = true;
	                wrappedFunction.apply(null, arguments);
	            };
	        };
	    };
	    // Promise Resolution
	    function resolvePromise(promise, state, value) {
	        var onceWrapper = once();
	        if (promise === value) {
	            throw new TypeError('Promise resolved with itself');
	        }
	        if (promise[symbolState] === UNRESOLVED) {
	            // should only get value.then once based on promise spec.
	            var then = null;
	            try {
	                if (typeof value === 'object' || typeof value === 'function') {
	                    then = value && value.then;
	                }
	            }
	            catch (err) {
	                onceWrapper(function () {
	                    resolvePromise(promise, false, err);
	                })();
	                return promise;
	            }
	            // if (value instanceof ZoneAwarePromise) {
	            if (state !== REJECTED && value instanceof ZoneAwarePromise &&
	                value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) &&
	                value[symbolState] !== UNRESOLVED) {
	                clearRejectedNoCatch(value);
	                resolvePromise(promise, value[symbolState], value[symbolValue]);
	            }
	            else if (state !== REJECTED && typeof then === 'function') {
	                try {
	                    then.apply(value, [
	                        onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false))
	                    ]);
	                }
	                catch (err) {
	                    onceWrapper(function () {
	                        resolvePromise(promise, false, err);
	                    })();
	                }
	            }
	            else {
	                promise[symbolState] = state;
	                var queue = promise[symbolValue];
	                promise[symbolValue] = value;
	                // record task information in value when error occurs, so we can
	                // do some additional work such as render longStackTrace
	                if (state === REJECTED && value instanceof Error) {
	                    value[__symbol__('currentTask')] = Zone.currentTask;
	                }
	                for (var i = 0; i < queue.length;) {
	                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
	                }
	                if (queue.length == 0 && state == REJECTED) {
	                    promise[symbolState] = REJECTED_NO_CATCH;
	                    try {
	                        throw new Error('Uncaught (in promise): ' + value +
	                            (value && value.stack ? '\n' + value.stack : ''));
	                    }
	                    catch (err) {
	                        var error_1 = err;
	                        error_1.rejection = value;
	                        error_1.promise = promise;
	                        error_1.zone = Zone.current;
	                        error_1.task = Zone.currentTask;
	                        _uncaughtPromiseErrors.push(error_1);
	                        scheduleQueueDrain();
	                    }
	                }
	            }
	        }
	        // Resolving an already resolved promise is a noop.
	        return promise;
	    }
	    function clearRejectedNoCatch(promise) {
	        if (promise[symbolState] === REJECTED_NO_CATCH) {
	            // if the promise is rejected no catch status
	            // and queue.length > 0, means there is a error handler
	            // here to handle the rejected promise, we should trigger
	            // windows.rejectionhandled eventHandler or nodejs rejectionHandled
	            // eventHandler
	            try {
	                var handler = Zone[__symbol__('rejectionHandledHandler')];
	                if (handler && typeof handler === 'function') {
	                    handler.apply(this, [{ rejection: promise[symbolValue], promise: promise }]);
	                }
	            }
	            catch (err) {
	            }
	            promise[symbolState] = REJECTED;
	            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
	                if (promise === _uncaughtPromiseErrors[i].promise) {
	                    _uncaughtPromiseErrors.splice(i, 1);
	                }
	            }
	        }
	    }
	    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
	        clearRejectedNoCatch(promise);
	        var delegate = promise[symbolState] ?
	            (typeof onFulfilled === 'function') ? onFulfilled : forwardResolution :
	            (typeof onRejected === 'function') ? onRejected : forwardRejection;
	        zone.scheduleMicroTask(source, function () {
	            try {
	                resolvePromise(chainPromise, true, zone.run(delegate, undefined, [promise[symbolValue]]));
	            }
	            catch (error) {
	                resolvePromise(chainPromise, false, error);
	            }
	        });
	    }
	    var ZoneAwarePromise = (function () {
	        function ZoneAwarePromise(executor) {
	            var promise = this;
	            if (!(promise instanceof ZoneAwarePromise)) {
	                throw new Error('Must be an instanceof Promise.');
	            }
	            promise[symbolState] = UNRESOLVED;
	            promise[symbolValue] = []; // queue;
	            try {
	                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
	            }
	            catch (error) {
	                resolvePromise(promise, false, error);
	            }
	        }
	        ZoneAwarePromise.toString = function () {
	            return 'function ZoneAwarePromise() { [native code] }';
	        };
	        ZoneAwarePromise.resolve = function (value) {
	            return resolvePromise(new this(null), RESOLVED, value);
	        };
	        ZoneAwarePromise.reject = function (error) {
	            return resolvePromise(new this(null), REJECTED, error);
	        };
	        ZoneAwarePromise.race = function (values) {
	            var resolve;
	            var reject;
	            var promise = new this(function (res, rej) {
	                _a = [res, rej], resolve = _a[0], reject = _a[1];
	                var _a;
	            });
	            function onResolve(value) {
	                promise && (promise = null || resolve(value));
	            }
	            function onReject(error) {
	                promise && (promise = null || reject(error));
	            }
	            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
	                var value = values_1[_i];
	                if (!isThenable(value)) {
	                    value = this.resolve(value);
	                }
	                value.then(onResolve, onReject);
	            }
	            return promise;
	        };
	        ZoneAwarePromise.all = function (values) {
	            var resolve;
	            var reject;
	            var promise = new this(function (res, rej) {
	                resolve = res;
	                reject = rej;
	            });
	            var count = 0;
	            var resolvedValues = [];
	            for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
	                var value = values_2[_i];
	                if (!isThenable(value)) {
	                    value = this.resolve(value);
	                }
	                value.then((function (index) { return function (value) {
	                    resolvedValues[index] = value;
	                    count--;
	                    if (!count) {
	                        resolve(resolvedValues);
	                    }
	                }; })(count), reject);
	                count++;
	            }
	            if (!count)
	                resolve(resolvedValues);
	            return promise;
	        };
	        ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {
	            var chainPromise = new this.constructor(null);
	            var zone = Zone.current;
	            if (this[symbolState] == UNRESOLVED) {
	                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
	            }
	            else {
	                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
	            }
	            return chainPromise;
	        };
	        ZoneAwarePromise.prototype.catch = function (onRejected) {
	            return this.then(null, onRejected);
	        };
	        return ZoneAwarePromise;
	    }());
	    // Protect against aggressive optimizers dropping seemingly unused properties.
	    // E.g. Closure Compiler in advanced mode.
	    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;
	    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;
	    ZoneAwarePromise['race'] = ZoneAwarePromise.race;
	    ZoneAwarePromise['all'] = ZoneAwarePromise.all;
	    var NativePromise = global[symbolPromise] = global['Promise'];
	    global['Promise'] = ZoneAwarePromise;
	    var symbolThenPatched = __symbol__('thenPatched');
	    function patchThen(Ctor) {
	        var proto = Ctor.prototype;
	        var originalThen = proto.then;
	        // Keep a reference to the original method.
	        proto[symbolThen] = originalThen;
	        Ctor.prototype.then = function (onResolve, onReject) {
	            var _this = this;
	            var wrapped = new ZoneAwarePromise(function (resolve, reject) {
	                originalThen.call(_this, resolve, reject);
	            });
	            return wrapped.then(onResolve, onReject);
	        };
	        Ctor[symbolThenPatched] = true;
	    }
	    function zoneify(fn) {
	        return function () {
	            var resultPromise = fn.apply(this, arguments);
	            if (resultPromise instanceof ZoneAwarePromise) {
	                return resultPromise;
	            }
	            var Ctor = resultPromise.constructor;
	            if (!Ctor[symbolThenPatched]) {
	                patchThen(Ctor);
	            }
	            return resultPromise;
	        };
	    }
	    if (NativePromise) {
	        patchThen(NativePromise);
	        var fetch_1 = global['fetch'];
	        if (typeof fetch_1 == 'function') {
	            global['fetch'] = zoneify(fetch_1);
	        }
	    }
	    // This is not part of public API, but it is usefull for tests, so we expose it.
	    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;
	    var blacklistedStackFramesSymbol = Zone.__symbol__('blacklistedStackFrames');
	    var NativeError = global[__symbol__('Error')] = global.Error;
	    // Store the frames which should be removed from the stack frames
	    var blackListedStackFrames = {};
	    // We must find the frame where Error was created, otherwise we assume we don't understand stack
	    var zoneAwareFrame1;
	    var zoneAwareFrame2;
	    global.Error = ZoneAwareError;
	    var stackRewrite = 'stackRewrite';
	    /**
	     * This is ZoneAwareError which processes the stack frame and cleans up extra frames as well as
	     * adds zone information to it.
	     */
	    function ZoneAwareError() {
	        var _this = this;
	        // We always have to return native error otherwise the browser console will not work.
	        var error = NativeError.apply(this, arguments);
	        if (!error.stack) {
	            // in IE, the error.stack will be undefined
	            // when error was constructed, it will only
	            // be available when throw
	            try {
	                throw error;
	            }
	            catch (err) {
	                error = err;
	            }
	        }
	        // Save original stack trace
	        var originalStack = error['originalStack'] = error.stack;
	        // Process the stack trace and rewrite the frames.
	        if (ZoneAwareError[stackRewrite] && originalStack) {
	            var frames_1 = originalStack.split('\n');
	            var zoneFrame = _currentZoneFrame;
	            var i = 0;
	            // Find the first frame
	            while (!(frames_1[i] === zoneAwareFrame1 || frames_1[i] === zoneAwareFrame2) &&
	                i < frames_1.length) {
	                i++;
	            }
	            for (; i < frames_1.length && zoneFrame; i++) {
	                var frame = frames_1[i];
	                if (frame.trim()) {
	                    switch (blackListedStackFrames[frame]) {
	                        case 0 /* blackList */:
	                            frames_1.splice(i, 1);
	                            i--;
	                            break;
	                        case 1 /* transition */:
	                            if (zoneFrame.parent) {
	                                // This is the special frame where zone changed. Print and process it accordingly
	                                frames_1[i] += " [" + zoneFrame.parent.zone.name + " => " + zoneFrame.zone.name + "]";
	                                zoneFrame = zoneFrame.parent;
	                            }
	                            else {
	                                zoneFrame = null;
	                            }
	                            break;
	                        default:
	                            frames_1[i] += " [" + zoneFrame.zone.name + "]";
	                    }
	                }
	            }
	            try {
	                error.stack = error.zoneAwareStack = frames_1.join('\n');
	            }
	            catch (e) {
	                // ignore as some browsers don't allow overriding of stack
	            }
	        }
	        if (this instanceof NativeError && this.constructor != NativeError) {
	            // We got called with a `new` operator AND we are subclass of ZoneAwareError
	            // in that case we have to copy all of our properties to `this`.
	            Object.keys(error).concat('stack', 'message').forEach(function (key) {
	                if (error[key] !== undefined) {
	                    try {
	                        _this[key] = error[key];
	                    }
	                    catch (e) {
	                        // ignore the assignment in case it is a setter and it throws.
	                    }
	                }
	            });
	            return this;
	        }
	        return error;
	    }
	    // Copy the prototype so that instanceof operator works as expected
	    ZoneAwareError.prototype = NativeError.prototype;
	    ZoneAwareError[blacklistedStackFramesSymbol] = blackListedStackFrames;
	    ZoneAwareError[stackRewrite] = false;
	    // those properties need special handling
	    var specialPropertyNames = ['stackTraceLimit', 'captureStackTrace', 'prepareStackTrace'];
	    // those properties of NativeError should be set to ZoneAwareError
	    var nativeErrorProperties = Object.keys(NativeError);
	    if (nativeErrorProperties) {
	        nativeErrorProperties.forEach(function (prop) {
	            if (specialPropertyNames.filter(function (sp) { return sp === prop; }).length === 0) {
	                Object.defineProperty(ZoneAwareError, prop, {
	                    get: function () {
	                        return NativeError[prop];
	                    },
	                    set: function (value) {
	                        NativeError[prop] = value;
	                    }
	                });
	            }
	        });
	    }
	    if (NativeError.hasOwnProperty('stackTraceLimit')) {
	        // Extend default stack limit as we will be removing few frames.
	        NativeError.stackTraceLimit = Math.max(NativeError.stackTraceLimit, 15);
	        // make sure that ZoneAwareError has the same property which forwards to NativeError.
	        Object.defineProperty(ZoneAwareError, 'stackTraceLimit', {
	            get: function () {
	                return NativeError.stackTraceLimit;
	            },
	            set: function (value) {
	                return NativeError.stackTraceLimit = value;
	            }
	        });
	    }
	    if (NativeError.hasOwnProperty('captureStackTrace')) {
	        Object.defineProperty(ZoneAwareError, 'captureStackTrace', {
	            // add named function here because we need to remove this
	            // stack frame when prepareStackTrace below
	            value: function zoneCaptureStackTrace(targetObject, constructorOpt) {
	                NativeError.captureStackTrace(targetObject, constructorOpt);
	            }
	        });
	    }
	    Object.defineProperty(ZoneAwareError, 'prepareStackTrace', {
	        get: function () {
	            return NativeError.prepareStackTrace;
	        },
	        set: function (value) {
	            if (!value || typeof value !== 'function') {
	                return NativeError.prepareStackTrace = value;
	            }
	            return NativeError.prepareStackTrace = function (error, structuredStackTrace) {
	                // remove additional stack information from ZoneAwareError.captureStackTrace
	                if (structuredStackTrace) {
	                    for (var i = 0; i < structuredStackTrace.length; i++) {
	                        var st = structuredStackTrace[i];
	                        // remove the first function which name is zoneCaptureStackTrace
	                        if (st.getFunctionName() === 'zoneCaptureStackTrace') {
	                            structuredStackTrace.splice(i, 1);
	                            break;
	                        }
	                    }
	                }
	                return value.apply(this, [error, structuredStackTrace]);
	            };
	        }
	    });
	    // Now we need to populate the `blacklistedStackFrames` as well as find the
	    // run/runGuraded/runTask frames. This is done by creating a detect zone and then threading
	    // the execution through all of the above methods so that we can look at the stack trace and
	    // find the frames of interest.
	    var detectZone = Zone.current.fork({
	        name: 'detect',
	        onInvoke: function (parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {
	            // Here only so that it will show up in the stack frame so that it can be black listed.
	            return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);
	        },
	        onHandleError: function (parentZD, current, target, error) {
	            if (error.originalStack && Error === ZoneAwareError) {
	                var frames_2 = error.originalStack.split(/\n/);
	                var runFrame = false, runGuardedFrame = false, runTaskFrame = false;
	                while (frames_2.length) {
	                    var frame = frames_2.shift();
	                    // On safari it is possible to have stack frame with no line number.
	                    // This check makes sure that we don't filter frames on name only (must have
	                    // linenumber)
	                    if (/:\d+:\d+/.test(frame)) {
	                        // Get rid of the path so that we don't accidentally find function name in path.
	                        // In chrome the separator is `(` and `@` in FF and safari
	                        // Chrome: at Zone.run (zone.js:100)
	                        // Chrome: at Zone.run (http://localhost:9876/base/build/lib/zone.js:100:24)
	                        // FireFox: Zone.prototype.run@http://localhost:9876/base/build/lib/zone.js:101:24
	                        // Safari: run@http://localhost:9876/base/build/lib/zone.js:101:24
	                        var fnName = frame.split('(')[0].split('@')[0];
	                        var frameType = 1;
	                        if (fnName.indexOf('ZoneAwareError') !== -1) {
	                            zoneAwareFrame1 = frame;
	                            zoneAwareFrame2 = frame.replace('Error.', '');
	                            blackListedStackFrames[zoneAwareFrame2] = 0 /* blackList */;
	                        }
	                        if (fnName.indexOf('runGuarded') !== -1) {
	                            runGuardedFrame = true;
	                        }
	                        else if (fnName.indexOf('runTask') !== -1) {
	                            runTaskFrame = true;
	                        }
	                        else if (fnName.indexOf('run') !== -1) {
	                            runFrame = true;
	                        }
	                        else {
	                            frameType = 0 /* blackList */;
	                        }
	                        blackListedStackFrames[frame] = frameType;
	                        // Once we find all of the frames we can stop looking.
	                        if (runFrame && runGuardedFrame && runTaskFrame) {
	                            ZoneAwareError[stackRewrite] = true;
	                            break;
	                        }
	                    }
	                }
	            }
	            return false;
	        }
	    });
	    // carefully constructor a stack frame which contains all of the frames of interest which
	    // need to be detected and blacklisted.
	    // carefully constructor a stack frame which contains all of the frames of interest which
	    // need to be detected and blacklisted.
	    var detectRunFn = function () {
	        detectZone.run(function () {
	            detectZone.runGuarded(function () {
	                throw new ZoneAwareError(ZoneAwareError, NativeError);
	            });
	        });
	    };
	    // Cause the error to extract the stack frames.
	    detectZone.runTask(detectZone.scheduleMacroTask('detect', detectRunFn, null, function () { return null; }, null));
	    return global['Zone'] = Zone;
	})(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Suppress closure compiler errors about unknown 'Zone' variable
	 * @fileoverview
	 * @suppress {undefinedVars,globalThis}
	 */
	var zoneSymbol = function (n) { return "__zone_symbol__" + n; };
	var _global$1 = typeof window === 'object' && window || typeof self === 'object' && self || global;
	function bindArguments(args, source) {
	    for (var i = args.length - 1; i >= 0; i--) {
	        if (typeof args[i] === 'function') {
	            args[i] = Zone.current.wrap(args[i], source + '_' + i);
	        }
	    }
	    return args;
	}
	function patchPrototype(prototype, fnNames) {
	    var source = prototype.constructor['name'];
	    var _loop_1 = function (i) {
	        var name_1 = fnNames[i];
	        var delegate = prototype[name_1];
	        if (delegate) {
	            prototype[name_1] = (function (delegate) {
	                return function () {
	                    return delegate.apply(this, bindArguments(arguments, source + '.' + name_1));
	                };
	            })(delegate);
	        }
	    };
	    for (var i = 0; i < fnNames.length; i++) {
	        _loop_1(i);
	    }
	}
	var isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);
	var isNode = (!('nw' in _global$1) && typeof process !== 'undefined' &&
	    {}.toString.call(process) === '[object process]');
	var isBrowser = !isNode && !isWebWorker && !!(typeof window !== 'undefined' && window['HTMLElement']);
	// we are in electron of nw, so we are both browser and nodejs
	var isMix = typeof process !== 'undefined' &&
	    {}.toString.call(process) === '[object process]' && !isWebWorker &&
	    !!(typeof window !== 'undefined' && window['HTMLElement']);
	function patchProperty(obj, prop) {
	    var desc = Object.getOwnPropertyDescriptor(obj, prop) || { enumerable: true, configurable: true };
	    var originalDesc = Object.getOwnPropertyDescriptor(obj, 'original' + prop);
	    if (!originalDesc && desc.get) {
	        Object.defineProperty(obj, 'original' + prop, { enumerable: false, configurable: true, get: desc.get });
	    }
	    // A property descriptor cannot have getter/setter and be writable
	    // deleting the writable and value properties avoids this error:
	    //
	    // TypeError: property descriptors must not specify a value or be writable when a
	    // getter or setter has been specified
	    delete desc.writable;
	    delete desc.value;
	    // substr(2) cuz 'onclick' -> 'click', etc
	    var eventName = prop.substr(2);
	    var _prop = zoneSymbol('_' + prop);
	    desc.set = function (fn) {
	        if (this[_prop]) {
	            this.removeEventListener(eventName, this[_prop]);
	        }
	        if (typeof fn === 'function') {
	            var wrapFn = function (event) {
	                var result;
	                result = fn.apply(this, arguments);
	                if (result != undefined && !result) {
	                    event.preventDefault();
	                }
	                return result;
	            };
	            this[_prop] = wrapFn;
	            this.addEventListener(eventName, wrapFn, false);
	        }
	        else {
	            this[_prop] = null;
	        }
	    };
	    // The getter would return undefined for unassigned properties but the default value of an
	    // unassigned property is null
	    desc.get = function () {
	        var r = this[_prop] || null;
	        // result will be null when use inline event attribute,
	        // such as <button onclick="func();">OK</button>
	        // because the onclick function is internal raw uncompiled handler
	        // the onclick will be evaluated when first time event was triggered or
	        // the property is accessed, https://github.com/angular/zone.js/issues/525
	        // so we should use original native get to retrieve the handler
	        if (r === null) {
	            if (originalDesc && originalDesc.get) {
	                r = originalDesc.get.apply(this, arguments);
	                if (r) {
	                    desc.set.apply(this, [r]);
	                    if (typeof this['removeAttribute'] === 'function') {
	                        this.removeAttribute(prop);
	                    }
	                }
	            }
	        }
	        return this[_prop] || null;
	    };
	    Object.defineProperty(obj, prop, desc);
	}

	function patchOnProperties(obj, properties) {
	    var onProperties = [];
	    for (var prop in obj) {
	        if (prop.substr(0, 2) == 'on') {
	            onProperties.push(prop);
	        }
	    }
	    for (var j = 0; j < onProperties.length; j++) {
	        patchProperty(obj, onProperties[j]);
	    }
	    if (properties) {
	        for (var i = 0; i < properties.length; i++) {
	            patchProperty(obj, 'on' + properties[i]);
	        }
	    }
	}

	var EVENT_TASKS = zoneSymbol('eventTasks');
	// For EventTarget
	var ADD_EVENT_LISTENER = 'addEventListener';
	var REMOVE_EVENT_LISTENER = 'removeEventListener';
	function findExistingRegisteredTask(target, handler, name, capture, remove) {
	    var eventTasks = target[EVENT_TASKS];
	    if (eventTasks) {
	        for (var i = 0; i < eventTasks.length; i++) {
	            var eventTask = eventTasks[i];
	            var data = eventTask.data;
	            var listener = data.handler;
	            if ((data.handler === handler || listener.listener === handler) &&
	                data.useCapturing === capture && data.eventName === name) {
	                if (remove) {
	                    eventTasks.splice(i, 1);
	                }
	                return eventTask;
	            }
	        }
	    }
	    return null;
	}
	function attachRegisteredEvent(target, eventTask, isPrepend) {
	    var eventTasks = target[EVENT_TASKS];
	    if (!eventTasks) {
	        eventTasks = target[EVENT_TASKS] = [];
	    }
	    if (isPrepend) {
	        eventTasks.unshift(eventTask);
	    }
	    else {
	        eventTasks.push(eventTask);
	    }
	}
	var defaultListenerMetaCreator = function (self, args) {
	    return {
	        useCapturing: args[2],
	        eventName: args[0],
	        handler: args[1],
	        target: self || _global$1,
	        name: args[0],
	        invokeAddFunc: function (addFnSymbol, delegate) {
	            if (delegate && delegate.invoke) {
	                return this.target[addFnSymbol](this.eventName, delegate.invoke, this.useCapturing);
	            }
	            else {
	                return this.target[addFnSymbol](this.eventName, delegate, this.useCapturing);
	            }
	        },
	        invokeRemoveFunc: function (removeFnSymbol, delegate) {
	            if (delegate && delegate.invoke) {
	                return this.target[removeFnSymbol](this.eventName, delegate.invoke, this.useCapturing);
	            }
	            else {
	                return this.target[removeFnSymbol](this.eventName, delegate, this.useCapturing);
	            }
	        }
	    };
	};
	function makeZoneAwareAddListener(addFnName, removeFnName, useCapturingParam, allowDuplicates, isPrepend, metaCreator) {
	    if (useCapturingParam === void 0) { useCapturingParam = true; }
	    if (allowDuplicates === void 0) { allowDuplicates = false; }
	    if (isPrepend === void 0) { isPrepend = false; }
	    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }
	    var addFnSymbol = zoneSymbol(addFnName);
	    var removeFnSymbol = zoneSymbol(removeFnName);
	    var defaultUseCapturing = useCapturingParam ? false : undefined;
	    function scheduleEventListener(eventTask) {
	        var meta = eventTask.data;
	        attachRegisteredEvent(meta.target, eventTask, isPrepend);
	        return meta.invokeAddFunc(addFnSymbol, eventTask);
	    }
	    function cancelEventListener(eventTask) {
	        var meta = eventTask.data;
	        findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);
	        return meta.invokeRemoveFunc(removeFnSymbol, eventTask);
	    }
	    return function zoneAwareAddListener(self, args) {
	        var data = metaCreator(self, args);
	        data.useCapturing = data.useCapturing || defaultUseCapturing;
	        // - Inside a Web Worker, `this` is undefined, the context is `global`
	        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	        // see https://github.com/angular/zone.js/issues/190
	        var delegate = null;
	        if (typeof data.handler == 'function') {
	            delegate = data.handler;
	        }
	        else if (data.handler && data.handler.handleEvent) {
	            delegate = function (event) { return data.handler.handleEvent(event); };
	        }
	        var validZoneHandler = false;
	        try {
	            // In cross site contexts (such as WebDriver frameworks like Selenium),
	            // accessing the handler object here will cause an exception to be thrown which
	            // will fail tests prematurely.
	            validZoneHandler = data.handler && data.handler.toString() === '[object FunctionWrapper]';
	        }
	        catch (error) {
	            // Returning nothing here is fine, because objects in a cross-site context are unusable
	            return;
	        }
	        // Ignore special listeners of IE11 & Edge dev tools, see
	        // https://github.com/angular/zone.js/issues/150
	        if (!delegate || validZoneHandler) {
	            return data.invokeAddFunc(addFnSymbol, data.handler);
	        }
	        if (!allowDuplicates) {
	            var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, false);
	            if (eventTask) {
	                // we already registered, so this will have noop.
	                return data.invokeAddFunc(addFnSymbol, eventTask);
	            }
	        }
	        var zone = Zone.current;
	        var source = data.target.constructor['name'] + '.' + addFnName + ':' + data.eventName;
	        zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
	    };
	}
	function makeZoneAwareRemoveListener(fnName, useCapturingParam, metaCreator) {
	    if (useCapturingParam === void 0) { useCapturingParam = true; }
	    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }
	    var symbol = zoneSymbol(fnName);
	    var defaultUseCapturing = useCapturingParam ? false : undefined;
	    return function zoneAwareRemoveListener(self, args) {
	        var data = metaCreator(self, args);
	        data.useCapturing = data.useCapturing || defaultUseCapturing;
	        // - Inside a Web Worker, `this` is undefined, the context is `global`
	        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	        // see https://github.com/angular/zone.js/issues/190
	        var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, true);
	        if (eventTask) {
	            eventTask.zone.cancelTask(eventTask);
	        }
	        else {
	            data.invokeRemoveFunc(symbol, data.handler);
	        }
	    };
	}


	var zoneAwareAddEventListener = makeZoneAwareAddListener(ADD_EVENT_LISTENER, REMOVE_EVENT_LISTENER);
	var zoneAwareRemoveEventListener = makeZoneAwareRemoveListener(REMOVE_EVENT_LISTENER);
	function patchEventTargetMethods(obj, addFnName, removeFnName, metaCreator) {
	    if (addFnName === void 0) { addFnName = ADD_EVENT_LISTENER; }
	    if (removeFnName === void 0) { removeFnName = REMOVE_EVENT_LISTENER; }
	    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }
	    if (obj && obj[addFnName]) {
	        patchMethod(obj, addFnName, function () { return makeZoneAwareAddListener(addFnName, removeFnName, true, false, false, metaCreator); });
	        patchMethod(obj, removeFnName, function () { return makeZoneAwareRemoveListener(removeFnName, true, metaCreator); });
	        return true;
	    }
	    else {
	        return false;
	    }
	}
	var originalInstanceKey = zoneSymbol('originalInstance');
	// wrap some native API on `window`
	function patchClass(className) {
	    var OriginalClass = _global$1[className];
	    if (!OriginalClass)
	        return;
	    _global$1[className] = function () {
	        var a = bindArguments(arguments, className);
	        switch (a.length) {
	            case 0:
	                this[originalInstanceKey] = new OriginalClass();
	                break;
	            case 1:
	                this[originalInstanceKey] = new OriginalClass(a[0]);
	                break;
	            case 2:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
	                break;
	            case 3:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
	                break;
	            case 4:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
	                break;
	            default:
	                throw new Error('Arg list too long.');
	        }
	    };
	    var instance = new OriginalClass(function () { });
	    var prop;
	    for (prop in instance) {
	        // https://bugs.webkit.org/show_bug.cgi?id=44721
	        if (className === 'XMLHttpRequest' && prop === 'responseBlob')
	            continue;
	        (function (prop) {
	            if (typeof instance[prop] === 'function') {
	                _global$1[className].prototype[prop] = function () {
	                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
	                };
	            }
	            else {
	                Object.defineProperty(_global$1[className].prototype, prop, {
	                    set: function (fn) {
	                        if (typeof fn === 'function') {
	                            this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + '.' + prop);
	                        }
	                        else {
	                            this[originalInstanceKey][prop] = fn;
	                        }
	                    },
	                    get: function () {
	                        return this[originalInstanceKey][prop];
	                    }
	                });
	            }
	        }(prop));
	    }
	    for (prop in OriginalClass) {
	        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
	            _global$1[className][prop] = OriginalClass[prop];
	        }
	    }
	}

	function createNamedFn(name, delegate) {
	    try {
	        return (Function('f', "return function " + name + "(){return f(this, arguments)}"))(delegate);
	    }
	    catch (error) {
	        // if we fail, we must be CSP, just return delegate.
	        return function () {
	            return delegate(this, arguments);
	        };
	    }
	}
	function patchMethod(target, name, patchFn) {
	    var proto = target;
	    while (proto && Object.getOwnPropertyNames(proto).indexOf(name) === -1) {
	        proto = Object.getPrototypeOf(proto);
	    }
	    if (!proto && target[name]) {
	        // somehow we did not find it, but we can see it. This happens on IE for Window properties.
	        proto = target;
	    }
	    var delegateName = zoneSymbol(name);
	    var delegate;
	    if (proto && !(delegate = proto[delegateName])) {
	        delegate = proto[delegateName] = proto[name];
	        proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
	    }
	    return delegate;
	}
	// TODO: @JiaLiPassion, support cancel task later if necessary


	function findEventTask(target, evtName) {
	    var eventTasks = target[zoneSymbol('eventTasks')];
	    var result = [];
	    if (eventTasks) {
	        for (var i = 0; i < eventTasks.length; i++) {
	            var eventTask = eventTasks[i];
	            var data = eventTask.data;
	            var eventName = data && data.eventName;
	            if (eventName === evtName) {
	                result.push(eventTask);
	            }
	        }
	    }
	    return result;
	}
	Zone[zoneSymbol('patchEventTargetMethods')] = patchEventTargetMethods;
	Zone[zoneSymbol('patchOnProperties')] = patchOnProperties;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function patchTimer(window, setName, cancelName, nameSuffix) {
	    var setNative = null;
	    var clearNative = null;
	    setName += nameSuffix;
	    cancelName += nameSuffix;
	    var tasksByHandleId = {};
	    function scheduleTask(task) {
	        var data = task.data;
	        function timer() {
	            try {
	                task.invoke.apply(this, arguments);
	            }
	            finally {
	                delete tasksByHandleId[data.handleId];
	            }
	        }
	        
	        data.args[0] = timer;
	        data.handleId = setNative.apply(window, data.args);
	        tasksByHandleId[data.handleId] = task;
	        return task;
	    }
	    function clearTask(task) {
	        delete tasksByHandleId[task.data.handleId];
	        return clearNative(task.data.handleId);
	    }
	    setNative =
	        patchMethod(window, setName, function (delegate) { return function (self, args) {
	            if (typeof args[0] === 'function') {
	                var zone = Zone.current;
	                var options = {
	                    handleId: null,
	                    isPeriodic: nameSuffix === 'Interval',
	                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 : null,
	                    args: args
	                };
	                var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
	                if (!task) {
	                    return task;
	                }
	                // Node.js must additionally support the ref and unref functions.
	                var handle = task.data.handleId;
	                // check whether handle is null, because some polyfill or browser
	                // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame
	                if (handle && handle.ref && handle.unref && typeof handle.ref === 'function' &&
	                    typeof handle.unref === 'function') {
	                    task.ref = handle.ref.bind(handle);
	                    task.unref = handle.unref.bind(handle);
	                }
	                return task;
	            }
	            else {
	                // cause an error by calling it directly.
	                return delegate.apply(window, args);
	            }
	        }; });
	    clearNative =
	        patchMethod(window, cancelName, function (delegate) { return function (self, args) {
	            var task = typeof args[0] === 'number' ? tasksByHandleId[args[0]] : args[0];
	            if (task && typeof task.type === 'string') {
	                if (task.state !== 'notScheduled' &&
	                    (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {
	                    // Do not cancel already canceled functions
	                    task.zone.cancelTask(task);
	                }
	            }
	            else {
	                // cause an error by calling it directly.
	                delegate.apply(window, args);
	            }
	        }; });
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/*
	 * This is necessary for Chrome and Chrome mobile, to enable
	 * things like redefining `createdCallback` on an element.
	 */
	var _defineProperty = Object[zoneSymbol('defineProperty')] = Object.defineProperty;
	var _getOwnPropertyDescriptor = Object[zoneSymbol('getOwnPropertyDescriptor')] =
	    Object.getOwnPropertyDescriptor;
	var _create = Object.create;
	var unconfigurablesKey = zoneSymbol('unconfigurables');
	function propertyPatch() {
	    Object.defineProperty = function (obj, prop, desc) {
	        if (isUnconfigurable(obj, prop)) {
	            throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
	        }
	        var originalConfigurableFlag = desc.configurable;
	        if (prop !== 'prototype') {
	            desc = rewriteDescriptor(obj, prop, desc);
	        }
	        return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
	    };
	    Object.defineProperties = function (obj, props) {
	        Object.keys(props).forEach(function (prop) {
	            Object.defineProperty(obj, prop, props[prop]);
	        });
	        return obj;
	    };
	    Object.create = function (obj, proto) {
	        if (typeof proto === 'object' && !Object.isFrozen(proto)) {
	            Object.keys(proto).forEach(function (prop) {
	                proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
	            });
	        }
	        return _create(obj, proto);
	    };
	    Object.getOwnPropertyDescriptor = function (obj, prop) {
	        var desc = _getOwnPropertyDescriptor(obj, prop);
	        if (isUnconfigurable(obj, prop)) {
	            desc.configurable = false;
	        }
	        return desc;
	    };
	}

	function _redefineProperty(obj, prop, desc) {
	    var originalConfigurableFlag = desc.configurable;
	    desc = rewriteDescriptor(obj, prop, desc);
	    return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
	}

	function isUnconfigurable(obj, prop) {
	    return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
	}
	function rewriteDescriptor(obj, prop, desc) {
	    desc.configurable = true;
	    if (!desc.configurable) {
	        if (!obj[unconfigurablesKey]) {
	            _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });
	        }
	        obj[unconfigurablesKey][prop] = true;
	    }
	    return desc;
	}
	function _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {
	    try {
	        return _defineProperty(obj, prop, desc);
	    }
	    catch (error) {
	        if (desc.configurable) {
	            // In case of errors, when the configurable flag was likely set by rewriteDescriptor(), let's
	            // retry with the original flag value
	            if (typeof originalConfigurableFlag == 'undefined') {
	                delete desc.configurable;
	            }
	            else {
	                desc.configurable = originalConfigurableFlag;
	            }
	            try {
	                return _defineProperty(obj, prop, desc);
	            }
	            catch (error) {
	                var descJson = null;
	                try {
	                    descJson = JSON.stringify(desc);
	                }
	                catch (error) {
	                    descJson = descJson.toString();
	                }
	                console.log("Attempting to configure '" + prop + "' with descriptor '" + descJson + "' on object '" + obj + "' and got error, giving up: " + error);
	            }
	        }
	        else {
	            throw error;
	        }
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';
	var NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket'
	    .split(',');
	var EVENT_TARGET = 'EventTarget';
	function eventTargetPatch(_global) {
	    var apis = [];
	    var isWtf = _global['wtf'];
	    if (isWtf) {
	        // Workaround for: https://github.com/google/tracing-framework/issues/555
	        apis = WTF_ISSUE_555.split(',').map(function (v) { return 'HTML' + v + 'Element'; }).concat(NO_EVENT_TARGET);
	    }
	    else if (_global[EVENT_TARGET]) {
	        apis.push(EVENT_TARGET);
	    }
	    else {
	        // Note: EventTarget is not available in all browsers,
	        // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget
	        apis = NO_EVENT_TARGET;
	    }
	    for (var i = 0; i < apis.length; i++) {
	        var type = _global[apis[i]];
	        patchEventTargetMethods(type && type.prototype);
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// we have to patch the instance since the proto is non-configurable
	function apply(_global) {
	    var WS = _global.WebSocket;
	    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener
	    // On older Chrome, no need since EventTarget was already patched
	    if (!_global.EventTarget) {
	        patchEventTargetMethods(WS.prototype);
	    }
	    _global.WebSocket = function (a, b) {
	        var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
	        var proxySocket;
	        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance
	        var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');
	        if (onmessageDesc && onmessageDesc.configurable === false) {
	            proxySocket = Object.create(socket);
	            ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function (propName) {
	                proxySocket[propName] = function () {
	                    return socket[propName].apply(socket, arguments);
	                };
	            });
	        }
	        else {
	            // we can patch the real socket
	            proxySocket = socket;
	        }
	        patchOnProperties(proxySocket, ['close', 'error', 'message', 'open']);
	        return proxySocket;
	    };
	    for (var prop in WS) {
	        _global.WebSocket[prop] = WS[prop];
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var eventNames = 'copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror'
	    .split(' ');
	function propertyDescriptorPatch(_global) {
	    if (isNode && !isMix) {
	        return;
	    }
	    var supportsWebSocket = typeof WebSocket !== 'undefined';
	    if (canPatchViaPropertyDescriptor()) {
	        // for browsers that we can patch the descriptor:  Chrome & Firefox
	        if (isBrowser) {
	            patchOnProperties(window, eventNames);
	            patchOnProperties(Document.prototype, eventNames);
	            if (typeof SVGElement !== 'undefined') {
	                patchOnProperties(SVGElement.prototype, eventNames);
	            }
	            patchOnProperties(HTMLElement.prototype, eventNames);
	        }
	        patchOnProperties(XMLHttpRequest.prototype, null);
	        if (typeof IDBIndex !== 'undefined') {
	            patchOnProperties(IDBIndex.prototype, null);
	            patchOnProperties(IDBRequest.prototype, null);
	            patchOnProperties(IDBOpenDBRequest.prototype, null);
	            patchOnProperties(IDBDatabase.prototype, null);
	            patchOnProperties(IDBTransaction.prototype, null);
	            patchOnProperties(IDBCursor.prototype, null);
	        }
	        if (supportsWebSocket) {
	            patchOnProperties(WebSocket.prototype, null);
	        }
	    }
	    else {
	        // Safari, Android browsers (Jelly Bean)
	        patchViaCapturingAllTheEvents();
	        patchClass('XMLHttpRequest');
	        if (supportsWebSocket) {
	            apply(_global);
	        }
	    }
	}
	function canPatchViaPropertyDescriptor() {
	    if ((isBrowser || isMix) && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') &&
	        typeof Element !== 'undefined') {
	        // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364
	        // IDL interface attributes are not configurable
	        var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');
	        if (desc && !desc.configurable)
	            return false;
	    }
	    var xhrDesc = Object.getOwnPropertyDescriptor(XMLHttpRequest.prototype, 'onreadystatechange');
	    // add enumerable and configurable here because in opera
	    // by default XMLHttpRequest.prototype.onreadystatechange is undefined
	    // without adding enumerable and configurable will cause onreadystatechange
	    // non-configurable
	    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {
	        enumerable: true,
	        configurable: true,
	        get: function () {
	            return true;
	        }
	    });
	    var req = new XMLHttpRequest();
	    var result = !!req.onreadystatechange;
	    // restore original desc
	    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', xhrDesc || {});
	    return result;
	}

	var unboundKey = zoneSymbol('unbound');
	// Whenever any eventListener fires, we check the eventListener target and all parents
	// for `onwhatever` properties and replace them with zone-bound functions
	// - Chrome (for now)
	function patchViaCapturingAllTheEvents() {
	    var _loop_1 = function (i) {
	        var property = eventNames[i];
	        var onproperty = 'on' + property;
	        self.addEventListener(property, function (event) {
	            var elt = event.target, bound, source;
	            if (elt) {
	                source = elt.constructor['name'] + '.' + onproperty;
	            }
	            else {
	                source = 'unknown.' + onproperty;
	            }
	            while (elt) {
	                if (elt[onproperty] && !elt[onproperty][unboundKey]) {
	                    bound = Zone.current.wrap(elt[onproperty], source);
	                    bound[unboundKey] = elt[onproperty];
	                    elt[onproperty] = bound;
	                }
	                elt = elt.parentElement;
	            }
	        }, true);
	    };
	    for (var i = 0; i < eventNames.length; i++) {
	        _loop_1(i);
	    }
	    
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function registerElementPatch(_global) {
	    if ((!isBrowser && !isMix) || !('registerElement' in _global.document)) {
	        return;
	    }
	    var _registerElement = document.registerElement;
	    var callbacks = ['createdCallback', 'attachedCallback', 'detachedCallback', 'attributeChangedCallback'];
	    document.registerElement = function (name, opts) {
	        if (opts && opts.prototype) {
	            callbacks.forEach(function (callback) {
	                var source = 'Document.registerElement::' + callback;
	                if (opts.prototype.hasOwnProperty(callback)) {
	                    var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
	                    if (descriptor && descriptor.value) {
	                        descriptor.value = Zone.current.wrap(descriptor.value, source);
	                        _redefineProperty(opts.prototype, callback, descriptor);
	                    }
	                    else {
	                        opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
	                    }
	                }
	                else if (opts.prototype[callback]) {
	                    opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
	                }
	            });
	        }
	        return _registerElement.apply(document, [name, opts]);
	    };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var set = 'set';
	var clear = 'clear';
	var blockingMethods = ['alert', 'prompt', 'confirm'];
	var _global = typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global;
	patchTimer(_global, set, clear, 'Timeout');
	patchTimer(_global, set, clear, 'Interval');
	patchTimer(_global, set, clear, 'Immediate');
	patchTimer(_global, 'request', 'cancel', 'AnimationFrame');
	patchTimer(_global, 'mozRequest', 'mozCancel', 'AnimationFrame');
	patchTimer(_global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');
	for (var i = 0; i < blockingMethods.length; i++) {
	    var name_1 = blockingMethods[i];
	    patchMethod(_global, name_1, function (delegate, symbol, name) {
	        return function (s, args) {
	            return Zone.current.run(delegate, _global, args, name);
	        };
	    });
	}
	eventTargetPatch(_global);
	// patch XMLHttpRequestEventTarget's addEventListener/removeEventListener
	var XMLHttpRequestEventTarget = _global['XMLHttpRequestEventTarget'];
	if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {
	    patchEventTargetMethods(XMLHttpRequestEventTarget.prototype);
	}
	propertyDescriptorPatch(_global);
	patchClass('MutationObserver');
	patchClass('WebKitMutationObserver');
	patchClass('FileReader');
	propertyPatch();
	registerElementPatch(_global);
	// Treat XMLHTTPRequest as a macrotask.
	patchXHR(_global);
	var XHR_TASK = zoneSymbol('xhrTask');
	var XHR_SYNC = zoneSymbol('xhrSync');
	var XHR_LISTENER = zoneSymbol('xhrListener');
	var XHR_SCHEDULED = zoneSymbol('xhrScheduled');
	function patchXHR(window) {
	    function findPendingTask(target) {
	        var pendingTask = target[XHR_TASK];
	        return pendingTask;
	    }
	    function scheduleTask(task) {
	        XMLHttpRequest[XHR_SCHEDULED] = false;
	        var data = task.data;
	        // remove existing event listener
	        var listener = data.target[XHR_LISTENER];
	        if (listener) {
	            data.target.removeEventListener('readystatechange', listener);
	        }
	        var newListener = data.target[XHR_LISTENER] = function () {
	            if (data.target.readyState === data.target.DONE) {
	                // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with
	                // readyState=4 multiple times, so we need to check task state here
	                if (!data.aborted && XMLHttpRequest[XHR_SCHEDULED] && task.state === 'scheduled') {
	                    task.invoke();
	                }
	            }
	        };
	        data.target.addEventListener('readystatechange', newListener);
	        var storedTask = data.target[XHR_TASK];
	        if (!storedTask) {
	            data.target[XHR_TASK] = task;
	        }
	        sendNative.apply(data.target, data.args);
	        XMLHttpRequest[XHR_SCHEDULED] = true;
	        return task;
	    }
	    function placeholderCallback() { }
	    function clearTask(task) {
	        var data = task.data;
	        // Note - ideally, we would call data.target.removeEventListener here, but it's too late
	        // to prevent it from firing. So instead, we store info for the event listener.
	        data.aborted = true;
	        return abortNative.apply(data.target, data.args);
	    }
	    var openNative = patchMethod(window.XMLHttpRequest.prototype, 'open', function () { return function (self, args) {
	        self[XHR_SYNC] = args[2] == false;
	        return openNative.apply(self, args);
	    }; });
	    var sendNative = patchMethod(window.XMLHttpRequest.prototype, 'send', function () { return function (self, args) {
	        var zone = Zone.current;
	        if (self[XHR_SYNC]) {
	            // if the XHR is sync there is no task to schedule, just execute the code.
	            return sendNative.apply(self, args);
	        }
	        else {
	            var options = { target: self, isPeriodic: false, delay: null, args: args, aborted: false };
	            return zone.scheduleMacroTask('XMLHttpRequest.send', placeholderCallback, options, scheduleTask, clearTask);
	        }
	    }; });
	    var abortNative = patchMethod(window.XMLHttpRequest.prototype, 'abort', function (delegate) { return function (self, args) {
	        var task = findPendingTask(self);
	        if (task && typeof task.type == 'string') {
	            // If the XHR has already completed, do nothing.
	            // If the XHR has already been aborted, do nothing.
	            // Fix #569, call abort multiple times before done will cause
	            // macroTask task count be negative number
	            if (task.cancelFn == null || (task.data && task.data.aborted)) {
	                return;
	            }
	            task.zone.cancelTask(task);
	        }
	        // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no task
	        // to cancel. Do nothing.
	    }; });
	}
	/// GEO_LOCATION
	if (_global['navigator'] && _global['navigator'].geolocation) {
	    patchPrototype(_global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);
	}
	// handle unhandled promise rejection
	function findPromiseRejectionHandler(evtName) {
	    return function (e) {
	        var eventTasks = findEventTask(_global, evtName);
	        eventTasks.forEach(function (eventTask) {
	            // windows has added unhandledrejection event listener
	            // trigger the event listener
	            var PromiseRejectionEvent = _global['PromiseRejectionEvent'];
	            if (PromiseRejectionEvent) {
	                var evt = new PromiseRejectionEvent(evtName, { promise: e.promise, reason: e.rejection });
	                eventTask.invoke(evt);
	            }
	        });
	    };
	}
	if (_global['PromiseRejectionEvent']) {
	    Zone[zoneSymbol('unhandledPromiseRejectionHandler')] =
	        findPromiseRejectionHandler('unhandledrejection');
	    Zone[zoneSymbol('rejectionHandledHandler')] =
	        findPromiseRejectionHandler('rejectionhandled');
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	})));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(2)))

/***/ },
/* 2 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {/*! *****************************************************************************
	Copyright (C) Microsoft. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	var Reflect;
	(function (Reflect) {
	    "use strict";
	    var hasOwn = Object.prototype.hasOwnProperty;
	    // feature test for Symbol support
	    var supportsSymbol = typeof Symbol === "function";
	    var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
	    var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
	    var HashMap;
	    (function (HashMap) {
	        var supportsCreate = typeof Object.create === "function"; // feature test for Object.create support
	        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support
	        var downLevel = !supportsCreate && !supportsProto;
	        // create an object in dictionary mode (a.k.a. "slow" mode in v8)
	        HashMap.create = supportsCreate
	            ? function () { return MakeDictionary(Object.create(null)); }
	            : supportsProto
	                ? function () { return MakeDictionary({ __proto__: null }); }
	                : function () { return MakeDictionary({}); };
	        HashMap.has = downLevel
	            ? function (map, key) { return hasOwn.call(map, key); }
	            : function (map, key) { return key in map; };
	        HashMap.get = downLevel
	            ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
	            : function (map, key) { return map[key]; };
	    })(HashMap || (HashMap = {}));
	    // Load global or shim versions of Map, Set, and WeakMap
	    var functionPrototype = Object.getPrototypeOf(Function);
	    var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
	    var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
	    var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
	    var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
	    // [[Metadata]] internal slot
	    // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots
	    var Metadata = new _WeakMap();
	    /**
	      * Applies a set of decorators to a property of a target object.
	      * @param decorators An array of decorators.
	      * @param target The target object.
	      * @param propertyKey (Optional) The property key to decorate.
	      * @param attributes (Optional) The property descriptor for the target key.
	      * @remarks Decorators are applied in reverse order.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     Example = Reflect.decorate(decoratorsArray, Example);
	      *
	      *     // property (on constructor)
	      *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Object.defineProperty(Example, "staticMethod",
	      *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
	      *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
	      *
	      *     // method (on prototype)
	      *     Object.defineProperty(Example.prototype, "method",
	      *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
	      *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
	      *
	      */
	    function decorate(decorators, target, propertyKey, attributes) {
	        if (!IsUndefined(propertyKey)) {
	            if (!IsArray(decorators))
	                throw new TypeError();
	            if (!IsObject(target))
	                throw new TypeError();
	            if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
	                throw new TypeError();
	            if (IsNull(attributes))
	                attributes = undefined;
	            propertyKey = ToPropertyKey(propertyKey);
	            return DecorateProperty(decorators, target, propertyKey, attributes);
	        }
	        else {
	            if (!IsArray(decorators))
	                throw new TypeError();
	            if (!IsConstructor(target))
	                throw new TypeError();
	            return DecorateConstructor(decorators, target);
	        }
	    }
	    Reflect.decorate = decorate;
	    // 4.1.2 Reflect.metadata(metadataKey, metadataValue)
	    // https://rbuckton.github.io/reflect-metadata/#reflect.metadata
	    /**
	      * A default metadata decorator factory that can be used on a class, class member, or parameter.
	      * @param metadataKey The key for the metadata entry.
	      * @param metadataValue The value for the metadata entry.
	      * @returns A decorator function.
	      * @remarks
	      * If `metadataKey` is already defined for the target and target key, the
	      * metadataValue for that key will be overwritten.
	      * @example
	      *
	      *     // constructor
	      *     @Reflect.metadata(key, value)
	      *     class Example {
	      *     }
	      *
	      *     // property (on constructor, TypeScript only)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         static staticProperty;
	      *     }
	      *
	      *     // property (on prototype, TypeScript only)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         property;
	      *     }
	      *
	      *     // method (on constructor)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         static staticMethod() { }
	      *     }
	      *
	      *     // method (on prototype)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         method() { }
	      *     }
	      *
	      */
	    function metadata(metadataKey, metadataValue) {
	        function decorator(target, propertyKey) {
	            if (!IsObject(target))
	                throw new TypeError();
	            if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
	                throw new TypeError();
	            OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
	        }
	        return decorator;
	    }
	    Reflect.metadata = metadata;
	    /**
	      * Define a unique metadata entry on the target.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param metadataValue A value that contains attached metadata.
	      * @param target The target object on which to define metadata.
	      * @param propertyKey (Optional) The property key for the target.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     Reflect.defineMetadata("custom:annotation", options, Example);
	      *
	      *     // property (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
	      *
	      *     // decorator factory as metadata-producing annotation.
	      *     function MyAnnotation(options): Decorator {
	      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
	      *     }
	      *
	      */
	    function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
	    }
	    Reflect.defineMetadata = defineMetadata;
	    /**
	      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param propertyKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function hasMetadata(metadataKey, target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        return OrdinaryHasMetadata(metadataKey, target, propertyKey);
	    }
	    Reflect.hasMetadata = hasMetadata;
	    /**
	      * Gets a value indicating whether the target object has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param propertyKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function hasOwnMetadata(metadataKey, target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
	    }
	    Reflect.hasOwnMetadata = hasOwnMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param propertyKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function getMetadata(metadataKey, target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        return OrdinaryGetMetadata(metadataKey, target, propertyKey);
	    }
	    Reflect.getMetadata = getMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param propertyKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function getOwnMetadata(metadataKey, target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
	    }
	    Reflect.getOwnMetadata = getOwnMetadata;
	    /**
	      * Gets the metadata keys defined on the target object or its prototype chain.
	      * @param target The target object on which the metadata is defined.
	      * @param propertyKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadataKeys(Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadataKeys(Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadataKeys(Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadataKeys(Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadataKeys(Example.prototype, "method");
	      *
	      */
	    function getMetadataKeys(target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        return OrdinaryMetadataKeys(target, propertyKey);
	    }
	    Reflect.getMetadataKeys = getMetadataKeys;
	    /**
	      * Gets the unique metadata keys defined on the target object.
	      * @param target The target object on which the metadata is defined.
	      * @param propertyKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadataKeys(Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
	      *
	      */
	    function getOwnMetadataKeys(target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        return OrdinaryOwnMetadataKeys(target, propertyKey);
	    }
	    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
	    /**
	      * Deletes the metadata entry from the target object with the provided key.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param propertyKey (Optional) The property key for the target.
	      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.deleteMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function deleteMetadata(metadataKey, target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);
	        if (IsUndefined(metadataMap))
	            return false;
	        if (!metadataMap.delete(metadataKey))
	            return false;
	        if (metadataMap.size > 0)
	            return true;
	        var targetMetadata = Metadata.get(target);
	        targetMetadata.delete(propertyKey);
	        if (targetMetadata.size > 0)
	            return true;
	        Metadata.delete(target);
	        return true;
	    }
	    Reflect.deleteMetadata = deleteMetadata;
	    function DecorateConstructor(decorators, target) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target);
	            if (!IsUndefined(decorated) && !IsNull(decorated)) {
	                if (!IsConstructor(decorated))
	                    throw new TypeError();
	                target = decorated;
	            }
	        }
	        return target;
	    }
	    function DecorateProperty(decorators, target, propertyKey, descriptor) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target, propertyKey, descriptor);
	            if (!IsUndefined(decorated) && !IsNull(decorated)) {
	                if (!IsObject(decorated))
	                    throw new TypeError();
	                descriptor = decorated;
	            }
	        }
	        return descriptor;
	    }
	    function GetOrCreateMetadataMap(O, P, Create) {
	        var targetMetadata = Metadata.get(O);
	        if (IsUndefined(targetMetadata)) {
	            if (!Create)
	                return undefined;
	            targetMetadata = new _Map();
	            Metadata.set(O, targetMetadata);
	        }
	        var metadataMap = targetMetadata.get(P);
	        if (IsUndefined(metadataMap)) {
	            if (!Create)
	                return undefined;
	            metadataMap = new _Map();
	            targetMetadata.set(P, metadataMap);
	        }
	        return metadataMap;
	    }
	    // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
	    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
	    function OrdinaryHasMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn)
	            return true;
	        var parent = OrdinaryGetPrototypeOf(O);
	        if (!IsNull(parent))
	            return OrdinaryHasMetadata(MetadataKey, parent, P);
	        return false;
	    }
	    // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
	    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
	    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
	        if (IsUndefined(metadataMap))
	            return false;
	        return ToBoolean(metadataMap.has(MetadataKey));
	    }
	    // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
	    // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
	    function OrdinaryGetMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn)
	            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
	        var parent = OrdinaryGetPrototypeOf(O);
	        if (!IsNull(parent))
	            return OrdinaryGetMetadata(MetadataKey, parent, P);
	        return undefined;
	    }
	    // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
	    // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
	    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
	        if (IsUndefined(metadataMap))
	            return undefined;
	        return metadataMap.get(MetadataKey);
	    }
	    // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
	    // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
	    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);
	        metadataMap.set(MetadataKey, MetadataValue);
	    }
	    // 3.1.6.1 OrdinaryMetadataKeys(O, P)
	    // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
	    function OrdinaryMetadataKeys(O, P) {
	        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
	        var parent = OrdinaryGetPrototypeOf(O);
	        if (parent === null)
	            return ownKeys;
	        var parentKeys = OrdinaryMetadataKeys(parent, P);
	        if (parentKeys.length <= 0)
	            return ownKeys;
	        if (ownKeys.length <= 0)
	            return parentKeys;
	        var set = new _Set();
	        var keys = [];
	        for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
	            var key = ownKeys_1[_i];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
	            var key = parentKeys_1[_a];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        return keys;
	    }
	    // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
	    // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
	    function OrdinaryOwnMetadataKeys(O, P) {
	        var keys = [];
	        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
	        if (IsUndefined(metadataMap))
	            return keys;
	        var keysObj = metadataMap.keys();
	        var iterator = GetIterator(keysObj);
	        var k = 0;
	        while (true) {
	            var next = IteratorStep(iterator);
	            if (!next) {
	                keys.length = k;
	                return keys;
	            }
	            var nextValue = IteratorValue(next);
	            try {
	                keys[k] = nextValue;
	            }
	            catch (e) {
	                try {
	                    IteratorClose(iterator);
	                }
	                finally {
	                    throw e;
	                }
	            }
	            k++;
	        }
	    }
	    // 6 ECMAScript Data Typ0es and Values
	    // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
	    function Type(x) {
	        if (x === null)
	            return 1 /* Null */;
	        switch (typeof x) {
	            case "undefined": return 0 /* Undefined */;
	            case "boolean": return 2 /* Boolean */;
	            case "string": return 3 /* String */;
	            case "symbol": return 4 /* Symbol */;
	            case "number": return 5 /* Number */;
	            case "object": return x === null ? 1 /* Null */ : 6 /* Object */;
	            default: return 6 /* Object */;
	        }
	    }
	    // 6.1.1 The Undefined Type
	    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
	    function IsUndefined(x) {
	        return x === undefined;
	    }
	    // 6.1.2 The Null Type
	    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
	    function IsNull(x) {
	        return x === null;
	    }
	    // 6.1.5 The Symbol Type
	    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
	    function IsSymbol(x) {
	        return typeof x === "symbol";
	    }
	    // 6.1.7 The Object Type
	    // https://tc39.github.io/ecma262/#sec-object-type
	    function IsObject(x) {
	        return typeof x === "object" ? x !== null : typeof x === "function";
	    }
	    // 7.1 Type Conversion
	    // https://tc39.github.io/ecma262/#sec-type-conversion
	    // 7.1.1 ToPrimitive(input [, PreferredType])
	    // https://tc39.github.io/ecma262/#sec-toprimitive
	    function ToPrimitive(input, PreferredType) {
	        switch (Type(input)) {
	            case 0 /* Undefined */: return input;
	            case 1 /* Null */: return input;
	            case 2 /* Boolean */: return input;
	            case 3 /* String */: return input;
	            case 4 /* Symbol */: return input;
	            case 5 /* Number */: return input;
	        }
	        var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
	        var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
	        if (exoticToPrim !== undefined) {
	            var result = exoticToPrim.call(input, hint);
	            if (IsObject(result))
	                throw new TypeError();
	            return result;
	        }
	        return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
	    }
	    // 7.1.1.1 OrdinaryToPrimitive(O, hint)
	    // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
	    function OrdinaryToPrimitive(O, hint) {
	        if (hint === "string") {
	            var toString_1 = O.toString;
	            if (IsCallable(toString_1)) {
	                var result = toString_1.call(O);
	                if (!IsObject(result))
	                    return result;
	            }
	            var valueOf = O.valueOf;
	            if (IsCallable(valueOf)) {
	                var result = valueOf.call(O);
	                if (!IsObject(result))
	                    return result;
	            }
	        }
	        else {
	            var valueOf = O.valueOf;
	            if (IsCallable(valueOf)) {
	                var result = valueOf.call(O);
	                if (!IsObject(result))
	                    return result;
	            }
	            var toString_2 = O.toString;
	            if (IsCallable(toString_2)) {
	                var result = toString_2.call(O);
	                if (!IsObject(result))
	                    return result;
	            }
	        }
	        throw new TypeError();
	    }
	    // 7.1.2 ToBoolean(argument)
	    // https://tc39.github.io/ecma262/2016/#sec-toboolean
	    function ToBoolean(argument) {
	        return !!argument;
	    }
	    // 7.1.12 ToString(argument)
	    // https://tc39.github.io/ecma262/#sec-tostring
	    function ToString(argument) {
	        return "" + argument;
	    }
	    // 7.1.14 ToPropertyKey(argument)
	    // https://tc39.github.io/ecma262/#sec-topropertykey
	    function ToPropertyKey(argument) {
	        var key = ToPrimitive(argument, 3 /* String */);
	        if (IsSymbol(key))
	            return key;
	        return ToString(key);
	    }
	    // 7.2 Testing and Comparison Operations
	    // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
	    // 7.2.2 IsArray(argument)
	    // https://tc39.github.io/ecma262/#sec-isarray
	    function IsArray(argument) {
	        return Array.isArray
	            ? Array.isArray(argument)
	            : argument instanceof Object
	                ? argument instanceof Array
	                : Object.prototype.toString.call(argument) === "[object Array]";
	    }
	    // 7.2.3 IsCallable(argument)
	    // https://tc39.github.io/ecma262/#sec-iscallable
	    function IsCallable(argument) {
	        // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
	        return typeof argument === "function";
	    }
	    // 7.2.4 IsConstructor(argument)
	    // https://tc39.github.io/ecma262/#sec-isconstructor
	    function IsConstructor(argument) {
	        // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
	        return typeof argument === "function";
	    }
	    // 7.2.7 IsPropertyKey(argument)
	    // https://tc39.github.io/ecma262/#sec-ispropertykey
	    function IsPropertyKey(argument) {
	        switch (Type(argument)) {
	            case 3 /* String */: return true;
	            case 4 /* Symbol */: return true;
	            default: return false;
	        }
	    }
	    // 7.3 Operations on Objects
	    // https://tc39.github.io/ecma262/#sec-operations-on-objects
	    // 7.3.9 GetMethod(V, P)
	    // https://tc39.github.io/ecma262/#sec-getmethod
	    function GetMethod(V, P) {
	        var func = V[P];
	        if (func === undefined || func === null)
	            return undefined;
	        if (!IsCallable(func))
	            throw new TypeError();
	        return func;
	    }
	    // 7.4 Operations on Iterator Objects
	    // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
	    function GetIterator(obj) {
	        var method = GetMethod(obj, iteratorSymbol);
	        if (!IsCallable(method))
	            throw new TypeError(); // from Call
	        var iterator = method.call(obj);
	        if (!IsObject(iterator))
	            throw new TypeError();
	        return iterator;
	    }
	    // 7.4.4 IteratorValue(iterResult)
	    // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
	    function IteratorValue(iterResult) {
	        return iterResult.value;
	    }
	    // 7.4.5 IteratorStep(iterator)
	    // https://tc39.github.io/ecma262/#sec-iteratorstep
	    function IteratorStep(iterator) {
	        var result = iterator.next();
	        return result.done ? false : result;
	    }
	    // 7.4.6 IteratorClose(iterator, completion)
	    // https://tc39.github.io/ecma262/#sec-iteratorclose
	    function IteratorClose(iterator) {
	        var f = iterator["return"];
	        if (f)
	            f.call(iterator);
	    }
	    // 9.1 Ordinary Object Internal Methods and Internal Slots
	    // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
	    // 9.1.1.1 OrdinaryGetPrototypeOf(O)
	    // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
	    function OrdinaryGetPrototypeOf(O) {
	        var proto = Object.getPrototypeOf(O);
	        if (typeof O !== "function" || O === functionPrototype)
	            return proto;
	        // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
	        // Try to determine the superclass constructor. Compatible implementations
	        // must either set __proto__ on a subclass constructor to the superclass constructor,
	        // or ensure each class has a valid `constructor` property on its prototype that
	        // points back to the constructor.
	        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
	        // This is the case when in ES6 or when using __proto__ in a compatible browser.
	        if (proto !== functionPrototype)
	            return proto;
	        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
	        var prototype = O.prototype;
	        var prototypeProto = prototype && Object.getPrototypeOf(prototype);
	        if (prototypeProto == null || prototypeProto === Object.prototype)
	            return proto;
	        // If the constructor was not a function, then we cannot determine the heritage.
	        var constructor = prototypeProto.constructor;
	        if (typeof constructor !== "function")
	            return proto;
	        // If we have some kind of self-reference, then we cannot determine the heritage.
	        if (constructor === O)
	            return proto;
	        // we have a pretty good guess at the heritage.
	        return constructor;
	    }
	    // naive Map shim
	    function CreateMapPolyfill() {
	        var cacheSentinel = {};
	        var arraySentinel = [];
	        var MapIterator = (function () {
	            function MapIterator(keys, values, selector) {
	                this._index = 0;
	                this._keys = keys;
	                this._values = values;
	                this._selector = selector;
	            }
	            MapIterator.prototype["@@iterator"] = function () { return this; };
	            MapIterator.prototype[iteratorSymbol] = function () { return this; };
	            MapIterator.prototype.next = function () {
	                var index = this._index;
	                if (index >= 0 && index < this._keys.length) {
	                    var result = this._selector(this._keys[index], this._values[index]);
	                    if (index + 1 >= this._keys.length) {
	                        this._index = -1;
	                        this._keys = arraySentinel;
	                        this._values = arraySentinel;
	                    }
	                    else {
	                        this._index++;
	                    }
	                    return { value: result, done: false };
	                }
	                return { value: undefined, done: true };
	            };
	            MapIterator.prototype.throw = function (error) {
	                if (this._index >= 0) {
	                    this._index = -1;
	                    this._keys = arraySentinel;
	                    this._values = arraySentinel;
	                }
	                throw error;
	            };
	            MapIterator.prototype.return = function (value) {
	                if (this._index >= 0) {
	                    this._index = -1;
	                    this._keys = arraySentinel;
	                    this._values = arraySentinel;
	                }
	                return { value: value, done: true };
	            };
	            return MapIterator;
	        }());
	        return (function () {
	            function Map() {
	                this._keys = [];
	                this._values = [];
	                this._cacheKey = cacheSentinel;
	                this._cacheIndex = -2;
	            }
	            Object.defineProperty(Map.prototype, "size", {
	                get: function () { return this._keys.length; },
	                enumerable: true,
	                configurable: true
	            });
	            Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
	            Map.prototype.get = function (key) {
	                var index = this._find(key, /*insert*/ false);
	                return index >= 0 ? this._values[index] : undefined;
	            };
	            Map.prototype.set = function (key, value) {
	                var index = this._find(key, /*insert*/ true);
	                this._values[index] = value;
	                return this;
	            };
	            Map.prototype.delete = function (key) {
	                var index = this._find(key, /*insert*/ false);
	                if (index >= 0) {
	                    var size = this._keys.length;
	                    for (var i = index + 1; i < size; i++) {
	                        this._keys[i - 1] = this._keys[i];
	                        this._values[i - 1] = this._values[i];
	                    }
	                    this._keys.length--;
	                    this._values.length--;
	                    if (key === this._cacheKey) {
	                        this._cacheKey = cacheSentinel;
	                        this._cacheIndex = -2;
	                    }
	                    return true;
	                }
	                return false;
	            };
	            Map.prototype.clear = function () {
	                this._keys.length = 0;
	                this._values.length = 0;
	                this._cacheKey = cacheSentinel;
	                this._cacheIndex = -2;
	            };
	            Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };
	            Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };
	            Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };
	            Map.prototype["@@iterator"] = function () { return this.entries(); };
	            Map.prototype[iteratorSymbol] = function () { return this.entries(); };
	            Map.prototype._find = function (key, insert) {
	                if (this._cacheKey !== key) {
	                    this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
	                }
	                if (this._cacheIndex < 0 && insert) {
	                    this._cacheIndex = this._keys.length;
	                    this._keys.push(key);
	                    this._values.push(undefined);
	                }
	                return this._cacheIndex;
	            };
	            return Map;
	        }());
	        function getKey(key, _) {
	            return key;
	        }
	        function getValue(_, value) {
	            return value;
	        }
	        function getEntry(key, value) {
	            return [key, value];
	        }
	    }
	    // naive Set shim
	    function CreateSetPolyfill() {
	        return (function () {
	            function Set() {
	                this._map = new _Map();
	            }
	            Object.defineProperty(Set.prototype, "size", {
	                get: function () { return this._map.size; },
	                enumerable: true,
	                configurable: true
	            });
	            Set.prototype.has = function (value) { return this._map.has(value); };
	            Set.prototype.add = function (value) { return this._map.set(value, value), this; };
	            Set.prototype.delete = function (value) { return this._map.delete(value); };
	            Set.prototype.clear = function () { this._map.clear(); };
	            Set.prototype.keys = function () { return this._map.keys(); };
	            Set.prototype.values = function () { return this._map.values(); };
	            Set.prototype.entries = function () { return this._map.entries(); };
	            Set.prototype["@@iterator"] = function () { return this.keys(); };
	            Set.prototype[iteratorSymbol] = function () { return this.keys(); };
	            return Set;
	        }());
	    }
	    // naive WeakMap shim
	    function CreateWeakMapPolyfill() {
	        var UUID_SIZE = 16;
	        var keys = HashMap.create();
	        var rootKey = CreateUniqueKey();
	        return (function () {
	            function WeakMap() {
	                this._key = CreateUniqueKey();
	            }
	            WeakMap.prototype.has = function (target) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
	                return table !== undefined ? HashMap.has(table, this._key) : false;
	            };
	            WeakMap.prototype.get = function (target) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
	                return table !== undefined ? HashMap.get(table, this._key) : undefined;
	            };
	            WeakMap.prototype.set = function (target, value) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ true);
	                table[this._key] = value;
	                return this;
	            };
	            WeakMap.prototype.delete = function (target) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
	                return table !== undefined ? delete table[this._key] : false;
	            };
	            WeakMap.prototype.clear = function () {
	                // NOTE: not a real clear, just makes the previous data unreachable
	                this._key = CreateUniqueKey();
	            };
	            return WeakMap;
	        }());
	        function CreateUniqueKey() {
	            var key;
	            do
	                key = "@@WeakMap@@" + CreateUUID();
	            while (HashMap.has(keys, key));
	            keys[key] = true;
	            return key;
	        }
	        function GetOrCreateWeakMapTable(target, create) {
	            if (!hasOwn.call(target, rootKey)) {
	                if (!create)
	                    return undefined;
	                Object.defineProperty(target, rootKey, { value: HashMap.create() });
	            }
	            return target[rootKey];
	        }
	        function FillRandomBytes(buffer, size) {
	            for (var i = 0; i < size; ++i)
	                buffer[i] = Math.random() * 0xff | 0;
	            return buffer;
	        }
	        function GenRandomBytes(size) {
	            if (typeof Uint8Array === "function") {
	                if (typeof crypto !== "undefined")
	                    return crypto.getRandomValues(new Uint8Array(size));
	                if (typeof msCrypto !== "undefined")
	                    return msCrypto.getRandomValues(new Uint8Array(size));
	                return FillRandomBytes(new Uint8Array(size), size);
	            }
	            return FillRandomBytes(new Array(size), size);
	        }
	        function CreateUUID() {
	            var data = GenRandomBytes(UUID_SIZE);
	            // mark as random - RFC 4122 § 4.4
	            data[6] = data[6] & 0x4f | 0x40;
	            data[8] = data[8] & 0xbf | 0x80;
	            var result = "";
	            for (var offset = 0; offset < UUID_SIZE; ++offset) {
	                var byte = data[offset];
	                if (offset === 4 || offset === 6 || offset === 8)
	                    result += "-";
	                if (byte < 16)
	                    result += "0";
	                result += byte.toString(16).toLowerCase();
	            }
	            return result;
	        }
	    }
	    // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
	    function MakeDictionary(obj) {
	        obj.__ = undefined;
	        delete obj.__;
	        return obj;
	    }
	    // patch global Reflect
	    (function (__global) {
	        if (typeof __global.Reflect !== "undefined") {
	            if (__global.Reflect !== Reflect) {
	                for (var p in Reflect) {
	                    if (hasOwn.call(Reflect, p)) {
	                        __global.Reflect[p] = Reflect[p];
	                    }
	                }
	            }
	        }
	        else {
	            __global.Reflect = Reflect;
	        }
	    })(typeof global !== "undefined" ? global :
	        typeof self !== "undefined" ? self :
	            Function("return this;")());
	})(Reflect || (Reflect = {}));
	//# sourceMappingURL=Reflect.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), (function() { return this; }())))

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var CollarView = __webpack_require__(5);

	module.exports = function (selector, name) {
	  var counter = new CollarView(selector, name);

	  counter.setRenderer(function (state, done) {
	    var _this = this;

	    var rootDOM = document.querySelector(this.selector);

	    rootDOM.innerHTML = '\n      <div class="vanilla-counter-value"><h1 class="counter-value">' + state.count + '</h1></div>\n      <button class="vanilla-counter-dec-btn press">-</button>\n      <button class="vanilla-counter-inc-btn press">+</button>\n    ';

	    document.querySelector(this.selector + ' .vanilla-counter-inc-btn').addEventListener('click', function () {
	      _this.send({
	        actionType: 'INCREMENT'
	      });
	    });

	    document.querySelector(this.selector + ' .vanilla-counter-dec-btn').addEventListener('click', function () {
	      _this.send({
	        actionType: 'DECREMENT'
	      });
	    });

	    done();
	  });

	  counter.setUpdater(function (state, done) {
	    var countValueDOM = document.querySelector(this.selector + ' .vanilla-counter-value > h1');
	    countValueDOM.innerHTML = state.count;
	    done();
	  });

	  return counter;
	};

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var collar = __webpack_require__(6);
	var View = __webpack_require__(22);

	var CollarView = function (_View) {
	  _inherits(CollarView, _View);

	  function CollarView(selector, name) {
	    _classCallCheck(this, CollarView);

	    var _this = _possibleConstructorReturn(this, (CollarView.__proto__ || Object.getPrototypeOf(CollarView)).call(this, selector, name));

	    _this.ns = collar.ns(name, {
	      component: '' + name,
	      arch: 'view.' + name
	    });

	    _this.errorHandler = _this.ns.errors(function (s) {
	      console.error(s.error);
	    });

	    _this.input = _this.ns.input(name + ' view input');
	    _this.output = _this.ns.output(name + ' view output');
	    _this.sensor = _this.ns.sensor(name + ' view sensor', function (options) {});

	    _this.renderer = function (state, done) {
	      done();
	    };
	    _this.updater = function (state, done) {
	      done();
	    };

	    _this.output.to(_this.errorHandler);

	    /* render pipeline */
	    _this.input.when('render', function (s) {
	      return s.get('msgType') === 'RENDER';
	    }).actuator('render the view', function (s, done) {
	      var state = s.get('state');
	      _this.renderer.call(_this, state, done);
	    }).to(_this.output);

	    /* update pipeline */
	    _this.input.when('update', function (s) {
	      return s.get('msgType') === 'UPDATE';
	    }).actuator('update the view', function (s, done) {
	      var state = s.get('state');
	      _this.updater.call(_this, state, done);
	    }).to(_this.output);
	    return _this;
	  }

	  /** methods inherited from View **/


	  _createClass(CollarView, [{
	    key: 'render',
	    value: function render(state) {
	      this.input.push({
	        msgType: 'RENDER',
	        state: state
	      });
	    }
	  }, {
	    key: 'update',
	    value: function update(state) {
	      this.input.push({
	        msgType: 'UPDATE',
	        state: state
	      });
	    }
	  }, {
	    key: 'send',
	    value: function send(msg) {
	      this.sensor.send(msg, false);
	    }
	  }, {
	    key: 'addActionHandler',
	    value: function addActionHandler(actionType, handler) {
	      this.sensor.when('' + actionType, function (s) {
	        return s.get('actionType') === actionType;
	      }).do('handle msg ' + actionType, function (s) {
	        handler(s.payload);
	      });
	    }

	    /** methods for collar view **/

	  }, {
	    key: 'setRenderer',
	    value: function setRenderer(renderer) {
	      this.renderer = renderer;
	    }
	  }, {
	    key: 'setUpdater',
	    value: function setUpdater(updater) {
	      this.updater = updater;
	    }
	  }]);

	  return CollarView;
	}(View);

	module.exports = CollarView;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(7);


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {!function(e,t){if(true)module.exports=t(__webpack_require__(10),__webpack_require__(15),__webpack_require__(21));else if("function"==typeof define&&define.amd)define(["uuid","freezer-js","object-path"],t);else{var n="object"==typeof exports?t(require("uuid"),require("freezer-js"),require("object-path")):t(e.uuid,e["freezer-js"],e["object-path"]);for(var o in n)("object"==typeof exports?exports:e)[o]=n[o]}}(this,function(e,t,n){return function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return e[o].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r="function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?function(e){return"undefined"==typeof e?"undefined":o(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":"undefined"==typeof e?"undefined":o(e)},i=n(1),u=n(7),a=null,s=[];a||(a=i(u),a.use=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var o=!0,r=!1,i=void 0;try{for(var u,c=t[Symbol.iterator]();!(o=(u=c.next()).done);o=!0){var f=u.value;s.push(f),a.extend({observers:f.observers()}),f.run()}}catch(e){r=!0,i=e}finally{try{!o&&c.return&&c.return()}finally{if(r)throw i}}return a},a.ns=function(e,t){t&&"object"===("undefined"==typeof t?"undefined":r(t))||(t={}),t.namespace=e;var n=i(u.new(t)),o=!0,a=!1,c=void 0;try{for(var f,l=s[Symbol.iterator]();!(o=(f=l.next()).done);o=!0){var p=f.value;n.extend({observers:p.observers()}),p.run()}}catch(e){a=!0,c=e}finally{try{!o&&l.return&&l.return()}finally{if(a)throw c}}return n},a.module=function(e,t,n){n&&"object"===("undefined"==typeof n?"undefined":r(n))||(n={}),n.module=e,t&&"string"==typeof t||(t=e);var o=a.ns(t,n),i=o.input(e+" input"),u=o.output(e+" output");return{ns:function(){return o},in:function(){return i},out:function(){return u},handleMsg:a.toNode(i,u)}}),e.exports=a},function(e,t,n){"use strict";var o=n(2),r=n(11),i=n(16),u=n(17),a=n(20),s=n(21),c=n(22),f=n(23),l=n(15),p=n(24),y=n(25),h=n(26),d=n(28),v=n(29),m=n(30),b=n(31),_=n(32),g=n(33),w=n(34),O=n(19),S=n(18),k={others:{Node:o,Signal:r,registry:O,toNode:S.toNode}},j=[i,u,a,s,f,c,l,p,y,h,d,v,m,b,_,g,w,k];e.exports=function(e){var t=e;return j.forEach(function(e){t=t.extend(e)}),t}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":c(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":c(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e){if(e){var t=e.match(/@(\w+)/);if(null!=t)return t[1]}}function a(e){if(!e)return[];for(var t=/#(\w+)/g,n=[],o=null;null!==(o=t.exec(e));)n.push(o[1]);return n}function s(e){if(!e)return{};var t=u(e),n=a(e),o=e.replace(/@(\w+)/g,"").replace(/#(\w+)/g,"").replace(/^(\s+)/g,"");return{name:t,tags:n,comment:o}}var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),l=function e(t,n,o){null===t&&(t=Function.prototype);var r=Object.getOwnPropertyDescriptor(t,n);if(void 0===r){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,o)}if("value"in r)return r.value;var u=r.get;if(void 0!==u)return u.call(o)},p=n(3),y=n(11),h=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments[1];o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));i._type="node";var u=s(e.comment);return i._name=u.name||i.id,i._comment=u.comment,i._inputs=e.inputs||{},i._outputs=e.outputs||{},i._features=e.features||[],i._tags=u.tags,e.todo&&i.addFeature("todo"),i}return i(t,e),f(t,[{key:"addFeature",value:function(e){return this._features.indexOf(e)<0&&this._features.push(e),this}},{key:"removeFeature",value:function(e){var t=this._features.indexOf(e);return t>=0&&this._features.splice(t,1),this}},{key:"getFeatures",value:function(){return this._features}},{key:"hasFeature",value:function(e){return this._features.indexOf(e)>=0}},{key:"getState",value:function(e,t){t()}},{key:"onSignal",value:function(e){var t=this;return this.accept(e)?(this.act(e,function(e,t){if(e)throw e}),this.process(e,function(e,n){if(e)throw e;t.send(n)}),this):(this.request(),this)}},{key:"send",value:function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],o=e;return y.isSignal(e)||(o=new y(e)),n===!1&&(o=o.setTag("__non_interruptible__",!0)),l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"send",this).call(this,o,n)}},{key:"push",value:function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],o=e;return y.isSignal(e)||(o=new y(e)),n===!1&&(o=o.setTag("__non_interruptible__",!0)),l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"push",this).call(this,o,n)}},{key:"watch",value:function(e){}},{key:"accept",value:function(e){return!0}},{key:"act",value:function(e,t){t()}},{key:"process",value:function(e,t){t(null,e)}},{key:"onRequest",value:function(e){return this.onNext(e),this}},{key:"onNext",value:function(e){this.request(e)}},{key:"isInterruptibleSignal",value:function(e){return!e.getTag("__non_interruptible__")}},{key:"isErrorSignal",value:function(e){return y.isSignal(e)&&y.hasError(e)}},{key:"isEndSignal",value:function(e){return y.isSignal(e)&&y.isEnd(e)}},{key:"throwError",value:function(e,t){return this.send(t.setError(e))}},{key:"through",value:function e(o,r,i){var u=this,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=null;"string"!=typeof o?(a=i,i=r,r=o,s=r._comment):(s=r._comment,r._comment=o),i||(i=r);var c=!0;if(Object.keys(this.meta).length===Object.keys(r.meta).length){var f=!0,p=!1,y=void 0;try{for(var h,d=Object.keys(this.meta)[Symbol.iterator]();!(f=(h=d.next()).done);f=!0){var v=h.value;if("namespace"!==v&&this.meta[v]!==r.meta[v]){c=!1;break}}}catch(e){p=!0,y=e}finally{try{!f&&d.return&&d.return()}finally{if(p)throw y}}if(r.id!==i.id&&Object.keys(this.meta).length===Object.keys(i.meta).length){var m=!0,b=!1,_=void 0;try{for(var g,w=Object.keys(this.meta)[Symbol.iterator]();!(m=(g=w.next()).done);m=!0){var O=g.value;if("namespace"!==O&&this.meta[O]!==i.meta[O]){c=!1;break}}}catch(e){b=!0,_=e}finally{try{!m&&w.return&&w.return()}finally{if(b)throw _}}}}else c=!1;if(c)return l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"to",this).call(this,r),i?i:r;var e=n(15).through,S=e(r._comment,r,i,a);return r._comment=s,Object.keys(this.meta).forEach(function(e){Object.prototype.hasOwnProperty.call(u.meta,e)&&(Object.prototype.hasOwnProperty.call(r.meta,e)||r.preventMetaPropagation()||(r.meta[e]=u.meta[e]),S.meta[e]=u.meta[e])}),l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"to",this).call(this,S)}},{key:"to",value:function(e,n){var o=this;if("string"==typeof e){if(n._comment=e,!n)return this}else if(n=e,!n)return this;return Object.keys(this.meta).forEach(function(e){Object.prototype.hasOwnProperty.call(o.meta,e)&&(Object.prototype.hasOwnProperty.call(n.meta,e)||n.preventMetaPropagation()||(n.meta[e]=o.meta[e]))}),l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"to",this).call(this,n)}},{key:"preventMetaPropagation",value:function(){return!1}},{key:"getTags",value:function(){return this._tags}},{key:"hasTag",value:function(e){return this._tags.indexOf(e)>=0}},{key:"addTag",value:function(e){this._tags.push(e)}},{key:"delTag",value:function(e){var t=this._tags.indexOf(e);t>=0&&this._tags.splice(t,1)}},{key:"getMeta",value:function(){return this.meta}},{key:"getMetaByName",value:function(e){return this.meta[e]}},{key:"addMeta",value:function(e,t){this.meta[e]=t}},{key:"getNamespace",value:function(){return this.meta.namespace}},{key:"toJSON",value:function(){return{id:this.id,name:this.name,namespace:this.namespace,fullName:this.fullName,features:this.getFeatures(),meta:this.meta,tags:this.tags,comment:this.comment,inputs:this.inputs,outputs:this.outputs}}},{key:"name",get:function(){return this._name}},{key:"fullName",get:function(){return this.meta.namespace?this.meta.namespace+"."+this._name:this._name}},{key:"tags",get:function(){return this._tags}},{key:"namespace",get:function(){return this.getNamespace()}},{key:"comment",get:function(){return this._comment}},{key:"type",get:function(){return this._type}},{key:"inputs",get:function(){return this._inputs},set:function(e){var t=this;return Array.isArray(e)?e.forEach(function(e){t._inputs[e]=""}):this._inputs=e,this}},{key:"outputs",get:function(){return this._outputs},set:function(e){var t=this;return Array.isArray(e)?e.forEach(function(e){t._outputs[e]=""}):this._outputs=e,this}}]),t}(p);e.exports=h},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n(4),u=i.uuid,a=i.EventEmitter,s=i.setImmediate,c=function(){function e(t,n){o(this,e),this.id=u.v1(),this.options=t,e.shareEE?this.ee=e.ee:this.ee=n||new a,this.obs=[],this.ups={},this.downs={},this.meta={}}return r(e,[{key:"push",value:function(e){var t=this,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return n!==!1&&this.isInterruptibleSignal(e)?(s(function(){t.onReceive(e)}),this):(this.onReceive(e),this)}},{key:"onReceive",value:function(e){if(this.invokeObservers("onReceive",e),this.isErrorSignal(e))this.onError(e),this.request();else if(this.isEndSignal(e))try{this.onEnd(e)}catch(t){this.throwError(t,e)}else try{this.onSignal(e)}catch(t){this.throwError(t,e)}return this}},{key:"onSignal",value:function(e){return this.send(e),this}},{key:"onError",value:function(e){return this.send(e),this}},{key:"onEnd",value:function(e){return this.send(e),this}},{key:"send",value:function(e){var t=this,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this.invokeObservers("send",e),n!==!1&&this.isInterruptibleSignal(e)?(s(function(){t.ee.emit("outgoing-"+t.id,e)}),this):(Object.keys(this.downs).forEach(function(n){t.downs[n].onReceive(e)}),this)}},{key:"observe",value:function(e){return this.obs.push(e),this}},{key:"to",value:function(e){var t=this;return this.invokeObservers("to",e),this.downs[e.id]=e,this.ee.on("outgoing-"+this.id,function(t){e.push(t)}),e.ee.on("request-"+e.id,function(e){t.pull(e)}),e.from(this),e}},{key:"pull",value:function(e){var t=this;return s(function(){t.onRequest(e)}),this}},{key:"onRequest",value:function(e){return this.invokeObservers("onRequest",e),this.request(e),this}},{key:"request",value:function(e){var t=this;return this.invokeObservers("request",e),s(function(){t.ee.emit("request-"+t.id,e)}),this}},{key:"from",value:function(e){return this.ups[e.id]=e,this.invokeObservers("from",e),this}},{key:"isInterruptibleSignal",value:function(e){return!0}},{key:"isErrorSignal",value:function(e){return e instanceof Error}},{key:"isEndSignal",value:function(t){return t===e.END}},{key:"throwError",value:function(e,t){return e.signal=t,this.send(e)}},{key:"invokeObservers",value:function(e){for(var t=this,o=arguments.length,r=Array(o>1?o-1:0),i=1;i<o;i++)r[i-1]=arguments[i];r.unshift(e),r.unshift(this);try{!function(){var e=n(7).observers;Object.keys(e).forEach(function(n){e[n].apply(t,r)}),t.obs.forEach(function(e){e.apply(t,r)})}()}catch(e){console.error(e.message)}}}]),e}();c.shareEE=!1,c.ee=new a,c.END="__SIGNAL_END__",e.exports=c},function(e,t,n){"use strict";var o=n(5),r=n(6);e.exports={uuid:o,EventEmitter:r,setImmediate:setImmediate}},function(e,t){e.exports=__webpack_require__(10)},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=function(){function e(){n(this,e),this.listeners={}}return o(e,[{key:"on",value:function(e,t){Object.prototype.hasOwnProperty.call(this.listeners,e)||(this.listeners[e]=[]);var n=this.listeners[e];n.push(t)}},{key:"emit",value:function(e,t){if(Object.prototype.hasOwnProperty.call(this.listeners,e)){var n=this.listeners[e];n.forEach(function(e){return e(t)})}}}]),e}();e.exports=r},function(e,t,n){"use strict";function o(e,t){return Object.assign(t,e)}function r(){function e(e){var t=!0,n=!1,o=void 0;try{for(var r,i=d._indexers.values()[Symbol.iterator]();!(t=(r=i.next()).done);t=!0){var u=r.value;u(e)}}catch(e){n=!0,o=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw o}}}function t(t,n){function r(){var t=n.apply(void 0,arguments);return t.meta={},o(this.meta,t.meta),e(t),this.to(t)}return d.reserved.indexOf(t)>=0?(console.warn("can't add operator '"+t+"', name is reserved."),d):(i.prototype[t]=r,d[t]=function(){var t=n.apply(void 0,arguments);return t.meta={},o(d._meta,t.meta),e(t),t},d)}function r(e){Object.keys(e).forEach(function(t){d.addOperator(t,e[t])})}function u(t,n){return d.reserved.indexOf(t)>=0?(console.warn("can't add source '"+t+"', name is reserved. "),d):(d[t]=function(){var t=n.apply(void 0,arguments);return t.meta={},o(d._meta,t.meta),e(t),t},d)}function a(e){return Object.keys(e).forEach(function(t){d.addSource(t,e[t])}),d}function s(e,t){return d[e]=function(){for(var e=arguments.length,n=Array(e),o=0;o<e;o++)n[o]=arguments[o];return t.query.apply(t,[d].concat(n))},d}function c(e,t){return d._indexers.set(e,function(e){t.index(d,e)}),d}function f(e){var t=e;return"string"==typeof e&&(t=n(8)(e)),t.operators&&d.addOperators(t.operators),t.sources&&d.addSources(t.sources),t.observers&&Object.keys(t.observers).forEach(function(e){d.observers[e]=t.observers[e]}),t.indexers&&Object.keys(t.indexers).forEach(function(e){d.addIndexer(e,t.indexers[e])}),t.queriers&&Object.keys(t.queriers).forEach(function(e){d.addQuerier(e,t.queriers[e])}),t.others&&Object.keys(t.others).forEach(function(e){d[e]=t.others[e]}),d}function l(e){d._meta=e}function p(e,t){d._meta[e]=t}function y(e){d._meta.hasOwnProperty(e)&&delete d._meta[e]}var h=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},d={};return d._meta=h,d._indexers=new Map,d.Node=i,d.Bouton=i,d.END=i.END,d.reserved=["id","options","ee","observers","upstreams","downstreams","meta","push","onReceive","onSignal","onError","onEnd","send","observe","to","pull","onRequest","request","from","isErrorSignal","isEndSignal","throwError","invokeObservers"],d.addOperator=t,d.addOperators=r,d.addSource=u,d.addSources=a,d.addQuerier=s,d.addIndexer=c,d.observers={},d.extend=f,d.setMeta=l,d.addMeta=p,d.removeMeta=y,d}var i=n(3),u=r();u.new=r,e.exports=u},function(e,t,n){function o(e){return n(r(e))}function r(e){return i[e]||function(){throw new Error("Cannot find module '"+e+"'.")}()}var i={"./Bouton":3,"./Bouton.js":3,"./dep":4,"./dep.js":4,"./index":7,"./index.js":7,"./operators":9,"./operators.js":9,"./sources":10,"./sources.js":10};o.keys=function(){return Object.keys(i)},o.resolve=r,e.exports=o,o.id=8},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":d(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":d(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e){var t=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i.fn=e,i}return i(t,e),v(t,[{key:"onSignal",value:function(e){var t=this.fn(e);this.send(t)}}]),t}(m);return new t(e)}function a(e){var t=function(t){function n(e,t){o(this,n);var i=r(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e,t));return i.fn=e,i}return i(n,t),v(n,[{key:"onSignal",value:function(t){e(t)?this.send(t):this.request()}}]),n}(m);return new t(e)}function s(e,t){var n=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i.memo=i.options.memo,i.iterator=i.options.iterator,i.END=!1,i}return i(t,e),v(t,[{key:"onSignal",value:function(e){this.memo=this.iterator.call(this,this.memo,e),this.request()}},{key:"onEnd",value:function(){this.send(this.memo),this.END=!0}},{key:"onRequest",value:function(e){this.END?this.send(m.END):this.request()}}]),t}(m);return new n({memo:e,iterator:t})}function c(e){var t=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i.fn=e,i}return i(t,e),v(t,[{key:"onError",value:function(e){var t=this;this.fn(e,function(e){t.send(e)})}}]),t}(m);return new t(e)}function f(){var e=function(e){function t(){return o(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),v(t,[{key:"onSignal",value:function(e){this.request()}},{key:"from",value:function(e){this.request()}}]),t}(m);return new e}function l(e){var t=(new Date).getTime(),n=function(n){function u(){return o(this,u),r(this,(u.__proto__||Object.getPrototypeOf(u)).apply(this,arguments))}return i(u,n),v(u,[{key:"onSignal",value:function(n){var o=(new Date).getTime();o-e>=t&&(t=o,this.send(n))}}]),u}(m);return new n(e)}function p(e,t){var n=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i.n=e.n,i.add=e.add,i}return i(t,e),v(t,[{key:"onSignal",value:function(e){this.n=this.add.call(this,this.n,e),this.send(this.n)}}]),t}(m);return new n({n:e,add:t})}function y(e){var t=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i.fn=e,i}return i(t,e),v(t,[{key:"onSignal",value:function(e){this.fn(e),this.send(e)}}]),t}(m);return new t(e)}function h(e){var t=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i.fn=e,i}return i(t,e),v(t,[{key:"onEnd",value:function(e){this.fn(e)}}]),t}(m);return new t(e)}var d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),m=n(3);e.exports={operators:{map:u,filter:a,reduce:s,errors:c,sink:f,throttle:l,scan:p,act:y,done:h}}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":s(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e){return new l(e)}function a(e){return new p(e)}var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),f=n(3),l=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i.source=i.options,i.index=0,i}return i(t,e),c(t,[{key:"onRequest",value:function(e){this.source.length===this.index?(this.send(f.END),this.index++):this.source.length>this.index&&(this.send(this.source[this.index]),this.index++)}}]),t}(f),p=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i.value=i.options,i.visited=0,i}return i(t,e),c(t,[{key:"onRequest",value:function(e){0==this.visited?(this.send(this.value),this.visited++):1==this.visited&&(this.send(f.END),this.visited++)}}]),t}(f);e.exports={sources:{asList:u,just:a}}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return"undefined"==typeof e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":"undefined"==typeof e?"undefined":r(e)},u=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(4),s=n(12),c=a.uuid,f=s.Immutable,l=function(){function e(t,n){if(o(this,e),f.isImmutable(t))this._immu=t;else if(t instanceof Error)this._immu=f.fromJS({__type__:"Signal",_seq:c.v1(),_cmd:n,_error:t,_end:!1,_payload:{},_tags:{}});else{"number"!=typeof t&&"string"!=typeof t&&"boolean"!=typeof t&&"undefined"!=typeof t&&null!==t||(t={__anon__:t});var r=c.v1(),u={},a=null,s=!1,l=t,p=n||null;"object"===("undefined"==typeof t?"undefined":i(t))&&(t.hasOwnProperty("_seq")&&(r=t._seq),t.hasOwnProperty("_tags")&&(u=t._tags),t.hasOwnProperty("_error")&&(a=t._error),t.hasOwnProperty("_end")&&(s=t._end),t.hasOwnProperty("_payload")&&(l=t._payload),t.hasOwnProperty("_cmd")&&(p=t._cmd)),this._immu=f.fromJS({__type__:"Signal",_seq:r,_cmd:p,_error:a,_end:s,_payload:l,_tags:u})}}return u(e,[{key:"toJSON",value:function(){return this._immu.toJSON()}},{key:"setFrom",value:function(e){return this._from.push(e),this}},{key:"new",value:function(t){var n=this.seq;return new e(t).setSeq(n).setTags(this.tags)}},{key:"get",value:function(e){var t=e;"string"==typeof e&&(t=e.split(".")),t.unshift("_payload");var n=this._immu.getIn(t);return f.readyToJS(n)?n.toJS():n}},{key:"set",value:function(t,n){var o=t;return"string"==typeof t&&(o=t.split(".")),o.unshift("_payload"),new e(this._immu.setIn(o,n))}},{key:"getAnonPayload",value:function(){return this.get("__anon__")}},{key:"setPayload",value:function(t){return"number"!=typeof t&&"string"!=typeof t&&"boolean"!=typeof t&&"undefined"!=typeof t&&null!==t||(t={__anon__:t}),new e(this._immu.set("_payload",t))}},{key:"getResult",value:function(){return this.get("__result__")}},{key:"setResult",value:function(e){return this.set("__result__",e)}},{key:"del",value:function(t){var n=t;return"string"==typeof t&&(n=t.split(".")),n.unshift("_payload"),new e(this._immu.deleteIn(n))}},{key:"setTags",value:function(t){return new e(this._immu.set("_tags",t))}},{key:"getTag",value:function(e){var t=this._immu.getIn(["_tags",e]);return f.readyToJS(t)?t.toJS():t}},{key:"getCmd",value:function(e){var t=e;"string"==typeof e&&(t=e.split(".")),t.unshift("_cmd");var n=this._immu.getIn(t);return f.readyToJS(n)?n.toJS():n}},{key:"setCmd",value:function(t,n){var o=t;return"string"==typeof t&&(o=t.split(".")),o.unshift("_cmd"),new e(this._immu.setIn(o,n))}},{key:"delCmd",value:function(t){var n=t;return"string"==typeof t&&(n=t.split(".")),n.unshift("_cmd"),new e(this._immu.deleteIn(n))}},{key:"setTag",value:function(t,n){return new e(this._immu.setIn(["_tags",t],n))}},{key:"delTag",value:function(t){return new e(this._immu.deleteIn(["_tags",t]))}},{key:"setSeq",value:function(t){return new e(this._immu.set("_seq",t))}},{key:"setError",value:function(t){return new e(this._immu.set("_error",t))}},{key:"setEnd",value:function(t){return new e(this._immu.set("_end",t))}},{key:"hasError",value:function(){return this.error instanceof Error}},{key:"isEnd",value:function(){return this.end}},{key:"__type__",get:function(){return this._immu.get("__type__")}},{key:"seq",get:function(){return this._immu.get("_seq")}},{key:"id",get:function(){return this._immu.get("_seq")}},{key:"payload",get:function(){var e=this._immu.get("_payload");return f.readyToJS(e)?e.toJS():e}},{key:"anonPayload",get:function(){return this.get("__anon__")}},{key:"error",get:function(){return this._immu.get("_error")}},{key:"end",get:function(){return this._immu.get("_end")}},{key:"tags",get:function(){var e=this._immu.get("_tags");return f.readyToJS(e)?e.toJS():e}},{key:"from",get:function(){return this._from}}],[{key:"isSignal",value:function(e){return"object"===("undefined"==typeof e?"undefined":i(e))&&"Signal"===e.__type__}},{key:"hasError",value:function(e){return"object"===("undefined"==typeof e?"undefined":i(e))&&e.error instanceof Error}},{key:"isEnd",value:function(e){return"object"===("undefined"==typeof e?"undefined":i(e))&&e.end}},{key:"Error",value:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(t){var n=t;return"string"==typeof t&&(n=new Error(t)),new e(t)})},{key:"End",value:function(){var t=new e;return t.setEnd(!0)}}]),e}();e.exports=l},function(e,t,n){"use strict";var o=n(13);e.exports={Immutable:o}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return"undefined"==typeof e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":"undefined"==typeof e?"undefined":r(e)},u=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(14),s=function(){function e(t){o(this,e),this.__type__="CollarImmutable",this.state=new a(t).get()}return u(e,[{key:"get",value:function(e){return this.state[e]}},{key:"getIn",value:function(e){for(var t="string"==typeof e?e.split("."):e,n=this.state,o=0;o<t.length;o++){if(!n.hasOwnProperty(t[o]))return null;n=n[t[o]]}return n}},{key:"set",value:function(t,n){var o=new a(this.state.toJS());return o.get().set(t,n),new e(o.get().toJS())}},{key:"setIn",value:function(t,n){for(var o="string"==typeof t?t.split("."):t,r=new a(this.state.toJS()),u=r.get(),s=0;s<o.length;s++){if(u.hasOwnProperty(o[s]))if(s===o.length-1)u=u.set(o[s],n);else{var c=u[o[s]];c&&"object"===("undefined"==typeof c?"undefined":i(c))||(u=u.set(o[s],{}))}else u=s===o.length-1?u.set(o[s],n):u.set(o[s],{});u=u[o[s]]}return new e(r.get().toJS())}},{key:"deleteIn",value:function(t){for(var n="string"==typeof t?t.split("."):t,o=new a(this.state.toJS()),r=o.get(),i=0;i<n.length;i++)if(i<n.length-1){if(r=r[n[i]],null===r)return new e(this.freezer.get())}else r.remove(n[i]);return new e(o.get().toJS())}},{key:"toJSON",value:function(){return this.state.toJS()}}],[{key:"fromJS",value:function(t){return new e(t)}},{key:"isImmutable",value:function(e){return null!==e&&"object"===("undefined"==typeof e?"undefined":i(e))&&"CollarImmutable"===e.__type__}},{key:"readyToJS",value:function(e){return null!==e&&"object"===("undefined"==typeof e?"undefined":i(e))&&"Object"===e.constructor.name&&e.toJS}}]),e}();s.Iterable=function(e){return null!==e&&"object"===("undefined"==typeof e?"undefined":i(e))&&"CollarImmutable"===e.__type__},e.exports=s},function(e,t){e.exports=__webpack_require__(15)},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":a(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=null;return"string"==typeof e?r={comment:e,input:t,output:n,asActuator:o}:"string"!=typeof e&&(r={input:e,output:t,asActuator:n}),new p(r)}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),c=n(2),f=100,l=1e4,p=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="delegator",i._inputDelegation=e.input,i._outputDelegation=e.output||e.input,i.addFeature("delegator"),e.asActuator?(i._asActuator=!0,i.addFeature("actuator")):(i._asActuator=!1,i.addFeature("processor")),i._receivedSignals=new Map,i._outputDelegation.observe(function(e,t,n){if("send"===t){if(i._receivedSignals.has(n.id)){var o=i._receivedSignals.get(n.id).signal;i._receivedSignals.delete(n.id),i._asActuator?n.error?i.send(o.setResult(n.payload).setError(n.error)):n.end?i.send(o.setResult(n.payload).setEnd(!0)):i.send(o.setResult(n.payload)):i.send(n)}i.checkExpiredSession()}}),i}return i(t,e),s(t,[{key:"onSignal",value:function(e){this._receivedSignals.set(e.id,{timestamp:(new Date).getTime(),signal:e}),this._inputDelegation.push(e)}},{key:"checkExpiredSession",value:function(){var e=this;this._receivedSignals.size>f&&!function(){var t=(new Date).getTime();Object.keys(e._receivedSignals).forEach(function(n){t<e._receivedSignals.get(n).timestamp+l&&e._receivedSignals.delete(n);
	})}()}}]),t}(c);e.exports={operators:{delegate:u},through:u}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":a(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t){"function"==typeof e&&(t=e,e="sensor");var n={comment:e,fn:t};return n.fn||(n.todo=!0),new f(n)}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),c=n(2),f=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="sensor",i.fn=e.fn||function(){},i.addFeature("sensor"),i.addFeature("active"),i.watch(i.options),i}return i(t,e),s(t,[{key:"watch",value:function(e){this.fn.call(this,e)}}]),t}(c);e.exports={sources:{sensor:u}}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":a(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t,n,o){return new p(f.prepareNodeOptions(e,t,n,o,"filter"))}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),c=n(2),f=n(18),l=n(19),p=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="filter",i._comment||(i._comment="filter"),i.fn=function(t){var n=Object.prototype.hasOwnProperty.call(this.meta,"namespace")?this.meta.namespace+".":"",o=l.getFn(""+n+this.name);return o?o.call(this,t):!e.fn||e.fn.call(this,t)},i.addFeature("filter"),i}return i(t,e),s(t,[{key:"accept",value:function(e){return this.fn(e)}},{key:"onSignal",value:function(e){this.accept(e)?this.send(e):this.request()}}]),t}(c);e.exports={operators:{filter:u,when:u}}},function(e,t,n){"use strict";function o(e,t){return t._node_callbacks||(t._node_callbacks={}),e._to_node_funcs||(e._to_node_funcs={}),t._to_node_observer||(t._to_node_observer=function(e,n,o){if("send"===n){var r=o.getTag("__to_node_dest__");if(!r||r!==t.id)return;var i=t._node_callbacks[o.id];if(!i)return;delete t._node_callbacks[o.id],o.error?i(o.error,o.payload):i(null,o.payload)}},t.observe(t._to_node_observer)),Object.prototype.hasOwnProperty.call(e._to_node_funcs,t.id)?e._to_node_funcs[t.id]:(e._to_node_funcs[t.id]=function(n,o){var i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],u=n;r.isSignal(u)||(u=new r(n)),u=u.setTag("__to_node_dest__",t.id),t._node_callbacks[u.id]=o,e.push(u,i)},e._to_node_funcs[t.id])}var r=n(11);e.exports={prepareNodeOptions:function(e,t,n,o,r){return"function"==typeof e?r?{comment:r,fn:e}:{fn:e}:"function"==typeof t?{comment:e,fn:t}:"function"==typeof n?{comment:e,inputs:t,fn:n}:"function"==typeof o?{comment:e,inputs:t,outputs:n,fn:o}:o?{}:{comment:e,inputs:t,outputs:n,fn:o,todo:!0}},toNode:o}},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=function(){function e(){n(this,e),this.registry={}}return o(e,[{key:"register",value:function(e,t,n){return this.registry[e]={type:t,fn:n},this}},{key:"registerActuatorSync",value:function(e,t){return this.register(e,"actuator.sync",t)}},{key:"registerActuatorAsync",value:function(e,t){return this.register(e,"actuator.async",t)}},{key:"registerProcessorSync",value:function(e,t){return this.register(e,"processor.sync",t)}},{key:"registerProcessorAsync",value:function(e,t){return this.register(e,"processor.async",t)}},{key:"registerFilter",value:function(e,t){return this.register(e,"filter",t)}},{key:"remove",value:function(e){Object.prototype.hasOwnProperty.call(this.registry,e)&&delete this.registry[e]}},{key:"clear",value:function(){this.registry={}}},{key:"get",value:function(e){return Object.prototype.hasOwnProperty.call(this.registry,e)?this.registry[e]:null}},{key:"getFn",value:function(e){return Object.prototype.hasOwnProperty.call(this.registry,e)?this.registry[e].fn:null}}]),e}(),i=null;e.exports=null==i?i=new r:i},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":s(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t,n,o){return new y(l.prepareNodeOptions(e,t,n,o,"actuator"))}function a(e,t,n,o){return new h(l.prepareNodeOptions(e,t,n,o,"actuator"))}var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),f=n(2),l=n(18),p=n(19),y=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="actuator",i.fn=function(t,n){var o=Object.prototype.hasOwnProperty.call(this.meta,"namespace")?this.meta.namespace+".":"",r=p.getFn(""+o+this.name);return r?r.call(this,t,n):e.fn?e.fn.call(this,t,n):void n()},i.addFeature("actuator"),i}return i(t,e),c(t,[{key:"act",value:function(e,t){this.fn.call(this,e,t)}},{key:"onSignal",value:function(e){var t=this;this.act(e,function(n,o){return n?void t.throwError(n,e):void(o||0===o||o===!1||""===o?t.send(e.set("__result__",o)):t.send(e))})}}]),t}(f),h=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="actuator.sync",i.fn=function(t){var n=Object.prototype.hasOwnProperty.call(this.meta,"namespace")?this.meta.namespace+".":"",o=p.getFn(""+n+this.name);return o?o.call(this,t):e.fn?e.fn.call(this,t):void 0},i.addFeature("actuator"),i}return i(t,e),c(t,[{key:"act",value:function(e,t){var n=this.fn.call(this,e);t(null,n)}},{key:"onSignal",value:function(e){var t=this;this.act(e,function(n,o){if(n)throw n;o||0===o||o===!1||""===o?t.send(e.set("__result__",o)):t.send(e)})}}]),t}(f);e.exports={operators:{actuator:u,actuatorSync:a,do:a},Actuator:y}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":c(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":c(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t,n,o){return new h(p.prepareNodeOptions(e,t,n,o,"processor"))}function a(e,t,n,o){return new d(p.prepareNodeOptions(e,t,n,o,"processor"))}function s(e,t,n,o){return new d(p.prepareNodeOptions(e,t,n,o,"map"))}var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),l=n(2),p=n(18),y=n(19),h=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="processor",i.fn=function(t,n){var o=Object.prototype.hasOwnProperty.call(this.meta,"namespace")?this.meta.namespace+".":"",r=y.getFn(""+o+this.name);return r?r.call(this,t,n):e.fn?e.fn.call(this,t,n):void n(null,t)},i.addFeature("processor"),i.addFeature("async"),i}return i(t,e),f(t,[{key:"process",value:function(e,t){this.fn.call(this,e,t)}},{key:"onSignal",value:function(e){var t=this;this.process(e,function(n,o){n?t.throwError(n,e):t.send(o)})}}]),t}(l),d=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="processor.sync",i.fn=function(t){var n=Object.prototype.hasOwnProperty.call(this.meta,"namespace")?this.meta.namespace+".":"",o=y.getFn(""+n+this.name);return o?o.call(this,t):e.fn?e.fn.call(this,t):t},i.addFeature("processor"),i.addFeature("sync"),i}return i(t,e),f(t,[{key:"process",value:function(e,t){var n=this.fn.call(this,e);t(null,n)}},{key:"onSignal",value:function(e){var t=this;this.process(e,function(e,n){if(e)throw e;t.send(n)})}}]),t}(l);e.exports={operators:{processor:u,processorSync:a,map:s}}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":a(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t,n,o){return new l(f.prepareNodeOptions(e,t,n,o,"error handler"))}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),c=n(2),f=n(18),l=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="errorhandler",i.fn=e.fn||function(e){},i.addFeature("errorhandler"),i}return i(t,e),s(t,[{key:"onError",value:function(e){var t=this;this.fn(e,function(e){t.send(e)})}}]),t}(c);e.exports={operators:{errors:u}}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":c(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":c(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"!=typeof e&&console.error(new Error("endpoint must have a name")),t.mode="input",t.comment=e,new p(t)}function a(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"!=typeof e&&console.error(new Error("endpoint must have a name")),t.mode="output",t.comment=e,new p(t)}function s(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"!=typeof e&&console.error(new Error("endpoint must have a name")),t.comment=e,new p(t)}var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),l=n(2),p=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return e.mode||(e.mode="input"),(!e.mode||"input"!==e.mode&&"output"!==e.mode)&&(console.warn("invalid endpoint mode [",e.mode,'], use "input" instead'),e.mode="input"),i._type="endpoint."+e.mode,i._name=i._comment,i.addFeature("endpoint"),i.addFeature(e.mode),i}return i(t,e),f(t,[{key:"accept",value:function(e){var t=this.options.filter||[];if(0===t.length)return!0;var n=!1,o=!0,r=!1,i=void 0;try{for(var u,a=t[Symbol.iterator]();!(o=(u=a.next()).done);o=!0){var s=u.value;n=!0;for(var c in s)if(e.get(c)!==s[c]){n=!1;break}if(n)break}}catch(e){r=!0,i=e}finally{try{!o&&a.return&&a.return()}finally{if(r)throw i}}return n&&this.invokeObservers("enter endpoint",e),n}},{key:"act",value:function(e,t){t(),this.invokeObservers("leave endpoint",e)}},{key:"preventMetaPropagation",value:function(){return"input"===this.options.mode}}]),t}(l);e.exports={sources:{endpoint:s,input:u,output:a}}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":s(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t){var n={comment:e,source:t};return Array.isArray(e)&&(n.comment=null,n.source=e),new y(n)}function a(e,t){var n={comment:e,source:t};return t||(n.comment=null,n.source=e),new h(n)}var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),f=function e(t,n,o){null===t&&(t=Function.prototype);var r=Object.getOwnPropertyDescriptor(t,n);if(void 0===r){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,o)}if("value"in r)return r.value;var u=r.get;if(void 0!==u)return u.call(o)},l=n(2),p=n(11),y=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="passive",i.addFeature("passive"),i._comment=e.comment||"passive array source",i.source=e.source,i.index=0,i}return i(t,e),c(t,[{key:"onNext",value:function(){this.source.length===this.index?(this.send((new p).setEnd(!0)),this.index++):this.source.length>this.index&&(this.send(new p(this.source[this.index])),this.index++)}},{key:"send",value:function(e){p.isSignal(e)?f(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"send",this).call(this,e.setCmd("mode","passive")):f(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"send",this).call(this,new p(e,{mode:"passive"}))}}]),t}(l),h=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i.addFeature("passive"),i._comment=e.comment||"passive array source",i.source=e.source,i.visited=0,i}return i(t,e),c(t,[{key:"onNext",value:function(){0===this.visited?(this.send(new p(this.source)),this.visited++):1===this.visited&&(this.send((new p).setEnd(!0)),this.visited++)}},{key:"send",value:function(e){p.isSignal(e)?f(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"send",this).call(this,e.setCmd("mode","passive")):f(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"send",this).call(this,new p(e,{mode:"passive"}))}}]),t}(l);e.exports={sources:{asList:u,just:a}}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":a(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(){return new f}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),c=n(2),f=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="sink",i._comment="drive passive source",i}return i(t,e),s(t,[{key:"onSignal",value:function(){this.request()}},{key:"from",value:function(){this.request()}}]),t}(c);e.exports={operators:{sink:u}}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":a(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t,n){return new l({comment:e,name:t,value:n})}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),c=n(2),f=n(27),l=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="variable",i._value=i.options.value||0==i.options.value?i.options.value:{},i._name=i.options.name,i._comment=i.options.comment||"var '"+i._name+"'",i.addFeature("variable"),i.addFeature("active"),i.inputs={value:"the new value"},i.outputs={type:"always be 'variableChanged'",value:"new value of the variable",before:"old value"},i}return i(t,e),s(t,[{key:"get",value:function(e){return f.get(this._value,e)}},{key:"set",value:function(e,t){if(!e||""===e)return void(this.value=t);var n=f.get(this._value,e);f.set(this._value,e,t),this.send({type:"variableChanged",value:this._value,before:n})}},{key:"onSignal",value:function(e){var t=e.get("value");this.value=t}},{key:"value",get:function(){return this._value},set:function(e){var t=this._value;this._value=e,this.send({type:"variableChanged",value:this._value,before:t})}}]),t}(c);e.exports={Variable:l,operators:{variable:u}}},function(e,t){e.exports=__webpack_require__(21)},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":a(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t,n){return new l({comment:e,name:t,value:n})}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),c=n(2),f=n(27),l=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="model",i._value=i.options.value||0==i.options.value?i.options.value:{},i._name=i.options.name,i._comment=i.options.comment||'model "'+i._name+'"',i.addFeature("model"),i.addFeature("active"),i.addFeature("stateful"),i.inputs={operation:'one of "set", "insert", "append", and "delete"',path:"the path to make de operation, empty for root",index:'optional, only need for "insert"',value:'optional, only need for "set", "insert", and "append"'},i.outputs={type:'always be "modelChanged"',operation:'the operation that causes the change, one of "set", "insert", "append", and "delete"',path:"where does the change happen",value:"the value of the model",appended:"the appended value",index:"the position of the newly inserted value",inserted:"the inserted value",before:"old value of the changed part",after:"new value of the changed part"},i}return i(t,e),s(t,[{key:"get",value:function(e){return f.get(this._value,e)}},{key:"set",value:function(e,t,n){if(!e||""===e){var o=this._value;return this._value=t,void(n?this.send(n.new({type:"modelChanged",operation:"set",path:null,value:this._value,before:o,after:this._value})):this.send({type:"modelChanged",operation:"set",path:null,value:this._value,before:o,after:this._value}))}var r=f.get(this._value,e);f.set(this._value,e,t),n?this.send(n.new({type:"modelChanged",operation:"set",path:e,value:this._value,before:r,after:t})):this.send({type:"modelChanged",operation:"set",path:e,value:this._value,before:r,after:t})}},{key:"insert",value:function(e,t,n,o){var r=f.get(this._value,e);f.insert(this._value,e,t,n),o?this.send(o.new({type:"modelChanged",operation:"insert",path:e,index:n,value:this._value,inserted:t,before:r,after:f.get(this._value,e)})):this.send({type:"modelChanged",operation:"insert",path:e,index:n,value:this._value,inserted:t,before:r,after:f.get(this._value,e)})}},{key:"append",value:function(e,t,n){var o=this,r=f.get(this._value,e);Array.isArray(t)?t.forEach(function(t){f.push(o._value,e,t)}):f.push(this._value,e,t),n?this.send(n.new({type:"modelChanged",operation:"append",path:e,value:this._value,appended:t,before:r,after:f.get(this._value,e)})):this.send({type:"modelChanged",operation:"append",path:e,value:this._value,appended:t,before:r,after:f.get(this._value,e)})}},{key:"del",value:function(e,t){var n=f.get(this._value,e);f.del(this._value,e),t?this.send(t.new({type:"modelChanged",operation:"delete",path:e,value:this._value,before:n,after:null})):this.send({type:"modelChanged",operation:"delete",path:e,value:this._value,before:n,after:null})}},{key:"onSignal",value:function(e){var t=e.get("operation")||"set";if("set"===t){var n=e.get("path");this.set(n,e.get("value"),e)}else if("insert"===t){var n=e.get("path"),o=e.get("index");n&&null!=o&&void 0!=o&&this.insert(n,e.get("value"),o,e)}else if("append"===t){var n=e.get("path");n&&this.append(n,e.get("value"),e)}else if("delete"===t){var n=e.get("path");n&&this.del(n,e)}}},{key:"getState",value:function(e,t){t(null,this._value)}},{key:"value",get:function(){return this._value},set:function(e){var t=this._value;this._value=e,this.send({type:"modelChanged",operation:"set",path:null,value:this._value,before:t,after:this._value})}}]),t}(c);e.exports={sources:{model:u}}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":c(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":c(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t){var n={};return"string"!=typeof e?(n.comment="transport.outgoing",n.delegator=e):(n.comment=e,n.delegator=t),new v(n)}function a(e,t){var n={};return"string"!=typeof e?(n.comment="transport.incoming",n.delegator=e):(n.comment=e,n.delegator=t),new m(n)}function s(e,t){var n={};return"string"!=typeof e?(n.comment="transport.response",n.delegator=e):(n.comment=e,n.delegator=t),new b(n)}var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),l=n(2),p=n(11),y=n(20),h=n(4).uuid,d=y.Actuator,v=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="transport.outgoing",i.delegator=e.delegator||{},i.addFeature("async"),i.addFeature("transport"),i}return i(t,e),f(t,[{key:"act",value:function(e,t){return this.delegator.handleOutgoingSignal?this.delegator.handleOutgoingSignal(e,function(e,n){return e?t(e):t(null,n)}):t()}},{key:"getTransportId",value:function(){return this.delegator.getId?this.delegator.getId():h.v1()}}]),t}(d),m=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="transport.incoming",i.delegator=e.delegator||{},i.addFeature("sensor"),i.addFeature("active"),i.addFeature("async"),i.addFeature("transport"),i.watch(i.options),i}return i(t,e),f(t,[{key:"getTransportId",value:function(){return this.delegator.getId?this.delegator.getId():null}},{key:"watch",value:function(){var e=this;this.delegator.listen&&this.delegator.listen(function(t,n){var o=n;p.isSignal(n)||(o=new p(n)),e.delegator.saveContext(t,o),e.send(o)})}}]),t}(l),b=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="transport.response",i._cacheSize=e.cacheSize||20,i._cacheTimeout=e.cacheTimeout||5e3,i.delegator=e.delegator||{},i.addFeature("actuator"),i.addFeature("async"),i.addFeature("transport"),i.cache=new Map,i}return i(t,e),f(t,[{key:"getTransportId",value:function(){return this.delegator.getId?this.delegator.getId():null}},{key:"act",value:function(e,t){if(!this.delegator.handleResponseSignal)return t();var n=null;return n=this.delegator.getContext?n=this.delegator.getContext(e):null,this.delegator.handleResponseSignal(n,e,function(e,n){return e?t(e):t(null,n)})}},{key:"onError",value:function(e){var t=this;if(!this.delegator.handleResponseSignal)return this.send(e);var n=null;return n=this.delegator.getContext?n=this.delegator.getContext(e):null,this.delegator.handleResponseSignal(n,e,function(n,o){return n?t.send(e.setError(n)):void(o?t.send(e.setResult(o)):t.send(e))})}}]),t}(d);e.exports={OutgoingTransport:v,IncomingTransport:m,ResponseTransport:b,operators:{req:u,listen:a,resp:s}}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":a(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t){var n={};return n="number"==typeof e?{ms:t}:{comment:e,ms:t},new f(n)}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),c=n(2),f=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="throttle",i.ms=e.ms,i._comment=e.comment||"throttle ("+i.ms+" ms)",i.last=(new Date).getTime(),i.addFeature("filter"),i}return i(t,e),s(t,[{key:"onSignal",value:function(e){var t=(new Date).getTime();t-this.ms>=this.last&&(this.last=t,this.send(e))}}]),t}(c);e.exports={operators:{throttle:u
	}}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":a(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t){var n={};return n=t?{comment:e,ref:t}:{comment:"go to "+e._comment,ref:e},new f(n)}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),c=n(2),f=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._ref=e.ref,i._type="reference",i.addFeature("reference"),i.addFeature("actuator"),i}return i(t,e),s(t,[{key:"act",value:function(e,t){this._ref&&this._ref.push(e),t()}}]),t}(c);e.exports={operators:{ref:u}}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":a(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof e?t.comment=e:t=e,new l(t)}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),c=function e(t,n,o){null===t&&(t=Function.prototype);var r=Object.getOwnPropertyDescriptor(t,n);if(void 0===r){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,o)}if("value"in r)return r.value;var u=r.get;if(void 0!==u)return u.call(o)},f=n(2),l=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="node",i.onSignalDelegate=i.options.onSignal,i.onErrorDelegate=i.options.onError,i.onEndDelegate=i.options.onEnd,i.watchDelegate=i.options.watch,i.acceptDelegate=i.options.accept,i.actDelegate=i.options.act,i.processDelegate=i.options.process,i.onNextDelegate=i.options.onNext,i.getStateDelegate=i.options.getState,i.getStateDelegate&&i.addFeature("stateful"),i.onErrorDelegate&&i.addFeature("errorhandler"),i.watchDelegate&&i.addFeature("sensor"),i.acceptDelegate&&i.addFeature("filter"),i.actDelegate&&i.addFeature("actuator"),i.processDelegate&&i.addFeature("processor"),i.addFeature("general"),i.addFeature("async"),i}return i(t,e),s(t,[{key:"onSignal",value:function(e){return this.onSignalDelegate?this.onSignalDelegate.call(this,e):c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"onSignal",this).call(this,e)}},{key:"onError",value:function(e){return this.onErrorDelegate?this.onErrorDelegate.call(this,e):c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"onError",this).call(this,e)}},{key:"onEnd",value:function(e){return this.onEndDelegate?this.onEndDelegate.call(this,e):c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"onEnd",this).call(this,e)}},{key:"watch",value:function(e){return this.watchDelegate?this.watchDelegate.call(this,e):c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"watch",this).call(this,e)}},{key:"accept",value:function(e){return this.acceptDelegate?this.acceptDelegate.call(this,e):c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"accept",this).call(this,e)}},{key:"act",value:function(e,n){return this.actDelegate?this.actDelegate.call(this,e,n):c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"act",this).call(this,e,n)}},{key:"process",value:function(e,n){return this.processDelegate?this.processDelegate.call(this,e,n):c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"process",this).call(this,e,n)}},{key:"getState",value:function(e,n){return this.getStateDelegate?this.getStateDelegate.call(this,e,n):c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getState",this).call(this,e,n)}}]),t}(f);e.exports={operators:{node:u}}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":a(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t){var n={};return"string"==typeof e?(n.comment=e,n.isEndAtom=t):void 0===e||e===!0?(n.comment="start atom process",n.isEndAtom=!1):(n.comment="end atom process",n.isEndAtom=!0),new f(n)}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),c=n(2),f=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="processor.sync",i.isEndAtom=e.isEndAtom,i.addFeature("atom"),i.addFeature("sync"),i}return i(t,e),s(t,[{key:"process",value:function(e,t){var n=null;n=this.isEndAtom?e.delTag("__non_interruptible__"):e.setTag("__non_interruptible__",!0),t(null,n)}},{key:"onSignal",value:function(e){var t=this;this.process(e,function(e,n){if(e)throw e;t.send(n)})}}]),t}(c);e.exports={operators:{atom:u}}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":a(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t){var n={};return"string"==typeof e?(n.comment=e,n.state=t):(n.comment="checkpoint",n.state=e),new l(n)}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),c=n(2),f=n(19),l=function(e){function t(e,n){o(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i._type="checkpoint",i.addFeature("checkpoint"),i.addFeature("actuator"),i.addFeature("async"),i.addFeature("stateful"),i.stateFn=function(t,n){var o=Object.prototype.hasOwnProperty.call(i.meta,"namespace")?i.meta.namespace+".":"",r=f.getFn(""+o+i.name);return r?r.call(i,t,n):e.state?e.state.call(i,t,n):void n()},i}return i(t,e),s(t,[{key:"onSignal",value:function(e){this.send(e)}},{key:"getState",value:function(e,t){try{this.stateFn.call(this,e,t)}catch(e){console.error(e)}}}]),t}(c);e.exports={operators:{checkpoint:u}}}])});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8).setImmediate))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var apply = Function.prototype.apply;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// setimmediate attaches itself to the global object
	__webpack_require__(9);
	exports.setImmediate = setImmediate;
	exports.clearImmediate = clearImmediate;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
	    "use strict";

	    if (global.setImmediate) {
	        return;
	    }

	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;

	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }

	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }

	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }

	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }

	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }

	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }

	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };

	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }

	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }

	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };

	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }

	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }

	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }

	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();

	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();

	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();

	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();

	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }

	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(2)))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var v1 = __webpack_require__(11);
	var v4 = __webpack_require__(14);

	var uuid = v4;
	uuid.v1 = v1;
	uuid.v4 = v4;

	module.exports = uuid;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	// Unique ID creation requires a high quality random # generator.  We feature
	// detect to determine the best RNG source, normalizing to a function that
	// returns 128-bits of randomness, since that's what's usually required
	var rng = __webpack_require__(12);
	var bytesToUuid = __webpack_require__(13);

	// **`v1()` - Generate time-based UUID**
	//
	// Inspired by https://github.com/LiosK/UUID.js
	// and http://docs.python.org/library/uuid.html

	// random #'s we need to init node and clockseq
	var _seedBytes = rng();

	// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	var _nodeId = [
	  _seedBytes[0] | 0x01,
	  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
	];

	// Per 4.2.2, randomize (14 bit) clockseq
	var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

	// Previous uuid creation time
	var _lastMSecs = 0, _lastNSecs = 0;

	// See https://github.com/broofa/node-uuid for API details
	function v1(options, buf, offset) {
	  var i = buf && offset || 0;
	  var b = buf || [];

	  options = options || {};

	  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

	  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

	  // Per 4.2.1.2, use count of uuid's generated during the current clock
	  // cycle to simulate higher resolution clock
	  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

	  // Time since last uuid creation (in msecs)
	  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

	  // Per 4.2.1.2, Bump clockseq on clock regression
	  if (dt < 0 && options.clockseq === undefined) {
	    clockseq = clockseq + 1 & 0x3fff;
	  }

	  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	  // time interval
	  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
	    nsecs = 0;
	  }

	  // Per 4.2.1.2 Throw error if too many uuids are requested
	  if (nsecs >= 10000) {
	    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	  }

	  _lastMSecs = msecs;
	  _lastNSecs = nsecs;
	  _clockseq = clockseq;

	  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	  msecs += 12219292800000;

	  // `time_low`
	  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	  b[i++] = tl >>> 24 & 0xff;
	  b[i++] = tl >>> 16 & 0xff;
	  b[i++] = tl >>> 8 & 0xff;
	  b[i++] = tl & 0xff;

	  // `time_mid`
	  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
	  b[i++] = tmh >>> 8 & 0xff;
	  b[i++] = tmh & 0xff;

	  // `time_high_and_version`
	  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	  b[i++] = tmh >>> 16 & 0xff;

	  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	  b[i++] = clockseq >>> 8 | 0x80;

	  // `clock_seq_low`
	  b[i++] = clockseq & 0xff;

	  // `node`
	  var node = options.node || _nodeId;
	  for (var n = 0; n < 6; ++n) {
	    b[i + n] = node[n];
	  }

	  return buf ? buf : bytesToUuid(b);
	}

	module.exports = v1;


/***/ },
/* 12 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {// Unique ID creation requires a high quality random # generator.  In the
	// browser this is a little complicated due to unknown quality of Math.random()
	// and inconsistent support for the `crypto` API.  We do the best we can via
	// feature-detection
	var rng;

	var crypto = global.crypto || global.msCrypto; // for IE 11
	if (crypto && crypto.getRandomValues) {
	  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
	  var rnds8 = new Uint8Array(16);
	  rng = function whatwgRNG() {
	    crypto.getRandomValues(rnds8);
	    return rnds8;
	  };
	}

	if (!rng) {
	  // Math.random()-based (RNG)
	  //
	  // If all else fails, use Math.random().  It's fast, but is of unspecified
	  // quality.
	  var  rnds = new Array(16);
	  rng = function() {
	    for (var i = 0, r; i < 16; i++) {
	      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
	      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	    }

	    return rnds;
	  };
	}

	module.exports = rng;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 13 */
/***/ function(module, exports) {

	/**
	 * Convert array of 16 byte values to UUID string format of the form:
	 * XXXXXXXX-XXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
	 */
	var byteToHex = [];
	for (var i = 0; i < 256; ++i) {
	  byteToHex[i] = (i + 0x100).toString(16).substr(1);
	}

	function bytesToUuid(buf, offset) {
	  var i = offset || 0;
	  var bth = byteToHex;
	  return  bth[buf[i++]] + bth[buf[i++]] +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] +
	          bth[buf[i++]] + bth[buf[i++]] +
	          bth[buf[i++]] + bth[buf[i++]];
	}

	module.exports = bytesToUuid;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var rng = __webpack_require__(12);
	var bytesToUuid = __webpack_require__(13);

	function v4(options, buf, offset) {
	  var i = buf && offset || 0;

	  if (typeof(options) == 'string') {
	    buf = options == 'binary' ? new Array(16) : null;
	    options = null;
	  }
	  options = options || {};

	  var rnds = options.random || (options.rng || rng)();

	  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	  rnds[6] = (rnds[6] & 0x0f) | 0x40;
	  rnds[8] = (rnds[8] & 0x3f) | 0x80;

	  // Copy bytes to buffer, if provided
	  if (buf) {
	    for (var ii = 0; ii < 16; ++ii) {
	      buf[i + ii] = rnds[ii];
	    }
	  }

	  return buf || bytesToUuid(rnds);
	}

	module.exports = v4;


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var Freezer = __webpack_require__(16);
	module.exports = Freezer;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__( 17 ),
		Emitter = __webpack_require__( 18 ),
		Frozen = __webpack_require__( 19 )
	;

	//#build
	var Freezer = function( initialValue, options ) {
		var me = this,
			ops = options || {},
			store = {
				live: ops.live || false,
				freezeInstances: ops.freezeInstances || false
			}
		;

		// Immutable data
		var frozen;
		var pivotTriggers = [], pivotTicking = 0;
		var triggerNow = function( node ){
			var _ = node.__,
				i
			;

			if( _.listener ){
				var prevState = _.listener.prevState || node;
				_.listener.prevState = 0;
				Frozen.trigger( prevState, 'update', node, true );
			}

			for (i = 0; i < _.parents.length; i++) {
				_.store.notify( 'now', _.parents[i] );
			}
		};

		var addToPivotTriggers = function( node ){
			pivotTriggers.push( node );
			if( !pivotTicking ){
				pivotTicking = 1;
				Utils.nextTick( function(){
					pivotTriggers = [];
					pivotTicking = 0;
				});
			}
		};

		store.notify = function notify( eventName, node, options ){
			if( eventName == 'now' ){
				if( pivotTriggers.length ){
					while( pivotTriggers.length ){
						triggerNow( pivotTriggers.shift() );
					}
				}
				else {
					triggerNow( node );
				}

				return node;
			}

			var update = Frozen[eventName]( node, options );

			if( eventName != 'pivot' ){
				var pivot = Utils.findPivot( update );
				if( pivot ) {
					addToPivotTriggers( update );
		  		return pivot;
				}
			}

			return update;
		};

		store.freezeFn = ops.mutable === true ?
			function(){} :
			function( obj ){ Object.freeze( obj ); }
		;

		// Create the frozen object
		frozen = Frozen.freeze( initialValue, store );
		frozen.__.updateRoot = function( prevNode, updated ){
			if( prevNode === frozen ){
				frozen = updated;
			}
		}

		// Listen to its changes immediately
		var listener = frozen.getListener(),
			hub = {}
		;

		Utils.each(['on', 'off', 'once', 'trigger'], function( method ){
			var attrs = {};
			attrs[ method ] = listener[method].bind(listener);
			Utils.addNE( me, attrs );
			Utils.addNE( hub, attrs );
		});

		Utils.addNE( this, {
			get: function(){
				return frozen;
			},
			set: function( node ){
				frozen.reset( node );
			},
			getEventHub: function(){
				return hub;
			}
		});

		Utils.addNE( this, { getData: this.get, setData: this.set } );
	};

	//#build

	module.exports = Freezer;


/***/ },
/* 17 */
/***/ function(module, exports) {

	'use strict';

	//#build
	var global = (new Function("return this")());

	var Utils = {
		extend: function( ob, props ){
			for( var p in props ){
				ob[p] = props[p];
			}
			return ob;
		},

		createNonEnumerable: function( obj, proto ){
			var ne = {};
			for( var key in obj )
				ne[key] = {value: obj[key] };
			return Object.create( proto || {}, ne );
		},

		error: function( message ){
			var err = new Error( message );
			if( console )
				return console.error( err );
			else
				throw err;
		},

		each: function( o, clbk ){
			var i,l,keys;
			if( o && o.constructor == Array ){
				for (i = 0, l = o.length; i < l; i++)
					clbk( o[i], i );
			}
			else {
				keys = Object.keys( o );
				for( i = 0, l = keys.length; i < l; i++ )
					clbk( o[ keys[i] ], keys[i] );
			}
		},

		addNE: function( node, attrs ){
			for( var key in attrs ){
				Object.defineProperty( node, key, {
					enumerable: false,
					configurable: true,
					writable: true,
					value: attrs[ key ]
				});
			}
		},

		/**
		 * Creates non-enumerable property descriptors, to be used by Object.create.
		 * @param  {Object} attrs Properties to create descriptors
		 * @return {Object}       A hash with the descriptors.
		 */
		createNE: function( attrs ){
			var ne = {};

			for( var key in attrs ){
				ne[ key ] = {
					writable: true,
					configurable: true,
					enumerable: false,
					value: attrs[ key ]
				}
			}

			return ne;
		},

		// nextTick - by stagas / public domain
		nextTick: (function () {
	    var queue = [],
			dirty = false,
			fn,
			hasPostMessage = !!global.postMessage && (typeof Window != 'undefined') && (global instanceof Window),
			messageName = 'nexttick',
			trigger = (function () {
				return hasPostMessage
					? function trigger () {
					global.postMessage(messageName, '*');
				}
				: function trigger () {
					setTimeout(function () { processQueue() }, 0);
				};
			}()),
			processQueue = (function () {
				return hasPostMessage
					? function processQueue (event) {
						if (event.source === global && event.data === messageName) {
							event.stopPropagation();
							flushQueue();
						}
					}
					: flushQueue;
	    	})()
	    ;

	    function flushQueue () {
	        while (fn = queue.shift()) {
	            fn();
	        }
	        dirty = false;
	    }

	    function nextTick (fn) {
	        queue.push(fn);
	        if (dirty) return;
	        dirty = true;
	        trigger();
	    }

	    if (hasPostMessage) global.addEventListener('message', processQueue, true);

	    nextTick.removeListener = function () {
	        global.removeEventListener('message', processQueue, true);
	    }

	    return nextTick;
	  })(),

	  findPivot: function( node ){
	  		if( !node || !node.__ )
	  			return;

	  		if( node.__.pivot )
	  			return node;

	  		var found = 0,
	  			parents = node.__.parents,
	  			i = 0,
	  			parent
	  		;

	  		// Look up for the pivot in the parents
	  		while( !found && i < parents.length ){
	  			parent = parents[i];
	  			if( parent.__.pivot )
	  				found = parent;
	  			i++;
	  		}

	  		if( found ){
	  			return found;
	  		}

	  		// If not found, try with the parent's parents
	  		i=0;
	  		while( !found && i < parents.length ){
		  		found = this.findPivot( parents[i] );
		  		i++;
		  	}

	  		return found;
	  },

		isLeaf: function( node, freezeInstances ){
			var cons;
			return !node || !(cons = node.constructor) || (freezeInstances ?
				(cons === String || cons === Number || cons === Boolean) :
				(cons != Object && cons != Array)
			);
		}
	};
	//#build


	module.exports = Utils;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__( 17 );



	//#build


	var BEFOREALL = 'beforeAll',
		AFTERALL = 'afterAll'
	;
	var specialEvents = [BEFOREALL, AFTERALL];

	// The prototype methods are stored in a different object
	// and applied as non enumerable properties later
	var emitterProto = {
		on: function( eventName, listener, once ){
			var listeners = this._events[ eventName ] || [];

			listeners.push({ callback: listener, once: once});
			this._events[ eventName ] =  listeners;

			return this;
		},

		once: function( eventName, listener ){
			return this.on( eventName, listener, true );
		},

		off: function( eventName, listener ){
			if( typeof eventName == 'undefined' ){
				this._events = {};
			}
			else if( typeof listener == 'undefined' ) {
				this._events[ eventName ] = [];
			}
			else {
				var listeners = this._events[ eventName ] || [],
					i
				;

				for (i = listeners.length - 1; i >= 0; i--) {
					if( listeners[i].callback === listener )
						listeners.splice( i, 1 );
				}
			}

			return this;
		},

		trigger: function( eventName ){
			var args = [].slice.call( arguments, 1 ),
				listeners = this._events[ eventName ] || [],
				onceListeners = [],
				special = specialEvents.indexOf( eventName ) != -1,
				i, listener, returnValue, lastValue
			;

			special || this.trigger.apply( this, [BEFOREALL, eventName].concat( args ) );

			// Call listeners
			for (i = 0; i < listeners.length; i++) {
				listener = listeners[i];

				if( listener.callback )
					lastValue = listener.callback.apply( this, args );
				else {
					// If there is not a callback, remove!
					listener.once = true;
				}

				if( listener.once )
					onceListeners.push( i );

				if( lastValue !== undefined ){
					returnValue = lastValue;
				}
			}

			// Remove listeners marked as once
			for( i = onceListeners.length - 1; i >= 0; i-- ){
				listeners.splice( onceListeners[i], 1 );
			}

			special || this.trigger.apply( this, [AFTERALL, eventName].concat( args ) );

			return returnValue;
		}
	};

	// Methods are not enumerable so, when the stores are
	// extended with the emitter, they can be iterated as
	// hashmaps
	var Emitter = Utils.createNonEnumerable( emitterProto );
	//#build

	module.exports = Emitter;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__( 17 ),
		nodeCreator = __webpack_require__( 20),
		Emitter = __webpack_require__(18)
	;

	//#build
	var Frozen = {
		freeze: function( node, store ){
			if( node && node.__ ){
				return node;
			}

			var me = this,
				frozen = nodeCreator.clone(node)
			;

			Utils.addNE( frozen, { __: {
				listener: false,
				parents: [],
				store: store
			}});

			// Freeze children
			Utils.each( node, function( child, key ){
				if( !Utils.isLeaf( child, store.freezeInstances ) ){
					child = me.freeze( child, store );
				}

				if( child && child.__ ){
					me.addParent( child, frozen );
				}

				frozen[ key ] = child;
			});

			store.freezeFn( frozen );

			return frozen;
		},

		merge: function( node, attrs ){
			var _ = node.__,
				trans = _.trans,

				// Clone the attrs to not modify the argument
				attrs = Utils.extend( {}, attrs)
			;

			if( trans ){
				for( var attr in attrs )
					trans[ attr ] = attrs[ attr ];
				return node;
			}

			var me = this,
				frozen = this.copyMeta( node ),
				store = _.store,
				val, key, isFrozen
			;

			Utils.each( node, function( child, key ){
				isFrozen = child && child.__;

				if( isFrozen ){
					me.removeParent( child, node );
				}

				val = attrs[ key ];
				if( !val ){
					if( isFrozen )
						me.addParent( child, frozen );
					return frozen[ key ] = child;
				}

				if( !Utils.isLeaf( val, store.freezeInstances ) )
					val = me.freeze( val, store );

				if( val && val.__ )
					me.addParent( val, frozen );

				delete attrs[ key ];

				frozen[ key ] = val;
			});


			for( key in attrs ) {
				val = attrs[ key ];

				if( !Utils.isLeaf( val, store.freezeInstances ) )
					val = me.freeze( val, store );

				if( val && val.__ )
					me.addParent( val, frozen );

				frozen[ key ] = val;
			}

			_.store.freezeFn( frozen );

			this.refreshParents( node, frozen );

			return frozen;
		},

		replace: function( node, replacement ) {
			var me = this,
				_ = node.__,
				frozen = replacement
			;

			if( !Utils.isLeaf( replacement, _.store.freezeInstances ) ) {

				frozen = me.freeze( replacement, _.store );
				frozen.__.parents = _.parents;
				frozen.__.updateRoot = _.updateRoot;

				// Add the current listener if exists, replacing a
				// previous listener in the frozen if existed
				if( _.listener )
					frozen.__.listener = _.listener;
			}
			if( frozen ){
				this.fixChildren( frozen, node );
			}
			this.refreshParents( node, frozen );

			return frozen;
		},

		remove: function( node, attrs ){
			var trans = node.__.trans;
			if( trans ){
				for( var l = attrs.length - 1; l >= 0; l-- )
					delete trans[ attrs[l] ];
				return node;
			}

			var me = this,
				frozen = this.copyMeta( node ),
				isFrozen
			;

			Utils.each( node, function( child, key ){
				isFrozen = child && child.__;

				if( isFrozen ){
					me.removeParent( child, node );
				}

				if( attrs.indexOf( key ) != -1 ){
					return;
				}

				if( isFrozen )
					me.addParent( child, frozen );

				frozen[ key ] = child;
			});

			node.__.store.freezeFn( frozen );
			this.refreshParents( node, frozen );

			return frozen;
		},

		splice: function( node, args ){
			var _ = node.__,
				trans = _.trans
			;

			if( trans ){
				trans.splice.apply( trans, args );
				return node;
			}

			var me = this,
				frozen = this.copyMeta( node ),
				index = args[0],
				deleteIndex = index + args[1],
				child
			;

			// Clone the array
			Utils.each( node, function( child, i ){

				if( child && child.__ ){
					me.removeParent( child, node );

					// Skip the nodes to delete
					if( i < index || i>= deleteIndex )
						me.addParent( child, frozen );
				}

				frozen[i] = child;
			});

			// Prepare the new nodes
			if( args.length > 1 ){
				for (var i = args.length - 1; i >= 2; i--) {
					child = args[i];

					if( !Utils.isLeaf( child, _.store.freezeInstances ) )
						child = this.freeze( child, _.store );

					if( child && child.__ )
						this.addParent( child, frozen );

					args[i] = child;
				}
			}

			// splice
			Array.prototype.splice.apply( frozen, args );

			_.store.freezeFn( frozen );
			this.refreshParents( node, frozen );

			return frozen;
		},

		transact: function( node ) {
			var me = this,
				transacting = node.__.trans,
				trans
			;

			if( transacting )
				return transacting;

			trans = node.constructor == Array ? [] : {};

			Utils.each( node, function( child, key ){
				trans[ key ] = child;
			});

			node.__.trans = trans;

			// Call run automatically in case
			// the user forgot about it
			Utils.nextTick( function(){
				if( node.__.trans )
					me.run( node );
			});

			return trans;
		},

		run: function( node ) {
			var me = this,
				trans = node.__.trans
			;

			if( !trans )
				return node;

			// Remove the node as a parent
			Utils.each( trans, function( child, key ){
				if( child && child.__ ){
					me.removeParent( child, node );
				}
			});

			delete node.__.trans;

			var result = this.replace( node, trans );
			return result;
		},

		pivot: function( node ){
			node.__.pivot = 1;
			this.unpivot( node );
			return node;
		},

		unpivot: function( node ){
			Utils.nextTick( function(){
				node.__.pivot = 0;
			});
		},

		refresh: function( node, oldChild, newChild ){
			var me = this,
				trans = node.__.trans,
				found = 0
			;

			if( trans ){

				Utils.each( trans, function( child, key ){
					if( found ) return;

					if( child === oldChild ){

						trans[ key ] = newChild;
						found = 1;

						if( newChild && newChild.__ )
							me.addParent( newChild, node );
					}
				});

				return node;
			}

			var frozen = this.copyMeta( node ),
				replacement, __
			;

			Utils.each( node, function( child, key ){
				if( child === oldChild ){
					child = newChild;
				}

				if( child && (__ = child.__) ){
					me.removeParent( child, node );
					me.addParent( child, frozen );
				}

				frozen[ key ] = child;
			});

			node.__.store.freezeFn( frozen );

			this.refreshParents( node, frozen );
		},

		fixChildren: function( node, oldNode ){
			var me = this;
			Utils.each( node, function( child ){
				if( !child || !child.__ )
					return;

				// Update parents in all children no matter the child
				// is linked to the node or not.
				me.fixChildren( child );

				if( child.__.parents.length == 1 )
					return child.__.parents = [ node ];

				if( oldNode )
					me.removeParent( child, oldNode );

				me.addParent( child, node );
			});
		},

		copyMeta: function( node ){
			var me = this,
				frozen = nodeCreator.clone( node ),
				_ = node.__
			;

			Utils.addNE( frozen, {__: {
				store: _.store,
				updateRoot: _.updateRoot,
				listener: _.listener,
				parents: _.parents.slice( 0 ),
				trans: _.trans,
				pivot: _.pivot,
			}});

			if( _.pivot )
				this.unpivot( frozen );

			return frozen;
		},

		refreshParents: function( oldChild, newChild ){
			var _ = oldChild.__,
				parents = _.parents.length,
				i
			;

			if( oldChild.__.updateRoot ){
				oldChild.__.updateRoot( oldChild, newChild );
			}
			if( newChild ){
				this.trigger( oldChild, 'update', newChild, _.store.live );
			}
			if( parents ){
				for (i = parents - 1; i >= 0; i--) {
					this.refresh( _.parents[i], oldChild, newChild );
				}
			}
		},

		removeParent: function( node, parent ){
			var parents = node.__.parents,
				index = parents.indexOf( parent )
			;

			if( index != -1 ){
				parents.splice( index, 1 );
			}
		},

		addParent: function( node, parent ){
			var parents = node.__.parents,
				index = parents.indexOf( parent )
			;

			if( index == -1 ){
				parents[ parents.length ] = parent;
			}
		},

		trigger: function( node, eventName, param, now ){
			var listener = node.__.listener;
			if( !listener )
				return;

			var ticking = listener.ticking;

			if( now ){
				if( ticking || param ){
					listener.ticking = 0;
					listener.trigger( eventName, ticking || param, node );
				}
				return;
			}

			listener.ticking = param;
			if( !listener.prevState ){
				listener.prevState = node;
			}

			if( !ticking ){
				Utils.nextTick( function(){
					if( listener.ticking ){
						var updated = listener.ticking,
							prevState = listener.prevState
						;

						listener.ticking = 0;
						listener.prevState = 0;

						listener.trigger( eventName, updated, node );
					}
				});
			}
		},

		createListener: function( frozen ){
			var l = frozen.__.listener;

			if( !l ) {
				l = Object.create(Emitter, {
					_events: {
						value: {},
						writable: true
					}
				});

				frozen.__.listener = l;
			}

			return l;
		}
	};

	nodeCreator.init( Frozen );
	//#build

	module.exports = Frozen;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__( 17 );

	//#build
	var nodeCreator = {
		init: function( Frozen ){

			var commonMethods = {
				set: function( attr, value ){
					var attrs = attr,
						update = this.__.trans
					;

					if( typeof attr != 'object' ){
						attrs = {};
						attrs[ attr ] = value;
					}

					if( !update ){
						for( var key in attrs ){
							update = update || this[ key ] !== attrs[ key ];
						}

						// No changes, just return the node
						if( !update )
							return Utils.findPivot( this ) || this;
					}

					return this.__.store.notify( 'merge', this, attrs );
				},

				reset: function( attrs ) {
					return this.__.store.notify( 'replace', this, attrs );
				},

				getListener: function(){
					return Frozen.createListener( this );
				},

				toJS: function(){
					var js;
					if( this.constructor == Array ){
						js = new Array( this.length );
					}
					else {
						js = {};
					}

					Utils.each( this, function( child, i ){
						if( child && child.__ )
							js[ i ] = child.toJS();
						else
							js[ i ] = child;
					});

					return js;
				},

				transact: function(){
					return this.__.store.notify( 'transact', this );
				},

				run: function(){
					return this.__.store.notify( 'run', this );
				},

				now: function(){
					return this.__.store.notify( 'now', this );
				},

				pivot: function(){
					return this.__.store.notify( 'pivot', this );
				}
			};

			var arrayMethods = Utils.extend({
				push: function( el ){
					return this.append( [el] );
				},

				append: function( els ){
					if( els && els.length )
						return this.__.store.notify( 'splice', this, [this.length, 0].concat( els ) );
					return this;
				},

				pop: function(){
					if( !this.length )
						return this;

					return this.__.store.notify( 'splice', this, [this.length -1, 1] );
				},

				unshift: function( el ){
					return this.prepend( [el] );
				},

				prepend: function( els ){
					if( els && els.length )
						return this.__.store.notify( 'splice', this, [0, 0].concat( els ) );
					return this;
				},

				shift: function(){
					if( !this.length )
						return this;

					return this.__.store.notify( 'splice', this, [0, 1] );
				},

				splice: function( index, toRemove, toAdd ){
					return this.__.store.notify( 'splice', this, arguments );
				}
			}, commonMethods );

			var FrozenArray = Object.create( Array.prototype, Utils.createNE( arrayMethods ) );

			var objectMethods = Utils.createNE( Utils.extend({
				remove: function( keys ){
					var filtered = [],
						k = keys
					;

					if( keys.constructor != Array )
						k = [ keys ];

					for( var i = 0, l = k.length; i<l; i++ ){
						if( this.hasOwnProperty( k[i] ) )
							filtered.push( k[i] );
					}

					if( filtered.length )
						return this.__.store.notify( 'remove', this, filtered );
					return this;
				}
			}, commonMethods));

			var FrozenObject = Object.create( Object.prototype, objectMethods );

			var createArray = (function(){
				// fast version
				if( [].__proto__ )
					return function( length ){
						var arr = new Array( length );
						arr.__proto__ = FrozenArray;
						return arr;
					}

				// slow version for older browsers
				return function( length ){
					var arr = new Array( length );

					for( var m in arrayMethods ){
						arr[ m ] = arrayMethods[ m ];
					}

					return arr;
				}
			})();

			this.clone = function( node ){
				var cons = node.constructor;
				if( cons == Array ){
					return createArray( node.length );
				}
				else {
					if( cons === Object ){
						return Object.create( FrozenObject );
					}
					// Class instances
					else {
						return Object.create( cons.prototype, objectMethods );
					}
				}
			}
		}
	}
	//#build

	module.exports = nodeCreator;


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory){
	  'use strict';

	  /*istanbul ignore next:cant test*/
	  if (typeof module === 'object' && typeof module.exports === 'object') {
	    module.exports = factory();
	  } else if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else {
	    // Browser globals
	    root.objectPath = factory();
	  }
	})(this, function(){
	  'use strict';

	  var toStr = Object.prototype.toString;
	  function hasOwnProperty(obj, prop) {
	    if(obj == null) {
	      return false
	    }
	    //to handle objects with null prototypes (too edge case?)
	    return Object.prototype.hasOwnProperty.call(obj, prop)
	  }

	  function isEmpty(value){
	    if (!value) {
	      return true;
	    }
	    if (isArray(value) && value.length === 0) {
	        return true;
	    } else if (typeof value !== 'string') {
	        for (var i in value) {
	            if (hasOwnProperty(value, i)) {
	                return false;
	            }
	        }
	        return true;
	    }
	    return false;
	  }

	  function toString(type){
	    return toStr.call(type);
	  }

	  function isObject(obj){
	    return typeof obj === 'object' && toString(obj) === "[object Object]";
	  }

	  var isArray = Array.isArray || function(obj){
	    /*istanbul ignore next:cant test*/
	    return toStr.call(obj) === '[object Array]';
	  }

	  function isBoolean(obj){
	    return typeof obj === 'boolean' || toString(obj) === '[object Boolean]';
	  }

	  function getKey(key){
	    var intKey = parseInt(key);
	    if (intKey.toString() === key) {
	      return intKey;
	    }
	    return key;
	  }

	  function factory(options) {
	    options = options || {}

	    var objectPath = function(obj) {
	      return Object.keys(objectPath).reduce(function(proxy, prop) {
	        if(prop === 'create') {
	          return proxy;
	        }

	        /*istanbul ignore else*/
	        if (typeof objectPath[prop] === 'function') {
	          proxy[prop] = objectPath[prop].bind(objectPath, obj);
	        }

	        return proxy;
	      }, {});
	    };

	    function hasShallowProperty(obj, prop) {
	      return (options.includeInheritedProps || (typeof prop === 'number' && Array.isArray(obj)) || hasOwnProperty(obj, prop))
	    }

	    function getShallowProperty(obj, prop) {
	      if (hasShallowProperty(obj, prop)) {
	        return obj[prop];
	      }
	    }

	    function set(obj, path, value, doNotReplace){
	      if (typeof path === 'number') {
	        path = [path];
	      }
	      if (!path || path.length === 0) {
	        return obj;
	      }
	      if (typeof path === 'string') {
	        return set(obj, path.split('.').map(getKey), value, doNotReplace);
	      }
	      var currentPath = path[0];
	      var currentValue = getShallowProperty(obj, currentPath);
	      if (path.length === 1) {
	        if (currentValue === void 0 || !doNotReplace) {
	          obj[currentPath] = value;
	        }
	        return currentValue;
	      }

	      if (currentValue === void 0) {
	        //check if we assume an array
	        if(typeof path[1] === 'number') {
	          obj[currentPath] = [];
	        } else {
	          obj[currentPath] = {};
	        }
	      }

	      return set(obj[currentPath], path.slice(1), value, doNotReplace);
	    }

	    objectPath.has = function (obj, path) {
	      if (typeof path === 'number') {
	        path = [path];
	      } else if (typeof path === 'string') {
	        path = path.split('.');
	      }

	      if (!path || path.length === 0) {
	        return !!obj;
	      }

	      for (var i = 0; i < path.length; i++) {
	        var j = getKey(path[i]);

	        if((typeof j === 'number' && isArray(obj) && j < obj.length) ||
	          (options.includeInheritedProps ? (j in Object(obj)) : hasOwnProperty(obj, j))) {
	          obj = obj[j];
	        } else {
	          return false;
	        }
	      }

	      return true;
	    };

	    objectPath.ensureExists = function (obj, path, value){
	      return set(obj, path, value, true);
	    };

	    objectPath.set = function (obj, path, value, doNotReplace){
	      return set(obj, path, value, doNotReplace);
	    };

	    objectPath.insert = function (obj, path, value, at){
	      var arr = objectPath.get(obj, path);
	      at = ~~at;
	      if (!isArray(arr)) {
	        arr = [];
	        objectPath.set(obj, path, arr);
	      }
	      arr.splice(at, 0, value);
	    };

	    objectPath.empty = function(obj, path) {
	      if (isEmpty(path)) {
	        return void 0;
	      }
	      if (obj == null) {
	        return void 0;
	      }

	      var value, i;
	      if (!(value = objectPath.get(obj, path))) {
	        return void 0;
	      }

	      if (typeof value === 'string') {
	        return objectPath.set(obj, path, '');
	      } else if (isBoolean(value)) {
	        return objectPath.set(obj, path, false);
	      } else if (typeof value === 'number') {
	        return objectPath.set(obj, path, 0);
	      } else if (isArray(value)) {
	        value.length = 0;
	      } else if (isObject(value)) {
	        for (i in value) {
	          if (hasShallowProperty(value, i)) {
	            delete value[i];
	          }
	        }
	      } else {
	        return objectPath.set(obj, path, null);
	      }
	    };

	    objectPath.push = function (obj, path /*, values */){
	      var arr = objectPath.get(obj, path);
	      if (!isArray(arr)) {
	        arr = [];
	        objectPath.set(obj, path, arr);
	      }

	      arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));
	    };

	    objectPath.coalesce = function (obj, paths, defaultValue) {
	      var value;

	      for (var i = 0, len = paths.length; i < len; i++) {
	        if ((value = objectPath.get(obj, paths[i])) !== void 0) {
	          return value;
	        }
	      }

	      return defaultValue;
	    };

	    objectPath.get = function (obj, path, defaultValue){
	      if (typeof path === 'number') {
	        path = [path];
	      }
	      if (!path || path.length === 0) {
	        return obj;
	      }
	      if (obj == null) {
	        return defaultValue;
	      }
	      if (typeof path === 'string') {
	        return objectPath.get(obj, path.split('.'), defaultValue);
	      }

	      var currentPath = getKey(path[0]);
	      var nextObj = getShallowProperty(obj, currentPath)
	      if (nextObj === void 0) {
	        return defaultValue;
	      }

	      if (path.length === 1) {
	        return nextObj;
	      }

	      return objectPath.get(obj[currentPath], path.slice(1), defaultValue);
	    };

	    objectPath.del = function del(obj, path) {
	      if (typeof path === 'number') {
	        path = [path];
	      }

	      if (obj == null) {
	        return obj;
	      }

	      if (isEmpty(path)) {
	        return obj;
	      }
	      if(typeof path === 'string') {
	        return objectPath.del(obj, path.split('.'));
	      }

	      var currentPath = getKey(path[0]);
	      if (!hasShallowProperty(obj, currentPath)) {
	        return obj;
	      }

	      if(path.length === 1) {
	        if (isArray(obj)) {
	          obj.splice(currentPath, 1);
	        } else {
	          delete obj[currentPath];
	        }
	      } else {
	        return objectPath.del(obj[currentPath], path.slice(1));
	      }

	      return obj;
	    }

	    return objectPath;
	  }

	  var mod = factory();
	  mod.create = factory;
	  mod.withInheritedProps = factory({includeInheritedProps: true})
	  return mod;
	});


/***/ },
/* 22 */
/***/ function(module, exports) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var View = function () {
	  function View(selector, name) {
	    _classCallCheck(this, View);

	    this.selector = selector;
	    this.name = name;
	  }

	  /* render the view with state */


	  _createClass(View, [{
	    key: "render",
	    value: function render(state) {}

	    /* update the view with state */

	  }, {
	    key: "update",
	    value: function update(state) {}

	    /* send UI event (an action) */

	  }, {
	    key: "send",
	    value: function send(action) {}

	    /* add msg handler to handle actions */

	  }, {
	    key: "addActionHandler",
	    value: function addActionHandler(actionType, handler) {}
	  }]);

	  return View;
	}();

	module.exports = View;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(24);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(54);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _CollarView = __webpack_require__(5);

	var _CollarView2 = _interopRequireDefault(_CollarView);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Counter = function (_React$Component) {
	  _inherits(Counter, _React$Component);

	  function Counter(props) {
	    _classCallCheck(this, Counter);

	    var _this = _possibleConstructorReturn(this, (Counter.__proto__ || Object.getPrototypeOf(Counter)).call(this, props));

	    _this.state = {
	      count: 0
	    };
	    return _this;
	  }

	  _createClass(Counter, [{
	    key: 'onDecrement',
	    value: function onDecrement() {
	      this.props.view.send({
	        actionType: 'DECREMENT'
	      });
	    }
	  }, {
	    key: 'onIncrement',
	    value: function onIncrement() {
	      this.props.view.send({
	        actionType: 'INCREMENT'
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        { className: 'react-counter' },
	        _react2.default.createElement(
	          'div',
	          { className: 'react-counter-value' },
	          _react2.default.createElement(
	            'h1',
	            { className: 'counter-value' },
	            this.state.count
	          )
	        ),
	        _react2.default.createElement(
	          'button',
	          { className: 'react-counter-dec-btn press', onClick: this.onDecrement.bind(this) },
	          '-'
	        ),
	        _react2.default.createElement(
	          'span',
	          null,
	          ' '
	        ),
	        _react2.default.createElement(
	          'button',
	          { className: 'react-counter-inc-btn press', onClick: this.onIncrement.bind(this) },
	          '+'
	        )
	      );
	    }
	  }]);

	  return Counter;
	}(_react2.default.Component);

	module.exports = function (selector, name) {
	  var counter = new _CollarView2.default(selector, name);

	  var reactComp = null;
	  counter.setRenderer(function (state, done) {
	    reactComp = _reactDom2.default.render(_react2.default.createElement(Counter, { view: counter }), document.querySelector(selector));
	    done();
	  });

	  counter.setUpdater(function (state, done) {
	    reactComp.setState(state);
	    done();
	  });

	  return counter;
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(25);


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(26);

	var ReactChildren = __webpack_require__(27);
	var ReactComponent = __webpack_require__(40);
	var ReactPureComponent = __webpack_require__(43);
	var ReactClass = __webpack_require__(44);
	var ReactDOMFactories = __webpack_require__(46);
	var ReactElement = __webpack_require__(31);
	var ReactPropTypes = __webpack_require__(51);
	var ReactVersion = __webpack_require__(52);

	var onlyChild = __webpack_require__(53);
	var warning = __webpack_require__(33);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(47);
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;

	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 26 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var PooledClass = __webpack_require__(28);
	var ReactElement = __webpack_require__(31);

	var emptyFunction = __webpack_require__(34);
	var traverseAllChildren = __webpack_require__(37);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(29);

	var invariant = __webpack_require__(30);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 29 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(26);

	var ReactCurrentOwner = __webpack_require__(32);

	var warning = __webpack_require__(33);
	var canDefineProperty = __webpack_require__(35);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var REACT_ELEMENT_TYPE = __webpack_require__(36);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 32 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(34);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };

	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }

	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }

	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }

	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 34 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(29);

	var ReactCurrentOwner = __webpack_require__(32);
	var REACT_ELEMENT_TYPE = __webpack_require__(36);

	var getIteratorFn = __webpack_require__(38);
	var invariant = __webpack_require__(30);
	var KeyEscapeUtils = __webpack_require__(39);
	var warning = __webpack_require__(33);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(29);

	var ReactNoopUpdateQueue = __webpack_require__(41);

	var canDefineProperty = __webpack_require__(35);
	var emptyObject = __webpack_require__(42);
	var invariant = __webpack_require__(30);
	var warning = __webpack_require__(33);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var warning = __webpack_require__(33);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(26);

	var ReactComponent = __webpack_require__(40);
	var ReactNoopUpdateQueue = __webpack_require__(41);

	var emptyObject = __webpack_require__(42);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = ReactPureComponent;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(29),
	    _assign = __webpack_require__(26);

	var ReactComponent = __webpack_require__(40);
	var ReactElement = __webpack_require__(31);
	var ReactPropTypeLocationNames = __webpack_require__(45);
	var ReactNoopUpdateQueue = __webpack_require__(41);

	var emptyObject = __webpack_require__(42);
	var invariant = __webpack_require__(30);
	var warning = __webpack_require__(33);

	var MIXINS_KEY = 'mixins';

	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: 'DEFINE_ONCE',

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}

	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;

	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }

	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};

	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(31);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(47);
	  createDOMFactory = ReactElementValidator.createFactory;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),

	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(32);
	var ReactComponentTreeHook = __webpack_require__(48);
	var ReactElement = __webpack_require__(31);

	var checkReactTypeSpec = __webpack_require__(49);

	var canDefineProperty = __webpack_require__(35);
	var getIteratorFn = __webpack_require__(38);
	var warning = __webpack_require__(33);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      if (typeof type !== 'function' && typeof type !== 'string') {
	        var info = '';
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }
	        info += getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
	      }
	    }

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(29);

	var ReactCurrentOwner = __webpack_require__(32);

	var invariant = __webpack_require__(30);
	var warning = __webpack_require__(33);

	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}

	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;

	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();

	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };

	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};

	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };

	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };

	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}

	var unmountedIDs = [];

	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;

	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;

	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },


	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};

	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(29);

	var ReactPropTypeLocationNames = __webpack_require__(45);
	var ReactPropTypesSecret = __webpack_require__(50);

	var invariant = __webpack_require__(30);
	var warning = __webpack_require__(33);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(48);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(48);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 50 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(31);
	var ReactPropTypeLocationNames = __webpack_require__(45);
	var ReactPropTypesSecret = __webpack_require__(50);

	var emptyFunction = __webpack_require__(34);
	var getIteratorFn = __webpack_require__(38);
	var warning = __webpack_require__(33);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	  symbol: createPrimitiveTypeChecker('symbol'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/

	/**
	 * We use an Error-like object for backward compatibility as people may call
	 * PropTypes directly and inspect their output. However we don't use real
	 * Errors anymore. We don't inspect their stack anyway, and creating them
	 * is prohibitively expensive if they are created too often, such as what
	 * happens in oneOfType() for any type before the one that matched.
	 */
	function PropTypeError(message) {
	  this.message = message;
	  this.stack = '';
	}
	// Make `instanceof Error` still work for returned errors.
	PropTypeError.prototype = Error.prototype;

	function createChainableTypeChecker(validate) {
	  if (process.env.NODE_ENV !== 'production') {
	    var manualPropTypeCallCache = {};
	  }
	  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (process.env.NODE_ENV !== 'production') {
	      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
	        var cacheKey = componentName + ':' + propName;
	        if (!manualPropTypeCallCache[cacheKey]) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
	          manualPropTypeCallCache[cacheKey] = true;
	        }
	      }
	    }
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        if (props[propName] === null) {
	          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	        }
	        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName, secret) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!ReactElement.isValidElement(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	function isSymbol(propType, propValue) {
	  // Native Symbol.
	  if (propType === 'symbol') {
	    return true;
	  }

	  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	  if (propValue['@@toStringTag'] === 'Symbol') {
	    return true;
	  }

	  // Fallback for non-spec compliant Symbols which are polyfilled.
	  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	    return true;
	  }

	  return false;
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  if (isSymbol(propType, propValue)) {
	    return 'symbol';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 52 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.4.2';

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(29);

	var ReactElement = __webpack_require__(31);

	var invariant = __webpack_require__(30);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(55);


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(56);
	var ReactDefaultInjection = __webpack_require__(61);
	var ReactMount = __webpack_require__(193);
	var ReactReconciler = __webpack_require__(85);
	var ReactUpdates = __webpack_require__(82);
	var ReactVersion = __webpack_require__(198);

	var findDOMNode = __webpack_require__(199);
	var getHostComponentFromComposite = __webpack_require__(200);
	var renderSubtreeIntoContainer = __webpack_require__(201);
	var warning = __webpack_require__(69);

	ReactDefaultInjection.inject();

	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(73);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ReactInstrumentation = __webpack_require__(88);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(202);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(203);
	  var ReactDOMInvalidARIAHook = __webpack_require__(204);

	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}

	module.exports = ReactDOM;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var DOMProperty = __webpack_require__(58);
	var ReactDOMComponentFlags = __webpack_require__(60);

	var invariant = __webpack_require__(59);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;

	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

	/**
	 * Check if a given node should be cached.
	 */
	function shouldPrecacheNode(node, nodeID) {
	  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
	}

	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}

	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}

	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}

	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (shouldPrecacheNode(childNode, childID)) {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }

	  return closest;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  if (inst._hostNode) {
	    return inst._hostNode;
	  }

	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }

	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }

	  return inst._hostNode;
	}

	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};

	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 57 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var invariant = __webpack_require__(59);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 60 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};

	module.exports = ReactDOMComponentFlags;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = __webpack_require__(62);
	var BeforeInputEventPlugin = __webpack_require__(63);
	var ChangeEventPlugin = __webpack_require__(81);
	var DefaultEventPluginOrder = __webpack_require__(98);
	var EnterLeaveEventPlugin = __webpack_require__(99);
	var HTMLDOMPropertyConfig = __webpack_require__(104);
	var ReactComponentBrowserEnvironment = __webpack_require__(105);
	var ReactDOMComponent = __webpack_require__(118);
	var ReactDOMComponentTree = __webpack_require__(56);
	var ReactDOMEmptyComponent = __webpack_require__(164);
	var ReactDOMTreeTraversal = __webpack_require__(165);
	var ReactDOMTextComponent = __webpack_require__(166);
	var ReactDefaultBatchingStrategy = __webpack_require__(167);
	var ReactEventListener = __webpack_require__(168);
	var ReactInjection = __webpack_require__(171);
	var ReactReconcileTransaction = __webpack_require__(172);
	var SVGDOMPropertyConfig = __webpack_require__(180);
	var SelectEventPlugin = __webpack_require__(181);
	var SimpleEventPlugin = __webpack_require__(182);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}

	module.exports = {
	  inject: inject
	};

/***/ },
/* 62 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};

	module.exports = ARIADOMPropertyConfig;

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(64);
	var ExecutionEnvironment = __webpack_require__(73);
	var FallbackCompositionState = __webpack_require__(74);
	var SyntheticCompositionEvent = __webpack_require__(78);
	var SyntheticInputEvent = __webpack_require__(80);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(65);
	var EventPluginUtils = __webpack_require__(67);

	var accumulateInto = __webpack_require__(71);
	var forEachAccumulated = __webpack_require__(72);
	var warning = __webpack_require__(69);

	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var EventPluginRegistry = __webpack_require__(66);
	var EventPluginUtils = __webpack_require__(67);
	var ReactErrorUtils = __webpack_require__(68);

	var accumulateInto = __webpack_require__(71);
	var forEachAccumulated = __webpack_require__(72);
	var invariant = __webpack_require__(59);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },

	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }

	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }

	      delete listenerBank[registrationName][key];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var invariant = __webpack_require__(59);

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var ReactErrorUtils = __webpack_require__(68);

	var invariant = __webpack_require__(59);
	var warning = __webpack_require__(69);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};

	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}

	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      // $FlowFixMe https://github.com/facebook/flow/issues/2336
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(70);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };

	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }

	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }

	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }

	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 70 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var invariant = __webpack_require__(59);

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 72 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */

	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	module.exports = forEachAccumulated;

/***/ },
/* 73 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(75);

	var PooledClass = __webpack_require__(76);

	var getTextContentAccessor = __webpack_require__(77);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 75 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var invariant = __webpack_require__(59);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(73);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(79);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(75);

	var PooledClass = __webpack_require__(76);

	var emptyFunction = __webpack_require__(70);
	var warning = __webpack_require__(69);

	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';

	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;

	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(79);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(65);
	var EventPropagators = __webpack_require__(64);
	var ExecutionEnvironment = __webpack_require__(73);
	var ReactDOMComponentTree = __webpack_require__(56);
	var ReactUpdates = __webpack_require__(82);
	var SyntheticEvent = __webpack_require__(79);

	var getEventTarget = __webpack_require__(95);
	var isEventSupported = __webpack_require__(96);
	var isTextInputElement = __webpack_require__(97);

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
	}

	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}

	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;

	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }

	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topInput') {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}

	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topClick') {
	    return targetInst;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57),
	    _assign = __webpack_require__(75);

	var CallbackQueue = __webpack_require__(83);
	var PooledClass = __webpack_require__(76);
	var ReactFeatureFlags = __webpack_require__(84);
	var ReactReconciler = __webpack_require__(85);
	var Transaction = __webpack_require__(94);

	var invariant = __webpack_require__(59);

	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}

	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

	    if (markerName) {
	      console.timeEnd(markerName);
	    }

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PooledClass = __webpack_require__(76);

	var invariant = __webpack_require__(59);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */

	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);

	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */


	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };

	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };

	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };

	  /**
	   * `PooledClass` looks for this.
	   */


	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };

	  return CallbackQueue;
	}();

	module.exports = PooledClass.addPoolingTo(CallbackQueue);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 84 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};

	module.exports = ReactFeatureFlags;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactRef = __webpack_require__(86);
	var ReactInstrumentation = __webpack_require__(88);

	var warning = __webpack_require__(69);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },

	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }

	};

	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactOwner = __webpack_require__(87);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }

	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }

	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var invariant = __webpack_require__(59);

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// Trust the developer to only use ReactInstrumentation with a __DEV__ check

	var debugTool = null;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactDebugTool = __webpack_require__(89);
	  debugTool = ReactDebugTool;
	}

	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactInvalidSetStateWarningHook = __webpack_require__(90);
	var ReactHostOperationHistoryHook = __webpack_require__(91);
	var ReactComponentTreeHook = __webpack_require__(48);
	var ExecutionEnvironment = __webpack_require__(73);

	var performanceNow = __webpack_require__(92);
	var warning = __webpack_require__(69);

	var hooks = [];
	var didHookThrowForEvent = {};

	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}

	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}

	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;

	var lifeCycleTimerHasWarned = false;

	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}

	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}

	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();

	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }

	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }

	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}

	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}

	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;

	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure =
	// $FlowFixMe https://github.com/facebook/flow/issues/2345
	typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

	function shouldMark(debugID) {
	  if (!isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || typeof element !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}

	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}

	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }

	  performance.clearMarks(markName);
	  performance.clearMeasures(measurementName);
	}

	var ReactDebugTool = {
	  addHook: function (hook) {
	    hooks.push(hook);
	  },
	  removeHook: function (hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }

	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }

	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function (debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};

	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}

	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var warning = __webpack_require__(69);

	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;

	  var warnInvalidSetState = function () {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}

	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};

	module.exports = ReactInvalidSetStateWarningHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 91 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var history = [];

	var ReactHostOperationHistoryHook = {
	  onHostOperation: function (operation) {
	    history.push(operation);
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }

	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};

	module.exports = ReactHostOperationHistoryHook;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var performance = __webpack_require__(93);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(73);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var invariant = __webpack_require__(59);

	var OBSERVED_ERROR = {};

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	module.exports = TransactionImpl;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 95 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(73);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 97 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */

	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	module.exports = isTextInputElement;

/***/ },
/* 98 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */

	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(64);
	var ReactDOMComponentTree = __webpack_require__(56);
	var SyntheticMouseEvent = __webpack_require__(100);

	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(101);
	var ViewportMetrics = __webpack_require__(102);

	var getEventModifierState = __webpack_require__(103);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(79);

	var getEventTarget = __webpack_require__(95);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 103 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(58);

	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,

	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {}
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(106);
	var ReactDOMIDOperations = __webpack_require__(117);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMLazyTree = __webpack_require__(107);
	var Danger = __webpack_require__(113);
	var ReactDOMComponentTree = __webpack_require__(56);
	var ReactInstrumentation = __webpack_require__(88);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(110);
	var setInnerHTML = __webpack_require__(109);
	var setTextContent = __webpack_require__(111);

	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});

	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}

	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}

	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}

	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}

	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}

	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}

	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (process.env.NODE_ENV !== 'production') {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

	  replaceDelimitedText: replaceDelimitedText,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }

	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: { toIndex: update.toIndex, content: update.content.toString() }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = __webpack_require__(108);
	var setInnerHTML = __webpack_require__(109);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(110);
	var setTextContent = __webpack_require__(111);

	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}

	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});

	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}

	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}

	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}

	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}

	function toString() {
	  return this.node.nodeName;
	}

	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}

	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;

	module.exports = DOMLazyTree;

/***/ },
/* 108 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};

	module.exports = DOMNamespaces;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(73);
	var DOMNamespaces = __webpack_require__(108);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(110);

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}

	module.exports = setInnerHTML;

/***/ },
/* 110 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals MSApp */

	'use strict';

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */

	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(73);
	var escapeTextContentForBrowser = __webpack_require__(112);
	var setInnerHTML = __webpack_require__(109);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 112 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */

	'use strict';

	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */

	var matchHtmlRegExp = /["'&<>]/;

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */

	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);

	  if (!match) {
	    return str;
	  }

	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;

	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }

	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }

	    lastIndex = index + 1;
	    html += escape;
	  }

	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html


	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var DOMLazyTree = __webpack_require__(107);
	var ExecutionEnvironment = __webpack_require__(73);

	var createNodesFromMarkup = __webpack_require__(114);
	var emptyFunction = __webpack_require__(70);
	var invariant = __webpack_require__(59);

	var Danger = {

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	var ExecutionEnvironment = __webpack_require__(73);

	var createArrayFromMixed = __webpack_require__(115);
	var getMarkupWrap = __webpack_require__(116);
	var invariant = __webpack_require__(59);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var invariant = __webpack_require__(59);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/*eslint-disable fb-www/unsafe-html */

	var ExecutionEnvironment = __webpack_require__(73);

	var invariant = __webpack_require__(59);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(106);
	var ReactDOMComponentTree = __webpack_require__(56);

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};

	module.exports = ReactDOMIDOperations;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var _prodInvariant = __webpack_require__(57),
	    _assign = __webpack_require__(75);

	var AutoFocusUtils = __webpack_require__(119);
	var CSSPropertyOperations = __webpack_require__(121);
	var DOMLazyTree = __webpack_require__(107);
	var DOMNamespaces = __webpack_require__(108);
	var DOMProperty = __webpack_require__(58);
	var DOMPropertyOperations = __webpack_require__(129);
	var EventPluginHub = __webpack_require__(65);
	var EventPluginRegistry = __webpack_require__(66);
	var ReactBrowserEventEmitter = __webpack_require__(131);
	var ReactDOMComponentFlags = __webpack_require__(60);
	var ReactDOMComponentTree = __webpack_require__(56);
	var ReactDOMInput = __webpack_require__(134);
	var ReactDOMOption = __webpack_require__(137);
	var ReactDOMSelect = __webpack_require__(138);
	var ReactDOMTextarea = __webpack_require__(139);
	var ReactInstrumentation = __webpack_require__(88);
	var ReactMultiChild = __webpack_require__(140);
	var ReactServerRenderingTransaction = __webpack_require__(160);

	var emptyFunction = __webpack_require__(70);
	var escapeTextContentForBrowser = __webpack_require__(112);
	var invariant = __webpack_require__(59);
	var isEventSupported = __webpack_require__(96);
	var shallowEqual = __webpack_require__(150);
	var validateDOMNesting = __webpack_require__(163);
	var warning = __webpack_require__(69);

	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};

	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}

	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}

	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}

	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}

	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}

	var setAndValidateContentChildDev = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;

	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }

	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	var globalIdCounter = 1;

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }

	    assertValidProps(this, props);

	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;

	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      // TODO: Validate that text is allowed as a child of this node
	      if (contentToUse != null) {
	        // Avoid setting textContent when the text is empty. In IE11 setting
	        // textContent on a text area will cause the placeholder to not
	        // show within the textarea until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        if (contentToUse !== '') {
	          if (process.env.NODE_ENV !== 'production') {
	            setAndValidateContentChildDev.call(this, contentToUse);
	          }
	          DOMLazyTree.queueText(lazyTree, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        setAndValidateContentChildDev.call(this, null);
	      }

	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  getHostNode: function () {
	    return getNode(this);
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }

	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;

	    if (process.env.NODE_ENV !== 'production') {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },

	  getPublicInstance: function () {
	    return getNode(this);
	  }

	};

	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(56);

	var focusNode = __webpack_require__(120);

	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */

	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(122);
	var ExecutionEnvironment = __webpack_require__(73);
	var ReactInstrumentation = __webpack_require__(88);

	var camelizeStyleName = __webpack_require__(123);
	var dangerousStyleValue = __webpack_require__(125);
	var hyphenateStyleName = __webpack_require__(126);
	var memoizeStringOnly = __webpack_require__(128);
	var warning = __webpack_require__(69);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;

	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };

	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };

	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };

	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };

	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }

	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 122 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */

	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(124);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 124 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(122);
	var warning = __webpack_require__(69);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(127);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 127 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */

	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(58);
	var ReactDOMComponentTree = __webpack_require__(56);
	var ReactInstrumentation = __webpack_require__(88);

	var quoteAttributeValueForBrowser = __webpack_require__(130);
	var warning = __webpack_require__(69);

	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },

	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }

	};

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(112);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(75);

	var EventPluginRegistry = __webpack_require__(66);
	var ReactEventEmitterMixin = __webpack_require__(132);
	var ViewportMetrics = __webpack_require__(102);

	var getVendorPrefixedEventName = __webpack_require__(133);
	var isEventSupported = __webpack_require__(96);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }

	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(65);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(73);

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return '';
	}

	module.exports = getVendorPrefixedEventName;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57),
	    _assign = __webpack_require__(75);

	var DOMPropertyOperations = __webpack_require__(129);
	var LinkedValueUtils = __webpack_require__(135);
	var ReactDOMComponentTree = __webpack_require__(56);
	var ReactUpdates = __webpack_require__(82);

	var invariant = __webpack_require__(59);
	var warning = __webpack_require__(69);

	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

	      var owner = inst._currentElement._owner;

	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      inst._wrapperState.controlled = isControlled(props);
	    }
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    if (process.env.NODE_ENV !== 'production') {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;

	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {

	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        // In Chrome, assigning defaultValue to certain input types triggers input validation.
	        // For number inputs, the display value loses trailing decimal points. For email inputs,
	        // Chrome raises "The specified value <x> is not a valid email address".
	        //
	        // Here we check to see if the defaultValue has actually changed, avoiding these problems
	        // when the user is inputting text
	        //
	        // https://github.com/facebook/react/issues/7253
	        if (node.defaultValue !== '' + props.defaultValue) {
	          node.defaultValue = '' + props.defaultValue;
	        }
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },

	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.

	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }

	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var React = __webpack_require__(25);
	var ReactPropTypesSecret = __webpack_require__(136);

	var invariant = __webpack_require__(59);
	var warning = __webpack_require__(69);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: React.PropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 136 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(75);

	var React = __webpack_require__(25);
	var ReactDOMComponentTree = __webpack_require__(56);
	var ReactDOMSelect = __webpack_require__(138);

	var warning = __webpack_require__(69);
	var didWarnInvalidOptionChildren = false;

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }

	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;

	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }

	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }

	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },

	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }

	    var content = flattenChildren(props.children);

	    if (content) {
	      hostProps.children = content;
	    }

	    return hostProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(75);

	var LinkedValueUtils = __webpack_require__(135);
	var ReactDOMComponentTree = __webpack_require__(56);
	var ReactUpdates = __webpack_require__(82);

	var warning = __webpack_require__(69);

	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },

	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57),
	    _assign = __webpack_require__(75);

	var LinkedValueUtils = __webpack_require__(135);
	var ReactDOMComponentTree = __webpack_require__(56);
	var ReactUpdates = __webpack_require__(82);

	var invariant = __webpack_require__(59);
	var warning = __webpack_require__(69);

	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }

	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;

	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }

	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }

	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },

	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var textContent = node.textContent;

	    // Only set node.value if textContent is equal to the expected
	    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	    // will populate textContent as well.
	    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	    if (textContent === inst._wrapperState.initialValue) {
	      node.value = textContent;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var ReactComponentEnvironment = __webpack_require__(141);
	var ReactInstanceMap = __webpack_require__(142);
	var ReactInstrumentation = __webpack_require__(88);

	var ReactCurrentOwner = __webpack_require__(32);
	var ReactReconciler = __webpack_require__(85);
	var ReactChildReconciler = __webpack_require__(143);

	var emptyFunction = __webpack_require__(70);
	var flattenChildren = __webpack_require__(159);
	var invariant = __webpack_require__(59);

	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}

	var setChildrenForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (process.env.NODE_ENV !== 'production') {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;

	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (process.env.NODE_ENV !== 'production') {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }

	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },

	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var invariant = __webpack_require__(59);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 142 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(85);

	var instantiateReactComponent = __webpack_require__(144);
	var KeyEscapeUtils = __webpack_require__(155);
	var shouldUpdateReactComponent = __webpack_require__(151);
	var traverseAllChildren = __webpack_require__(156);
	var warning = __webpack_require__(69);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(48);
	}

	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(48);
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};

	    if (process.env.NODE_ENV !== 'production') {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	  ) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57),
	    _assign = __webpack_require__(75);

	var ReactCompositeComponent = __webpack_require__(145);
	var ReactEmptyComponent = __webpack_require__(152);
	var ReactHostComponent = __webpack_require__(153);

	var getNextDebugID = __webpack_require__(154);
	var invariant = __webpack_require__(59);
	var warning = __webpack_require__(69);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;

	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    var type = element.type;
	    if (typeof type !== 'function' && typeof type !== 'string') {
	      var info = '';
	      if (process.env.NODE_ENV !== 'production') {
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }
	      }
	      info += getDeclarationErrorAddendum(element._owner);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
	    }

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);

	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57),
	    _assign = __webpack_require__(75);

	var React = __webpack_require__(25);
	var ReactComponentEnvironment = __webpack_require__(141);
	var ReactCurrentOwner = __webpack_require__(32);
	var ReactErrorUtils = __webpack_require__(68);
	var ReactInstanceMap = __webpack_require__(142);
	var ReactInstrumentation = __webpack_require__(88);
	var ReactNodeTypes = __webpack_require__(146);
	var ReactReconciler = __webpack_require__(85);

	if (process.env.NODE_ENV !== 'production') {
	  var checkReactTypeSpec = __webpack_require__(147);
	}

	var emptyObject = __webpack_require__(149);
	var invariant = __webpack_require__(59);
	var shallowEqual = __webpack_require__(150);
	var shouldUpdateReactComponent = __webpack_require__(151);
	var warning = __webpack_require__(69);

	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};

	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}

	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}

	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}

	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }

	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;

	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;

	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;

	    if (process.env.NODE_ENV !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;

	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    var updateQueue = transaction.getUpdateQueue();

	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;

	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }

	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';

	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }

	    if (inst.componentDidMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }

	    return markup;
	  },

	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },

	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;

	    if (doConstruct) {
	      if (process.env.NODE_ENV !== 'production') {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }

	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (process.env.NODE_ENV !== 'production') {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },

	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();

	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);

	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },

	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;

	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }

	    if (inst.componentWillMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;

	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

	    if (process.env.NODE_ENV !== 'production') {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }

	    return markup;
	  },

	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }

	    var inst = this._instance;

	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;

	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }

	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;

	    if (inst.getChildContext) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }

	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

	    var willReceive = false;
	    var nextContext;

	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }

	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;

	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }

	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;

	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (process.env.NODE_ENV !== 'production') {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }

	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;

	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();

	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }

	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);

	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;

	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

	      if (process.env.NODE_ENV !== 'production') {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }

	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },

	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;

	    if (process.env.NODE_ENV !== 'production') {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }

	    return renderedElement;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

	    return renderedElement;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var React = __webpack_require__(25);

	var invariant = __webpack_require__(59);

	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,

	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};

	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var ReactPropTypeLocationNames = __webpack_require__(148);
	var ReactPropTypesSecret = __webpack_require__(136);

	var invariant = __webpack_require__(59);
	var warning = __webpack_require__(69);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(48);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(48);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 150 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/*eslint-disable no-self-compare */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 151 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */

	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 152 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyComponentFactory;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};

	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var invariant = __webpack_require__(59);

	var genericComponentClass = null;
	var textComponentClass = null;

	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  }
	};

	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};

	module.exports = ReactHostComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 154 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var nextDebugID = 1;

	function getNextDebugID() {
	  return nextDebugID++;
	}

	module.exports = getNextDebugID;

/***/ },
/* 155 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var ReactCurrentOwner = __webpack_require__(32);
	var REACT_ELEMENT_TYPE = __webpack_require__(157);

	var getIteratorFn = __webpack_require__(158);
	var invariant = __webpack_require__(59);
	var KeyEscapeUtils = __webpack_require__(155);
	var warning = __webpack_require__(69);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 157 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 158 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var KeyEscapeUtils = __webpack_require__(155);
	var traverseAllChildren = __webpack_require__(156);
	var warning = __webpack_require__(69);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(48);
	}

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(48);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};

	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(75);

	var PooledClass = __webpack_require__(76);
	var Transaction = __webpack_require__(94);
	var ReactInstrumentation = __webpack_require__(88);
	var ReactServerUpdateQueue = __webpack_require__(161);

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	var noopCallbackQueue = {
	  enqueue: function () {}
	};

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},

	  checkpoint: function () {},

	  rollback: function () {}
	};

	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ReactUpdateQueue = __webpack_require__(162);

	var warning = __webpack_require__(69);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */

	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);

	    this.transaction = transaction;
	  }

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */


	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };

	  return ReactServerUpdateQueue;
	}();

	module.exports = ReactServerUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var ReactCurrentOwner = __webpack_require__(32);
	var ReactInstanceMap = __webpack_require__(142);
	var ReactInstrumentation = __webpack_require__(88);
	var ReactUpdates = __webpack_require__(82);

	var invariant = __webpack_require__(59);
	var warning = __webpack_require__(69);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }

	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },

	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(75);

	var emptyFunction = __webpack_require__(70);
	var warning = __webpack_require__(69);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(75);

	var DOMLazyTree = __webpack_require__(107);
	var ReactDOMComponentTree = __webpack_require__(56);

	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMEmptyComponent;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var invariant = __webpack_require__(59);

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}

	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

	  return inst._hostParent;
	}

	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}

	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57),
	    _assign = __webpack_require__(75);

	var DOMChildrenOperations = __webpack_require__(106);
	var DOMLazyTree = __webpack_require__(107);
	var ReactDOMComponentTree = __webpack_require__(56);

	var escapeTextContentForBrowser = __webpack_require__(112);
	var invariant = __webpack_require__(59);
	var validateDOMNesting = __webpack_require__(163);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;

	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};

	_assign(ReactDOMTextComponent.prototype, {

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }

	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },

	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },

	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(75);

	var ReactUpdates = __webpack_require__(82);
	var Transaction = __webpack_require__(94);

	var emptyFunction = __webpack_require__(70);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(75);

	var EventListener = __webpack_require__(169);
	var ExecutionEnvironment = __webpack_require__(73);
	var PooledClass = __webpack_require__(76);
	var ReactDOMComponentTree = __webpack_require__(56);
	var ReactUpdates = __webpack_require__(82);

	var getEventTarget = __webpack_require__(95);
	var getUnboundedScrollPosition = __webpack_require__(170);

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(70);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function registerDefault() {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 170 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */

	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable.Window && scrollable instanceof scrollable.Window) {
	    return {
	      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
	      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(58);
	var EventPluginHub = __webpack_require__(65);
	var EventPluginUtils = __webpack_require__(67);
	var ReactComponentEnvironment = __webpack_require__(141);
	var ReactEmptyComponent = __webpack_require__(152);
	var ReactBrowserEventEmitter = __webpack_require__(131);
	var ReactHostComponent = __webpack_require__(153);
	var ReactUpdates = __webpack_require__(82);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(75);

	var CallbackQueue = __webpack_require__(83);
	var PooledClass = __webpack_require__(76);
	var ReactBrowserEventEmitter = __webpack_require__(131);
	var ReactInputSelection = __webpack_require__(173);
	var ReactInstrumentation = __webpack_require__(88);
	var Transaction = __webpack_require__(94);
	var ReactUpdateQueue = __webpack_require__(162);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },

	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },

	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(174);

	var containsNode = __webpack_require__(176);
	var focusNode = __webpack_require__(120);
	var getActiveElement = __webpack_require__(179);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(73);

	var getNodeForCharacterOffset = __webpack_require__(175);
	var getTextContentAccessor = __webpack_require__(77);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 175 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	var isTextNode = __webpack_require__(177);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var isNode = __webpack_require__(178);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 178 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  var doc = object ? object.ownerDocument || object : document;
	  var defaultView = doc.defaultView || window;
	  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 179 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 *
	 * @param {?DOMDocument} doc Defaults to current document.
	 * @return {?DOMElement}
	 */
	function getActiveElement(doc) /*?DOMElement*/{
	  doc = doc || global.document;
	  if (typeof doc === 'undefined') {
	    return null;
	  }
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	module.exports = getActiveElement;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 180 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};

	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(64);
	var ExecutionEnvironment = __webpack_require__(73);
	var ReactDOMComponentTree = __webpack_require__(56);
	var ReactInputSelection = __webpack_require__(173);
	var SyntheticEvent = __webpack_require__(79);

	var getActiveElement = __webpack_require__(179);
	var isTextInputElement = __webpack_require__(97);
	var shallowEqual = __webpack_require__(150);

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};

	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var EventListener = __webpack_require__(169);
	var EventPropagators = __webpack_require__(64);
	var ReactDOMComponentTree = __webpack_require__(56);
	var SyntheticAnimationEvent = __webpack_require__(183);
	var SyntheticClipboardEvent = __webpack_require__(184);
	var SyntheticEvent = __webpack_require__(79);
	var SyntheticFocusEvent = __webpack_require__(185);
	var SyntheticKeyboardEvent = __webpack_require__(186);
	var SyntheticMouseEvent = __webpack_require__(100);
	var SyntheticDragEvent = __webpack_require__(189);
	var SyntheticTouchEvent = __webpack_require__(190);
	var SyntheticTransitionEvent = __webpack_require__(191);
	var SyntheticUIEvent = __webpack_require__(101);
	var SyntheticWheelEvent = __webpack_require__(192);

	var emptyFunction = __webpack_require__(70);
	var getEventCharCode = __webpack_require__(187);
	var invariant = __webpack_require__(59);

	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;

	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});

	var onClickListeners = {};

	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(79);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

	module.exports = SyntheticAnimationEvent;

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(79);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(101);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(101);

	var getEventCharCode = __webpack_require__(187);
	var getEventKey = __webpack_require__(188);
	var getEventModifierState = __webpack_require__(103);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 187 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */

	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(187);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(100);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(101);

	var getEventModifierState = __webpack_require__(103);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(79);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

	module.exports = SyntheticTransitionEvent;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(100);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var DOMLazyTree = __webpack_require__(107);
	var DOMProperty = __webpack_require__(58);
	var React = __webpack_require__(25);
	var ReactBrowserEventEmitter = __webpack_require__(131);
	var ReactCurrentOwner = __webpack_require__(32);
	var ReactDOMComponentTree = __webpack_require__(56);
	var ReactDOMContainerInfo = __webpack_require__(194);
	var ReactDOMFeatureFlags = __webpack_require__(195);
	var ReactFeatureFlags = __webpack_require__(84);
	var ReactInstanceMap = __webpack_require__(142);
	var ReactInstrumentation = __webpack_require__(88);
	var ReactMarkupChecksum = __webpack_require__(196);
	var ReactReconciler = __webpack_require__(85);
	var ReactUpdateQueue = __webpack_require__(162);
	var ReactUpdates = __webpack_require__(82);

	var emptyObject = __webpack_require__(149);
	var instantiateReactComponent = __webpack_require__(144);
	var invariant = __webpack_require__(59);
	var setInnerHTML = __webpack_require__(109);
	var shouldUpdateReactComponent = __webpack_require__(151);
	var warning = __webpack_require__(69);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var instancesByReactRootID = {};

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }

	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );

	  if (markerName) {
	    console.timeEnd(markerName);
	  }

	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}

	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}

	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}

	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}

	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}

	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    return prevComponent;
	  },

	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

	    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });

	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },

	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var validateDOMNesting = __webpack_require__(163);

	var DOC_NODE_TYPE = 9;

	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}

	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 195 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var adler32 = __webpack_require__(197);

	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 197 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 198 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.4.2';

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(57);

	var ReactCurrentOwner = __webpack_require__(32);
	var ReactDOMComponentTree = __webpack_require__(56);
	var ReactInstanceMap = __webpack_require__(142);

	var getHostComponentFromComposite = __webpack_require__(200);
	var invariant = __webpack_require__(59);
	var warning = __webpack_require__(69);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }

	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }

	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactNodeTypes = __webpack_require__(146);

	function getHostComponentFromComposite(inst) {
	  var type;

	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }

	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}

	module.exports = getHostComponentFromComposite;

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactMount = __webpack_require__(193);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(58);
	var EventPluginRegistry = __webpack_require__(66);
	var ReactComponentTreeHook = __webpack_require__(48);

	var warning = __webpack_require__(69);

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,

	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};

	  var validateProperty = function (tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

	    if (standardName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}

	var warnUnknownProperties = function (debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }

	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (unknownProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}

	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMUnknownPropertyHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactComponentTreeHook = __webpack_require__(48);

	var warning = __webpack_require__(69);

	var didWarnValueNull = false;

	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

	    didWarnValueNull = true;
	  }
	}

	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMNullInputValuePropHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(58);
	var ReactComponentTreeHook = __webpack_require__(48);

	var warning = __webpack_require__(69);

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

	function validateProperty(tagName, name, debugID) {
	  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	    return true;
	  }

	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(debugID, element) {
	  var invalidProps = [];

	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }

	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (invalidProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (invalidProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }

	  warnInvalidARIAProps(debugID, element);
	}

	var ReactDOMInvalidARIAHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  }
	};

	module.exports = ReactDOMInvalidARIAHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _core = __webpack_require__(206);

	var _platformBrowser = __webpack_require__(240);

	var _platformBrowserDynamic = __webpack_require__(242);

	var _CollarView = __webpack_require__(5);

	var _CollarView2 = _interopRequireDefault(_CollarView);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	module.exports = function (selector, name) {
	  var counter = new _CollarView2.default(selector, name);

	  var viewState = { count: 0 };
	  var changeDetectorRef = null;

	  var CounterComponent = function () {
	    _createClass(CounterComponent, null, [{
	      key: 'annotations',
	      get: function get() {
	        return [new _core.Component({
	          selector: "#angular-counter",
	          template: '<div class="angular-counter-value"><h1 class="counter-value">{{ state.count }}</h1></div>\n              <button class="angular-counter-dec-btn press" (click)="decrement()">-</button>\n              <button class="angular-counter-inc-btn press" (click)="increment()">+</button>'
	        })];
	      }
	    }, {
	      key: 'parameters',
	      get: function get() {
	        return [[_core.ChangeDetectorRef]];
	      }
	    }]);

	    function CounterComponent(cdr) {
	      _classCallCheck(this, CounterComponent);

	      console.log(cdr);
	      changeDetectorRef = cdr;
	      this.state = viewState;
	    }

	    _createClass(CounterComponent, [{
	      key: 'increment',
	      value: function increment() {
	        counter.send({
	          actionType: 'INCREMENT'
	        });
	      }
	    }, {
	      key: 'decrement',
	      value: function decrement() {
	        counter.send({
	          actionType: 'DECREMENT'
	        });
	      }
	    }]);

	    return CounterComponent;
	  }();

	  var AppModule = function () {
	    _createClass(AppModule, null, [{
	      key: 'annotations',
	      get: function get() {
	        return [new _core.NgModule({
	          imports: [_platformBrowser.BrowserModule],
	          declarations: [CounterComponent],
	          bootstrap: [CounterComponent]
	        })];
	      }
	    }]);

	    function AppModule() {
	      _classCallCheck(this, AppModule);
	    }

	    return AppModule;
	  }();

	  counter.setRenderer(function (state, done) {
	    (0, _platformBrowserDynamic.platformBrowserDynamic)().bootstrapModule(AppModule);
	    done();
	  });

	  counter.setUpdater(function (state, done) {
	    viewState.count = state.count;
	    changeDetectorRef.detectChanges();
	    done();
	  });

	  return counter;
	};

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(207), __webpack_require__(221), __webpack_require__(234), __webpack_require__(237)) :
		typeof define === 'function' && define.amd ? define(['exports', 'rxjs/Observable', 'rxjs/observable/merge', 'rxjs/operator/share', 'rxjs/Subject'], factory) :
		(factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}),global.Rx,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx));
	}(this, (function (exports,rxjs_Observable,rxjs_observable_merge,rxjs_operator_share,rxjs_Subject) { 'use strict';

	var __extends = (undefined && undefined.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	/**
	 * Creates a token that can be used in a DI Provider.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
	 *
	 * ```typescript
	 * var t = new OpaqueToken("value");
	 *
	 * var injector = Injector.resolveAndCreate([
	 *   {provide: t, useValue: "bindingValue"}
	 * ]);
	 *
	 * expect(injector.get(t)).toEqual("bindingValue");
	 * ```
	 *
	 * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
	 * caused by multiple providers using the same string as two different tokens.
	 *
	 * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
	 * error messages.
	 * @deprecated since v4.0.0 because it does not support type information, use `InjectionToken<?>`
	 * instead.
	 */
	var OpaqueToken = (function () {
	    /**
	     * @param {?} _desc
	     */
	    function OpaqueToken(_desc) {
	        this._desc = _desc;
	    }
	    /**
	     * @return {?}
	     */
	    OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
	    return OpaqueToken;
	}());
	/**
	 * Creates a token that can be used in a DI Provider.
	 *
	 * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
	 * runtime representation) such as when injecting an interface, callable type, array or
	 * parametrized type.
	 *
	 * `InjectionToken` is parametrize on `T` which is the type of object which will be returned by the
	 * `Injector`. This provides additional level of type safety.
	 *
	 * ```
	 * interface MyInterface {...}
	 * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
	 * // myInterface is inferred to be MyInterface.
	 * ```
	 *
	 * ### Example
	 *
	 * {\@example core/di/ts/injector_spec.ts region='Injector'}
	 *
	 * \@stable
	 */
	var InjectionToken = (function (_super) {
	    __extends(InjectionToken, _super);
	    /**
	     * @param {?} desc
	     */
	    function InjectionToken(desc) {
	        return _super.call(this, desc) || this;
	    }
	    /**
	     * @return {?}
	     */
	    InjectionToken.prototype.toString = function () { return "InjectionToken " + this._desc; };
	    return InjectionToken;
	}(OpaqueToken));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __window = typeof window !== 'undefined' && window;
	var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
	    self instanceof WorkerGlobalScope && self;
	var __global = typeof global !== 'undefined' && global;
	var _global = __window || __global || __self;
	var _symbolIterator = null;
	/**
	 * @return {?}
	 */
	function getSymbolIterator() {
	    if (!_symbolIterator) {
	        var /** @type {?} */ Symbol = _global['Symbol'];
	        if (Symbol && Symbol.iterator) {
	            _symbolIterator = Symbol.iterator;
	        }
	        else {
	            // es6-shim specific logic
	            var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
	            for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
	                var /** @type {?} */ key = keys[i];
	                if (key !== 'entries' && key !== 'size' &&
	                    ((Map)).prototype[key] === Map.prototype['entries']) {
	                    _symbolIterator = key;
	                }
	            }
	        }
	    }
	    return _symbolIterator;
	}
	/**
	 * @param {?} fn
	 * @return {?}
	 */
	function scheduleMicroTask(fn) {
	    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
	}
	/**
	 * @param {?} a
	 * @param {?} b
	 * @return {?}
	 */
	function looseIdentical(a, b) {
	    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	}
	/**
	 * @param {?} token
	 * @return {?}
	 */
	function stringify(token) {
	    if (typeof token === 'string') {
	        return token;
	    }
	    if (token == null) {
	        return '' + token;
	    }
	    if (token.overriddenName) {
	        return "" + token.overriddenName;
	    }
	    if (token.name) {
	        return "" + token.name;
	    }
	    var /** @type {?} */ res = token.toString();
	    if (res == null) {
	        return '' + res;
	    }
	    var /** @type {?} */ newLineIndex = res.indexOf('\n');
	    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _nextClassId = 0;
	var Reflect = _global['Reflect'];
	/**
	 * @param {?} annotation
	 * @return {?}
	 */
	function extractAnnotation(annotation) {
	    if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
	        // it is a decorator, extract annotation
	        annotation = annotation.annotation;
	    }
	    return annotation;
	}
	/**
	 * @param {?} fnOrArray
	 * @param {?} key
	 * @return {?}
	 */
	function applyParams(fnOrArray, key) {
	    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
	        fnOrArray === Number || fnOrArray === Array) {
	        throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
	    }
	    if (typeof fnOrArray === 'function') {
	        return fnOrArray;
	    }
	    if (Array.isArray(fnOrArray)) {
	        var /** @type {?} */ annotations = fnOrArray;
	        var /** @type {?} */ annoLength = annotations.length - 1;
	        var /** @type {?} */ fn = fnOrArray[annoLength];
	        if (typeof fn !== 'function') {
	            throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
	        }
	        if (annoLength != fn.length) {
	            throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
	        }
	        var /** @type {?} */ paramsAnnotations = [];
	        for (var /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {
	            var /** @type {?} */ paramAnnotations = [];
	            paramsAnnotations.push(paramAnnotations);
	            var /** @type {?} */ annotation = annotations[i];
	            if (Array.isArray(annotation)) {
	                for (var /** @type {?} */ j = 0; j < annotation.length; j++) {
	                    paramAnnotations.push(extractAnnotation(annotation[j]));
	                }
	            }
	            else if (typeof annotation === 'function') {
	                paramAnnotations.push(extractAnnotation(annotation));
	            }
	            else {
	                paramAnnotations.push(annotation);
	            }
	        }
	        Reflect.defineMetadata('parameters', paramsAnnotations, fn);
	        return fn;
	    }
	    throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
	}
	/**
	 * Provides a way for expressing ES6 classes with parameter annotations in ES5.
	 *
	 * ## Basic Example
	 *
	 * ```
	 * var Greeter = ng.Class({
	 *   constructor: function(name) {
	 *     this.name = name;
	 *   },
	 *
	 *   greet: function() {
	 *     alert('Hello ' + this.name + '!');
	 *   }
	 * });
	 * ```
	 *
	 * is equivalent to ES6:
	 *
	 * ```
	 * class Greeter {
	 *   constructor(name) {
	 *     this.name = name;
	 *   }
	 *
	 *   greet() {
	 *     alert('Hello ' + this.name + '!');
	 *   }
	 * }
	 * ```
	 *
	 * or equivalent to ES5:
	 *
	 * ```
	 * var Greeter = function (name) {
	 *   this.name = name;
	 * }
	 *
	 * Greeter.prototype.greet = function () {
	 *   alert('Hello ' + this.name + '!');
	 * }
	 * ```
	 *
	 * ### Example with parameter annotations
	 *
	 * ```
	 * var MyService = ng.Class({
	 *   constructor: [String, [new Optional(), Service], function(name, myService) {
	 *     ...
	 *   }]
	 * });
	 * ```
	 *
	 * is equivalent to ES6:
	 *
	 * ```
	 * class MyService {
	 *   constructor(name: string, \@Optional() myService: Service) {
	 *     ...
	 *   }
	 * }
	 * ```
	 *
	 * ### Example with inheritance
	 *
	 * ```
	 * var Shape = ng.Class({
	 *   constructor: (color) {
	 *     this.color = color;
	 *   }
	 * });
	 *
	 * var Square = ng.Class({
	 *   extends: Shape,
	 *   constructor: function(color, size) {
	 *     Shape.call(this, color);
	 *     this.size = size;
	 *   }
	 * });
	 * ```
	 * @suppress {globalThis}
	 * \@stable
	 * @param {?} clsDef
	 * @return {?}
	 */
	function Class(clsDef) {
	    var /** @type {?} */ constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
	    var /** @type {?} */ proto = constructor.prototype;
	    if (clsDef.hasOwnProperty('extends')) {
	        if (typeof clsDef.extends === 'function') {
	            ((constructor)).prototype = proto =
	                Object.create(((clsDef.extends)).prototype);
	        }
	        else {
	            throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
	        }
	    }
	    for (var /** @type {?} */ key in clsDef) {
	        if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
	            proto[key] = applyParams(clsDef[key], key);
	        }
	    }
	    if (this && this.annotations instanceof Array) {
	        Reflect.defineMetadata('annotations', this.annotations, constructor);
	    }
	    var /** @type {?} */ constructorName = constructor['name'];
	    if (!constructorName || constructorName === 'constructor') {
	        ((constructor))['overriddenName'] = "class" + _nextClassId++;
	    }
	    return (constructor);
	}
	/**
	 * @suppress {globalThis}
	 * @param {?} name
	 * @param {?} props
	 * @param {?=} parentClass
	 * @param {?=} chainFn
	 * @return {?}
	 */
	function makeDecorator(name, props, parentClass, chainFn) {
	    if (chainFn === void 0) { chainFn = null; }
	    var /** @type {?} */ metaCtor = makeMetadataCtor([props]);
	    /**
	     * @param {?} objOrType
	     * @return {?}
	     */
	    function DecoratorFactory(objOrType) {
	        if (!(Reflect && Reflect.getOwnMetadata)) {
	            throw 'reflect-metadata shim is required when using class decorators';
	        }
	        if (this instanceof DecoratorFactory) {
	            metaCtor.call(this, objOrType);
	            return this;
	        }
	        var /** @type {?} */ annotationInstance = new ((DecoratorFactory))(objOrType);
	        var /** @type {?} */ chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
	        chainAnnotation.push(annotationInstance);
	        var /** @type {?} */ TypeDecorator = (function TypeDecorator(cls) {
	            var /** @type {?} */ annotations = Reflect.getOwnMetadata('annotations', cls) || [];
	            annotations.push(annotationInstance);
	            Reflect.defineMetadata('annotations', annotations, cls);
	            return cls;
	        });
	        TypeDecorator.annotations = chainAnnotation;
	        TypeDecorator.Class = Class;
	        if (chainFn)
	            chainFn(TypeDecorator);
	        return TypeDecorator;
	    }
	    if (parentClass) {
	        DecoratorFactory.prototype = Object.create(parentClass.prototype);
	    }
	    DecoratorFactory.prototype.toString = function () { return "@" + name; };
	    ((DecoratorFactory)).annotationCls = DecoratorFactory;
	    return DecoratorFactory;
	}
	/**
	 * @param {?} props
	 * @return {?}
	 */
	function makeMetadataCtor(props) {
	    return function ctor() {
	        var _this = this;
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        props.forEach(function (prop, i) {
	            var /** @type {?} */ argVal = args[i];
	            if (Array.isArray(prop)) {
	                // plain parameter
	                _this[prop[0]] = argVal === undefined ? prop[1] : argVal;
	            }
	            else {
	                for (var /** @type {?} */ propName in prop) {
	                    _this[propName] =
	                        argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
	                }
	            }
	        });
	    };
	}
	/**
	 * @param {?} name
	 * @param {?} props
	 * @param {?=} parentClass
	 * @return {?}
	 */
	function makeParamDecorator(name, props, parentClass) {
	    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
	    /**
	     * @param {...?} args
	     * @return {?}
	     */
	    function ParamDecoratorFactory() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (this instanceof ParamDecoratorFactory) {
	            metaCtor.apply(this, args);
	            return this;
	        }
	        var /** @type {?} */ annotationInstance = new (((ParamDecoratorFactory)).bind.apply(((ParamDecoratorFactory)), [void 0].concat(args)))();
	        ((ParamDecorator)).annotation = annotationInstance;
	        return ParamDecorator;
	        /**
	         * @param {?} cls
	         * @param {?} unusedKey
	         * @param {?} index
	         * @return {?}
	         */
	        function ParamDecorator(cls, unusedKey, index) {
	            var /** @type {?} */ parameters = Reflect.getOwnMetadata('parameters', cls) || [];
	            // there might be gaps if some in between parameters do not have annotations.
	            // we pad with nulls.
	            while (parameters.length <= index) {
	                parameters.push(null);
	            }
	            parameters[index] = parameters[index] || [];
	            parameters[index].push(annotationInstance);
	            Reflect.defineMetadata('parameters', parameters, cls);
	            return cls;
	        }
	    }
	    if (parentClass) {
	        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
	    }
	    ParamDecoratorFactory.prototype.toString = function () { return "@" + name; };
	    ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;
	    return ParamDecoratorFactory;
	}
	/**
	 * @param {?} name
	 * @param {?} props
	 * @param {?=} parentClass
	 * @return {?}
	 */
	function makePropDecorator(name, props, parentClass) {
	    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
	    /**
	     * @param {...?} args
	     * @return {?}
	     */
	    function PropDecoratorFactory() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (this instanceof PropDecoratorFactory) {
	            metaCtor.apply(this, args);
	            return this;
	        }
	        var /** @type {?} */ decoratorInstance = new (((PropDecoratorFactory)).bind.apply(((PropDecoratorFactory)), [void 0].concat(args)))();
	        return function PropDecorator(target, name) {
	            var /** @type {?} */ meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
	            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
	            meta[name].unshift(decoratorInstance);
	            Reflect.defineMetadata('propMetadata', meta, target.constructor);
	        };
	    }
	    if (parentClass) {
	        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
	    }
	    PropDecoratorFactory.prototype.toString = function () { return "@" + name; };
	    ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;
	    return PropDecoratorFactory;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This token can be used to create a virtual provider that will populate the
	 * `entryComponents` fields of components and ng modules based on its `useValue`.
	 * All components that are referenced in the `useValue` value (either directly
	 * or in a nested array or map) will be added to the `entryComponents` property.
	 *
	 * ### Example
	 * The following example shows how the router can populate the `entryComponents`
	 * field of an NgModule based on the router configuration which refers
	 * to components.
	 *
	 * ```typescript
	 * // helper function inside the router
	 * function provideRoutes(routes) {
	 *   return [
	 *     {provide: ROUTES, useValue: routes},
	 *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
	 *   ];
	 * }
	 *
	 * // user code
	 * let routes = [
	 *   {path: '/root', component: RootComp},
	 *   {path: '/teams', component: TeamsComp}
	 * ];
	 *
	 * \@NgModule({
	 *   providers: [provideRoutes(routes)]
	 * })
	 * class ModuleWithRoutes {}
	 * ```
	 *
	 * \@experimental
	 */
	var ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');
	/**
	 * Attribute decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
	/**
	 * Base class for query metadata.
	 *
	 * See {\@link ContentChildren}, {\@link ContentChild}, {\@link ViewChildren}, {\@link ViewChild} for
	 * more information.
	 *
	 * \@stable
	 * @abstract
	 */
	var Query = (function () {
	    function Query() {
	    }
	    return Query;
	}());
	/**
	 * ContentChildren decorator and metadata.
	 *
	 *  \@stable
	 *  \@Annotation
	 */
	var ContentChildren = makePropDecorator('ContentChildren', [
	    ['selector', undefined], {
	        first: false,
	        isViewQuery: false,
	        descendants: false,
	        read: undefined,
	    }
	], Query);
	/**
	 * ContentChild decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var ContentChild = makePropDecorator('ContentChild', [
	    ['selector', undefined], {
	        first: true,
	        isViewQuery: false,
	        descendants: true,
	        read: undefined,
	    }
	], Query);
	/**
	 * ViewChildren decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var ViewChildren = makePropDecorator('ViewChildren', [
	    ['selector', undefined], {
	        first: false,
	        isViewQuery: true,
	        descendants: true,
	        read: undefined,
	    }
	], Query);
	/**
	 * ViewChild decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var ViewChild = makePropDecorator('ViewChild', [
	    ['selector', undefined], {
	        first: true,
	        isViewQuery: true,
	        descendants: true,
	        read: undefined,
	    }
	], Query);
	var ChangeDetectionStrategy = {};
	ChangeDetectionStrategy.OnPush = 0;
	ChangeDetectionStrategy.Default = 1;
	ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush";
	ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";
	var ChangeDetectorStatus = {};
	ChangeDetectorStatus.CheckOnce = 0;
	ChangeDetectorStatus.Checked = 1;
	ChangeDetectorStatus.CheckAlways = 2;
	ChangeDetectorStatus.Detached = 3;
	ChangeDetectorStatus.Errored = 4;
	ChangeDetectorStatus.Destroyed = 5;
	ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = "CheckOnce";
	ChangeDetectorStatus[ChangeDetectorStatus.Checked] = "Checked";
	ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = "CheckAlways";
	ChangeDetectorStatus[ChangeDetectorStatus.Detached] = "Detached";
	ChangeDetectorStatus[ChangeDetectorStatus.Errored] = "Errored";
	ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = "Destroyed";
	/**
	 * @param {?} changeDetectionStrategy
	 * @return {?}
	 */
	function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
	    return changeDetectionStrategy == null ||
	        changeDetectionStrategy === ChangeDetectionStrategy.Default;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Directive decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Directive = makeDecorator('Directive', {
	    selector: undefined,
	    inputs: undefined,
	    outputs: undefined,
	    host: undefined,
	    providers: undefined,
	    exportAs: undefined,
	    queries: undefined
	});
	/**
	 * Component decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Component = makeDecorator('Component', {
	    selector: undefined,
	    inputs: undefined,
	    outputs: undefined,
	    host: undefined,
	    exportAs: undefined,
	    moduleId: undefined,
	    providers: undefined,
	    viewProviders: undefined,
	    changeDetection: ChangeDetectionStrategy.Default,
	    queries: undefined,
	    templateUrl: undefined,
	    template: undefined,
	    styleUrls: undefined,
	    styles: undefined,
	    animations: undefined,
	    encapsulation: undefined,
	    interpolation: undefined,
	    entryComponents: undefined
	}, Directive);
	/**
	 * Pipe decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Pipe = makeDecorator('Pipe', {
	    name: undefined,
	    pure: true,
	});
	/**
	 * Input decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
	/**
	 * Output decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
	/**
	 * HostBinding decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
	/**
	 * HostListener decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Defines a schema that will allow:
	 * - any non-Angular elements with a `-` in their name,
	 * - any properties on elements with a `-` in their name which is the common rule for custom
	 * elements.
	 *
	 * \@stable
	 */
	var CUSTOM_ELEMENTS_SCHEMA = {
	    name: 'custom-elements'
	};
	/**
	 * Defines a schema that will allow any property on any element.
	 *
	 * \@experimental
	 */
	var NO_ERRORS_SCHEMA = {
	    name: 'no-errors-schema'
	};
	/**
	 * NgModule decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var NgModule = makeDecorator('NgModule', {
	    providers: undefined,
	    declarations: undefined,
	    imports: undefined,
	    exports: undefined,
	    entryComponents: undefined,
	    bootstrap: undefined,
	    schemas: undefined,
	    id: undefined,
	});
	var ViewEncapsulation = {};
	ViewEncapsulation.Emulated = 0;
	ViewEncapsulation.Native = 1;
	ViewEncapsulation.None = 2;
	ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated";
	ViewEncapsulation[ViewEncapsulation.Native] = "Native";
	ViewEncapsulation[ViewEncapsulation.None] = "None";
	/**
	 * Metadata properties available for configuring Views.
	 *
	 * For details on the `\@Component` annotation, see {\@link Component}.
	 *
	 * ### Example
	 *
	 * ```
	 * \@Component({
	 *   selector: 'greet',
	 *   template: 'Hello {{name}}!',
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 *
	 * @deprecated Use Component instead.
	 *
	 * {\@link Component}
	 */
	var ViewMetadata = (function () {
	    /**
	     * @param {?=} __0
	     */
	    function ViewMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;
	        this.templateUrl = templateUrl;
	        this.template = template;
	        this.styleUrls = styleUrls;
	        this.styles = styles;
	        this.encapsulation = encapsulation;
	        this.animations = animations;
	        this.interpolation = interpolation;
	    }
	    return ViewMetadata;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@whatItDoes Represents the version of Angular
	 *
	 * \@stable
	 */
	var Version = (function () {
	    /**
	     * @param {?} full
	     */
	    function Version(full) {
	        this.full = full;
	    }
	    Object.defineProperty(Version.prototype, "major", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.full.split('.')[0]; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Version.prototype, "minor", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.full.split('.')[1]; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Version.prototype, "patch", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.full.split('.').slice(2).join('.'); },
	        enumerable: true,
	        configurable: true
	    });
	    return Version;
	}());
	/**
	 * \@stable
	 */
	var VERSION = new Version('4.0.0');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Inject decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Inject = makeParamDecorator('Inject', [['token', undefined]]);
	/**
	 * Optional decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Optional = makeParamDecorator('Optional', []);
	/**
	 * Injectable decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Injectable = makeDecorator('Injectable', []);
	/**
	 * Self decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Self = makeParamDecorator('Self', []);
	/**
	 * SkipSelf decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var SkipSelf = makeParamDecorator('SkipSelf', []);
	/**
	 * Host decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Host = makeParamDecorator('Host', []);
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Allows to refer to references which are not yet defined.
	 *
	 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
	 * DI is declared,
	 * but not yet defined. It is also used when the `token` which we use when creating a query is not
	 * yet defined.
	 *
	 * ### Example
	 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
	 * \@experimental
	 * @param {?} forwardRefFn
	 * @return {?}
	 */
	function forwardRef(forwardRefFn) {
	    ((forwardRefFn)).__forward_ref__ = forwardRef;
	    ((forwardRefFn)).toString = function () { return stringify(this()); };
	    return (((forwardRefFn)));
	}
	/**
	 * Lazily retrieves the reference value from a forwardRef.
	 *
	 * Acts as the identity function when given a non-forward-ref value.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
	 *
	 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
	 *
	 * See: {\@link forwardRef}
	 * \@experimental
	 * @param {?} type
	 * @return {?}
	 */
	function resolveForwardRef(type) {
	    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&
	        type.__forward_ref__ === forwardRef) {
	        return ((type))();
	    }
	    else {
	        return type;
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _THROW_IF_NOT_FOUND = new Object();
	var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	var _NullInjector = (function () {
	    function _NullInjector() {
	    }
	    /**
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    _NullInjector.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }
	        if (notFoundValue === _THROW_IF_NOT_FOUND) {
	            throw new Error("No provider for " + stringify(token) + "!");
	        }
	        return notFoundValue;
	    };
	    return _NullInjector;
	}());
	/**
	 * \@whatItDoes Injector interface
	 * \@howToUse
	 * ```
	 * const injector: Injector = ...;
	 * injector.get(...);
	 * ```
	 *
	 * \@description
	 * For more details, see the {\@linkDocs guide/dependency-injection "Dependency Injection Guide"}.
	 *
	 * ### Example
	 *
	 * {\@example core/di/ts/injector_spec.ts region='Injector'}
	 *
	 * `Injector` returns itself when given `Injector` as a token:
	 * {\@example core/di/ts/injector_spec.ts region='injectInjector'}
	 *
	 * \@stable
	 * @abstract
	 */
	var Injector = (function () {
	    function Injector() {
	    }
	    /**
	     * Retrieves an instance from the injector based on the provided token.
	     * If not found:
	     * - Throws {\@link NoProviderError} if no `notFoundValue` that is not equal to
	     * Injector.THROW_IF_NOT_FOUND is given
	     * - Returns the `notFoundValue` otherwise
	     * @abstract
	     * @template T
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    Injector.prototype.get = function (token, notFoundValue) { };
	    /**
	     * @deprecated from v4.0.0 use Type<T> or InjectToken<T>
	     * @suppress {duplicate}
	     * @abstract
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    Injector.prototype.get = function (token, notFoundValue) { };
	    return Injector;
	}());
	Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	Injector.NULL = new _NullInjector();
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ERROR_COMPONENT_TYPE = 'ngComponentType';
	var ERROR_DEBUG_CONTEXT = 'ngDebugContext';
	var ERROR_ORIGINAL_ERROR = 'ngOriginalError';
	var ERROR_LOGGER = 'ngErrorLogger';
	/**
	 * @param {?} error
	 * @return {?}
	 */
	/**
	 * @param {?} error
	 * @return {?}
	 */
	function getDebugContext(error) {
	    return ((error))[ERROR_DEBUG_CONTEXT];
	}
	/**
	 * @param {?} error
	 * @return {?}
	 */
	function getOriginalError(error) {
	    return ((error))[ERROR_ORIGINAL_ERROR];
	}
	/**
	 * @param {?} error
	 * @return {?}
	 */
	function getErrorLogger(error) {
	    return ((error))[ERROR_LOGGER] || defaultErrorLogger;
	}
	/**
	 * @param {?} console
	 * @param {...?} values
	 * @return {?}
	 */
	function defaultErrorLogger(console) {
	    var values = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        values[_i - 1] = arguments[_i];
	    }
	    console.error.apply(console, values);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@whatItDoes Provides a hook for centralized exception handling.
	 *
	 * \@description
	 *
	 * The default implementation of `ErrorHandler` prints error messages to the `console`. To
	 * intercept error handling, write a custom exception handler that replaces this default as
	 * appropriate for your app.
	 *
	 * ### Example
	 *
	 * ```
	 * class MyErrorHandler implements ErrorHandler {
	 *   handleError(error) {
	 *     // do something with the exception
	 *   }
	 * }
	 *
	 * \@NgModule({
	 *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
	 * })
	 * class MyModule {}
	 * ```
	 *
	 * \@stable
	 */
	var ErrorHandler = (function () {
	    /**
	     * @param {?=} deprecatedParameter
	     */
	    function ErrorHandler(
	        /**
	         * @deprecated since v4.0 parameter no longer has an effect, as ErrorHandler will never
	         * rethrow.
	         */
	        deprecatedParameter) {
	        /**
	         * \@internal
	         */
	        this._console = console;
	    }
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    ErrorHandler.prototype.handleError = function (error) {
	        var /** @type {?} */ originalError = this._findOriginalError(error);
	        var /** @type {?} */ context = this._findContext(error);
	        // Note: Browser consoles show the place from where console.error was called.
	        // We can use this to give users additional information about the error.
	        var /** @type {?} */ errorLogger = getErrorLogger(error);
	        errorLogger(this._console, "ERROR", error);
	        if (originalError) {
	            errorLogger(this._console, "ORIGINAL ERROR", originalError);
	        }
	        if (context) {
	            errorLogger(this._console, 'ERROR CONTEXT', context);
	        }
	    };
	    /**
	     * \@internal
	     * @param {?} error
	     * @return {?}
	     */
	    ErrorHandler.prototype._findContext = function (error) {
	        if (error) {
	            return getDebugContext(error) ? getDebugContext(error) :
	                this._findContext(getOriginalError(error));
	        }
	        return null;
	    };
	    /**
	     * \@internal
	     * @param {?} error
	     * @return {?}
	     */
	    ErrorHandler.prototype._findOriginalError = function (error) {
	        var /** @type {?} */ e = getOriginalError(error);
	        while (e && getOriginalError(e)) {
	            e = getOriginalError(e);
	        }
	        return e;
	    };
	    return ErrorHandler;
	}());
	/**
	 * @param {?} message
	 * @param {?} originalError
	 * @return {?}
	 */
	function wrappedError(message, originalError) {
	    var /** @type {?} */ msg = message + " caused by: " + (originalError instanceof Error ? originalError.message : originalError);
	    var /** @type {?} */ error = Error(msg);
	    ((error))[ERROR_ORIGINAL_ERROR] = originalError;
	    return error;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} keys
	 * @return {?}
	 */
	function findFirstClosedCycle(keys) {
	    var /** @type {?} */ res = [];
	    for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
	        if (res.indexOf(keys[i]) > -1) {
	            res.push(keys[i]);
	            return res;
	        }
	        res.push(keys[i]);
	    }
	    return res;
	}
	/**
	 * @param {?} keys
	 * @return {?}
	 */
	function constructResolvingPath(keys) {
	    if (keys.length > 1) {
	        var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());
	        var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });
	        return ' (' + tokenStrs.join(' -> ') + ')';
	    }
	    return '';
	}
	/**
	 * @param {?} injector
	 * @param {?} key
	 * @param {?} constructResolvingMessage
	 * @param {?=} originalError
	 * @return {?}
	 */
	function injectionError(injector, key, constructResolvingMessage, originalError) {
	    var /** @type {?} */ error = ((originalError ? wrappedError('', originalError) : Error()));
	    error.addKey = addKey;
	    error.keys = [key];
	    error.injectors = [injector];
	    error.constructResolvingMessage = constructResolvingMessage;
	    error.message = error.constructResolvingMessage();
	    ((error))[ERROR_ORIGINAL_ERROR] = originalError;
	    return error;
	}
	/**
	 * @this {?}
	 * @param {?} injector
	 * @param {?} key
	 * @return {?}
	 */
	function addKey(injector, key) {
	    this.injectors.push(injector);
	    this.keys.push(key);
	    this.message = this.constructResolvingMessage();
	}
	/**
	 * Thrown when trying to retrieve a dependency by key from {\@link Injector}, but the
	 * {\@link Injector} does not have a {\@link Provider} for the given key.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
	 *
	 * ```typescript
	 * class A {
	 *   constructor(b:B) {}
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	 * ```
	 * @param {?} injector
	 * @param {?} key
	 * @return {?}
	 */
	function noProviderError(injector, key) {
	    return injectionError(injector, key, function () {
	        var /** @type {?} */ first = stringify(this.keys[0].token);
	        return "No provider for " + first + "!" + constructResolvingPath(this.keys);
	    });
	}
	/**
	 * Thrown when dependencies form a cycle.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
	 *
	 * ```typescript
	 * var injector = Injector.resolveAndCreate([
	 *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
	 *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
	 * ]);
	 *
	 * expect(() => injector.get("one")).toThrowError();
	 * ```
	 *
	 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
	 * @param {?} injector
	 * @param {?} key
	 * @return {?}
	 */
	function cyclicDependencyError(injector, key) {
	    return injectionError(injector, key, function () {
	        return "Cannot instantiate cyclic dependency!" + constructResolvingPath(this.keys);
	    });
	}
	/**
	 * Thrown when a constructing type returns with an Error.
	 *
	 * The `InstantiationError` class contains the original error plus the dependency graph which caused
	 * this object to be instantiated.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
	 *
	 * ```typescript
	 * class A {
	 *   constructor() {
	 *     throw new Error('message');
	 *   }
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([A]);
	 * try {
	 *   injector.get(A);
	 * } catch (e) {
	 *   expect(e instanceof InstantiationError).toBe(true);
	 *   expect(e.originalException.message).toEqual("message");
	 *   expect(e.originalStack).toBeDefined();
	 * }
	 * ```
	 * @param {?} injector
	 * @param {?} originalException
	 * @param {?} originalStack
	 * @param {?} key
	 * @return {?}
	 */
	function instantiationError(injector, originalException, originalStack, key) {
	    return injectionError(injector, key, function () {
	        var /** @type {?} */ first = stringify(this.keys[0].token);
	        return getOriginalError(this).message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
	    }, originalException);
	}
	/**
	 * Thrown when an object other then {\@link Provider} (or `Type`) is passed to {\@link Injector}
	 * creation.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
	 *
	 * ```typescript
	 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
	 * ```
	 * @param {?} provider
	 * @return {?}
	 */
	function invalidProviderError(provider) {
	    return Error("Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
	}
	/**
	 * Thrown when the class has no annotation information.
	 *
	 * Lack of annotation information prevents the {\@link Injector} from determining which dependencies
	 * need to be injected into the constructor.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
	 *
	 * ```typescript
	 * class A {
	 *   constructor(b) {}
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	 * ```
	 *
	 * This error is also thrown when the class not marked with {\@link Injectable} has parameter types.
	 *
	 * ```typescript
	 * class B {}
	 *
	 * class A {
	 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
	 * ```
	 * \@stable
	 * @param {?} typeOrFunc
	 * @param {?} params
	 * @return {?}
	 */
	function noAnnotationError(typeOrFunc, params) {
	    var /** @type {?} */ signature = [];
	    for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {
	        var /** @type {?} */ parameter = params[i];
	        if (!parameter || parameter.length == 0) {
	            signature.push('?');
	        }
	        else {
	            signature.push(parameter.map(stringify).join(' '));
	        }
	    }
	    return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
	        signature.join(', ') + '). ' +
	        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
	        stringify(typeOrFunc) + '\' is decorated with Injectable.');
	}
	/**
	 * Thrown when getting an object by index.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
	 *
	 * ```typescript
	 * class A {}
	 *
	 * var injector = Injector.resolveAndCreate([A]);
	 *
	 * expect(() => injector.getAt(100)).toThrowError();
	 * ```
	 * \@stable
	 * @param {?} index
	 * @return {?}
	 */
	function outOfBoundsError(index) {
	    return Error("Index " + index + " is out-of-bounds.");
	}
	/**
	 * Thrown when a multi provider and a regular provider are bound to the same token.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * expect(() => Injector.resolveAndCreate([
	 *   { provide: "Strings", useValue: "string1", multi: true},
	 *   { provide: "Strings", useValue: "string2", multi: false}
	 * ])).toThrowError();
	 * ```
	 * @param {?} provider1
	 * @param {?} provider2
	 * @return {?}
	 */
	function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
	    return Error("Cannot mix multi providers and regular providers, got: " + provider1 + " " + provider2);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A unique object used for retrieving items from the {\@link ReflectiveInjector}.
	 *
	 * Keys have:
	 * - a system-wide unique `id`.
	 * - a `token`.
	 *
	 * `Key` is used internally by {\@link ReflectiveInjector} because its system-wide unique `id` allows
	 * the
	 * injector to store created objects in a more efficient way.
	 *
	 * `Key` should not be created directly. {\@link ReflectiveInjector} creates keys automatically when
	 * resolving
	 * providers.
	 * \@experimental
	 */
	var ReflectiveKey = (function () {
	    /**
	     * Private
	     * @param {?} token
	     * @param {?} id
	     */
	    function ReflectiveKey(token, id) {
	        this.token = token;
	        this.id = id;
	        if (!token) {
	            throw new Error('Token must be defined!');
	        }
	    }
	    Object.defineProperty(ReflectiveKey.prototype, "displayName", {
	        /**
	         * Returns a stringified token.
	         * @return {?}
	         */
	        get: function () { return stringify(this.token); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Retrieves a `Key` for a token.
	     * @param {?} token
	     * @return {?}
	     */
	    ReflectiveKey.get = function (token) {
	        return _globalKeyRegistry.get(resolveForwardRef(token));
	    };
	    Object.defineProperty(ReflectiveKey, "numberOfKeys", {
	        /**
	         * @return {?} the number of keys registered in the system.
	         */
	        get: function () { return _globalKeyRegistry.numberOfKeys; },
	        enumerable: true,
	        configurable: true
	    });
	    return ReflectiveKey;
	}());
	/**
	 * \@internal
	 */
	var KeyRegistry = (function () {
	    function KeyRegistry() {
	        this._allKeys = new Map();
	    }
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    KeyRegistry.prototype.get = function (token) {
	        if (token instanceof ReflectiveKey)
	            return token;
	        if (this._allKeys.has(token)) {
	            return this._allKeys.get(token);
	        }
	        var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
	        this._allKeys.set(token, newKey);
	        return newKey;
	    };
	    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._allKeys.size; },
	        enumerable: true,
	        configurable: true
	    });
	    return KeyRegistry;
	}());
	var _globalKeyRegistry = new KeyRegistry();
	/**
	 * \@whatItDoes Represents a type that a Component or other object is instances of.
	 *
	 * \@description
	 *
	 * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
	 * the `MyCustomComponent` constructor function.
	 *
	 * \@stable
	 */
	var Type = Function;
	/**
	 * @param {?} v
	 * @return {?}
	 */
	function isType(v) {
	    return typeof v === 'function';
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Attention: This regex has to hold even if the code is minified!
	 */
	var DELEGATE_CTOR = /^function\s+\S+\(\)\s*{\s*("use strict";)?\s*(return\s+)?(\S+\s+!==\s+null\s+&&\s+)?\S+\.apply\(this,\s*arguments\)/;
	var ReflectionCapabilities = (function () {
	    /**
	     * @param {?=} reflect
	     */
	    function ReflectionCapabilities(reflect) {
	        this._reflect = reflect || _global['Reflect'];
	    }
	    /**
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	    /**
	     * @template T
	     * @param {?} t
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.factory = function (t) { return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return new (t.bind.apply(t, [void 0].concat(args)))();
	    }; };
	    /**
	     * \@internal
	     * @param {?} paramTypes
	     * @param {?} paramAnnotations
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
	        var /** @type {?} */ result;
	        if (typeof paramTypes === 'undefined') {
	            result = new Array(paramAnnotations.length);
	        }
	        else {
	            result = new Array(paramTypes.length);
	        }
	        for (var /** @type {?} */ i = 0; i < result.length; i++) {
	            // TS outputs Object for parameters without types, while Traceur omits
	            // the annotations. For now we preserve the Traceur behavior to aid
	            // migration, but this can be revisited.
	            if (typeof paramTypes === 'undefined') {
	                result[i] = [];
	            }
	            else if (paramTypes[i] != Object) {
	                result[i] = [paramTypes[i]];
	            }
	            else {
	                result[i] = [];
	            }
	            if (paramAnnotations && paramAnnotations[i] != null) {
	                result[i] = result[i].concat(paramAnnotations[i]);
	            }
	        }
	        return result;
	    };
	    /**
	     * @param {?} type
	     * @param {?} parentCtor
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {
	        // If we have no decorators, we only have function.length as metadata.
	        // In that case, to detect whether a child class declared an own constructor or not,
	        // we need to look inside of that constructor to check whether it is
	        // just calling the parent.
	        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
	        // that sets 'design:paramtypes' to []
	        // if a class inherits from another class but has no ctor declared itself.
	        if (DELEGATE_CTOR.exec(type.toString())) {
	            return null;
	        }
	        // Prefer the direct API.
	        if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {
	            return ((type)).parameters;
	        }
	        // API of tsickle for lowering decorators to properties on the class.
	        var /** @type {?} */ tsickleCtorParams = ((type)).ctorParameters;
	        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
	            // Newer tsickle uses a function closure
	            // Retain the non-function case for compatibility with older tsickle
	            var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
	            var /** @type {?} */ paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });
	            var /** @type {?} */ paramAnnotations = ctorParameters.map(function (ctorParam) { return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators); });
	            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	        }
	        // API for metadata created by invoking the decorators.
	        if (this._reflect != null && this._reflect.getOwnMetadata != null) {
	            var /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);
	            var /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);
	            if (paramTypes || paramAnnotations) {
	                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	            }
	        }
	        // If a class has no decorators, at least create metadata
	        // based on function.length.
	        // Note: We know that this is a real constructor as we checked
	        // the content of the constructor above.
	        return new Array(((type.length))).fill(undefined);
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.parameters = function (type) {
	        // Note: only report metadata if we have at least one class decorator
	        // to stay in sync with the static reflector.
	        if (!isType(type)) {
	            return [];
	        }
	        var /** @type {?} */ parentCtor = getParentCtor(type);
	        var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);
	        if (!parameters && parentCtor !== Object) {
	            parameters = this.parameters(parentCtor);
	        }
	        return parameters || [];
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @param {?} parentCtor
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {
	        // Prefer the direct API.
	        if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {
	            var /** @type {?} */ annotations = ((typeOrFunc)).annotations;
	            if (typeof annotations === 'function' && annotations.annotations) {
	                annotations = annotations.annotations;
	            }
	            return annotations;
	        }
	        // API of tsickle for lowering decorators to properties on the class.
	        if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {
	            return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);
	        }
	        // API for metadata created by invoking the decorators.
	        if (this._reflect && this._reflect.getOwnMetadata) {
	            return this._reflect.getOwnMetadata('annotations', typeOrFunc);
	        }
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
	        if (!isType(typeOrFunc)) {
	            return [];
	        }
	        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
	        var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
	        var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
	        return parentAnnotations.concat(ownAnnotations);
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @param {?} parentCtor
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {
	        // Prefer the direct API.
	        if (((typeOrFunc)).propMetadata &&
	            ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {
	            var /** @type {?} */ propMetadata = ((typeOrFunc)).propMetadata;
	            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
	                propMetadata = propMetadata.propMetadata;
	            }
	            return propMetadata;
	        }
	        // API of tsickle for lowering decorators to properties on the class.
	        if (((typeOrFunc)).propDecorators &&
	            ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {
	            var /** @type {?} */ propDecorators_1 = ((typeOrFunc)).propDecorators;
	            var /** @type {?} */ propMetadata_1 = ({});
	            Object.keys(propDecorators_1).forEach(function (prop) {
	                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
	            });
	            return propMetadata_1;
	        }
	        // API for metadata created by invoking the decorators.
	        if (this._reflect && this._reflect.getOwnMetadata) {
	            return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);
	        }
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	        if (!isType(typeOrFunc)) {
	            return {};
	        }
	        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
	        var /** @type {?} */ propMetadata = {};
	        if (parentCtor !== Object) {
	            var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);
	            Object.keys(parentPropMetadata_1).forEach(function (propName) {
	                propMetadata[propName] = parentPropMetadata_1[propName];
	            });
	        }
	        var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
	        if (ownPropMetadata) {
	            Object.keys(ownPropMetadata).forEach(function (propName) {
	                var /** @type {?} */ decorators = [];
	                if (propMetadata.hasOwnProperty(propName)) {
	                    decorators.push.apply(decorators, propMetadata[propName]);
	                }
	                decorators.push.apply(decorators, ownPropMetadata[propName]);
	                propMetadata[propName] = decorators;
	            });
	        }
	        return propMetadata;
	    };
	    /**
	     * @param {?} type
	     * @param {?} lcProperty
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
	        return type instanceof Type && lcProperty in type.prototype;
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.getter = function (name) { return (new Function('o', 'return o.' + name + ';')); };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.setter = function (name) {
	        return (new Function('o', 'v', 'return o.' + name + ' = v;'));
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.method = function (name) {
	        var /** @type {?} */ functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
	        return (new Function('o', 'args', functionBody));
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.importUri = function (type) {
	        // StaticSymbol
	        if (typeof type === 'object' && type['filePath']) {
	            return type['filePath'];
	        }
	        // Runtime type
	        return "./" + stringify(type);
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.resourceUri = function (type) { return "./" + stringify(type); };
	    /**
	     * @param {?} name
	     * @param {?} moduleUrl
	     * @param {?} members
	     * @param {?} runtime
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
	        return runtime;
	    };
	    /**
	     * @param {?} enumIdentifier
	     * @param {?} name
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };
	    return ReflectionCapabilities;
	}());
	/**
	 * @param {?} decoratorInvocations
	 * @return {?}
	 */
	function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
	    if (!decoratorInvocations) {
	        return [];
	    }
	    return decoratorInvocations.map(function (decoratorInvocation) {
	        var /** @type {?} */ decoratorType = decoratorInvocation.type;
	        var /** @type {?} */ annotationCls = decoratorType.annotationCls;
	        var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
	        return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
	    });
	}
	/**
	 * @param {?} ctor
	 * @return {?}
	 */
	function getParentCtor(ctor) {
	    var /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);
	    var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;
	    // Note: We always use `Object` as the null value
	    // to simplify checking later on.
	    return parentCtor || Object;
	}
	/**
	 * Provides read-only access to reflection data about symbols. Used internally by Angular
	 * to power dependency injection and compilation.
	 * @abstract
	 */
	var ReflectorReader = (function () {
	    function ReflectorReader() {
	    }
	    /**
	     * @abstract
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectorReader.prototype.parameters = function (typeOrFunc) { };
	    /**
	     * @abstract
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectorReader.prototype.annotations = function (typeOrFunc) { };
	    /**
	     * @abstract
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectorReader.prototype.propMetadata = function (typeOrFunc) { };
	    /**
	     * @abstract
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectorReader.prototype.importUri = function (typeOrFunc) { };
	    /**
	     * @abstract
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectorReader.prototype.resourceUri = function (typeOrFunc) { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @param {?} moduleUrl
	     * @param {?} members
	     * @param {?} runtime
	     * @return {?}
	     */
	    ReflectorReader.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) { };
	    /**
	     * @abstract
	     * @param {?} identifier
	     * @param {?} name
	     * @return {?}
	     */
	    ReflectorReader.prototype.resolveEnum = function (identifier, name) { };
	    return ReflectorReader;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Provides access to reflection data about symbols. Used internally by Angular
	 * to power dependency injection and compilation.
	 */
	var Reflector = (function (_super) {
	    __extends(Reflector, _super);
	    /**
	     * @param {?} reflectionCapabilities
	     */
	    function Reflector(reflectionCapabilities) {
	        var _this = _super.call(this) || this;
	        _this.reflectionCapabilities = reflectionCapabilities;
	        return _this;
	    }
	    /**
	     * @param {?} caps
	     * @return {?}
	     */
	    Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    Reflector.prototype.parameters = function (typeOrFunc) {
	        return this.reflectionCapabilities.parameters(typeOrFunc);
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    Reflector.prototype.annotations = function (typeOrFunc) {
	        return this.reflectionCapabilities.annotations(typeOrFunc);
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    Reflector.prototype.propMetadata = function (typeOrFunc) {
	        return this.reflectionCapabilities.propMetadata(typeOrFunc);
	    };
	    /**
	     * @param {?} type
	     * @param {?} lcProperty
	     * @return {?}
	     */
	    Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    Reflector.prototype.resourceUri = function (type) { return this.reflectionCapabilities.resourceUri(type); };
	    /**
	     * @param {?} name
	     * @param {?} moduleUrl
	     * @param {?} members
	     * @param {?} runtime
	     * @return {?}
	     */
	    Reflector.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
	        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
	    };
	    /**
	     * @param {?} identifier
	     * @param {?} name
	     * @return {?}
	     */
	    Reflector.prototype.resolveEnum = function (identifier, name) {
	        return this.reflectionCapabilities.resolveEnum(identifier, name);
	    };
	    return Reflector;
	}(ReflectorReader));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The {@link Reflector} used internally in Angular to access metadata
	 * about symbols.
	 */
	var reflector = new Reflector(new ReflectionCapabilities());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * `Dependency` is used by the framework to extend DI.
	 * This is internal to Angular and should not be used directly.
	 */
	var ReflectiveDependency = (function () {
	    /**
	     * @param {?} key
	     * @param {?} optional
	     * @param {?} visibility
	     */
	    function ReflectiveDependency(key, optional, visibility) {
	        this.key = key;
	        this.optional = optional;
	        this.visibility = visibility;
	    }
	    /**
	     * @param {?} key
	     * @return {?}
	     */
	    ReflectiveDependency.fromKey = function (key) {
	        return new ReflectiveDependency(key, false, null);
	    };
	    return ReflectiveDependency;
	}());
	var _EMPTY_LIST = [];
	var ResolvedReflectiveProvider_ = (function () {
	    /**
	     * @param {?} key
	     * @param {?} resolvedFactories
	     * @param {?} multiProvider
	     */
	    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
	        this.key = key;
	        this.resolvedFactories = resolvedFactories;
	        this.multiProvider = multiProvider;
	    }
	    Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.resolvedFactories[0]; },
	        enumerable: true,
	        configurable: true
	    });
	    return ResolvedReflectiveProvider_;
	}());
	/**
	 * An internal resolved representation of a factory function created by resolving {\@link
	 * Provider}.
	 * \@experimental
	 */
	var ResolvedReflectiveFactory = (function () {
	    /**
	     * @param {?} factory
	     * @param {?} dependencies
	     */
	    function ResolvedReflectiveFactory(factory, dependencies) {
	        this.factory = factory;
	        this.dependencies = dependencies;
	    }
	    return ResolvedReflectiveFactory;
	}());
	/**
	 * Resolve a single provider.
	 * @param {?} provider
	 * @return {?}
	 */
	function resolveReflectiveFactory(provider) {
	    var /** @type {?} */ factoryFn;
	    var /** @type {?} */ resolvedDeps;
	    if (provider.useClass) {
	        var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);
	        factoryFn = reflector.factory(useClass);
	        resolvedDeps = _dependenciesFor(useClass);
	    }
	    else if (provider.useExisting) {
	        factoryFn = function (aliasInstance) { return aliasInstance; };
	        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
	    }
	    else if (provider.useFactory) {
	        factoryFn = provider.useFactory;
	        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
	    }
	    else {
	        factoryFn = function () { return provider.useValue; };
	        resolvedDeps = _EMPTY_LIST;
	    }
	    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
	}
	/**
	 * Converts the {\@link Provider} into {\@link ResolvedProvider}.
	 *
	 * {\@link Injector} internally only uses {\@link ResolvedProvider}, {\@link Provider} contains
	 * convenience provider syntax.
	 * @param {?} provider
	 * @return {?}
	 */
	function resolveReflectiveProvider(provider) {
	    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
	}
	/**
	 * Resolve a list of Providers.
	 * @param {?} providers
	 * @return {?}
	 */
	function resolveReflectiveProviders(providers) {
	    var /** @type {?} */ normalized = _normalizeProviders(providers, []);
	    var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);
	    var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
	    return Array.from(resolvedProviderMap.values());
	}
	/**
	 * Merges a list of ResolvedProviders into a list where
	 * each key is contained exactly once and multi providers
	 * have been merged.
	 * @param {?} providers
	 * @param {?} normalizedProvidersMap
	 * @return {?}
	 */
	function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
	    for (var /** @type {?} */ i = 0; i < providers.length; i++) {
	        var /** @type {?} */ provider = providers[i];
	        var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);
	        if (existing) {
	            if (provider.multiProvider !== existing.multiProvider) {
	                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
	            }
	            if (provider.multiProvider) {
	                for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {
	                    existing.resolvedFactories.push(provider.resolvedFactories[j]);
	                }
	            }
	            else {
	                normalizedProvidersMap.set(provider.key.id, provider);
	            }
	        }
	        else {
	            var /** @type {?} */ resolvedProvider = void 0;
	            if (provider.multiProvider) {
	                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
	            }
	            else {
	                resolvedProvider = provider;
	            }
	            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
	        }
	    }
	    return normalizedProvidersMap;
	}
	/**
	 * @param {?} providers
	 * @param {?} res
	 * @return {?}
	 */
	function _normalizeProviders(providers, res) {
	    providers.forEach(function (b) {
	        if (b instanceof Type) {
	            res.push({ provide: b, useClass: b });
	        }
	        else if (b && typeof b == 'object' && ((b)).provide !== undefined) {
	            res.push(/** @type {?} */ (b));
	        }
	        else if (b instanceof Array) {
	            _normalizeProviders(b, res);
	        }
	        else {
	            throw invalidProviderError(b);
	        }
	    });
	    return res;
	}
	/**
	 * @param {?} typeOrFunc
	 * @param {?} dependencies
	 * @return {?}
	 */
	function constructDependencies(typeOrFunc, dependencies) {
	    if (!dependencies) {
	        return _dependenciesFor(typeOrFunc);
	    }
	    else {
	        var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });
	        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });
	    }
	}
	/**
	 * @param {?} typeOrFunc
	 * @return {?}
	 */
	function _dependenciesFor(typeOrFunc) {
	    var /** @type {?} */ params = reflector.parameters(typeOrFunc);
	    if (!params)
	        return [];
	    if (params.some(function (p) { return p == null; })) {
	        throw noAnnotationError(typeOrFunc, params);
	    }
	    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
	}
	/**
	 * @param {?} typeOrFunc
	 * @param {?} metadata
	 * @param {?} params
	 * @return {?}
	 */
	function _extractToken(typeOrFunc, metadata, params) {
	    var /** @type {?} */ token = null;
	    var /** @type {?} */ optional = false;
	    if (!Array.isArray(metadata)) {
	        if (metadata instanceof Inject) {
	            return _createDependency(metadata['token'], optional, null);
	        }
	        else {
	            return _createDependency(metadata, optional, null);
	        }
	    }
	    var /** @type {?} */ visibility = null;
	    for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {
	        var /** @type {?} */ paramMetadata = metadata[i];
	        if (paramMetadata instanceof Type) {
	            token = paramMetadata;
	        }
	        else if (paramMetadata instanceof Inject) {
	            token = paramMetadata['token'];
	        }
	        else if (paramMetadata instanceof Optional) {
	            optional = true;
	        }
	        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
	            visibility = paramMetadata;
	        }
	        else if (paramMetadata instanceof InjectionToken) {
	            token = paramMetadata;
	        }
	    }
	    token = resolveForwardRef(token);
	    if (token != null) {
	        return _createDependency(token, optional, visibility);
	    }
	    else {
	        throw noAnnotationError(typeOrFunc, params);
	    }
	}
	/**
	 * @param {?} token
	 * @param {?} optional
	 * @param {?} visibility
	 * @return {?}
	 */
	function _createDependency(token, optional, visibility) {
	    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Threshold for the dynamic version
	var UNDEFINED = new Object();
	/**
	 * A ReflectiveDependency injection container used for instantiating objects and resolving
	 * dependencies.
	 *
	 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
	 * constructor dependencies.
	 *
	 * In typical use, application code asks for the dependencies in the constructor and they are
	 * resolved by the `Injector`.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
	 *
	 * The following example creates an `Injector` configured to create `Engine` and `Car`.
	 *
	 * ```typescript
	 * \@Injectable()
	 * class Engine {
	 * }
	 *
	 * \@Injectable()
	 * class Car {
	 *   constructor(public engine:Engine) {}
	 * }
	 *
	 * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	 * var car = injector.get(Car);
	 * expect(car instanceof Car).toBe(true);
	 * expect(car.engine instanceof Engine).toBe(true);
	 * ```
	 *
	 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
	 * resolve all of the object's dependencies automatically.
	 *
	 * \@stable
	 * @abstract
	 */
	var ReflectiveInjector = (function () {
	    function ReflectiveInjector() {
	    }
	    /**
	     * Turns an array of provider definitions into an array of resolved providers.
	     *
	     * A resolution is a process of flattening multiple nested arrays and converting individual
	     * providers into an array of {\@link ResolvedReflectiveProvider}s.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
	     *
	     * expect(providers.length).toEqual(2);
	     *
	     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
	     * expect(providers[0].key.displayName).toBe("Car");
	     * expect(providers[0].dependencies.length).toEqual(1);
	     * expect(providers[0].factory).toBeDefined();
	     *
	     * expect(providers[1].key.displayName).toBe("Engine");
	     * });
	     * ```
	     *
	     * See {\@link ReflectiveInjector#fromResolvedProviders} for more info.
	     * @param {?} providers
	     * @return {?}
	     */
	    ReflectiveInjector.resolve = function (providers) {
	        return resolveReflectiveProviders(providers);
	    };
	    /**
	     * Resolves an array of providers and creates an injector from those providers.
	     *
	     * The passed-in providers can be an array of `Type`, {\@link Provider},
	     * or a recursive array of more providers.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	     * expect(injector.get(Car) instanceof Car).toBe(true);
	     * ```
	     *
	     * This function is slower than the corresponding `fromResolvedProviders`
	     * because it needs to resolve the passed-in providers first.
	     * See {\@link Injector#resolve} and {\@link Injector#fromResolvedProviders}.
	     * @param {?} providers
	     * @param {?=} parent
	     * @return {?}
	     */
	    ReflectiveInjector.resolveAndCreate = function (providers, parent) {
	        if (parent === void 0) { parent = null; }
	        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
	    };
	    /**
	     * Creates an injector from previously resolved providers.
	     *
	     * This API is the recommended way to construct injectors in performance-sensitive parts.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var providers = ReflectiveInjector.resolve([Car, Engine]);
	     * var injector = ReflectiveInjector.fromResolvedProviders(providers);
	     * expect(injector.get(Car) instanceof Car).toBe(true);
	     * ```
	     * \@experimental
	     * @param {?} providers
	     * @param {?=} parent
	     * @return {?}
	     */
	    ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
	        if (parent === void 0) { parent = null; }
	        return new ReflectiveInjector_(providers, parent);
	    };
	    /**
	     * Parent of this injector.
	     *
	     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	     * -->
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
	     *
	     * ```typescript
	     * var parent = ReflectiveInjector.resolveAndCreate([]);
	     * var child = parent.resolveAndCreateChild([]);
	     * expect(child.parent).toBe(parent);
	     * ```
	     * @abstract
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.parent = function () { };
	    /**
	     * Resolves an array of providers and creates a child injector from those providers.
	     *
	     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	     * -->
	     *
	     * The passed-in providers can be an array of `Type`, {\@link Provider},
	     * or a recursive array of more providers.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
	     *
	     * ```typescript
	     * class ParentProvider {}
	     * class ChildProvider {}
	     *
	     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);
	     * var child = parent.resolveAndCreateChild([ChildProvider]);
	     *
	     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	     * ```
	     *
	     * This function is slower than the corresponding `createChildFromResolved`
	     * because it needs to resolve the passed-in providers first.
	     * See {\@link Injector#resolve} and {\@link Injector#createChildFromResolved}.
	     * @abstract
	     * @param {?} providers
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };
	    /**
	     * Creates a child injector from previously resolved providers.
	     *
	     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	     * -->
	     *
	     * This API is the recommended way to construct injectors in performance-sensitive parts.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
	     *
	     * ```typescript
	     * class ParentProvider {}
	     * class ChildProvider {}
	     *
	     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);
	     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);
	     *
	     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);
	     * var child = parent.createChildFromResolved(childProviders);
	     *
	     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	     * ```
	     * @abstract
	     * @param {?} providers
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };
	    /**
	     * Resolves a provider and instantiates an object in the context of the injector.
	     *
	     * The created object does not get cached by the injector.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	     *
	     * var car = injector.resolveAndInstantiate(Car);
	     * expect(car.engine).toBe(injector.get(Engine));
	     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
	     * ```
	     * @abstract
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };
	    /**
	     * Instantiates an object using a resolved provider in the context of the injector.
	     *
	     * The created object does not get cached by the injector.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	     * var carProvider = ReflectiveInjector.resolve([Car])[0];
	     * var car = injector.instantiateResolved(carProvider);
	     * expect(car.engine).toBe(injector.get(Engine));
	     * expect(car).not.toBe(injector.instantiateResolved(carProvider));
	     * ```
	     * @abstract
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.instantiateResolved = function (provider) { };
	    /**
	     * @abstract
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.get = function (token, notFoundValue) { };
	    return ReflectiveInjector;
	}());
	var ReflectiveInjector_ = (function () {
	    /**
	     * Private
	     * @param {?} _providers
	     * @param {?=} _parent
	     */
	    function ReflectiveInjector_(_providers, _parent) {
	        if (_parent === void 0) { _parent = null; }
	        /**
	         * \@internal
	         */
	        this._constructionCounter = 0;
	        this._providers = _providers;
	        this._parent = _parent;
	        var len = _providers.length;
	        this.keyIds = new Array(len);
	        this.objs = new Array(len);
	        for (var i = 0; i < len; i++) {
	            this.keyIds[i] = _providers[i].key.id;
	            this.objs[i] = UNDEFINED;
	        }
	    }
	    /**
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
	    };
	    Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._parent; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} providers
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
	        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	        return this.createChildFromResolved(ResolvedReflectiveProviders);
	    };
	    /**
	     * @param {?} providers
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
	        var /** @type {?} */ inj = new ReflectiveInjector_(providers);
	        inj._parent = this;
	        return inj;
	    };
	    /**
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
	        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
	    };
	    /**
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
	        return this._instantiateProvider(provider);
	    };
	    /**
	     * @param {?} index
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {
	        if (index < 0 || index >= this._providers.length) {
	            throw outOfBoundsError(index);
	        }
	        return this._providers[index];
	    };
	    /**
	     * \@internal
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._new = function (provider) {
	        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
	            throw cyclicDependencyError(this, provider.key);
	        }
	        return this._instantiateProvider(provider);
	    };
	    /**
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };
	    /**
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
	        if (provider.multiProvider) {
	            var /** @type {?} */ res = new Array(provider.resolvedFactories.length);
	            for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {
	                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
	            }
	            return res;
	        }
	        else {
	            return this._instantiate(provider, provider.resolvedFactories[0]);
	        }
	    };
	    /**
	     * @param {?} provider
	     * @param {?} ResolvedReflectiveFactory
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory$$1) {
	        var _this = this;
	        var /** @type {?} */ factory = ResolvedReflectiveFactory$$1.factory;
	        var /** @type {?} */ deps;
	        try {
	            deps =
	                ResolvedReflectiveFactory$$1.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });
	        }
	        catch (e) {
	            if (e.addKey) {
	                e.addKey(this, provider.key);
	            }
	            throw e;
	        }
	        var /** @type {?} */ obj;
	        try {
	            obj = factory.apply(void 0, deps);
	        }
	        catch (e) {
	            throw instantiationError(this, e, e.stack, provider.key);
	        }
	        return obj;
	    };
	    /**
	     * @param {?} dep
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {
	        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
	    };
	    /**
	     * @param {?} key
	     * @param {?} visibility
	     * @param {?} notFoundValue
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {
	        if (key === INJECTOR_KEY) {
	            return this;
	        }
	        if (visibility instanceof Self) {
	            return this._getByKeySelf(key, notFoundValue);
	        }
	        else {
	            return this._getByKeyDefault(key, notFoundValue, visibility);
	        }
	    };
	    /**
	     * @param {?} keyId
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {
	        for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {
	            if (this.keyIds[i] === keyId) {
	                if (this.objs[i] === UNDEFINED) {
	                    this.objs[i] = this._new(this._providers[i]);
	                }
	                return this.objs[i];
	            }
	        }
	        return UNDEFINED;
	    };
	    /**
	     * \@internal
	     * @param {?} key
	     * @param {?} notFoundValue
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
	        if (notFoundValue !== THROW_IF_NOT_FOUND) {
	            return notFoundValue;
	        }
	        else {
	            throw noProviderError(this, key);
	        }
	    };
	    /**
	     * \@internal
	     * @param {?} key
	     * @param {?} notFoundValue
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
	        var /** @type {?} */ obj = this._getObjByKeyId(key.id);
	        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
	    };
	    /**
	     * \@internal
	     * @param {?} key
	     * @param {?} notFoundValue
	     * @param {?} visibility
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {
	        var /** @type {?} */ inj;
	        if (visibility instanceof SkipSelf) {
	            inj = this._parent;
	        }
	        else {
	            inj = this;
	        }
	        while (inj instanceof ReflectiveInjector_) {
	            var /** @type {?} */ inj_ = (inj);
	            var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);
	            if (obj !== UNDEFINED)
	                return obj;
	            inj = inj_._parent;
	        }
	        if (inj !== null) {
	            return inj.get(key.token, notFoundValue);
	        }
	        else {
	            return this._throwOrNull(key, notFoundValue);
	        }
	    };
	    Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
	                .join(', ');
	            return "ReflectiveInjector(providers: [" + providers + "])";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.toString = function () { return this.displayName; };
	    return ReflectiveInjector_;
	}());
	var INJECTOR_KEY = ReflectiveKey.get(Injector);
	/**
	 * @param {?} injector
	 * @param {?} fn
	 * @return {?}
	 */
	function _mapProviders(injector, fn) {
	    var /** @type {?} */ res = new Array(injector._providers.length);
	    for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {
	        res[i] = fn(injector.getProviderAtIndex(i));
	    }
	    return res;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * The `di` module provides dependency injection container services.
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Determine if the argument is shaped like a Promise
	 * @param {?} obj
	 * @return {?}
	 */
	function isPromise(obj) {
	    // allow any Promise/A+ compliant thenable.
	    // It's up to the caller to ensure that obj.then conforms to the spec
	    return !!obj && typeof obj.then === 'function';
	}
	/**
	 * Determine if the argument is an Observable
	 * @param {?} obj
	 * @return {?}
	 */
	function isObservable(obj) {
	    // TODO use Symbol.observable when https://github.com/ReactiveX/rxjs/issues/2415 will be resolved
	    return !!obj && typeof obj.subscribe === 'function';
	}
	/**
	 * @template V
	 * @param {?} m1
	 * @param {?} m2
	 * @return {?}
	 */
	function merge$1(m1, m2) {
	    var /** @type {?} */ m = {};
	    for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	        var k = _a[_i];
	        m[k] = m1[k];
	    }
	    for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	        var k = _c[_b];
	        m[k] = m2[k];
	    }
	    return m;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A function that will be executed when an application is initialized.
	 * \@experimental
	 */
	var APP_INITIALIZER = new InjectionToken('Application Initializer');
	/**
	 * A class that reflects the state of running {\@link APP_INITIALIZER}s.
	 *
	 * \@experimental
	 */
	var ApplicationInitStatus = (function () {
	    /**
	     * @param {?} appInits
	     */
	    function ApplicationInitStatus(appInits) {
	        var _this = this;
	        this._done = false;
	        var asyncInitPromises = [];
	        if (appInits) {
	            for (var i = 0; i < appInits.length; i++) {
	                var initResult = appInits[i]();
	                if (isPromise(initResult)) {
	                    asyncInitPromises.push(initResult);
	                }
	            }
	        }
	        this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });
	        if (asyncInitPromises.length === 0) {
	            this._done = true;
	        }
	    }
	    Object.defineProperty(ApplicationInitStatus.prototype, "done", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._done; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._donePromise; },
	        enumerable: true,
	        configurable: true
	    });
	    return ApplicationInitStatus;
	}());
	ApplicationInitStatus.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	ApplicationInitStatus.ctorParameters = function () { return [
	    { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A DI Token representing a unique string id assigned to the application by Angular and used
	 * primarily for prefixing application attributes and CSS styles when
	 * {\@link ViewEncapsulation#Emulated} is being used.
	 *
	 * If you need to avoid randomly generated value to be used as an application id, you can provide
	 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\@link Injector}
	 * using this token.
	 * \@experimental
	 */
	var APP_ID = new InjectionToken('AppId');
	/**
	 * @return {?}
	 */
	function _appIdRandomProviderFactory() {
	    return "" + _randomChar() + _randomChar() + _randomChar();
	}
	/**
	 * Providers that will generate a random APP_ID_TOKEN.
	 * \@experimental
	 */
	var APP_ID_RANDOM_PROVIDER = {
	    provide: APP_ID,
	    useFactory: _appIdRandomProviderFactory,
	    deps: [],
	};
	/**
	 * @return {?}
	 */
	function _randomChar() {
	    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
	}
	/**
	 * A function that will be executed when a platform is initialized.
	 * \@experimental
	 */
	var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');
	/**
	 * A token that indicates an opaque platform id.
	 * \@experimental
	 */
	var PLATFORM_ID = new InjectionToken('Platform ID');
	/**
	 * All callbacks provided via this token will be called for every component that is bootstrapped.
	 * Signature of the callback:
	 *
	 * `(componentRef: ComponentRef) => void`.
	 *
	 * \@experimental
	 */
	var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');
	/**
	 * A token which indicates the root directory of the application
	 * \@experimental
	 */
	var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Console = (function () {
	    function Console() {
	    }
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Console.prototype.log = function (message) {
	        // tslint:disable-next-line:no-console
	        console.log(message);
	    };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Console.prototype.warn = function (message) {
	        // tslint:disable-next-line:no-console
	        console.warn(message);
	    };
	    return Console;
	}());
	Console.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	Console.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Combination of NgModuleFactory and ComponentFactorys.
	 *
	 * \@experimental
	 */
	var ModuleWithComponentFactories = (function () {
	    /**
	     * @param {?} ngModuleFactory
	     * @param {?} componentFactories
	     */
	    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
	        this.ngModuleFactory = ngModuleFactory;
	        this.componentFactories = componentFactories;
	    }
	    return ModuleWithComponentFactories;
	}());
	/**
	 * @return {?}
	 */
	function _throwError() {
	    throw new Error("Runtime compiler is not loaded");
	}
	/**
	 * Low-level service for running the angular compiler during runtime
	 * to create {\@link ComponentFactory}s, which
	 * can later be used to create and render a Component instance.
	 *
	 * Each `\@NgModule` provides an own `Compiler` to its injector,
	 * that will use the directives/pipes of the ng module for compilation
	 * of components.
	 * \@stable
	 */
	var Compiler = (function () {
	    function Compiler() {
	    }
	    /**
	     * Compiles the given NgModule and all of its components. All templates of the components listed
	     * in `entryComponents` have to be inlined.
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };
	    /**
	     * Compiles the given NgModule and all of its components
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };
	    /**
	     * Same as {\@link compileModuleSync} but also creates ComponentFactories for all components.
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	        throw _throwError();
	    };
	    /**
	     * Same as {\@link compileModuleAsync} but also creates ComponentFactories for all components.
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	        throw _throwError();
	    };
	    /**
	     * Exposes the CSS-style selectors that have been used in `ngContent` directives within
	     * the template of the given component.
	     * This is used by the `upgrade` library to compile the appropriate transclude content
	     * in the AngularJS wrapper component.
	     *
	     * @deprecated since v4. Use ComponentFactory.ngContentSelectors instead.
	     * @param {?} component
	     * @return {?}
	     */
	    Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };
	    /**
	     * Clears all caches.
	     * @return {?}
	     */
	    Compiler.prototype.clearCache = function () { };
	    /**
	     * Clears the cache for the given component/ngModule.
	     * @param {?} type
	     * @return {?}
	     */
	    Compiler.prototype.clearCacheFor = function (type) { };
	    return Compiler;
	}());
	Compiler.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	Compiler.ctorParameters = function () { return []; };
	/**
	 * Token to provide CompilerOptions in the platform injector.
	 *
	 * \@experimental
	 */
	var COMPILER_OPTIONS = new InjectionToken('compilerOptions');
	/**
	 * A factory for creating a Compiler
	 *
	 * \@experimental
	 * @abstract
	 */
	var CompilerFactory = (function () {
	    function CompilerFactory() {
	    }
	    /**
	     * @abstract
	     * @param {?=} options
	     * @return {?}
	     */
	    CompilerFactory.prototype.createCompiler = function (options) { };
	    return CompilerFactory;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents an instance of a Component created via a {\@link ComponentFactory}.
	 *
	 * `ComponentRef` provides access to the Component Instance as well other objects related to this
	 * Component Instance and allows you to destroy the Component Instance via the {\@link #destroy}
	 * method.
	 * \@stable
	 * @abstract
	 */
	var ComponentRef = (function () {
	    function ComponentRef() {
	    }
	    /**
	     * Location of the Host Element of this Component Instance.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.location = function () { };
	    /**
	     * The injector on which the component instance exists.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.injector = function () { };
	    /**
	     * The instance of the Component.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.instance = function () { };
	    /**
	     * The {\@link ViewRef} of the Host View of this Component instance.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.hostView = function () { };
	    /**
	     * The {\@link ChangeDetectorRef} of the Component instance.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.changeDetectorRef = function () { };
	    /**
	     * The component type.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.componentType = function () { };
	    /**
	     * Destroys the component instance and all of the data structures associated with it.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.destroy = function () { };
	    /**
	     * Allows to register a callback that will be called when the component is destroyed.
	     * @abstract
	     * @param {?} callback
	     * @return {?}
	     */
	    ComponentRef.prototype.onDestroy = function (callback) { };
	    return ComponentRef;
	}());
	/**
	 * \@stable
	 * @abstract
	 */
	var ComponentFactory = (function () {
	    function ComponentFactory() {
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ComponentFactory.prototype.selector = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ComponentFactory.prototype.componentType = function () { };
	    /**
	     * selector for all <ng-content> elements in the component.
	     * @abstract
	     * @return {?}
	     */
	    ComponentFactory.prototype.ngContentSelectors = function () { };
	    /**
	     * the inputs of the component.
	     * @abstract
	     * @return {?}
	     */
	    ComponentFactory.prototype.inputs = function () { };
	    /**
	     * the outputs of the component.
	     * @abstract
	     * @return {?}
	     */
	    ComponentFactory.prototype.outputs = function () { };
	    /**
	     * Creates a new component.
	     * @abstract
	     * @param {?} injector
	     * @param {?=} projectableNodes
	     * @param {?=} rootSelectorOrNode
	     * @param {?=} ngModule
	     * @return {?}
	     */
	    ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) { };
	    return ComponentFactory;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} component
	 * @return {?}
	 */
	function noComponentFactoryError(component) {
	    var /** @type {?} */ error = Error("No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?");
	    ((error))[ERROR_COMPONENT] = component;
	    return error;
	}
	var ERROR_COMPONENT = 'ngComponent';
	/**
	 * @param {?} error
	 * @return {?}
	 */
	var _NullComponentFactoryResolver = (function () {
	    function _NullComponentFactoryResolver() {
	    }
	    /**
	     * @template T
	     * @param {?} component
	     * @return {?}
	     */
	    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	        throw noComponentFactoryError(component);
	    };
	    return _NullComponentFactoryResolver;
	}());
	/**
	 * \@stable
	 * @abstract
	 */
	var ComponentFactoryResolver = (function () {
	    function ComponentFactoryResolver() {
	    }
	    /**
	     * @abstract
	     * @template T
	     * @param {?} component
	     * @return {?}
	     */
	    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };
	    return ComponentFactoryResolver;
	}());
	ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
	var CodegenComponentFactoryResolver = (function () {
	    /**
	     * @param {?} factories
	     * @param {?} _parent
	     * @param {?} _ngModule
	     */
	    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {
	        this._parent = _parent;
	        this._ngModule = _ngModule;
	        this._factories = new Map();
	        for (var i = 0; i < factories.length; i++) {
	            var factory = factories[i];
	            this._factories.set(factory.componentType, factory);
	        }
	    }
	    /**
	     * @template T
	     * @param {?} component
	     * @return {?}
	     */
	    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	        var /** @type {?} */ factory = this._factories.get(component) || this._parent.resolveComponentFactory(component);
	        return factory ? new ComponentFactoryBoundToModule(factory, this._ngModule) : null;
	    };
	    return CodegenComponentFactoryResolver;
	}());
	var ComponentFactoryBoundToModule = (function (_super) {
	    __extends(ComponentFactoryBoundToModule, _super);
	    /**
	     * @param {?} factory
	     * @param {?} ngModule
	     */
	    function ComponentFactoryBoundToModule(factory, ngModule) {
	        var _this = _super.call(this) || this;
	        _this.factory = factory;
	        _this.ngModule = ngModule;
	        return _this;
	    }
	    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "selector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.factory.selector; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "componentType", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.factory.componentType; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "ngContentSelectors", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.factory.ngContentSelectors; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "inputs", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.factory.inputs; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "outputs", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.factory.outputs; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} injector
	     * @param {?=} projectableNodes
	     * @param {?=} rootSelectorOrNode
	     * @param {?=} ngModule
	     * @return {?}
	     */
	    ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
	        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
	    };
	    return ComponentFactoryBoundToModule;
	}(ComponentFactory));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents an instance of an NgModule created via a {\@link NgModuleFactory}.
	 *
	 * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
	 * NgModule Instance.
	 *
	 * \@stable
	 * @abstract
	 */
	var NgModuleRef = (function () {
	    function NgModuleRef() {
	    }
	    /**
	     * The injector that contains all of the providers of the NgModule.
	     * @abstract
	     * @return {?}
	     */
	    NgModuleRef.prototype.injector = function () { };
	    /**
	     * The ComponentFactoryResolver to get hold of the ComponentFactories
	     * declared in the `entryComponents` property of the module.
	     * @abstract
	     * @return {?}
	     */
	    NgModuleRef.prototype.componentFactoryResolver = function () { };
	    /**
	     * The NgModule instance.
	     * @abstract
	     * @return {?}
	     */
	    NgModuleRef.prototype.instance = function () { };
	    /**
	     * Destroys the module instance and all of the data structures associated with it.
	     * @abstract
	     * @return {?}
	     */
	    NgModuleRef.prototype.destroy = function () { };
	    /**
	     * Allows to register a callback that will be called when the module is destroyed.
	     * @abstract
	     * @param {?} callback
	     * @return {?}
	     */
	    NgModuleRef.prototype.onDestroy = function (callback) { };
	    return NgModuleRef;
	}());
	/**
	 * \@experimental
	 */
	var NgModuleFactory = (function () {
	    /**
	     * @param {?} _injectorClass
	     * @param {?} _moduleType
	     */
	    function NgModuleFactory(_injectorClass, _moduleType) {
	        this._injectorClass = _injectorClass;
	        this._moduleType = _moduleType;
	    }
	    Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._moduleType; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} parentInjector
	     * @return {?}
	     */
	    NgModuleFactory.prototype.create = function (parentInjector) {
	        var /** @type {?} */ instance = new this._injectorClass(parentInjector || Injector.NULL);
	        instance.create();
	        return instance;
	    };
	    return NgModuleFactory;
	}());
	var _UNDEFINED = new Object();
	/**
	 * @abstract
	 */
	var NgModuleInjector = (function () {
	    /**
	     * @param {?} parent
	     * @param {?} factories
	     * @param {?} bootstrapFactories
	     */
	    function NgModuleInjector(parent, factories, bootstrapFactories) {
	        var _this = this;
	        this.parent = parent;
	        this._destroyListeners = [];
	        this._destroyed = false;
	        this.bootstrapFactories =
	            bootstrapFactories.map(function (f) { return new ComponentFactoryBoundToModule(f, _this); });
	        this._cmpFactoryResolver = new CodegenComponentFactoryResolver(factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL), this);
	    }
	    /**
	     * @return {?}
	     */
	    NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    NgModuleInjector.prototype.createInternal = function () { };
	    /**
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    NgModuleInjector.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	        if (token === Injector || token === NgModuleRef) {
	            return this;
	        }
	        if (token === ComponentFactoryResolver) {
	            return this._cmpFactoryResolver;
	        }
	        var /** @type {?} */ result = this.getInternal(token, _UNDEFINED);
	        return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
	    };
	    /**
	     * @abstract
	     * @param {?} token
	     * @param {?} notFoundValue
	     * @return {?}
	     */
	    NgModuleInjector.prototype.getInternal = function (token, notFoundValue) { };
	    Object.defineProperty(NgModuleInjector.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._cmpFactoryResolver; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    NgModuleInjector.prototype.destroy = function () {
	        if (this._destroyed) {
	            throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
	        }
	        this._destroyed = true;
	        this.destroyInternal();
	        this._destroyListeners.forEach(function (listener) { return listener(); });
	    };
	    /**
	     * @param {?} callback
	     * @return {?}
	     */
	    NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    NgModuleInjector.prototype.destroyInternal = function () { };
	    return NgModuleInjector;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var trace;
	var events;
	/**
	 * @return {?}
	 */
	function detectWTF() {
	    var /** @type {?} */ wtf = ((_global) /** TODO #9100 */)['wtf'];
	    if (wtf) {
	        trace = wtf['trace'];
	        if (trace) {
	            events = trace['events'];
	            return true;
	        }
	    }
	    return false;
	}
	/**
	 * @param {?} signature
	 * @param {?=} flags
	 * @return {?}
	 */
	function createScope$1(signature, flags) {
	    if (flags === void 0) { flags = null; }
	    return events.createScope(signature, flags);
	}
	/**
	 * @template T
	 * @param {?} scope
	 * @param {?=} returnValue
	 * @return {?}
	 */
	function leave(scope, returnValue) {
	    trace.leaveScope(scope, returnValue);
	    return returnValue;
	}
	/**
	 * @param {?} rangeType
	 * @param {?} action
	 * @return {?}
	 */
	function startTimeRange(rangeType, action) {
	    return trace.beginTimeRange(rangeType, action);
	}
	/**
	 * @param {?} range
	 * @return {?}
	 */
	function endTimeRange(range) {
	    trace.endTimeRange(range);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * True if WTF is enabled.
	 */
	var wtfEnabled = detectWTF();
	/**
	 * @param {?=} arg0
	 * @param {?=} arg1
	 * @return {?}
	 */
	function noopScope(arg0, arg1) {
	    return null;
	}
	/**
	 * Create trace scope.
	 *
	 * Scopes must be strictly nested and are analogous to stack frames, but
	 * do not have to follow the stack frames. Instead it is recommended that they follow logical
	 * nesting. You may want to use
	 * [Event
	 * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
	 * as they are defined in WTF.
	 *
	 * Used to mark scope entry. The return value is used to leave the scope.
	 *
	 *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
	 *
	 *     someMethod() {
	 *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
	 *        // DO SOME WORK HERE
	 *        return wtfLeave(s, 123); // Return value 123
	 *     }
	 *
	 * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
	 * negatively impact the performance of your application. For this reason we recommend that
	 * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
	 * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
	 * exception, will produce incorrect trace, but presence of exception signifies logic error which
	 * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
	 * an exception is expected during normal execution while profiling.
	 *
	 * \@experimental
	 */
	var wtfCreateScope = wtfEnabled ? createScope$1 : function (signature, flags) { return noopScope; };
	/**
	 * Used to mark end of Scope.
	 *
	 * - `scope` to end.
	 * - `returnValue` (optional) to be passed to the WTF.
	 *
	 * Returns the `returnValue for easy chaining.
	 * \@experimental
	 */
	var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };
	/**
	 * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
	 * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
	 * enabled.
	 *
	 *     someMethod() {
	 *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
	 *        var future = new Future.delay(5).then((_) {
	 *          wtfEndTimeRange(s);
	 *        });
	 *     }
	 * \@experimental
	 */
	var wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };
	/**
	 * Ends a async time range operation.
	 * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
	 * enabled.
	 * \@experimental
	 */
	var wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Use by directives and components to emit custom Events.
	 *
	 * ### Examples
	 *
	 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	 * title gets clicked:
	 *
	 * ```
	 * \@Component({
	 *   selector: 'zippy',
	 *   template: `
	 *   <div class="zippy">
	 *     <div (click)="toggle()">Toggle</div>
	 *     <div [hidden]="!visible">
	 *       <ng-content></ng-content>
	 *     </div>
	 *  </div>`})
	 * export class Zippy {
	 *   visible: boolean = true;
	 *   \@Output() open: EventEmitter<any> = new EventEmitter();
	 *   \@Output() close: EventEmitter<any> = new EventEmitter();
	 *
	 *   toggle() {
	 *     this.visible = !this.visible;
	 *     if (this.visible) {
	 *       this.open.emit(null);
	 *     } else {
	 *       this.close.emit(null);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * The events payload can be accessed by the parameter `$event` on the components output event
	 * handler:
	 *
	 * ```
	 * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
	 * ```
	 *
	 * Uses Rx.Observable but provides an adapter to make it work as specified here:
	 * https://github.com/jhusain/observable-spec
	 *
	 * Once a reference implementation of the spec is available, switch to it.
	 * \@stable
	 */
	var EventEmitter = (function (_super) {
	    __extends(EventEmitter, _super);
	    /**
	     * Creates an instance of [EventEmitter], which depending on [isAsync],
	     * delivers events synchronously or asynchronously.
	     * @param {?=} isAsync
	     */
	    function EventEmitter(isAsync) {
	        if (isAsync === void 0) { isAsync = false; }
	        var _this = _super.call(this) || this;
	        _this.__isAsync = isAsync;
	        return _this;
	    }
	    /**
	     * @param {?=} value
	     * @return {?}
	     */
	    EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
	    /**
	     * @param {?=} generatorOrNext
	     * @param {?=} error
	     * @param {?=} complete
	     * @return {?}
	     */
	    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	        var /** @type {?} */ schedulerFn;
	        var /** @type {?} */ errorFn = function (err) { return null; };
	        var /** @type {?} */ completeFn = function () { return null; };
	        if (generatorOrNext && typeof generatorOrNext === 'object') {
	            schedulerFn = this.__isAsync ? function (value) {
	                setTimeout(function () { return generatorOrNext.next(value); });
	            } : function (value) { generatorOrNext.next(value); };
	            if (generatorOrNext.error) {
	                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
	                    function (err) { generatorOrNext.error(err); };
	            }
	            if (generatorOrNext.complete) {
	                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
	                    function () { generatorOrNext.complete(); };
	            }
	        }
	        else {
	            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
	                function (value) { generatorOrNext(value); };
	            if (error) {
	                errorFn =
	                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
	            }
	            if (complete) {
	                completeFn =
	                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
	            }
	        }
	        return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	    };
	    return EventEmitter;
	}(rxjs_Subject.Subject));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An injectable service for executing work inside or outside of the Angular zone.
	 *
	 * The most common use of this service is to optimize performance when starting a work consisting of
	 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
	 * Angular. Such tasks can be kicked off via {\@link runOutsideAngular} and if needed, these tasks
	 * can reenter the Angular zone via {\@link run}.
	 *
	 * <!-- TODO: add/fix links to:
	 *   - docs explaining zones and the use of zones in Angular and change-detection
	 *   - link to runOutsideAngular/run (throughout this file!)
	 *   -->
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component, NgZone} from '\@angular/core';
	 * import {NgIf} from '\@angular/common';
	 *
	 * \@Component({
	 *   selector: 'ng-zone-demo'.
	 *   template: `
	 *     <h2>Demo: NgZone</h2>
	 *
	 *     <p>Progress: {{progress}}%</p>
	 *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
	 *
	 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
	 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
	 *   `,
	 * })
	 * export class NgZoneDemo {
	 *   progress: number = 0;
	 *   label: string;
	 *
	 *   constructor(private _ngZone: NgZone) {}
	 *
	 *   // Loop inside the Angular zone
	 *   // so the UI DOES refresh after each setTimeout cycle
	 *   processWithinAngularZone() {
	 *     this.label = 'inside';
	 *     this.progress = 0;
	 *     this._increaseProgress(() => console.log('Inside Done!'));
	 *   }
	 *
	 *   // Loop outside of the Angular zone
	 *   // so the UI DOES NOT refresh after each setTimeout cycle
	 *   processOutsideOfAngularZone() {
	 *     this.label = 'outside';
	 *     this.progress = 0;
	 *     this._ngZone.runOutsideAngular(() => {
	 *       this._increaseProgress(() => {
	 *       // reenter the Angular zone and display done
	 *       this._ngZone.run(() => {console.log('Outside Done!') });
	 *     }}));
	 *   }
	 *
	 *   _increaseProgress(doneCallback: () => void) {
	 *     this.progress += 1;
	 *     console.log(`Current progress: ${this.progress}%`);
	 *
	 *     if (this.progress < 100) {
	 *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
	 *     } else {
	 *       doneCallback();
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * \@experimental
	 */
	var NgZone = (function () {
	    /**
	     * @param {?} __0
	     */
	    function NgZone(_a) {
	        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
	        this._hasPendingMicrotasks = false;
	        this._hasPendingMacrotasks = false;
	        this._isStable = true;
	        this._nesting = 0;
	        this._onUnstable = new EventEmitter(false);
	        this._onMicrotaskEmpty = new EventEmitter(false);
	        this._onStable = new EventEmitter(false);
	        this._onErrorEvents = new EventEmitter(false);
	        if (typeof Zone == 'undefined') {
	            throw new Error('Angular requires Zone.js prolyfill.');
	        }
	        Zone.assertZonePatched();
	        this.outer = this.inner = Zone.current;
	        if (Zone['wtfZoneSpec']) {
	            this.inner = this.inner.fork(Zone['wtfZoneSpec']);
	        }
	        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
	            this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
	        }
	        this.forkInnerZoneWithAngularBehavior();
	    }
	    /**
	     * @return {?}
	     */
	    NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
	    /**
	     * @return {?}
	     */
	    NgZone.assertInAngularZone = function () {
	        if (!NgZone.isInAngularZone()) {
	            throw new Error('Expected to be in Angular Zone, but it is not!');
	        }
	    };
	    /**
	     * @return {?}
	     */
	    NgZone.assertNotInAngularZone = function () {
	        if (NgZone.isInAngularZone()) {
	            throw new Error('Expected to not be in Angular Zone, but it is!');
	        }
	    };
	    /**
	     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
	     * the function.
	     *
	     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
	     * outside of the Angular zone (typically started via {\@link runOutsideAngular}).
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * within the Angular zone.
	     *
	     * If a synchronous error happens it will be rethrown and not reported via `onError`.
	     * @param {?} fn
	     * @return {?}
	     */
	    NgZone.prototype.run = function (fn) { return this.inner.run(fn); };
	    /**
	     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
	     * rethrown.
	     * @param {?} fn
	     * @return {?}
	     */
	    NgZone.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn); };
	    /**
	     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
	     * the function.
	     *
	     * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
	     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * outside of the Angular zone.
	     *
	     * Use {\@link run} to reenter the Angular zone and do work that updates the application model.
	     * @param {?} fn
	     * @return {?}
	     */
	    NgZone.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn); };
	    Object.defineProperty(NgZone.prototype, "onUnstable", {
	        /**
	         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
	         * @return {?}
	         */
	        get: function () { return this._onUnstable; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
	        /**
	         * Notifies when there is no more microtasks enqueue in the current VM Turn.
	         * This is a hint for Angular to do change detection, which may enqueue more microtasks.
	         * For this reason this event can fire multiple times per VM Turn.
	         * @return {?}
	         */
	        get: function () { return this._onMicrotaskEmpty; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "onStable", {
	        /**
	         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
	         * implies we are about to relinquish VM turn.
	         * This event gets called just once.
	         * @return {?}
	         */
	        get: function () { return this._onStable; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "onError", {
	        /**
	         * Notify that an error has been delivered.
	         * @return {?}
	         */
	        get: function () { return this._onErrorEvents; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "isStable", {
	        /**
	         * Whether there are no outstanding microtasks or macrotasks.
	         * @return {?}
	         */
	        get: function () { return this._isStable; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._hasPendingMicrotasks; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._hasPendingMacrotasks; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    NgZone.prototype.checkStable = function () {
	        var _this = this;
	        if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
	            try {
	                this._nesting++;
	                this._onMicrotaskEmpty.emit(null);
	            }
	            finally {
	                this._nesting--;
	                if (!this._hasPendingMicrotasks) {
	                    try {
	                        this.runOutsideAngular(function () { return _this._onStable.emit(null); });
	                    }
	                    finally {
	                        this._isStable = true;
	                    }
	                }
	            }
	        }
	    };
	    /**
	     * @return {?}
	     */
	    NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {
	        var _this = this;
	        this.inner = this.inner.fork({
	            name: 'angular',
	            properties: /** @type {?} */ ({ 'isAngularZone': true }),
	            onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
	                try {
	                    _this.onEnter();
	                    return delegate.invokeTask(target, task, applyThis, applyArgs);
	                }
	                finally {
	                    _this.onLeave();
	                }
	            },
	            onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
	                try {
	                    _this.onEnter();
	                    return delegate.invoke(target, callback, applyThis, applyArgs, source);
	                }
	                finally {
	                    _this.onLeave();
	                }
	            },
	            onHasTask: function (delegate, current, target, hasTaskState) {
	                delegate.hasTask(target, hasTaskState);
	                if (current === target) {
	                    // We are only interested in hasTask events which originate from our zone
	                    // (A child hasTask event is not interesting to us)
	                    if (hasTaskState.change == 'microTask') {
	                        _this.setHasMicrotask(hasTaskState.microTask);
	                    }
	                    else if (hasTaskState.change == 'macroTask') {
	                        _this.setHasMacrotask(hasTaskState.macroTask);
	                    }
	                }
	            },
	            onHandleError: function (delegate, current, target, error) {
	                delegate.handleError(target, error);
	                _this.triggerError(error);
	                return false;
	            }
	        });
	    };
	    /**
	     * @return {?}
	     */
	    NgZone.prototype.onEnter = function () {
	        this._nesting++;
	        if (this._isStable) {
	            this._isStable = false;
	            this._onUnstable.emit(null);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    NgZone.prototype.onLeave = function () {
	        this._nesting--;
	        this.checkStable();
	    };
	    /**
	     * @param {?} hasMicrotasks
	     * @return {?}
	     */
	    NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {
	        this._hasPendingMicrotasks = hasMicrotasks;
	        this.checkStable();
	    };
	    /**
	     * @param {?} hasMacrotasks
	     * @return {?}
	     */
	    NgZone.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; };
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    NgZone.prototype.triggerError = function (error) { this._onErrorEvents.emit(error); };
	    return NgZone;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The Testability service provides testing hooks that can be accessed from
	 * the browser and by services such as Protractor. Each bootstrapped Angular
	 * application on the page will have an instance of Testability.
	 * \@experimental
	 */
	var Testability = (function () {
	    /**
	     * @param {?} _ngZone
	     */
	    function Testability(_ngZone) {
	        this._ngZone = _ngZone;
	        /**
	         * \@internal
	         */
	        this._pendingCount = 0;
	        /**
	         * \@internal
	         */
	        this._isZoneStable = true;
	        /**
	         * Whether any work was done since the last 'whenStable' callback. This is
	         * useful to detect if this could have potentially destabilized another
	         * component while it is stabilizing.
	         * \@internal
	         */
	        this._didWork = false;
	        /**
	         * \@internal
	         */
	        this._callbacks = [];
	        this._watchAngularEvents();
	    }
	    /**
	     * \@internal
	     * @return {?}
	     */
	    Testability.prototype._watchAngularEvents = function () {
	        var _this = this;
	        this._ngZone.onUnstable.subscribe({
	            next: function () {
	                _this._didWork = true;
	                _this._isZoneStable = false;
	            }
	        });
	        this._ngZone.runOutsideAngular(function () {
	            _this._ngZone.onStable.subscribe({
	                next: function () {
	                    NgZone.assertNotInAngularZone();
	                    scheduleMicroTask(function () {
	                        _this._isZoneStable = true;
	                        _this._runCallbacksIfReady();
	                    });
	                }
	            });
	        });
	    };
	    /**
	     * @return {?}
	     */
	    Testability.prototype.increasePendingRequestCount = function () {
	        this._pendingCount += 1;
	        this._didWork = true;
	        return this._pendingCount;
	    };
	    /**
	     * @return {?}
	     */
	    Testability.prototype.decreasePendingRequestCount = function () {
	        this._pendingCount -= 1;
	        if (this._pendingCount < 0) {
	            throw new Error('pending async requests below zero');
	        }
	        this._runCallbacksIfReady();
	        return this._pendingCount;
	    };
	    /**
	     * @return {?}
	     */
	    Testability.prototype.isStable = function () {
	        return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
	    };
	    /**
	     * \@internal
	     * @return {?}
	     */
	    Testability.prototype._runCallbacksIfReady = function () {
	        var _this = this;
	        if (this.isStable()) {
	            // Schedules the call backs in a new frame so that it is always async.
	            scheduleMicroTask(function () {
	                while (_this._callbacks.length !== 0) {
	                    (_this._callbacks.pop())(_this._didWork);
	                }
	                _this._didWork = false;
	            });
	        }
	        else {
	            // Not Ready
	            this._didWork = true;
	        }
	    };
	    /**
	     * @param {?} callback
	     * @return {?}
	     */
	    Testability.prototype.whenStable = function (callback) {
	        this._callbacks.push(callback);
	        this._runCallbacksIfReady();
	    };
	    /**
	     * @return {?}
	     */
	    Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
	    /**
	     * @deprecated use findProviders
	     * @param {?} using
	     * @param {?} provider
	     * @param {?} exactMatch
	     * @return {?}
	     */
	    Testability.prototype.findBindings = function (using, provider, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    /**
	     * @param {?} using
	     * @param {?} provider
	     * @param {?} exactMatch
	     * @return {?}
	     */
	    Testability.prototype.findProviders = function (using, provider, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    return Testability;
	}());
	Testability.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	Testability.ctorParameters = function () { return [
	    { type: NgZone, },
	]; };
	/**
	 * A global registry of {\@link Testability} instances for specific elements.
	 * \@experimental
	 */
	var TestabilityRegistry = (function () {
	    function TestabilityRegistry() {
	        /**
	         * \@internal
	         */
	        this._applications = new Map();
	        _testabilityGetter.addToWindow(this);
	    }
	    /**
	     * @param {?} token
	     * @param {?} testability
	     * @return {?}
	     */
	    TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	        this._applications.set(token, testability);
	    };
	    /**
	     * @param {?} elem
	     * @return {?}
	     */
	    TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };
	    /**
	     * @return {?}
	     */
	    TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };
	    /**
	     * @return {?}
	     */
	    TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };
	    /**
	     * @param {?} elem
	     * @param {?=} findInAncestors
	     * @return {?}
	     */
	    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
	        if (findInAncestors === void 0) { findInAncestors = true; }
	        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
	    };
	    return TestabilityRegistry;
	}());
	TestabilityRegistry.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	TestabilityRegistry.ctorParameters = function () { return []; };
	var _NoopGetTestability = (function () {
	    function _NoopGetTestability() {
	    }
	    /**
	     * @param {?} registry
	     * @return {?}
	     */
	    _NoopGetTestability.prototype.addToWindow = function (registry) { };
	    /**
	     * @param {?} registry
	     * @param {?} elem
	     * @param {?} findInAncestors
	     * @return {?}
	     */
	    _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	        return null;
	    };
	    return _NoopGetTestability;
	}());
	/**
	 * Set the {\@link GetTestability} implementation used by the Angular testing framework.
	 * \@experimental
	 * @param {?} getter
	 * @return {?}
	 */
	function setTestabilityGetter(getter) {
	    _testabilityGetter = getter;
	}
	var _testabilityGetter = new _NoopGetTestability();
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _devMode = true;
	var _runModeLocked = false;
	var _platform;
	var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');
	/**
	 * Disable Angular's development mode, which turns off assertions and other
	 * checks within the framework.
	 *
	 * One important assertion this disables verifies that a change detection pass
	 * does not result in additional changes to any bindings (also known as
	 * unidirectional data flow).
	 *
	 * \@stable
	 * @return {?}
	 */
	function enableProdMode() {
	    if (_runModeLocked) {
	        throw new Error('Cannot enable prod mode after platform setup.');
	    }
	    _devMode = false;
	}
	/**
	 * Returns whether Angular is in development mode. After called once,
	 * the value is locked and won't change any more.
	 *
	 * By default, this is true, unless a user calls `enableProdMode` before calling this.
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @return {?}
	 */
	function isDevMode() {
	    _runModeLocked = true;
	    return _devMode;
	}
	/**
	 * A token for third-party components that can register themselves with NgProbe.
	 *
	 * \@experimental
	 */
	var NgProbeToken = (function () {
	    /**
	     * @param {?} name
	     * @param {?} token
	     */
	    function NgProbeToken(name, token) {
	        this.name = name;
	        this.token = token;
	    }
	    return NgProbeToken;
	}());
	/**
	 * Creates a platform.
	 * Platforms have to be eagerly created via this function.
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @param {?} injector
	 * @return {?}
	 */
	function createPlatform(injector) {
	    if (_platform && !_platform.destroyed &&
	        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
	        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
	    }
	    _platform = injector.get(PlatformRef);
	    var /** @type {?} */ inits = injector.get(PLATFORM_INITIALIZER, null);
	    if (inits)
	        inits.forEach(function (init) { return init(); });
	    return _platform;
	}
	/**
	 * Creates a factory for a platform
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @param {?} parentPlatformFactory
	 * @param {?} name
	 * @param {?=} providers
	 * @return {?}
	 */
	function createPlatformFactory(parentPlatformFactory, name, providers) {
	    if (providers === void 0) { providers = []; }
	    var /** @type {?} */ marker = new InjectionToken("Platform: " + name);
	    return function (extraProviders) {
	        if (extraProviders === void 0) { extraProviders = []; }
	        var /** @type {?} */ platform = getPlatform();
	        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
	            if (parentPlatformFactory) {
	                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
	            }
	            else {
	                createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
	            }
	        }
	        return assertPlatform(marker);
	    };
	}
	/**
	 * Checks that there currently is a platform which contains the given token as a provider.
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @param {?} requiredToken
	 * @return {?}
	 */
	function assertPlatform(requiredToken) {
	    var /** @type {?} */ platform = getPlatform();
	    if (!platform) {
	        throw new Error('No platform exists!');
	    }
	    if (!platform.injector.get(requiredToken, null)) {
	        throw new Error('A platform with a different configuration has been created. Please destroy it first.');
	    }
	    return platform;
	}
	/**
	 * Destroy the existing platform.
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @return {?}
	 */
	function destroyPlatform() {
	    if (_platform && !_platform.destroyed) {
	        _platform.destroy();
	    }
	}
	/**
	 * Returns the current platform.
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @return {?}
	 */
	function getPlatform() {
	    return _platform && !_platform.destroyed ? _platform : null;
	}
	/**
	 * The Angular platform is the entry point for Angular on a web page. Each page
	 * has exactly one platform, and services (such as reflection) which are common
	 * to every Angular application running on the page are bound in its scope.
	 *
	 * A page's platform is initialized implicitly when {\@link bootstrap}() is called, or
	 * explicitly by calling {\@link createPlatform}().
	 *
	 * \@stable
	 * @abstract
	 */
	var PlatformRef = (function () {
	    function PlatformRef() {
	    }
	    /**
	     * Creates an instance of an `\@NgModule` for the given platform
	     * for offline compilation.
	     *
	     * ## Simple Example
	     *
	     * ```typescript
	     * my_module.ts:
	     *
	     * \@NgModule({
	     *   imports: [BrowserModule]
	     * })
	     * class MyModule {}
	     *
	     * main.ts:
	     * import {MyModuleNgFactory} from './my_module.ngfactory';
	     * import {platformBrowser} from '\@angular/platform-browser';
	     *
	     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
	     * ```
	     *
	     * \@experimental APIs related to application bootstrap are currently under review.
	     * @abstract
	     * @template M
	     * @param {?} moduleFactory
	     * @return {?}
	     */
	    PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) { };
	    /**
	     * Creates an instance of an `\@NgModule` for a given platform using the given runtime compiler.
	     *
	     * ## Simple Example
	     *
	     * ```typescript
	     * \@NgModule({
	     *   imports: [BrowserModule]
	     * })
	     * class MyModule {}
	     *
	     * let moduleRef = platformBrowser().bootstrapModule(MyModule);
	     * ```
	     * \@stable
	     * @abstract
	     * @template M
	     * @param {?} moduleType
	     * @param {?=} compilerOptions
	     * @return {?}
	     */
	    PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) { };
	    /**
	     * Register a listener to be called when the platform is disposed.
	     * @abstract
	     * @param {?} callback
	     * @return {?}
	     */
	    PlatformRef.prototype.onDestroy = function (callback) { };
	    /**
	     * Retrieve the platform {\@link Injector}, which is the parent injector for
	     * every Angular application on the page and provides singleton providers.
	     * @abstract
	     * @return {?}
	     */
	    PlatformRef.prototype.injector = function () { };
	    /**
	     * Destroy the Angular platform and all Angular applications on the page.
	     * @abstract
	     * @return {?}
	     */
	    PlatformRef.prototype.destroy = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    PlatformRef.prototype.destroyed = function () { };
	    return PlatformRef;
	}());
	/**
	 * @param {?} errorHandler
	 * @param {?} callback
	 * @return {?}
	 */
	function _callAndReportToErrorHandler(errorHandler, callback) {
	    try {
	        var /** @type {?} */ result = callback();
	        if (isPromise(result)) {
	            return result.catch(function (e) {
	                errorHandler.handleError(e);
	                // rethrow as the exception handler might not do it
	                throw e;
	            });
	        }
	        return result;
	    }
	    catch (e) {
	        errorHandler.handleError(e);
	        // rethrow as the exception handler might not do it
	        throw e;
	    }
	}
	/**
	 * workaround https://github.com/angular/tsickle/issues/350
	 * @suppress {checkTypes}
	 */
	var PlatformRef_ = (function (_super) {
	    __extends(PlatformRef_, _super);
	    /**
	     * @param {?} _injector
	     */
	    function PlatformRef_(_injector) {
	        var _this = _super.call(this) || this;
	        _this._injector = _injector;
	        _this._modules = [];
	        _this._destroyListeners = [];
	        _this._destroyed = false;
	        return _this;
	    }
	    /**
	     * @param {?} callback
	     * @return {?}
	     */
	    PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	    Object.defineProperty(PlatformRef_.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._injector; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PlatformRef_.prototype, "destroyed", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._destroyed; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    PlatformRef_.prototype.destroy = function () {
	        if (this._destroyed) {
	            throw new Error('The platform has already been destroyed!');
	        }
	        this._modules.slice().forEach(function (module) { return module.destroy(); });
	        this._destroyListeners.forEach(function (listener) { return listener(); });
	        this._destroyed = true;
	    };
	    /**
	     * @template M
	     * @param {?} moduleFactory
	     * @return {?}
	     */
	    PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
	        return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
	    };
	    /**
	     * @template M
	     * @param {?} moduleFactory
	     * @param {?} ngZone
	     * @return {?}
	     */
	    PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
	        var _this = this;
	        // Note: We need to create the NgZone _before_ we instantiate the module,
	        // as instantiating the module creates some providers eagerly.
	        // So we create a mini parent injector that just contains the new NgZone and
	        // pass that as parent to the NgModuleFactory.
	        if (!ngZone)
	            ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
	        // Attention: Don't use ApplicationRef.run here,
	        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
	        return ngZone.run(function () {
	            var /** @type {?} */ ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);
	            var /** @type {?} */ moduleRef = (moduleFactory.create(ngZoneInjector));
	            var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
	            if (!exceptionHandler) {
	                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
	            }
	            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); });
	            ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });
	            return _callAndReportToErrorHandler(exceptionHandler, function () {
	                var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);
	                return initStatus.donePromise.then(function () {
	                    _this._moduleDoBootstrap(moduleRef);
	                    return moduleRef;
	                });
	            });
	        });
	    };
	    /**
	     * @template M
	     * @param {?} moduleType
	     * @param {?=} compilerOptions
	     * @return {?}
	     */
	    PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	        if (compilerOptions === void 0) { compilerOptions = []; }
	        return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
	    };
	    /**
	     * @template M
	     * @param {?} moduleType
	     * @param {?=} compilerOptions
	     * @param {?=} ngZone
	     * @return {?}
	     */
	    PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone) {
	        var _this = this;
	        if (compilerOptions === void 0) { compilerOptions = []; }
	        if (ngZone === void 0) { ngZone = null; }
	        var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);
	        var /** @type {?} */ compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
	        return compiler.compileModuleAsync(moduleType)
	            .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });
	    };
	    /**
	     * @param {?} moduleRef
	     * @return {?}
	     */
	    PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
	        var /** @type {?} */ appRef = moduleRef.injector.get(ApplicationRef);
	        if (moduleRef.bootstrapFactories.length > 0) {
	            moduleRef.bootstrapFactories.forEach(function (f) { return appRef.bootstrap(f); });
	        }
	        else if (moduleRef.instance.ngDoBootstrap) {
	            moduleRef.instance.ngDoBootstrap(appRef);
	        }
	        else {
	            throw new Error("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. " +
	                "Please define one of these.");
	        }
	        this._modules.push(moduleRef);
	    };
	    return PlatformRef_;
	}(PlatformRef));
	PlatformRef_.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	PlatformRef_.ctorParameters = function () { return [
	    { type: Injector, },
	]; };
	/**
	 * A reference to an Angular application running on a page.
	 *
	 * For more about Angular applications, see the documentation for {\@link bootstrap}.
	 *
	 * \@stable
	 * @abstract
	 */
	var ApplicationRef = (function () {
	    function ApplicationRef() {
	    }
	    /**
	     * Bootstrap a new component at the root level of the application.
	     *
	     * ### Bootstrap process
	     *
	     * When bootstrapping a new root component into an application, Angular mounts the
	     * specified application component onto DOM elements identified by the [componentType]'s
	     * selector and kicks off automatic change detection to finish initializing the component.
	     *
	     * ### Example
	     * {\@example core/ts/platform/platform.ts region='longform'}
	     * @abstract
	     * @template C
	     * @param {?} componentFactory
	     * @return {?}
	     */
	    ApplicationRef.prototype.bootstrap = function (componentFactory) { };
	    /**
	     * Invoke this method to explicitly process change detection and its side-effects.
	     *
	     * In development mode, `tick()` also performs a second change detection cycle to ensure that no
	     * further changes are detected. If additional changes are picked up during this second cycle,
	     * bindings in the app have side-effects that cannot be resolved in a single change detection
	     * pass.
	     * In this case, Angular throws an error, since an Angular application can only have one change
	     * detection pass during which all change detection must complete.
	     * @abstract
	     * @return {?}
	     */
	    ApplicationRef.prototype.tick = function () { };
	    /**
	     * Get a list of component types registered to this application.
	     * This list is populated even before the component is created.
	     * @abstract
	     * @return {?}
	     */
	    ApplicationRef.prototype.componentTypes = function () { };
	    /**
	     * Get a list of components registered to this application.
	     * @abstract
	     * @return {?}
	     */
	    ApplicationRef.prototype.components = function () { };
	    /**
	     * Attaches a view so that it will be dirty checked.
	     * The view will be automatically detached when it is destroyed.
	     * This will throw if the view is already attached to a ViewContainer.
	     * @abstract
	     * @param {?} view
	     * @return {?}
	     */
	    ApplicationRef.prototype.attachView = function (view) { };
	    /**
	     * Detaches a view from dirty checking again.
	     * @abstract
	     * @param {?} view
	     * @return {?}
	     */
	    ApplicationRef.prototype.detachView = function (view) { };
	    /**
	     * Returns the number of attached views.
	     * @abstract
	     * @return {?}
	     */
	    ApplicationRef.prototype.viewCount = function () { };
	    /**
	     * Returns an Observable that indicates when the application is stable or unstable.
	     * @abstract
	     * @return {?}
	     */
	    ApplicationRef.prototype.isStable = function () { };
	    return ApplicationRef;
	}());
	/**
	 * workaround https://github.com/angular/tsickle/issues/350
	 * @suppress {checkTypes}
	 */
	var ApplicationRef_ = (function (_super) {
	    __extends(ApplicationRef_, _super);
	    /**
	     * @param {?} _zone
	     * @param {?} _console
	     * @param {?} _injector
	     * @param {?} _exceptionHandler
	     * @param {?} _componentFactoryResolver
	     * @param {?} _initStatus
	     */
	    function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
	        var _this = _super.call(this) || this;
	        _this._zone = _zone;
	        _this._console = _console;
	        _this._injector = _injector;
	        _this._exceptionHandler = _exceptionHandler;
	        _this._componentFactoryResolver = _componentFactoryResolver;
	        _this._initStatus = _initStatus;
	        _this._bootstrapListeners = [];
	        _this._rootComponents = [];
	        _this._rootComponentTypes = [];
	        _this._views = [];
	        _this._runningTick = false;
	        _this._enforceNoNewChanges = false;
	        _this._stable = true;
	        _this._enforceNoNewChanges = isDevMode();
	        _this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
	        var isCurrentlyStable = new rxjs_Observable.Observable(function (observer) {
	            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&
	                !_this._zone.hasPendingMicrotasks;
	            _this._zone.runOutsideAngular(function () {
	                observer.next(_this._stable);
	                observer.complete();
	            });
	        });
	        var isStable = new rxjs_Observable.Observable(function (observer) {
	            var stableSub = _this._zone.onStable.subscribe(function () {
	                NgZone.assertNotInAngularZone();
	                // Check whether there are no pending macro/micro tasks in the next tick
	                // to allow for NgZone to update the state.
	                scheduleMicroTask(function () {
	                    if (!_this._stable && !_this._zone.hasPendingMacrotasks &&
	                        !_this._zone.hasPendingMicrotasks) {
	                        _this._stable = true;
	                        observer.next(true);
	                    }
	                });
	            });
	            var unstableSub = _this._zone.onUnstable.subscribe(function () {
	                NgZone.assertInAngularZone();
	                if (_this._stable) {
	                    _this._stable = false;
	                    _this._zone.runOutsideAngular(function () { observer.next(false); });
	                }
	            });
	            return function () {
	                stableSub.unsubscribe();
	                unstableSub.unsubscribe();
	            };
	        });
	        _this._isStable = rxjs_observable_merge.merge(isCurrentlyStable, rxjs_operator_share.share.call(isStable));
	        return _this;
	    }
	    /**
	     * @param {?} viewRef
	     * @return {?}
	     */
	    ApplicationRef_.prototype.attachView = function (viewRef) {
	        var /** @type {?} */ view = ((viewRef));
	        this._views.push(view);
	        view.attachToAppRef(this);
	    };
	    /**
	     * @param {?} viewRef
	     * @return {?}
	     */
	    ApplicationRef_.prototype.detachView = function (viewRef) {
	        var /** @type {?} */ view = ((viewRef));
	        remove(this._views, view);
	        view.detachFromAppRef();
	    };
	    /**
	     * @template C
	     * @param {?} componentOrFactory
	     * @return {?}
	     */
	    ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
	        var _this = this;
	        if (!this._initStatus.done) {
	            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
	        }
	        var /** @type {?} */ componentFactory;
	        if (componentOrFactory instanceof ComponentFactory) {
	            componentFactory = componentOrFactory;
	        }
	        else {
	            componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
	        }
	        this._rootComponentTypes.push(componentFactory.componentType);
	        // Create a factory associated with the current module if it's not bound to some other
	        var /** @type {?} */ ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?
	            null :
	            this._injector.get(NgModuleRef);
	        var /** @type {?} */ compRef = componentFactory.create(Injector.NULL, [], componentFactory.selector, ngModule);
	        compRef.onDestroy(function () { _this._unloadComponent(compRef); });
	        var /** @type {?} */ testability = compRef.injector.get(Testability, null);
	        if (testability) {
	            compRef.injector.get(TestabilityRegistry)
	                .registerApplication(compRef.location.nativeElement, testability);
	        }
	        this._loadComponent(compRef);
	        if (isDevMode()) {
	            this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode.");
	        }
	        return compRef;
	    };
	    /**
	     * @param {?} componentRef
	     * @return {?}
	     */
	    ApplicationRef_.prototype._loadComponent = function (componentRef) {
	        this.attachView(componentRef.hostView);
	        this.tick();
	        this._rootComponents.push(componentRef);
	        // Get the listeners lazily to prevent DI cycles.
	        var /** @type {?} */ listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
	        listeners.forEach(function (listener) { return listener(componentRef); });
	    };
	    /**
	     * @param {?} componentRef
	     * @return {?}
	     */
	    ApplicationRef_.prototype._unloadComponent = function (componentRef) {
	        this.detachView(componentRef.hostView);
	        remove(this._rootComponents, componentRef);
	    };
	    /**
	     * @return {?}
	     */
	    ApplicationRef_.prototype.tick = function () {
	        if (this._runningTick) {
	            throw new Error('ApplicationRef.tick is called recursively');
	        }
	        var /** @type {?} */ scope = ApplicationRef_._tickScope();
	        try {
	            this._runningTick = true;
	            this._views.forEach(function (view) { return view.detectChanges(); });
	            if (this._enforceNoNewChanges) {
	                this._views.forEach(function (view) { return view.checkNoChanges(); });
	            }
	        }
	        finally {
	            this._runningTick = false;
	            wtfLeave(scope);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    ApplicationRef_.prototype.ngOnDestroy = function () {
	        // TODO(alxhub): Dispose of the NgZone.
	        this._views.slice().forEach(function (view) { return view.destroy(); });
	    };
	    Object.defineProperty(ApplicationRef_.prototype, "viewCount", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._views.length; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._rootComponentTypes; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationRef_.prototype, "components", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._rootComponents; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationRef_.prototype, "isStable", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._isStable; },
	        enumerable: true,
	        configurable: true
	    });
	    return ApplicationRef_;
	}(ApplicationRef));
	/**
	 * \@internal
	 */
	ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
	ApplicationRef_.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	ApplicationRef_.ctorParameters = function () { return [
	    { type: NgZone, },
	    { type: Console, },
	    { type: Injector, },
	    { type: ErrorHandler, },
	    { type: ComponentFactoryResolver, },
	    { type: ApplicationInitStatus, },
	]; };
	/**
	 * @template T
	 * @param {?} list
	 * @param {?} el
	 * @return {?}
	 */
	function remove(list, el) {
	    var /** @type {?} */ index = list.indexOf(el);
	    if (index > -1) {
	        list.splice(index, 1);
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Public API for Zone
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @deprecated Use `RendererType2` (and `Renderer2`) instead.
	 */
	var RenderComponentType = (function () {
	    /**
	     * @param {?} id
	     * @param {?} templateUrl
	     * @param {?} slotCount
	     * @param {?} encapsulation
	     * @param {?} styles
	     * @param {?} animations
	     */
	    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
	        this.id = id;
	        this.templateUrl = templateUrl;
	        this.slotCount = slotCount;
	        this.encapsulation = encapsulation;
	        this.styles = styles;
	        this.animations = animations;
	    }
	    return RenderComponentType;
	}());
	/**
	 * @deprecated Debug info is handeled internally in the view engine now.
	 * @abstract
	 */
	var RenderDebugInfo = (function () {
	    function RenderDebugInfo() {
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.injector = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.component = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.providerTokens = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.references = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.context = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.source = function () { };
	    return RenderDebugInfo;
	}());
	/**
	 * @deprecated Use the `Renderer2` instead.
	 * @abstract
	 */
	var Renderer = (function () {
	    function Renderer() {
	    }
	    /**
	     * @abstract
	     * @param {?} selectorOrNode
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };
	    /**
	     * @abstract
	     * @param {?} parentElement
	     * @param {?} name
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };
	    /**
	     * @abstract
	     * @param {?} hostElement
	     * @return {?}
	     */
	    Renderer.prototype.createViewRoot = function (hostElement) { };
	    /**
	     * @abstract
	     * @param {?} parentElement
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };
	    /**
	     * @abstract
	     * @param {?} parentElement
	     * @param {?} value
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    Renderer.prototype.createText = function (parentElement, value, debugInfo) { };
	    /**
	     * @abstract
	     * @param {?} parentElement
	     * @param {?} nodes
	     * @return {?}
	     */
	    Renderer.prototype.projectNodes = function (parentElement, nodes) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @param {?} viewRootNodes
	     * @return {?}
	     */
	    Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };
	    /**
	     * @abstract
	     * @param {?} viewRootNodes
	     * @return {?}
	     */
	    Renderer.prototype.detachView = function (viewRootNodes) { };
	    /**
	     * @abstract
	     * @param {?} hostElement
	     * @param {?} viewAllNodes
	     * @return {?}
	     */
	    Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} name
	     * @param {?} callback
	     * @return {?}
	     */
	    Renderer.prototype.listen = function (renderElement, name, callback) { };
	    /**
	     * @abstract
	     * @param {?} target
	     * @param {?} name
	     * @param {?} callback
	     * @return {?}
	     */
	    Renderer.prototype.listenGlobal = function (target, name, callback) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} propertyName
	     * @param {?} propertyValue
	     * @return {?}
	     */
	    Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} attributeName
	     * @param {?} attributeValue
	     * @return {?}
	     */
	    Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };
	    /**
	     * Used only in debug mode to serialize property changes to dom nodes as attributes.
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} propertyName
	     * @param {?} propertyValue
	     * @return {?}
	     */
	    Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} className
	     * @param {?} isAdd
	     * @return {?}
	     */
	    Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} styleName
	     * @param {?} styleValue
	     * @return {?}
	     */
	    Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} methodName
	     * @param {?=} args
	     * @return {?}
	     */
	    Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };
	    /**
	     * @abstract
	     * @param {?} renderNode
	     * @param {?} text
	     * @return {?}
	     */
	    Renderer.prototype.setText = function (renderNode, text) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} startingStyles
	     * @param {?} keyframes
	     * @param {?} duration
	     * @param {?} delay
	     * @param {?} easing
	     * @param {?=} previousPlayers
	     * @return {?}
	     */
	    Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
	    return Renderer;
	}());
	var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');
	/**
	 * Injectable service that provides a low-level interface for modifying the UI.
	 *
	 * Use this service to bypass Angular's templating and make custom UI changes that can't be
	 * expressed declaratively. For example if you need to set a property or an attribute whose name is
	 * not statically known, use {\@link #setElementProperty} or {\@link #setElementAttribute}
	 * respectively.
	 *
	 * If you are implementing a custom renderer, you must implement this interface.
	 *
	 * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
	 *
	 * @deprecated Use `RendererFactory2` instead.
	 * @abstract
	 */
	var RootRenderer = (function () {
	    function RootRenderer() {
	    }
	    /**
	     * @abstract
	     * @param {?} componentType
	     * @return {?}
	     */
	    RootRenderer.prototype.renderComponent = function (componentType) { };
	    return RootRenderer;
	}());
	/**
	 * \@experimental
	 * @abstract
	 */
	var RendererFactory2 = (function () {
	    function RendererFactory2() {
	    }
	    /**
	     * @abstract
	     * @param {?} hostElement
	     * @param {?} type
	     * @return {?}
	     */
	    RendererFactory2.prototype.createRenderer = function (hostElement, type) { };
	    return RendererFactory2;
	}());
	var RendererStyleFlags2 = {};
	RendererStyleFlags2.Important = 1;
	RendererStyleFlags2.DashCase = 2;
	RendererStyleFlags2[RendererStyleFlags2.Important] = "Important";
	RendererStyleFlags2[RendererStyleFlags2.DashCase] = "DashCase";
	/**
	 * \@experimental
	 * @abstract
	 */
	var Renderer2 = (function () {
	    function Renderer2() {
	    }
	    /**
	     * This field can be used to store arbitrary data on this renderer instance.
	     * This is useful for renderers that delegate to other renderers.
	     * @abstract
	     * @return {?}
	     */
	    Renderer2.prototype.data = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    Renderer2.prototype.destroy = function () { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    Renderer2.prototype.createElement = function (name, namespace) { };
	    /**
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    Renderer2.prototype.createComment = function (value) { };
	    /**
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    Renderer2.prototype.createText = function (value) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} newChild
	     * @return {?}
	     */
	    Renderer2.prototype.appendChild = function (parent, newChild) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} newChild
	     * @param {?} refChild
	     * @return {?}
	     */
	    Renderer2.prototype.insertBefore = function (parent, newChild, refChild) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} oldChild
	     * @return {?}
	     */
	    Renderer2.prototype.removeChild = function (parent, oldChild) { };
	    /**
	     * @abstract
	     * @param {?} selectorOrNode
	     * @return {?}
	     */
	    Renderer2.prototype.selectRootElement = function (selectorOrNode) { };
	    /**
	     * Attention: On WebWorkers, this will always return a value,
	     * as we are asking for a result synchronously. I.e.
	     * the caller can't rely on checking whether this is null or not.
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    Renderer2.prototype.parentNode = function (node) { };
	    /**
	     * Attention: On WebWorkers, this will always return a value,
	     * as we are asking for a result synchronously. I.e.
	     * the caller can't rely on checking whether this is null or not.
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    Renderer2.prototype.nextSibling = function (node) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @param {?=} namespace
	     * @return {?}
	     */
	    Renderer2.prototype.setAttribute = function (el, name, value, namespace) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    Renderer2.prototype.removeAttribute = function (el, name, namespace) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    Renderer2.prototype.addClass = function (el, name) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    Renderer2.prototype.removeClass = function (el, name) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} style
	     * @param {?} value
	     * @param {?=} flags
	     * @return {?}
	     */
	    Renderer2.prototype.setStyle = function (el, style, value, flags) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} style
	     * @param {?=} flags
	     * @return {?}
	     */
	    Renderer2.prototype.removeStyle = function (el, style, flags) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    Renderer2.prototype.setProperty = function (el, name, value) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @param {?} value
	     * @return {?}
	     */
	    Renderer2.prototype.setValue = function (node, value) { };
	    /**
	     * @abstract
	     * @param {?} target
	     * @param {?} eventName
	     * @param {?} callback
	     * @return {?}
	     */
	    Renderer2.prototype.listen = function (target, eventName, callback) { };
	    return Renderer2;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Public API for render
	var ElementRef = (function () {
	    /**
	     * @param {?} nativeElement
	     */
	    function ElementRef(nativeElement) {
	        this.nativeElement = nativeElement;
	    }
	    return ElementRef;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Used to load ng module factories.
	 * \@stable
	 * @abstract
	 */
	var NgModuleFactoryLoader = (function () {
	    function NgModuleFactoryLoader() {
	    }
	    /**
	     * @abstract
	     * @param {?} path
	     * @return {?}
	     */
	    NgModuleFactoryLoader.prototype.load = function (path) { };
	    return NgModuleFactoryLoader;
	}());
	var moduleFactories = new Map();
	/**
	 * Registers a loaded module. Should only be called from generated NgModuleFactory code.
	 * \@experimental
	 * @param {?} id
	 * @param {?} factory
	 * @return {?}
	 */
	function registerModuleFactory(id, factory) {
	    var /** @type {?} */ existing = moduleFactories.get(id);
	    if (existing) {
	        throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
	    }
	    moduleFactories.set(id, factory);
	}
	/**
	 * @return {?}
	 */
	/**
	 * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
	 * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
	 * cannot be found.
	 * \@experimental
	 * @param {?} id
	 * @return {?}
	 */
	function getModuleFactory(id) {
	    var /** @type {?} */ factory = moduleFactories.get(id);
	    if (!factory)
	        throw new Error("No module with ID " + id + " loaded");
	    return factory;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An unmodifiable list of items that Angular keeps up to date when the state
	 * of the application changes.
	 *
	 * The type of object that {\@link Query} and {\@link ViewQueryMetadata} provide.
	 *
	 * Implements an iterable interface, therefore it can be used in both ES6
	 * javascript `for (var i of items)` loops as well as in Angular templates with
	 * `*ngFor="let i of myList"`.
	 *
	 * Changes can be observed by subscribing to the changes `Observable`.
	 *
	 * NOTE: In the future this class will implement an `Observable` interface.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
	 * ```typescript
	 * \@Component({...})
	 * class Container {
	 *   \@ViewChildren(Item) items:QueryList<Item>;
	 * }
	 * ```
	 * \@stable
	 */
	var QueryList = (function () {
	    function QueryList() {
	        this._dirty = true;
	        this._results = [];
	        this._emitter = new EventEmitter();
	    }
	    Object.defineProperty(QueryList.prototype, "changes", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._emitter; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "length", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._results.length; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "first", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._results[0]; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "last", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._results[this.length - 1]; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * See
	     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
	     * @template U
	     * @param {?} fn
	     * @return {?}
	     */
	    QueryList.prototype.map = function (fn) { return this._results.map(fn); };
	    /**
	     * See
	     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
	     * @param {?} fn
	     * @return {?}
	     */
	    QueryList.prototype.filter = function (fn) {
	        return this._results.filter(fn);
	    };
	    /**
	     * See
	     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
	     * @param {?} fn
	     * @return {?}
	     */
	    QueryList.prototype.find = function (fn) { return this._results.find(fn); };
	    /**
	     * See
	     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
	     * @template U
	     * @param {?} fn
	     * @param {?} init
	     * @return {?}
	     */
	    QueryList.prototype.reduce = function (fn, init) {
	        return this._results.reduce(fn, init);
	    };
	    /**
	     * See
	     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
	     * @param {?} fn
	     * @return {?}
	     */
	    QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };
	    /**
	     * See
	     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
	     * @param {?} fn
	     * @return {?}
	     */
	    QueryList.prototype.some = function (fn) {
	        return this._results.some(fn);
	    };
	    /**
	     * @return {?}
	     */
	    QueryList.prototype.toArray = function () { return this._results.slice(); };
	    /**
	     * @return {?}
	     */
	    QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };
	    /**
	     * @return {?}
	     */
	    QueryList.prototype.toString = function () { return this._results.toString(); };
	    /**
	     * @param {?} res
	     * @return {?}
	     */
	    QueryList.prototype.reset = function (res) {
	        this._results = flatten(res);
	        this._dirty = false;
	    };
	    /**
	     * @return {?}
	     */
	    QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };
	    /**
	     * internal
	     * @return {?}
	     */
	    QueryList.prototype.setDirty = function () { this._dirty = true; };
	    Object.defineProperty(QueryList.prototype, "dirty", {
	        /**
	         * internal
	         * @return {?}
	         */
	        get: function () { return this._dirty; },
	        enumerable: true,
	        configurable: true
	    });
	    return QueryList;
	}());
	/**
	 * @template T
	 * @param {?} list
	 * @return {?}
	 */
	function flatten(list) {
	    return list.reduce(function (flat, item) {
	        var /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;
	        return ((flat)).concat(flatItem);
	    }, []);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _SEPARATOR = '#';
	var FACTORY_CLASS_SUFFIX = 'NgFactory';
	/**
	 * Configuration for SystemJsNgModuleLoader.
	 * token.
	 *
	 * \@experimental
	 * @abstract
	 */
	var SystemJsNgModuleLoaderConfig = (function () {
	    function SystemJsNgModuleLoaderConfig() {
	    }
	    return SystemJsNgModuleLoaderConfig;
	}());
	var DEFAULT_CONFIG = {
	    factoryPathPrefix: '',
	    factoryPathSuffix: '.ngfactory',
	};
	/**
	 * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
	 * \@experimental
	 */
	var SystemJsNgModuleLoader = (function () {
	    /**
	     * @param {?} _compiler
	     * @param {?=} config
	     */
	    function SystemJsNgModuleLoader(_compiler, config) {
	        this._compiler = _compiler;
	        this._config = config || DEFAULT_CONFIG;
	    }
	    /**
	     * @param {?} path
	     * @return {?}
	     */
	    SystemJsNgModuleLoader.prototype.load = function (path) {
	        var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;
	        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
	    };
	    /**
	     * @param {?} path
	     * @return {?}
	     */
	    SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
	        var _this = this;
	        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	        if (exportName === undefined) {
	            exportName = 'default';
	        }
	        return System.import(module)
	            .then(function (module) { return module[exportName]; })
	            .then(function (type) { return checkNotEmpty(type, module, exportName); })
	            .then(function (type) { return _this._compiler.compileModuleAsync(type); });
	    };
	    /**
	     * @param {?} path
	     * @return {?}
	     */
	    SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
	        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	        var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;
	        if (exportName === undefined) {
	            exportName = 'default';
	            factoryClassSuffix = '';
	        }
	        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
	            .then(function (module) { return module[exportName + factoryClassSuffix]; })
	            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
	    };
	    return SystemJsNgModuleLoader;
	}());
	SystemJsNgModuleLoader.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	SystemJsNgModuleLoader.ctorParameters = function () { return [
	    { type: Compiler, },
	    { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },
	]; };
	/**
	 * @param {?} value
	 * @param {?} modulePath
	 * @param {?} exportName
	 * @return {?}
	 */
	function checkNotEmpty(value, modulePath, exportName) {
	    if (!value) {
	        throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
	    }
	    return value;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents an Embedded Template that can be used to instantiate Embedded Views.
	 *
	 * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element
	 * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into
	 * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for
	 * the `TemplateRef` from a Component or a Directive via {\@link Query}.
	 *
	 * To instantiate Embedded Views based on a Template, use
	 * {\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
	 * View Container.
	 * \@stable
	 * @abstract
	 */
	var TemplateRef = (function () {
	    function TemplateRef() {
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    TemplateRef.prototype.elementRef = function () { };
	    /**
	     * @abstract
	     * @param {?} context
	     * @return {?}
	     */
	    TemplateRef.prototype.createEmbeddedView = function (context) { };
	    return TemplateRef;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents a container where one or more Views can be attached.
	 *
	 * The container can contain two kinds of Views. Host Views, created by instantiating a
	 * {\@link Component} via {\@link #createComponent}, and Embedded Views, created by instantiating an
	 * {\@link TemplateRef Embedded Template} via {\@link #createEmbeddedView}.
	 *
	 * The location of the View Container within the containing View is specified by the Anchor
	 * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
	 * have a single View Container.
	 *
	 * Root elements of Views attached to this container become siblings of the Anchor Element in
	 * the Rendered View.
	 *
	 * To access a `ViewContainerRef` of an Element, you can either place a {\@link Directive} injected
	 * with `ViewContainerRef` on the Element, or you obtain it via a {\@link ViewChild} query.
	 * \@stable
	 * @abstract
	 */
	var ViewContainerRef = (function () {
	    function ViewContainerRef() {
	    }
	    /**
	     * Anchor element that specifies the location of this container in the containing View.
	     * <!-- TODO: rename to anchorElement -->
	     * @abstract
	     * @return {?}
	     */
	    ViewContainerRef.prototype.element = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ViewContainerRef.prototype.injector = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ViewContainerRef.prototype.parentInjector = function () { };
	    /**
	     * Destroys all Views in this container.
	     * @abstract
	     * @return {?}
	     */
	    ViewContainerRef.prototype.clear = function () { };
	    /**
	     * Returns the {\@link ViewRef} for the View located in this container at the specified index.
	     * @abstract
	     * @param {?} index
	     * @return {?}
	     */
	    ViewContainerRef.prototype.get = function (index) { };
	    /**
	     * Returns the number of Views currently attached to this container.
	     * @abstract
	     * @return {?}
	     */
	    ViewContainerRef.prototype.length = function () { };
	    /**
	     * Instantiates an Embedded View based on the {\@link TemplateRef `templateRef`} and inserts it
	     * into this container at the specified `index`.
	     *
	     * If `index` is not specified, the new View will be inserted as the last View in the container.
	     *
	     * Returns the {\@link ViewRef} for the newly created View.
	     * @abstract
	     * @template C
	     * @param {?} templateRef
	     * @param {?=} context
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };
	    /**
	     * Instantiates a single {\@link Component} and inserts its Host View into this container at the
	     * specified `index`.
	     *
	     * The component is instantiated using its {\@link ComponentFactory} which can be
	     * obtained via {\@link ComponentFactoryResolver#resolveComponentFactory}.
	     *
	     * If `index` is not specified, the new View will be inserted as the last View in the container.
	     *
	     * You can optionally specify the {\@link Injector} that will be used as parent for the Component.
	     *
	     * Returns the {\@link ComponentRef} of the Host View created for the newly instantiated Component.
	     * @abstract
	     * @template C
	     * @param {?} componentFactory
	     * @param {?=} index
	     * @param {?=} injector
	     * @param {?=} projectableNodes
	     * @param {?=} ngModule
	     * @return {?}
	     */
	    ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModule) { };
	    /**
	     * Inserts a View identified by a {\@link ViewRef} into the container at the specified `index`.
	     *
	     * If `index` is not specified, the new View will be inserted as the last View in the container.
	     *
	     * Returns the inserted {\@link ViewRef}.
	     * @abstract
	     * @param {?} viewRef
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef.prototype.insert = function (viewRef, index) { };
	    /**
	     * Moves a View identified by a {\@link ViewRef} into the container at the specified `index`.
	     *
	     * Returns the inserted {\@link ViewRef}.
	     * @abstract
	     * @param {?} viewRef
	     * @param {?} currentIndex
	     * @return {?}
	     */
	    ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };
	    /**
	     * Returns the index of the View, specified via {\@link ViewRef}, within the current container or
	     * `-1` if this container doesn't contain the View.
	     * @abstract
	     * @param {?} viewRef
	     * @return {?}
	     */
	    ViewContainerRef.prototype.indexOf = function (viewRef) { };
	    /**
	     * Destroys a View attached to this container at the specified `index`.
	     *
	     * If `index` is not specified, the last View in the container will be removed.
	     * @abstract
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef.prototype.remove = function (index) { };
	    /**
	     * Use along with {\@link #insert} to move a View within the current container.
	     *
	     * If the `index` param is omitted, the last {\@link ViewRef} is detached.
	     * @abstract
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef.prototype.detach = function (index) { };
	    return ViewContainerRef;
	}());
	/**
	 * \@stable
	 * @abstract
	 */
	var ChangeDetectorRef = (function () {
	    function ChangeDetectorRef() {
	    }
	    /**
	     * Marks all {\@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.
	     *
	     * <!-- TODO: Add a link to a chapter on OnPush components -->
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))
	     *
	     * ```typescript
	     * \@Component({
	     *   selector: 'cmp',
	     *   changeDetection: ChangeDetectionStrategy.OnPush,
	     *   template: `Number of ticks: {{numberOfTicks}}`
	     * })
	     * class Cmp {
	     *   numberOfTicks = 0;
	     *
	     *   constructor(ref: ChangeDetectorRef) {
	     *     setInterval(() => {
	     *       this.numberOfTicks ++
	     *       // the following is required, otherwise the view will not be updated
	     *       this.ref.markForCheck();
	     *     }, 1000);
	     *   }
	     * }
	     *
	     * \@Component({
	     *   selector: 'app',
	     *   changeDetection: ChangeDetectionStrategy.OnPush,
	     *   template: `
	     *     <cmp><cmp>
	     *   `,
	     * })
	     * class App {
	     * }
	     * ```
	     * @abstract
	     * @return {?}
	     */
	    ChangeDetectorRef.prototype.markForCheck = function () { };
	    /**
	     * Detaches the change detector from the change detector tree.
	     *
	     * The detached change detector will not be checked until it is reattached.
	     *
	     * This can also be used in combination with {\@link ChangeDetectorRef#detectChanges} to implement
	     * local change
	     * detection checks.
	     *
	     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	     *
	     * ### Example
	     *
	     * The following example defines a component with a large list of readonly data.
	     * Imagine the data changes constantly, many times per second. For performance reasons,
	     * we want to check and update the list every five seconds. We can do that by detaching
	     * the component's change detector and doing a local check every five seconds.
	     *
	     * ```typescript
	     * class DataProvider {
	     *   // in a real application the returned data will be different every time
	     *   get data() {
	     *     return [1,2,3,4,5];
	     *   }
	     * }
	     *
	     * \@Component({
	     *   selector: 'giant-list',
	     *   template: `
	     *     <li *ngFor="let d of dataProvider.data">Data {{d}}</lig>
	     *   `,
	     * })
	     * class GiantList {
	     *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {
	     *     ref.detach();
	     *     setInterval(() => {
	     *       this.ref.detectChanges();
	     *     }, 5000);
	     *   }
	     * }
	     *
	     * \@Component({
	     *   selector: 'app',
	     *   providers: [DataProvider],
	     *   template: `
	     *     <giant-list><giant-list>
	     *   `,
	     * })
	     * class App {
	     * }
	     * ```
	     * @abstract
	     * @return {?}
	     */
	    ChangeDetectorRef.prototype.detach = function () { };
	    /**
	     * Checks the change detector and its children.
	     *
	     * This can also be used in combination with {\@link ChangeDetectorRef#detach} to implement local
	     * change detection
	     * checks.
	     *
	     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	     *
	     * ### Example
	     *
	     * The following example defines a component with a large list of readonly data.
	     * Imagine, the data changes constantly, many times per second. For performance reasons,
	     * we want to check and update the list every five seconds.
	     *
	     * We can do that by detaching the component's change detector and doing a local change detection
	     * check
	     * every five seconds.
	     *
	     * See {\@link ChangeDetectorRef#detach} for more information.
	     * @abstract
	     * @return {?}
	     */
	    ChangeDetectorRef.prototype.detectChanges = function () { };
	    /**
	     * Checks the change detector and its children, and throws if any changes are detected.
	     *
	     * This is used in development mode to verify that running change detection doesn't introduce
	     * other changes.
	     * @abstract
	     * @return {?}
	     */
	    ChangeDetectorRef.prototype.checkNoChanges = function () { };
	    /**
	     * Reattach the change detector to the change detector tree.
	     *
	     * This also marks OnPush ancestors as to be checked. This reattached change detector will be
	     * checked during the next change detection run.
	     *
	     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))
	     *
	     * The following example creates a component displaying `live` data. The component will detach
	     * its change detector from the main change detector tree when the component's live property
	     * is set to false.
	     *
	     * ```typescript
	     * class DataProvider {
	     *   data = 1;
	     *
	     *   constructor() {
	     *     setInterval(() => {
	     *       this.data = this.data * 2;
	     *     }, 500);
	     *   }
	     * }
	     *
	     * \@Component({
	     *   selector: 'live-data',
	     *   inputs: ['live'],
	     *   template: 'Data: {{dataProvider.data}}'
	     * })
	     * class LiveData {
	     *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {}
	     *
	     *   set live(value) {
	     *     if (value)
	     *       this.ref.reattach();
	     *     else
	     *       this.ref.detach();
	     *   }
	     * }
	     *
	     * \@Component({
	     *   selector: 'app',
	     *   providers: [DataProvider],
	     *   template: `
	     *     Live Update: <input type="checkbox" [(ngModel)]="live">
	     *     <live-data [live]="live"><live-data>
	     *   `,
	     * })
	     * class App {
	     *   live = true;
	     * }
	     * ```
	     * @abstract
	     * @return {?}
	     */
	    ChangeDetectorRef.prototype.reattach = function () { };
	    return ChangeDetectorRef;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@stable
	 * @abstract
	 */
	var ViewRef = (function (_super) {
	    __extends(ViewRef, _super);
	    function ViewRef() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * Destroys the view and all of the data structures associated with it.
	     * @abstract
	     * @return {?}
	     */
	    ViewRef.prototype.destroy = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ViewRef.prototype.destroyed = function () { };
	    /**
	     * @abstract
	     * @param {?} callback
	     * @return {?}
	     */
	    ViewRef.prototype.onDestroy = function (callback) { };
	    return ViewRef;
	}(ChangeDetectorRef));
	/**
	 * Represents an Angular View.
	 *
	 * <!-- TODO: move the next two paragraphs to the dev guide -->
	 * A View is a fundamental building block of the application UI. It is the smallest grouping of
	 * Elements which are created and destroyed together.
	 *
	 * Properties of elements in a View can change, but the structure (number and order) of elements in
	 * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
	 * removing nested Views via a {\@link ViewContainerRef}. Each View can contain many View Containers.
	 * <!-- /TODO -->
	 *
	 * ### Example
	 *
	 * Given this template...
	 *
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <li *ngFor="let  item of items">{{item}}</li>
	 * </ul>
	 * ```
	 *
	 * We have two {\@link TemplateRef}s:
	 *
	 * Outer {\@link TemplateRef}:
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
	 * </ul>
	 * ```
	 *
	 * Inner {\@link TemplateRef}:
	 * ```
	 *   <li>{{item}}</li>
	 * ```
	 *
	 * Notice that the original template is broken down into two separate {\@link TemplateRef}s.
	 *
	 * The outer/inner {\@link TemplateRef}s are then assembled into views like so:
	 *
	 * ```
	 * <!-- ViewRef: outer-0 -->
	 * Count: 2
	 * <ul>
	 *   <ng-template view-container-ref></ng-template>
	 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
	 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
	 * </ul>
	 * <!-- /ViewRef: outer-0 -->
	 * ```
	 * \@experimental
	 * @abstract
	 */
	var EmbeddedViewRef = (function (_super) {
	    __extends(EmbeddedViewRef, _super);
	    function EmbeddedViewRef() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    EmbeddedViewRef.prototype.context = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    EmbeddedViewRef.prototype.rootNodes = function () { };
	    return EmbeddedViewRef;
	}(ViewRef));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Public API for compiler
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EventListener = (function () {
	    /**
	     * @param {?} name
	     * @param {?} callback
	     */
	    function EventListener(name, callback) {
	        this.name = name;
	        this.callback = callback;
	    }
	    
	    return EventListener;
	}());
	/**
	 * \@experimental All debugging apis are currently experimental.
	 */
	var DebugNode = (function () {
	    /**
	     * @param {?} nativeNode
	     * @param {?} parent
	     * @param {?} _debugContext
	     */
	    function DebugNode(nativeNode, parent, _debugContext) {
	        this._debugContext = _debugContext;
	        this.nativeNode = nativeNode;
	        if (parent && parent instanceof DebugElement) {
	            parent.addChild(this);
	        }
	        else {
	            this.parent = null;
	        }
	        this.listeners = [];
	    }
	    Object.defineProperty(DebugNode.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._debugContext ? this._debugContext.injector : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "componentInstance", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._debugContext ? this._debugContext.component : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "context", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._debugContext ? this._debugContext.context : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "references", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return this._debugContext ? this._debugContext.references : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "providerTokens", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return this._debugContext ? this._debugContext.providerTokens : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "source", {
	        /**
	         * @deprecated since v4
	         * @return {?}
	         */
	        get: function () { return 'Deprecated since v4'; },
	        enumerable: true,
	        configurable: true
	    });
	    return DebugNode;
	}());
	/**
	 * \@experimental All debugging apis are currently experimental.
	 */
	var DebugElement = (function (_super) {
	    __extends(DebugElement, _super);
	    /**
	     * @param {?} nativeNode
	     * @param {?} parent
	     * @param {?} _debugContext
	     */
	    function DebugElement(nativeNode, parent, _debugContext) {
	        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;
	        _this.properties = {};
	        _this.attributes = {};
	        _this.classes = {};
	        _this.styles = {};
	        _this.childNodes = [];
	        _this.nativeElement = nativeNode;
	        return _this;
	    }
	    /**
	     * @param {?} child
	     * @return {?}
	     */
	    DebugElement.prototype.addChild = function (child) {
	        if (child) {
	            this.childNodes.push(child);
	            child.parent = this;
	        }
	    };
	    /**
	     * @param {?} child
	     * @return {?}
	     */
	    DebugElement.prototype.removeChild = function (child) {
	        var /** @type {?} */ childIndex = this.childNodes.indexOf(child);
	        if (childIndex !== -1) {
	            child.parent = null;
	            this.childNodes.splice(childIndex, 1);
	        }
	    };
	    /**
	     * @param {?} child
	     * @param {?} newChildren
	     * @return {?}
	     */
	    DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
	        var _this = this;
	        var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);
	        if (siblingIndex !== -1) {
	            (_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren));
	            newChildren.forEach(function (c) {
	                if (c.parent) {
	                    c.parent.removeChild(c);
	                }
	                c.parent = _this;
	            });
	        }
	        var _a;
	    };
	    /**
	     * @param {?} refChild
	     * @param {?} newChild
	     * @return {?}
	     */
	    DebugElement.prototype.insertBefore = function (refChild, newChild) {
	        var /** @type {?} */ refIndex = this.childNodes.indexOf(refChild);
	        if (refIndex === -1) {
	            this.addChild(newChild);
	        }
	        else {
	            if (newChild.parent) {
	                newChild.parent.removeChild(newChild);
	            }
	            newChild.parent = this;
	            this.childNodes.splice(refIndex, 0, newChild);
	        }
	    };
	    /**
	     * @param {?} predicate
	     * @return {?}
	     */
	    DebugElement.prototype.query = function (predicate) {
	        var /** @type {?} */ results = this.queryAll(predicate);
	        return results[0] || null;
	    };
	    /**
	     * @param {?} predicate
	     * @return {?}
	     */
	    DebugElement.prototype.queryAll = function (predicate) {
	        var /** @type {?} */ matches = [];
	        _queryElementChildren(this, predicate, matches);
	        return matches;
	    };
	    /**
	     * @param {?} predicate
	     * @return {?}
	     */
	    DebugElement.prototype.queryAllNodes = function (predicate) {
	        var /** @type {?} */ matches = [];
	        _queryNodeChildren(this, predicate, matches);
	        return matches;
	    };
	    Object.defineProperty(DebugElement.prototype, "children", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} eventName
	     * @param {?} eventObj
	     * @return {?}
	     */
	    DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
	        this.listeners.forEach(function (listener) {
	            if (listener.name == eventName) {
	                listener.callback(eventObj);
	            }
	        });
	    };
	    return DebugElement;
	}(DebugNode));
	/**
	 * \@experimental
	 * @param {?} debugEls
	 * @return {?}
	 */
	function asNativeElements(debugEls) {
	    return debugEls.map(function (el) { return el.nativeElement; });
	}
	/**
	 * @param {?} element
	 * @param {?} predicate
	 * @param {?} matches
	 * @return {?}
	 */
	function _queryElementChildren(element, predicate, matches) {
	    element.childNodes.forEach(function (node) {
	        if (node instanceof DebugElement) {
	            if (predicate(node)) {
	                matches.push(node);
	            }
	            _queryElementChildren(node, predicate, matches);
	        }
	    });
	}
	/**
	 * @param {?} parentNode
	 * @param {?} predicate
	 * @param {?} matches
	 * @return {?}
	 */
	function _queryNodeChildren(parentNode, predicate, matches) {
	    if (parentNode instanceof DebugElement) {
	        parentNode.childNodes.forEach(function (node) {
	            if (predicate(node)) {
	                matches.push(node);
	            }
	            if (node instanceof DebugElement) {
	                _queryNodeChildren(node, predicate, matches);
	            }
	        });
	    }
	}
	// Need to keep the nodes in a global Map so that multiple angular apps are supported.
	var _nativeNodeToDebugNode = new Map();
	/**
	 * \@experimental
	 * @param {?} nativeNode
	 * @return {?}
	 */
	function getDebugNode(nativeNode) {
	    return _nativeNodeToDebugNode.get(nativeNode);
	}
	/**
	 * @return {?}
	 */
	/**
	 * @param {?} node
	 * @return {?}
	 */
	function indexDebugNode(node) {
	    _nativeNodeToDebugNode.set(node.nativeNode, node);
	}
	/**
	 * @param {?} node
	 * @return {?}
	 */
	function removeDebugNodeFromIndex(node) {
	    _nativeNodeToDebugNode.delete(node.nativeNode);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} a
	 * @param {?} b
	 * @return {?}
	 */
	function devModeEqual(a, b) {
	    var /** @type {?} */ isListLikeIterableA = isListLikeIterable(a);
	    var /** @type {?} */ isListLikeIterableB = isListLikeIterable(b);
	    if (isListLikeIterableA && isListLikeIterableB) {
	        return areIterablesEqual(a, b, devModeEqual);
	    }
	    else {
	        var /** @type {?} */ isAObject = a && (typeof a === 'object' || typeof a === 'function');
	        var /** @type {?} */ isBObject = b && (typeof b === 'object' || typeof b === 'function');
	        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
	            return true;
	        }
	        else {
	            return looseIdentical(a, b);
	        }
	    }
	}
	/**
	 * Indicates that the result of a {\@link Pipe} transformation has changed even though the
	 * reference
	 * has not changed.
	 *
	 * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
	 *
	 * Example:
	 *
	 * ```
	 * if (this._latestValue === this._latestReturnedValue) {
	 *    return this._latestReturnedValue;
	 *  } else {
	 *    this._latestReturnedValue = this._latestValue;
	 *    return WrappedValue.wrap(this._latestValue); // this will force update
	 *  }
	 * ```
	 * \@stable
	 */
	var WrappedValue = (function () {
	    /**
	     * @param {?} wrapped
	     */
	    function WrappedValue(wrapped) {
	        this.wrapped = wrapped;
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    WrappedValue.wrap = function (value) { return new WrappedValue(value); };
	    return WrappedValue;
	}());
	/**
	 * Helper class for unwrapping WrappedValue s
	 */
	var ValueUnwrapper = (function () {
	    function ValueUnwrapper() {
	        this.hasWrappedValue = false;
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    ValueUnwrapper.prototype.unwrap = function (value) {
	        if (value instanceof WrappedValue) {
	            this.hasWrappedValue = true;
	            return value.wrapped;
	        }
	        return value;
	    };
	    /**
	     * @return {?}
	     */
	    ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };
	    return ValueUnwrapper;
	}());
	/**
	 * Represents a basic change from a previous to a new value.
	 * \@stable
	 */
	var SimpleChange = (function () {
	    /**
	     * @param {?} previousValue
	     * @param {?} currentValue
	     * @param {?} firstChange
	     */
	    function SimpleChange(previousValue, currentValue, firstChange) {
	        this.previousValue = previousValue;
	        this.currentValue = currentValue;
	        this.firstChange = firstChange;
	    }
	    /**
	     * Check whether the new value is the first value assigned.
	     * @return {?}
	     */
	    SimpleChange.prototype.isFirstChange = function () { return this.firstChange; };
	    return SimpleChange;
	}());
	/**
	 * @param {?} obj
	 * @return {?}
	 */
	function isListLikeIterable(obj) {
	    if (!isJsObject(obj))
	        return false;
	    return Array.isArray(obj) ||
	        (!(obj instanceof Map) &&
	            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	}
	/**
	 * @param {?} a
	 * @param {?} b
	 * @param {?} comparator
	 * @return {?}
	 */
	function areIterablesEqual(a, b, comparator) {
	    var /** @type {?} */ iterator1 = a[getSymbolIterator()]();
	    var /** @type {?} */ iterator2 = b[getSymbolIterator()]();
	    while (true) {
	        var /** @type {?} */ item1 = iterator1.next();
	        var /** @type {?} */ item2 = iterator2.next();
	        if (item1.done && item2.done)
	            return true;
	        if (item1.done || item2.done)
	            return false;
	        if (!comparator(item1.value, item2.value))
	            return false;
	    }
	}
	/**
	 * @param {?} obj
	 * @param {?} fn
	 * @return {?}
	 */
	function iterateListLike(obj, fn) {
	    if (Array.isArray(obj)) {
	        for (var /** @type {?} */ i = 0; i < obj.length; i++) {
	            fn(obj[i]);
	        }
	    }
	    else {
	        var /** @type {?} */ iterator = obj[getSymbolIterator()]();
	        var /** @type {?} */ item = void 0;
	        while (!((item = iterator.next()).done)) {
	            fn(item.value);
	        }
	    }
	}
	/**
	 * @param {?} o
	 * @return {?}
	 */
	function isJsObject(o) {
	    return o !== null && (typeof o === 'function' || typeof o === 'object');
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DefaultIterableDifferFactory = (function () {
	    function DefaultIterableDifferFactory() {
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };
	    /**
	     * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
	     * @template V
	     * @param {?=} cdRefOrTrackBy
	     * @param {?=} trackByFn
	     * @return {?}
	     */
	    DefaultIterableDifferFactory.prototype.create = function (cdRefOrTrackBy, trackByFn) {
	        return new DefaultIterableDiffer(trackByFn || (cdRefOrTrackBy));
	    };
	    return DefaultIterableDifferFactory;
	}());
	var trackByIdentity = function (index, item) { return item; };
	/**
	 * @deprecated v4.0.0 - Should not be part of public API.
	 */
	var DefaultIterableDiffer = (function () {
	    /**
	     * @param {?=} _trackByFn
	     */
	    function DefaultIterableDiffer(_trackByFn) {
	        this._trackByFn = _trackByFn;
	        this._length = null;
	        this._collection = null;
	        this._linkedRecords = null;
	        this._unlinkedRecords = null;
	        this._previousItHead = null;
	        this._itHead = null;
	        this._itTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._movesHead = null;
	        this._movesTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	        this._identityChangesHead = null;
	        this._identityChangesTail = null;
	        this._trackByFn = this._trackByFn || trackByIdentity;
	    }
	    Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._collection; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._length; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._itHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
	        var /** @type {?} */ nextIt = this._itHead;
	        var /** @type {?} */ nextRemove = this._removalsHead;
	        var /** @type {?} */ addRemoveOffset = 0;
	        var /** @type {?} */ moveOffsets = null;
	        while (nextIt || nextRemove) {
	            // Figure out which is the next record to process
	            // Order: remove, add, move
	            var /** @type {?} */ record = !nextRemove ||
	                nextIt &&
	                    nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?
	                nextIt :
	                nextRemove;
	            var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
	            var /** @type {?} */ currentIndex = record.currentIndex;
	            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
	            if (record === nextRemove) {
	                addRemoveOffset--;
	                nextRemove = nextRemove._nextRemoved;
	            }
	            else {
	                nextIt = nextIt._next;
	                if (record.previousIndex == null) {
	                    addRemoveOffset++;
	                }
	                else {
	                    // INVARIANT:  currentIndex < previousIndex
	                    if (!moveOffsets)
	                        moveOffsets = [];
	                    var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
	                    var /** @type {?} */ localCurrentIndex = currentIndex - addRemoveOffset;
	                    if (localMovePreviousIndex != localCurrentIndex) {
	                        for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {
	                            var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
	                            var /** @type {?} */ index = offset + i;
	                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {
	                                moveOffsets[i] = offset + 1;
	                            }
	                        }
	                        var /** @type {?} */ previousIndex = record.previousIndex;
	                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
	                    }
	                }
	            }
	            if (adjPreviousIndex !== currentIndex) {
	                fn(record, adjPreviousIndex, currentIndex);
	            }
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._movesHead; record !== null; record = record._nextMoved) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} collection
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.diff = function (collection) {
	        if (collection == null)
	            collection = [];
	        if (!isListLikeIterable(collection)) {
	            throw new Error("Error trying to diff '" + collection + "'");
	        }
	        if (this.check(collection)) {
	            return this;
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.onDestroy = function () { };
	    /**
	     * @param {?} collection
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.check = function (collection) {
	        var _this = this;
	        this._reset();
	        var /** @type {?} */ record = this._itHead;
	        var /** @type {?} */ mayBeDirty = false;
	        var /** @type {?} */ index;
	        var /** @type {?} */ item;
	        var /** @type {?} */ itemTrackBy;
	        if (Array.isArray(collection)) {
	            this._length = collection.length;
	            for (var /** @type {?} */ index_1 = 0; index_1 < this._length; index_1++) {
	                item = collection[index_1];
	                itemTrackBy = this._trackByFn(index_1, item);
	                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                    record = this._mismatch(record, item, itemTrackBy, index_1);
	                    mayBeDirty = true;
	                }
	                else {
	                    if (mayBeDirty) {
	                        // TODO(misko): can we limit this to duplicates only?
	                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
	                    }
	                    if (!looseIdentical(record.item, item))
	                        this._addIdentityChange(record, item);
	                }
	                record = record._next;
	            }
	        }
	        else {
	            index = 0;
	            iterateListLike(collection, function (item) {
	                itemTrackBy = _this._trackByFn(index, item);
	                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                    record = _this._mismatch(record, item, itemTrackBy, index);
	                    mayBeDirty = true;
	                }
	                else {
	                    if (mayBeDirty) {
	                        // TODO(misko): can we limit this to duplicates only?
	                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);
	                    }
	                    if (!looseIdentical(record.item, item))
	                        _this._addIdentityChange(record, item);
	                }
	                record = record._next;
	                index++;
	            });
	            this._length = index;
	        }
	        this._truncate(record);
	        this._collection = collection;
	        return this.isDirty;
	    };
	    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return this._additionsHead !== null || this._movesHead !== null ||
	                this._removalsHead !== null || this._identityChangesHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Reset the state of the change objects to show no changes. This means set previousKey to
	     * currentKey, and clear all of the queues (additions, moves, removals).
	     * Set the previousIndexes of moved and added items to their currentIndexes
	     * Reset the list of additions, moves and removals
	     *
	     * \@internal
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._reset = function () {
	        if (this.isDirty) {
	            var /** @type {?} */ record = void 0;
	            var /** @type {?} */ nextRecord = void 0;
	            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                record.previousIndex = record.currentIndex;
	            }
	            this._additionsHead = this._additionsTail = null;
	            for (record = this._movesHead; record !== null; record = nextRecord) {
	                record.previousIndex = record.currentIndex;
	                nextRecord = record._nextMoved;
	            }
	            this._movesHead = this._movesTail = null;
	            this._removalsHead = this._removalsTail = null;
	            this._identityChangesHead = this._identityChangesTail = null;
	        }
	    };
	    /**
	     * This is the core function which handles differences between collections.
	     *
	     * - `record` is the record which we saw at this position last time. If null then it is a new
	     *   item.
	     * - `item` is the current item in the collection
	     * - `index` is the position of the item in the collection
	     *
	     * \@internal
	     * @param {?} record
	     * @param {?} item
	     * @param {?} itemTrackBy
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
	        // The previous record after which we will append the current one.
	        var /** @type {?} */ previousRecord;
	        if (record === null) {
	            previousRecord = this._itTail;
	        }
	        else {
	            previousRecord = record._prev;
	            // Remove the record from the collection since we know it does not match the item.
	            this._remove(record);
	        }
	        // Attempt to see if we have seen the item before.
	        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
	        if (record !== null) {
	            // We have seen this before, we need to move it forward in the collection.
	            // But first we need to check if identity changed, so we can update in view if necessary
	            if (!looseIdentical(record.item, item))
	                this._addIdentityChange(record, item);
	            this._moveAfter(record, previousRecord, index);
	        }
	        else {
	            // Never seen it, check evicted list.
	            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	            if (record !== null) {
	                // It is an item which we have evicted earlier: reinsert it back into the list.
	                // But first we need to check if identity changed, so we can update in view if necessary
	                if (!looseIdentical(record.item, item))
	                    this._addIdentityChange(record, item);
	                this._reinsertAfter(record, previousRecord, index);
	            }
	            else {
	                // It is a new item: add it.
	                record =
	                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
	            }
	        }
	        return record;
	    };
	    /**
	     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
	     *
	     * Use case: `[a, a]` => `[b, a, a]`
	     *
	     * If we did not have this check then the insertion of `b` would:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) leave `a` at index `1` as is. <-- this is wrong!
	     *   3) reinsert `a` at index 2. <-- this is wrong!
	     *
	     * The correct behavior is:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) reinsert `a` at index 1.
	     *   3) move `a` at from `1` to `2`.
	     *
	     *
	     * Double check that we have not evicted a duplicate item. We need to check if the item type may
	     * have already been removed:
	     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
	     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
	     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
	     * at the end.
	     *
	     * \@internal
	     * @param {?} record
	     * @param {?} item
	     * @param {?} itemTrackBy
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
	        var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	        if (reinsertRecord !== null) {
	            record = this._reinsertAfter(reinsertRecord, record._prev, index);
	        }
	        else if (record.currentIndex != index) {
	            record.currentIndex = index;
	            this._addToMoves(record, index);
	        }
	        return record;
	    };
	    /**
	     * Get rid of any excess {\@link IterableChangeRecord_}s from the previous collection
	     *
	     * - `record` The first excess {\@link IterableChangeRecord_}.
	     *
	     * \@internal
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._truncate = function (record) {
	        // Anything after that needs to be removed;
	        while (record !== null) {
	            var /** @type {?} */ nextRecord = record._next;
	            this._addToRemovals(this._unlink(record));
	            record = nextRecord;
	        }
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.clear();
	        }
	        if (this._additionsTail !== null) {
	            this._additionsTail._nextAdded = null;
	        }
	        if (this._movesTail !== null) {
	            this._movesTail._nextMoved = null;
	        }
	        if (this._itTail !== null) {
	            this._itTail._next = null;
	        }
	        if (this._removalsTail !== null) {
	            this._removalsTail._nextRemoved = null;
	        }
	        if (this._identityChangesTail !== null) {
	            this._identityChangesTail._nextIdentityChange = null;
	        }
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} prevRecord
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.remove(record);
	        }
	        var /** @type {?} */ prev = record._prevRemoved;
	        var /** @type {?} */ next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        }
	        else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        }
	        else {
	            next._prevRemoved = prev;
	        }
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} prevRecord
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
	        this._unlink(record);
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} prevRecord
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
	        this._insertAfter(record, prevRecord, index);
	        if (this._additionsTail === null) {
	            // todo(vicb)
	            // assert(this._additionsHead === null);
	            this._additionsTail = this._additionsHead = record;
	        }
	        else {
	            // todo(vicb)
	            // assert(_additionsTail._nextAdded === null);
	            // assert(record._nextAdded === null);
	            this._additionsTail = this._additionsTail._nextAdded = record;
	        }
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} prevRecord
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
	        // todo(vicb)
	        // assert(record != prevRecord);
	        // assert(record._next === null);
	        // assert(record._prev === null);
	        var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;
	        // todo(vicb)
	        // assert(next != record);
	        // assert(prevRecord != record);
	        record._next = next;
	        record._prev = prevRecord;
	        if (next === null) {
	            this._itTail = record;
	        }
	        else {
	            next._prev = record;
	        }
	        if (prevRecord === null) {
	            this._itHead = record;
	        }
	        else {
	            prevRecord._next = record;
	        }
	        if (this._linkedRecords === null) {
	            this._linkedRecords = new _DuplicateMap();
	        }
	        this._linkedRecords.put(record);
	        record.currentIndex = index;
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._remove = function (record) {
	        return this._addToRemovals(this._unlink(record));
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._unlink = function (record) {
	        if (this._linkedRecords !== null) {
	            this._linkedRecords.remove(record);
	        }
	        var /** @type {?} */ prev = record._prev;
	        var /** @type {?} */ next = record._next;
	        // todo(vicb)
	        // assert((record._prev = null) === null);
	        // assert((record._next = null) === null);
	        if (prev === null) {
	            this._itHead = next;
	        }
	        else {
	            prev._next = next;
	        }
	        if (next === null) {
	            this._itTail = prev;
	        }
	        else {
	            next._prev = prev;
	        }
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} toIndex
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
	        // todo(vicb)
	        // assert(record._nextMoved === null);
	        if (record.previousIndex === toIndex) {
	            return record;
	        }
	        if (this._movesTail === null) {
	            // todo(vicb)
	            // assert(_movesHead === null);
	            this._movesTail = this._movesHead = record;
	        }
	        else {
	            // todo(vicb)
	            // assert(_movesTail._nextMoved === null);
	            this._movesTail = this._movesTail._nextMoved = record;
	        }
	        return record;
	    };
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._addToRemovals = function (record) {
	        if (this._unlinkedRecords === null) {
	            this._unlinkedRecords = new _DuplicateMap();
	        }
	        this._unlinkedRecords.put(record);
	        record.currentIndex = null;
	        record._nextRemoved = null;
	        if (this._removalsTail === null) {
	            // todo(vicb)
	            // assert(_removalsHead === null);
	            this._removalsTail = this._removalsHead = record;
	            record._prevRemoved = null;
	        }
	        else {
	            // todo(vicb)
	            // assert(_removalsTail._nextRemoved === null);
	            // assert(record._nextRemoved === null);
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = this._removalsTail._nextRemoved = record;
	        }
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} item
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
	        record.item = item;
	        if (this._identityChangesTail === null) {
	            this._identityChangesTail = this._identityChangesHead = record;
	        }
	        else {
	            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
	        }
	        return record;
	    };
	    /**
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.toString = function () {
	        var /** @type {?} */ list = [];
	        this.forEachItem(function (record) { return list.push(record); });
	        var /** @type {?} */ previous = [];
	        this.forEachPreviousItem(function (record) { return previous.push(record); });
	        var /** @type {?} */ additions = [];
	        this.forEachAddedItem(function (record) { return additions.push(record); });
	        var /** @type {?} */ moves = [];
	        this.forEachMovedItem(function (record) { return moves.push(record); });
	        var /** @type {?} */ removals = [];
	        this.forEachRemovedItem(function (record) { return removals.push(record); });
	        var /** @type {?} */ identityChanges = [];
	        this.forEachIdentityChange(function (record) { return identityChanges.push(record); });
	        return 'collection: ' + list.join(', ') + '\n' +
	            'previous: ' + previous.join(', ') + '\n' +
	            'additions: ' + additions.join(', ') + '\n' +
	            'moves: ' + moves.join(', ') + '\n' +
	            'removals: ' + removals.join(', ') + '\n' +
	            'identityChanges: ' + identityChanges.join(', ') + '\n';
	    };
	    return DefaultIterableDiffer;
	}());
	/**
	 * \@stable
	 */
	var IterableChangeRecord_ = (function () {
	    /**
	     * @param {?} item
	     * @param {?} trackById
	     */
	    function IterableChangeRecord_(item, trackById) {
	        this.item = item;
	        this.trackById = trackById;
	        this.currentIndex = null;
	        this.previousIndex = null;
	        /**
	         * \@internal
	         */
	        this._nextPrevious = null;
	        /**
	         * \@internal
	         */
	        this._prev = null;
	        /**
	         * \@internal
	         */
	        this._next = null;
	        /**
	         * \@internal
	         */
	        this._prevDup = null;
	        /**
	         * \@internal
	         */
	        this._nextDup = null;
	        /**
	         * \@internal
	         */
	        this._prevRemoved = null;
	        /**
	         * \@internal
	         */
	        this._nextRemoved = null;
	        /**
	         * \@internal
	         */
	        this._nextAdded = null;
	        /**
	         * \@internal
	         */
	        this._nextMoved = null;
	        /**
	         * \@internal
	         */
	        this._nextIdentityChange = null;
	    }
	    /**
	     * @return {?}
	     */
	    IterableChangeRecord_.prototype.toString = function () {
	        return this.previousIndex === this.currentIndex ? stringify(this.item) :
	            stringify(this.item) + '[' +
	                stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
	    };
	    return IterableChangeRecord_;
	}());
	var _DuplicateItemRecordList = (function () {
	    function _DuplicateItemRecordList() {
	        /**
	         * \@internal
	         */
	        this._head = null;
	        /**
	         * \@internal
	         */
	        this._tail = null;
	    }
	    /**
	     * Append the record to the list of duplicates.
	     *
	     * Note: by design all records in the list of duplicates hold the same value in record.item.
	     * @param {?} record
	     * @return {?}
	     */
	    _DuplicateItemRecordList.prototype.add = function (record) {
	        if (this._head === null) {
	            this._head = this._tail = record;
	            record._nextDup = null;
	            record._prevDup = null;
	        }
	        else {
	            // todo(vicb)
	            // assert(record.item ==  _head.item ||
	            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
	            this._tail._nextDup = record;
	            record._prevDup = this._tail;
	            record._nextDup = null;
	            this._tail = record;
	        }
	    };
	    /**
	     * @param {?} trackById
	     * @param {?} afterIndex
	     * @return {?}
	     */
	    _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
	        var /** @type {?} */ record;
	        for (record = this._head; record !== null; record = record._nextDup) {
	            if ((afterIndex === null || afterIndex < record.currentIndex) &&
	                looseIdentical(record.trackById, trackById)) {
	                return record;
	            }
	        }
	        return null;
	    };
	    /**
	     * Remove one {\@link IterableChangeRecord_} from the list of duplicates.
	     *
	     * Returns whether the list of duplicates is empty.
	     * @param {?} record
	     * @return {?}
	     */
	    _DuplicateItemRecordList.prototype.remove = function (record) {
	        // todo(vicb)
	        // assert(() {
	        //  // verify that the record being removed is in the list.
	        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
	        //    if (identical(cursor, record)) return true;
	        //  }
	        //  return false;
	        //});
	        var /** @type {?} */ prev = record._prevDup;
	        var /** @type {?} */ next = record._nextDup;
	        if (prev === null) {
	            this._head = next;
	        }
	        else {
	            prev._nextDup = next;
	        }
	        if (next === null) {
	            this._tail = prev;
	        }
	        else {
	            next._prevDup = prev;
	        }
	        return this._head === null;
	    };
	    return _DuplicateItemRecordList;
	}());
	var _DuplicateMap = (function () {
	    function _DuplicateMap() {
	        this.map = new Map();
	    }
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    _DuplicateMap.prototype.put = function (record) {
	        var /** @type {?} */ key = record.trackById;
	        var /** @type {?} */ duplicates = this.map.get(key);
	        if (!duplicates) {
	            duplicates = new _DuplicateItemRecordList();
	            this.map.set(key, duplicates);
	        }
	        duplicates.add(record);
	    };
	    /**
	     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
	     * have already iterated over, we use the afterIndex to pretend it is not there.
	     *
	     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
	     * have any more `a`s needs to return the last `a` not the first or second.
	     * @param {?} trackById
	     * @param {?=} afterIndex
	     * @return {?}
	     */
	    _DuplicateMap.prototype.get = function (trackById, afterIndex) {
	        if (afterIndex === void 0) { afterIndex = null; }
	        var /** @type {?} */ key = trackById;
	        var /** @type {?} */ recordList = this.map.get(key);
	        return recordList ? recordList.get(trackById, afterIndex) : null;
	    };
	    /**
	     * Removes a {\@link IterableChangeRecord_} from the list of duplicates.
	     *
	     * The list of duplicates also is removed from the map if it gets empty.
	     * @param {?} record
	     * @return {?}
	     */
	    _DuplicateMap.prototype.remove = function (record) {
	        var /** @type {?} */ key = record.trackById;
	        var /** @type {?} */ recordList = this.map.get(key);
	        // Remove the list of duplicates when it gets empty
	        if (recordList.remove(record)) {
	            this.map.delete(key);
	        }
	        return record;
	    };
	    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.map.size === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    _DuplicateMap.prototype.clear = function () { this.map.clear(); };
	    /**
	     * @return {?}
	     */
	    _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };
	    return _DuplicateMap;
	}());
	/**
	 * @param {?} item
	 * @param {?} addRemoveOffset
	 * @param {?} moveOffsets
	 * @return {?}
	 */
	function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
	    var /** @type {?} */ previousIndex = item.previousIndex;
	    if (previousIndex === null)
	        return previousIndex;
	    var /** @type {?} */ moveOffset = 0;
	    if (moveOffsets && previousIndex < moveOffsets.length) {
	        moveOffset = moveOffsets[previousIndex];
	    }
	    return previousIndex + addRemoveOffset + moveOffset;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DefaultKeyValueDifferFactory = (function () {
	    function DefaultKeyValueDifferFactory() {
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };
	    /**
	     * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
	     * @template K, V
	     * @param {?=} cd
	     * @return {?}
	     */
	    DefaultKeyValueDifferFactory.prototype.create = function (cd) {
	        return new DefaultKeyValueDiffer();
	    };
	    return DefaultKeyValueDifferFactory;
	}());
	var DefaultKeyValueDiffer = (function () {
	    function DefaultKeyValueDiffer() {
	        this._records = new Map();
	        this._mapHead = null;
	        this._previousMapHead = null;
	        this._changesHead = null;
	        this._changesTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	    }
	    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return this._additionsHead !== null || this._changesHead !== null ||
	                this._removalsHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} map
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.diff = function (map) {
	        if (!map) {
	            map = new Map();
	        }
	        else if (!(map instanceof Map || isJsObject(map))) {
	            throw new Error("Error trying to diff '" + map + "'");
	        }
	        return this.check(map) ? this : null;
	    };
	    /**
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.onDestroy = function () { };
	    /**
	     * @param {?} map
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.check = function (map) {
	        var _this = this;
	        this._reset();
	        var /** @type {?} */ records = this._records;
	        var /** @type {?} */ oldSeqRecord = this._mapHead;
	        var /** @type {?} */ lastOldSeqRecord = null;
	        var /** @type {?} */ lastNewSeqRecord = null;
	        var /** @type {?} */ seqChanged = false;
	        this._forEach(map, function (value, key) {
	            var /** @type {?} */ newSeqRecord;
	            if (oldSeqRecord && key === oldSeqRecord.key) {
	                newSeqRecord = oldSeqRecord;
	                _this._maybeAddToChanges(newSeqRecord, value);
	            }
	            else {
	                seqChanged = true;
	                if (oldSeqRecord !== null) {
	                    _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
	                    _this._addToRemovals(oldSeqRecord);
	                }
	                if (records.has(key)) {
	                    newSeqRecord = records.get(key);
	                    _this._maybeAddToChanges(newSeqRecord, value);
	                }
	                else {
	                    newSeqRecord = new KeyValueChangeRecord_(key);
	                    records.set(key, newSeqRecord);
	                    newSeqRecord.currentValue = value;
	                    _this._addToAdditions(newSeqRecord);
	                }
	            }
	            if (seqChanged) {
	                if (_this._isInRemovals(newSeqRecord)) {
	                    _this._removeFromRemovals(newSeqRecord);
	                }
	                if (lastNewSeqRecord == null) {
	                    _this._mapHead = newSeqRecord;
	                }
	                else {
	                    lastNewSeqRecord._next = newSeqRecord;
	                }
	            }
	            lastOldSeqRecord = oldSeqRecord;
	            lastNewSeqRecord = newSeqRecord;
	            oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
	        });
	        this._truncate(lastOldSeqRecord, oldSeqRecord);
	        return this.isDirty;
	    };
	    /**
	     * \@internal
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._reset = function () {
	        if (this.isDirty) {
	            var /** @type {?} */ record = void 0;
	            // Record the state of the mapping
	            for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                record.previousValue = record.currentValue;
	            }
	            for (record = this._additionsHead; record != null; record = record._nextAdded) {
	                record.previousValue = record.currentValue;
	            }
	            this._changesHead = this._changesTail = null;
	            this._additionsHead = this._additionsTail = null;
	            this._removalsHead = this._removalsTail = null;
	        }
	    };
	    /**
	     * @param {?} lastRecord
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
	        while (record !== null) {
	            if (lastRecord === null) {
	                this._mapHead = null;
	            }
	            else {
	                lastRecord._next = null;
	            }
	            var /** @type {?} */ nextRecord = record._next;
	            this._addToRemovals(record);
	            lastRecord = record;
	            record = nextRecord;
	        }
	        for (var /** @type {?} */ rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
	            rec.previousValue = rec.currentValue;
	            rec.currentValue = null;
	            this._records.delete(rec.key);
	        }
	    };
	    /**
	     * @param {?} record
	     * @param {?} newValue
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
	        if (!looseIdentical(newValue, record.currentValue)) {
	            record.previousValue = record.currentValue;
	            record.currentValue = newValue;
	            this._addToChanges(record);
	        }
	    };
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
	        return record === this._removalsHead || record._nextRemoved !== null ||
	            record._prevRemoved !== null;
	    };
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
	        if (this._removalsHead === null) {
	            this._removalsHead = this._removalsTail = record;
	        }
	        else {
	            this._removalsTail._nextRemoved = record;
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = record;
	        }
	    };
	    /**
	     * @param {?} prev
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
	        var /** @type {?} */ next = record._next;
	        if (prev === null) {
	            this._mapHead = next;
	        }
	        else {
	            prev._next = next;
	        }
	        record._next = null;
	    };
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
	        var /** @type {?} */ prev = record._prevRemoved;
	        var /** @type {?} */ next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        }
	        else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        }
	        else {
	            next._prevRemoved = prev;
	        }
	        record._prevRemoved = record._nextRemoved = null;
	    };
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
	        if (this._additionsHead === null) {
	            this._additionsHead = this._additionsTail = record;
	        }
	        else {
	            this._additionsTail._nextAdded = record;
	            this._additionsTail = record;
	        }
	    };
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
	        if (this._changesHead === null) {
	            this._changesHead = this._changesTail = record;
	        }
	        else {
	            this._changesTail._nextChanged = record;
	            this._changesTail = record;
	        }
	    };
	    /**
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.toString = function () {
	        var /** @type {?} */ items = [];
	        var /** @type {?} */ previous = [];
	        var /** @type {?} */ changes = [];
	        var /** @type {?} */ additions = [];
	        var /** @type {?} */ removals = [];
	        var /** @type {?} */ record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            items.push(stringify(record));
	        }
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            previous.push(stringify(record));
	        }
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            changes.push(stringify(record));
	        }
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            additions.push(stringify(record));
	        }
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            removals.push(stringify(record));
	        }
	        return 'map: ' + items.join(', ') + '\n' +
	            'previous: ' + previous.join(', ') + '\n' +
	            'additions: ' + additions.join(', ') + '\n' +
	            'changes: ' + changes.join(', ') + '\n' +
	            'removals: ' + removals.join(', ') + '\n';
	    };
	    /**
	     * \@internal
	     * @template K, V
	     * @param {?} obj
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
	        if (obj instanceof Map) {
	            obj.forEach(fn);
	        }
	        else {
	            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });
	        }
	    };
	    return DefaultKeyValueDiffer;
	}());
	/**
	 * \@stable
	 */
	var KeyValueChangeRecord_ = (function () {
	    /**
	     * @param {?} key
	     */
	    function KeyValueChangeRecord_(key) {
	        this.key = key;
	        this.previousValue = null;
	        this.currentValue = null;
	        /**
	         * \@internal
	         */
	        this._nextPrevious = null;
	        /**
	         * \@internal
	         */
	        this._next = null;
	        /**
	         * \@internal
	         */
	        this._nextAdded = null;
	        /**
	         * \@internal
	         */
	        this._nextRemoved = null;
	        /**
	         * \@internal
	         */
	        this._prevRemoved = null;
	        /**
	         * \@internal
	         */
	        this._nextChanged = null;
	    }
	    /**
	     * @return {?}
	     */
	    KeyValueChangeRecord_.prototype.toString = function () {
	        return looseIdentical(this.previousValue, this.currentValue) ?
	            stringify(this.key) :
	            (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +
	                stringify(this.currentValue) + ']');
	    };
	    return KeyValueChangeRecord_;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
	 * \@stable
	 */
	var IterableDiffers = (function () {
	    /**
	     * @param {?} factories
	     */
	    function IterableDiffers(factories) {
	        this.factories = factories;
	    }
	    /**
	     * @param {?} factories
	     * @param {?=} parent
	     * @return {?}
	     */
	    IterableDiffers.create = function (factories, parent) {
	        if (parent != null) {
	            var /** @type {?} */ copied = parent.factories.slice();
	            factories = factories.concat(copied);
	            return new IterableDiffers(factories);
	        }
	        else {
	            return new IterableDiffers(factories);
	        }
	    };
	    /**
	     * Takes an array of {\@link IterableDifferFactory} and returns a provider used to extend the
	     * inherited {\@link IterableDiffers} instance with the provided factories and return a new
	     * {\@link IterableDiffers} instance.
	     *
	     * The following example shows how to extend an existing list of factories,
	     * which will only be applied to the injector for this component and its children.
	     * This step is all that's required to make a new {\@link IterableDiffer} available.
	     *
	     * ### Example
	     *
	     * ```
	     * \@Component({
	     *   viewProviders: [
	     *     IterableDiffers.extend([new ImmutableListDiffer()])
	     *   ]
	     * })
	     * ```
	     * @param {?} factories
	     * @return {?}
	     */
	    IterableDiffers.extend = function (factories) {
	        return {
	            provide: IterableDiffers,
	            useFactory: function (parent) {
	                if (!parent) {
	                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
	                    // to
	                    // bootstrap(), which would override default pipes instead of extending them.
	                    throw new Error('Cannot extend IterableDiffers without a parent injector');
	                }
	                return IterableDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
	        };
	    };
	    /**
	     * @param {?} iterable
	     * @return {?}
	     */
	    IterableDiffers.prototype.find = function (iterable) {
	        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });
	        if (factory != null) {
	            return factory;
	        }
	        else {
	            throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
	        }
	    };
	    return IterableDiffers;
	}());
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function getTypeNameForDebugging(type) {
	    return type['name'] || typeof type;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
	 * \@stable
	 */
	var KeyValueDiffers = (function () {
	    /**
	     * @param {?} factories
	     */
	    function KeyValueDiffers(factories) {
	        this.factories = factories;
	    }
	    /**
	     * @template S
	     * @param {?} factories
	     * @param {?=} parent
	     * @return {?}
	     */
	    KeyValueDiffers.create = function (factories, parent) {
	        if (parent) {
	            var /** @type {?} */ copied = parent.factories.slice();
	            factories = factories.concat(copied);
	        }
	        return new KeyValueDiffers(factories);
	    };
	    /**
	     * Takes an array of {\@link KeyValueDifferFactory} and returns a provider used to extend the
	     * inherited {\@link KeyValueDiffers} instance with the provided factories and return a new
	     * {\@link KeyValueDiffers} instance.
	     *
	     * The following example shows how to extend an existing list of factories,
	     * which will only be applied to the injector for this component and its children.
	     * This step is all that's required to make a new {\@link KeyValueDiffer} available.
	     *
	     * ### Example
	     *
	     * ```
	     * \@Component({
	     *   viewProviders: [
	     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
	     *   ]
	     * })
	     * ```
	     * @template S
	     * @param {?} factories
	     * @return {?}
	     */
	    KeyValueDiffers.extend = function (factories) {
	        return {
	            provide: KeyValueDiffers,
	            useFactory: function (parent) {
	                if (!parent) {
	                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
	                    // to bootstrap(), which would override default pipes instead of extending them.
	                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');
	                }
	                return KeyValueDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
	        };
	    };
	    /**
	     * @param {?} kv
	     * @return {?}
	     */
	    KeyValueDiffers.prototype.find = function (kv) {
	        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });
	        if (factory) {
	            return factory;
	        }
	        throw new Error("Cannot find a differ supporting object '" + kv + "'");
	    };
	    return KeyValueDiffers;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Structural diffing for `Object`s and `Map`s.
	 */
	var keyValDiff = [new DefaultKeyValueDifferFactory()];
	/**
	 * Structural diffing for `Iterable` types such as `Array`s.
	 */
	var iterableDiff = [new DefaultIterableDifferFactory()];
	var defaultIterableDiffers = new IterableDiffers(iterableDiff);
	var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * Change detection enables data binding in Angular.
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @return {?}
	 */
	function _reflector() {
	    return reflector;
	}
	var _CORE_PLATFORM_PROVIDERS = [
	    // Set a default platform name for platforms that don't set it explicitly.
	    { provide: PLATFORM_ID, useValue: 'unknown' },
	    PlatformRef_,
	    { provide: PlatformRef, useExisting: PlatformRef_ },
	    { provide: Reflector, useFactory: _reflector, deps: [] },
	    { provide: ReflectorReader, useExisting: Reflector },
	    TestabilityRegistry,
	    Console,
	];
	/**
	 * This platform has to be included in any other platform
	 *
	 * \@experimental
	 */
	var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@experimental i18n support is experimental.
	 */
	var LOCALE_ID = new InjectionToken('LocaleId');
	/**
	 * \@experimental i18n support is experimental.
	 */
	var TRANSLATIONS = new InjectionToken('Translations');
	/**
	 * \@experimental i18n support is experimental.
	 */
	var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');
	var MissingTranslationStrategy = {};
	MissingTranslationStrategy.Error = 0;
	MissingTranslationStrategy.Warning = 1;
	MissingTranslationStrategy.Ignore = 2;
	MissingTranslationStrategy[MissingTranslationStrategy.Error] = "Error";
	MissingTranslationStrategy[MissingTranslationStrategy.Warning] = "Warning";
	MissingTranslationStrategy[MissingTranslationStrategy.Ignore] = "Ignore";
	var SecurityContext = {};
	SecurityContext.NONE = 0;
	SecurityContext.HTML = 1;
	SecurityContext.STYLE = 2;
	SecurityContext.SCRIPT = 3;
	SecurityContext.URL = 4;
	SecurityContext.RESOURCE_URL = 5;
	SecurityContext[SecurityContext.NONE] = "NONE";
	SecurityContext[SecurityContext.HTML] = "HTML";
	SecurityContext[SecurityContext.STYLE] = "STYLE";
	SecurityContext[SecurityContext.SCRIPT] = "SCRIPT";
	SecurityContext[SecurityContext.URL] = "URL";
	SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL";
	/**
	 * Sanitizer is used by the views to sanitize potentially dangerous values.
	 *
	 * \@stable
	 * @abstract
	 */
	var Sanitizer = (function () {
	    function Sanitizer() {
	    }
	    /**
	     * @abstract
	     * @param {?} context
	     * @param {?} value
	     * @return {?}
	     */
	    Sanitizer.prototype.sanitize = function (context, value) { };
	    return Sanitizer;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Node instance data.
	 *
	 * We have a separate type per NodeType to save memory
	 * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)
	 *
	 * To keep our code monomorphic,
	 * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).
	 * This way, no usage site can get a `NodeData` from view.nodes and then use it for different
	 * purposes.
	 */
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function asTextData(view, index) {
	    return (view.nodes[index]);
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function asElementData(view, index) {
	    return (view.nodes[index]);
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function asProviderData(view, index) {
	    return (view.nodes[index]);
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function asPureExpressionData(view, index) {
	    return (view.nodes[index]);
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function asQueryList(view, index) {
	    return (view.nodes[index]);
	}
	/**
	 * @abstract
	 */
	var DebugContext = (function () {
	    function DebugContext() {
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.view = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.nodeIndex = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.injector = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.component = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.providerTokens = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.references = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.context = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.componentRenderElement = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.renderNode = function () { };
	    /**
	     * @abstract
	     * @param {?} console
	     * @param {...?} values
	     * @return {?}
	     */
	    DebugContext.prototype.logError = function (console) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	    };
	    return DebugContext;
	}());
	/**
	 * This object is used to prevent cycles in the source files and to have a place where
	 * debug mode can hook it. It is lazily filled when `isDevMode` is known.
	 */
	var Services = {
	    setCurrentNode: undefined,
	    createRootView: undefined,
	    createEmbeddedView: undefined,
	    checkAndUpdateView: undefined,
	    checkNoChangesView: undefined,
	    destroyView: undefined,
	    resolveDep: undefined,
	    createDebugContext: undefined,
	    handleEvent: undefined,
	    updateDirectives: undefined,
	    updateRenderer: undefined,
	    dirtyParentQueries: undefined,
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} context
	 * @param {?} oldValue
	 * @param {?} currValue
	 * @param {?} isFirstCheck
	 * @return {?}
	 */
	function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
	    var /** @type {?} */ msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
	    if (isFirstCheck) {
	        msg +=
	            " It seems like the view has been created after its parent and its children have been dirty checked." +
	                " Has it been created in a change detection hook ?";
	    }
	    return viewDebugError(msg, context);
	}
	/**
	 * @param {?} err
	 * @param {?} context
	 * @return {?}
	 */
	function viewWrappedDebugError(err, context) {
	    if (!(err instanceof Error)) {
	        // errors that are not Error instances don't have a stack,
	        // so it is ok to wrap them into a new Error object...
	        err = new Error(err.toString());
	    }
	    _addDebugContext(err, context);
	    return err;
	}
	/**
	 * @param {?} msg
	 * @param {?} context
	 * @return {?}
	 */
	function viewDebugError(msg, context) {
	    var /** @type {?} */ err = new Error(msg);
	    _addDebugContext(err, context);
	    return err;
	}
	/**
	 * @param {?} err
	 * @param {?} context
	 * @return {?}
	 */
	function _addDebugContext(err, context) {
	    ((err))[ERROR_DEBUG_CONTEXT] = context;
	    ((err))[ERROR_LOGGER] = context.logError.bind(context);
	}
	/**
	 * @param {?} err
	 * @return {?}
	 */
	function isViewDebugError(err) {
	    return !!getDebugContext(err);
	}
	/**
	 * @param {?} action
	 * @return {?}
	 */
	function viewDestroyedError(action) {
	    return new Error("ViewDestroyedError: Attempt to use a destroyed view: " + action);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NOOP = function () { };
	var _tokenKeyCache = new Map();
	/**
	 * @param {?} token
	 * @return {?}
	 */
	function tokenKey(token) {
	    var /** @type {?} */ key = _tokenKeyCache.get(token);
	    if (!key) {
	        key = stringify(token) + '_' + _tokenKeyCache.size;
	        _tokenKeyCache.set(token, key);
	    }
	    return key;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIdx
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @return {?}
	 */
	function unwrapValue(view, nodeIdx, bindingIdx, value) {
	    if (value instanceof WrappedValue) {
	        value = value.wrapped;
	        var /** @type {?} */ globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;
	        var /** @type {?} */ oldValue = view.oldValues[globalBindingIdx];
	        if (oldValue instanceof WrappedValue) {
	            oldValue = oldValue.wrapped;
	        }
	        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);
	    }
	    return value;
	}
	var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';
	var EMPTY_RENDERER_TYPE_ID = '$$empty';
	/**
	 * @param {?} values
	 * @return {?}
	 */
	function createRendererType2(values) {
	    return {
	        id: UNDEFINED_RENDERER_TYPE_ID,
	        styles: values.styles,
	        encapsulation: values.encapsulation,
	        data: values.data
	    };
	}
	var _renderCompCount = 0;
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function resolveRendererType2(type) {
	    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
	        // first time we see this RendererType2. Initialize it...
	        var /** @type {?} */ isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||
	            type.styles.length || Object.keys(type.data).length);
	        if (isFilled) {
	            type.id = "c" + _renderCompCount++;
	        }
	        else {
	            type.id = EMPTY_RENDERER_TYPE_ID;
	        }
	    }
	    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {
	        type = null;
	    }
	    return type;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @return {?}
	 */
	function checkBinding(view, def, bindingIdx, value) {
	    var /** @type {?} */ oldValues = view.oldValues;
	    if ((view.state & 1 /* FirstCheck */) ||
	        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {
	        return true;
	    }
	    return false;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @return {?}
	 */
	function checkAndUpdateBinding(view, def, bindingIdx, value) {
	    if (checkBinding(view, def, bindingIdx, value)) {
	        view.oldValues[def.bindingIndex + bindingIdx] = value;
	        return true;
	    }
	    return false;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @return {?}
	 */
	function checkBindingNoChanges(view, def, bindingIdx, value) {
	    var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];
	    if ((view.state & 1 /* FirstCheck */) || !devModeEqual(oldValue, value)) {
	        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.index), oldValue, value, (view.state & 1 /* FirstCheck */) !== 0);
	    }
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function markParentViewsForCheck(view) {
	    var /** @type {?} */ currView = view;
	    while (currView) {
	        if (currView.def.flags & 2 /* OnPush */) {
	            currView.state |= 2 /* ChecksEnabled */;
	        }
	        currView = currView.viewContainerParent || currView.parent;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @param {?} eventName
	 * @param {?} event
	 * @return {?}
	 */
	function dispatchEvent(view, nodeIndex, eventName, event) {
	    var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
	    var /** @type {?} */ startView = nodeDef.flags & 16777216 /* ComponentView */ ? asElementData(view, nodeIndex).componentView : view;
	    markParentViewsForCheck(startView);
	    return Services.handleEvent(view, nodeIndex, eventName, event);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function declaredViewContainer(view) {
	    if (view.parent) {
	        var /** @type {?} */ parentView = view.parent;
	        return asElementData(parentView, view.parentNodeDef.index);
	    }
	    return undefined;
	}
	/**
	 * for component views, this is the host element.
	 * for embedded views, this is the index of the parent node
	 * that contains the view container.
	 * @param {?} view
	 * @return {?}
	 */
	function viewParentEl(view) {
	    var /** @type {?} */ parentView = view.parent;
	    if (parentView) {
	        return view.parentNodeDef.parent;
	    }
	    else {
	        return null;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function renderNode(view, def) {
	    switch (def.flags & 100673535 /* Types */) {
	        case 1 /* TypeElement */:
	            return asElementData(view, def.index).renderElement;
	        case 2 /* TypeText */:
	            return asTextData(view, def.index).renderText;
	    }
	}
	/**
	 * @param {?} target
	 * @param {?} name
	 * @return {?}
	 */
	function elementEventFullName(target, name) {
	    return target ? target + ":" + name : name;
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function isComponentView(view) {
	    return !!view.parent && !!(view.parentNodeDef.flags & 16384 /* Component */);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function isEmbeddedView(view) {
	    return !!view.parent && !(view.parentNodeDef.flags & 16384 /* Component */);
	}
	/**
	 * @param {?} queryId
	 * @return {?}
	 */
	function filterQueryId(queryId) {
	    return 1 << (queryId % 32);
	}
	/**
	 * @param {?} matchedQueriesDsl
	 * @return {?}
	 */
	function splitMatchedQueriesDsl(matchedQueriesDsl) {
	    var /** @type {?} */ matchedQueries = {};
	    var /** @type {?} */ matchedQueryIds = 0;
	    var /** @type {?} */ references = {};
	    if (matchedQueriesDsl) {
	        matchedQueriesDsl.forEach(function (_a) {
	            var queryId = _a[0], valueType = _a[1];
	            if (typeof queryId === 'number') {
	                matchedQueries[queryId] = valueType;
	                matchedQueryIds |= filterQueryId(queryId);
	            }
	            else {
	                references[queryId] = valueType;
	            }
	        });
	    }
	    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };
	}
	/**
	 * @param {?} view
	 * @param {?} renderHost
	 * @param {?} def
	 * @return {?}
	 */
	function getParentRenderElement(view, renderHost, def) {
	    var /** @type {?} */ renderParent = def.renderParent;
	    if (renderParent) {
	        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||
	            (renderParent.flags & 16777216 /* ComponentView */) === 0 ||
	            (renderParent.element.componentRendererType &&
	                renderParent.element.componentRendererType.encapsulation === ViewEncapsulation.Native)) {
	            // only children of non components, or children of components with native encapsulation should
	            // be attached.
	            return asElementData(view, def.renderParent.index).renderElement;
	        }
	    }
	    else {
	        return renderHost;
	    }
	}
	var VIEW_DEFINITION_CACHE = new WeakMap();
	/**
	 * @param {?} factory
	 * @return {?}
	 */
	function resolveViewDefinition(factory) {
	    var /** @type {?} */ value = VIEW_DEFINITION_CACHE.get(factory);
	    if (!value) {
	        value = factory(function () { return NOOP; });
	        value.factory = factory;
	        VIEW_DEFINITION_CACHE.set(factory, value);
	    }
	    return value;
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function rootRenderNodes(view) {
	    var /** @type {?} */ renderNodes = [];
	    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);
	    return renderNodes;
	}
	/**
	 * @param {?} view
	 * @param {?} action
	 * @param {?} parentNode
	 * @param {?} nextSibling
	 * @param {?} target
	 * @return {?}
	 */
	function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
	    // We need to re-compute the parent node in case the nodes have been moved around manually
	    if (action === 3 /* RemoveChild */) {
	        parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));
	    }
	    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
	}
	/**
	 * @param {?} view
	 * @param {?} action
	 * @param {?} startIndex
	 * @param {?} endIndex
	 * @param {?} parentNode
	 * @param {?} nextSibling
	 * @param {?} target
	 * @return {?}
	 */
	function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
	    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 4 /* TypeNgContent */)) {
	            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
	        }
	        // jump to next sibling
	        i += nodeDef.childCount;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} ngContentIndex
	 * @param {?} action
	 * @param {?} parentNode
	 * @param {?} nextSibling
	 * @param {?} target
	 * @return {?}
	 */
	function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
	    var /** @type {?} */ compView = view;
	    while (compView && !isComponentView(compView)) {
	        compView = compView.parent;
	    }
	    var /** @type {?} */ hostView = compView.parent;
	    var /** @type {?} */ hostElDef = viewParentEl(compView);
	    var /** @type {?} */ startIndex = hostElDef.index + 1;
	    var /** @type {?} */ endIndex = hostElDef.index + hostElDef.childCount;
	    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
	        var /** @type {?} */ nodeDef = hostView.def.nodes[i];
	        if (nodeDef.ngContentIndex === ngContentIndex) {
	            visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);
	        }
	        // jump to next sibling
	        i += nodeDef.childCount;
	    }
	    if (!hostView.parent) {
	        // a root view
	        var /** @type {?} */ projectedNodes = view.root.projectableNodes[ngContentIndex];
	        if (projectedNodes) {
	            for (var /** @type {?} */ i = 0; i < projectedNodes.length; i++) {
	                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);
	            }
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} action
	 * @param {?} parentNode
	 * @param {?} nextSibling
	 * @param {?} target
	 * @return {?}
	 */
	function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
	    if (nodeDef.flags & 4 /* TypeNgContent */) {
	        visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);
	    }
	    else {
	        var /** @type {?} */ rn = renderNode(view, nodeDef);
	        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 16777216 /* ComponentView */) &&
	            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {
	            // Note: we might need to do both actions.
	            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {
	                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
	            }
	            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {
	                var /** @type {?} */ compView = asElementData(view, nodeDef.index).componentView;
	                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
	            }
	        }
	        else {
	            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
	        }
	        if (nodeDef.flags & 8388608 /* EmbeddedViews */) {
	            var /** @type {?} */ embeddedViews = asElementData(view, nodeDef.index).viewContainer._embeddedViews;
	            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
	                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
	            }
	        }
	        if (nodeDef.flags & 1 /* TypeElement */ && !nodeDef.element.name) {
	            visitSiblingRenderNodes(view, action, nodeDef.index + 1, nodeDef.index + nodeDef.childCount, parentNode, nextSibling, target);
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} renderNode
	 * @param {?} action
	 * @param {?} parentNode
	 * @param {?} nextSibling
	 * @param {?} target
	 * @return {?}
	 */
	function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
	    var /** @type {?} */ renderer = view.renderer;
	    switch (action) {
	        case 1 /* AppendChild */:
	            renderer.appendChild(parentNode, renderNode);
	            break;
	        case 2 /* InsertBefore */:
	            renderer.insertBefore(parentNode, renderNode, nextSibling);
	            break;
	        case 3 /* RemoveChild */:
	            renderer.removeChild(parentNode, renderNode);
	            break;
	        case 0 /* Collect */:
	            target.push(renderNode);
	            break;
	    }
	}
	var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
	/**
	 * @param {?} name
	 * @return {?}
	 */
	function splitNamespace(name) {
	    if (name[0] === ':') {
	        var /** @type {?} */ match = name.match(NS_PREFIX_RE);
	        return [match[1], match[2]];
	    }
	    return ['', name];
	}
	/**
	 * @param {?} bindings
	 * @return {?}
	 */
	function calcBindingFlags(bindings) {
	    var /** @type {?} */ flags = 0;
	    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
	        flags |= bindings[i].flags;
	    }
	    return flags;
	}
	/**
	 * @param {?} valueCount
	 * @param {?} constAndInterp
	 * @return {?}
	 */
	function interpolate(valueCount, constAndInterp) {
	    var /** @type {?} */ result = '';
	    for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {
	        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
	    }
	    return result + constAndInterp[valueCount * 2];
	}
	/**
	 * @param {?} valueCount
	 * @param {?} c0
	 * @param {?} a1
	 * @param {?} c1
	 * @param {?=} a2
	 * @param {?=} c2
	 * @param {?=} a3
	 * @param {?=} c3
	 * @param {?=} a4
	 * @param {?=} c4
	 * @param {?=} a5
	 * @param {?=} c5
	 * @param {?=} a6
	 * @param {?=} c6
	 * @param {?=} a7
	 * @param {?=} c7
	 * @param {?=} a8
	 * @param {?=} c8
	 * @param {?=} a9
	 * @param {?=} c9
	 * @return {?}
	 */
	function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
	    switch (valueCount) {
	        case 1:
	            return c0 + _toStringWithNull(a1) + c1;
	        case 2:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
	        case 3:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3;
	        case 4:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4;
	        case 5:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
	        case 6:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
	        case 7:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7;
	        case 8:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
	        case 9:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
	        default:
	            throw new Error("Does not support more than 9 expressions");
	    }
	}
	/**
	 * @param {?} v
	 * @return {?}
	 */
	function _toStringWithNull(v) {
	    return v != null ? v.toString() : '';
	}
	var EMPTY_ARRAY = [];
	var EMPTY_MAP = {};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} flags
	 * @param {?} matchedQueriesDsl
	 * @param {?} ngContentIndex
	 * @param {?} childCount
	 * @param {?=} handleEvent
	 * @param {?=} templateFactory
	 * @return {?}
	 */
	function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
	    if (!handleEvent) {
	        handleEvent = NOOP;
	    }
	    flags |= 1 /* TypeElement */;
	    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
	    var /** @type {?} */ template = templateFactory ? resolveViewDefinition(templateFactory) : null;
	    return {
	        // will bet set by the view definition
	        index: undefined,
	        parent: undefined,
	        renderParent: undefined,
	        bindingIndex: undefined,
	        outputIndex: undefined,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
	        bindings: [],
	        bindingFlags: 0,
	        outputs: [],
	        element: {
	            ns: undefined,
	            name: undefined,
	            attrs: undefined, template: template,
	            componentProvider: undefined,
	            componentView: undefined,
	            componentRendererType: undefined,
	            publicProviders: undefined,
	            allProviders: undefined, handleEvent: handleEvent
	        },
	        provider: undefined,
	        text: undefined,
	        query: undefined,
	        ngContent: undefined
	    };
	}
	/**
	 * @param {?} flags
	 * @param {?} matchedQueriesDsl
	 * @param {?} ngContentIndex
	 * @param {?} childCount
	 * @param {?} namespaceAndName
	 * @param {?=} fixedAttrs
	 * @param {?=} bindings
	 * @param {?=} outputs
	 * @param {?=} handleEvent
	 * @param {?=} componentView
	 * @param {?=} componentRendererType
	 * @return {?}
	 */
	function elementDef(flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {
	    if (fixedAttrs === void 0) { fixedAttrs = []; }
	    if (!handleEvent) {
	        handleEvent = NOOP;
	    }
	    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
	    var /** @type {?} */ ns;
	    var /** @type {?} */ name;
	    if (namespaceAndName) {
	        _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
	    }
	    bindings = bindings || [];
	    var /** @type {?} */ bindingDefs = new Array(bindings.length);
	    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
	        var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];
	        var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];
	        var /** @type {?} */ securityContext = void 0;
	        var /** @type {?} */ suffix = void 0;
	        switch (bindingFlags & 15 /* Types */) {
	            case 4 /* TypeElementStyle */:
	                suffix = (suffixOrSecurityContext);
	                break;
	            case 1 /* TypeElementAttribute */:
	            case 8 /* TypeProperty */:
	                securityContext = (suffixOrSecurityContext);
	                break;
	        }
	        bindingDefs[i] =
	            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };
	    }
	    outputs = outputs || [];
	    var /** @type {?} */ outputDefs = new Array(outputs.length);
	    for (var /** @type {?} */ i = 0; i < outputs.length; i++) {
	        var _e = outputs[i], target = _e[0], eventName = _e[1];
	        outputDefs[i] = {
	            type: 0 /* ElementOutput */,
	            target: /** @type {?} */ (target), eventName: eventName,
	            propName: undefined
	        };
	    }
	    fixedAttrs = fixedAttrs || [];
	    var /** @type {?} */ attrs = (fixedAttrs.map(function (_a) {
	        var namespaceAndName = _a[0], value = _a[1];
	        var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
	        return [ns, name, value];
	    }));
	    componentRendererType = resolveRendererType2(componentRendererType);
	    if (componentView) {
	        flags |= 16777216 /* ComponentView */;
	    }
	    flags |= 1 /* TypeElement */;
	    return {
	        // will bet set by the view definition
	        index: undefined,
	        parent: undefined,
	        renderParent: undefined,
	        bindingIndex: undefined,
	        outputIndex: undefined,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
	        bindings: bindingDefs,
	        bindingFlags: calcBindingFlags(bindingDefs),
	        outputs: outputDefs,
	        element: {
	            ns: ns,
	            name: name,
	            attrs: attrs,
	            template: undefined,
	            // will bet set by the view definition
	            componentProvider: undefined, componentView: componentView, componentRendererType: componentRendererType,
	            publicProviders: undefined,
	            allProviders: undefined, handleEvent: handleEvent,
	        },
	        provider: undefined,
	        text: undefined,
	        query: undefined,
	        ngContent: undefined
	    };
	    var _b;
	}
	/**
	 * @param {?} view
	 * @param {?} renderHost
	 * @param {?} def
	 * @return {?}
	 */
	function createElement(view, renderHost, def) {
	    var /** @type {?} */ elDef = def.element;
	    var /** @type {?} */ rootSelectorOrNode = view.root.selectorOrNode;
	    var /** @type {?} */ renderer = view.renderer;
	    var /** @type {?} */ el;
	    if (view.parent || !rootSelectorOrNode) {
	        if (elDef.name) {
	            el = renderer.createElement(elDef.name, elDef.ns);
	        }
	        else {
	            el = renderer.createComment('');
	        }
	        var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
	        if (parentEl) {
	            renderer.appendChild(parentEl, el);
	        }
	    }
	    else {
	        el = renderer.selectRootElement(rootSelectorOrNode);
	    }
	    if (elDef.attrs) {
	        for (var /** @type {?} */ i = 0; i < elDef.attrs.length; i++) {
	            var _a = elDef.attrs[i], ns = _a[0], name = _a[1], value = _a[2];
	            renderer.setAttribute(el, name, value, ns);
	        }
	    }
	    return el;
	}
	/**
	 * @param {?} view
	 * @param {?} compView
	 * @param {?} def
	 * @param {?} el
	 * @return {?}
	 */
	function listenToElementOutputs(view, compView, def, el) {
	    for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {
	        var /** @type {?} */ output = def.outputs[i];
	        var /** @type {?} */ handleEventClosure = renderEventHandlerClosure(view, def.index, elementEventFullName(output.target, output.eventName));
	        var /** @type {?} */ listenTarget = output.target;
	        var /** @type {?} */ listenerView = view;
	        if (output.target === 'component') {
	            listenTarget = null;
	            listenerView = compView;
	        }
	        var /** @type {?} */ disposable = (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure));
	        view.disposables[def.outputIndex + i] = disposable;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} index
	 * @param {?} eventName
	 * @return {?}
	 */
	function renderEventHandlerClosure(view, index, eventName) {
	    return function (event) { return dispatchEvent(view, index, eventName, event); };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} v0
	 * @param {?} v1
	 * @param {?} v2
	 * @param {?} v3
	 * @param {?} v4
	 * @param {?} v5
	 * @param {?} v6
	 * @param {?} v7
	 * @param {?} v8
	 * @param {?} v9
	 * @return {?}
	 */
	function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ bindLen = def.bindings.length;
	    var /** @type {?} */ changed = false;
	    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))
	        changed = true;
	    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))
	        changed = true;
	    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))
	        changed = true;
	    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))
	        changed = true;
	    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))
	        changed = true;
	    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))
	        changed = true;
	    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))
	        changed = true;
	    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))
	        changed = true;
	    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))
	        changed = true;
	    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))
	        changed = true;
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} values
	 * @return {?}
	 */
	function checkAndUpdateElementDynamic(view, def, values) {
	    var /** @type {?} */ changed = false;
	    for (var /** @type {?} */ i = 0; i < values.length; i++) {
	        if (checkAndUpdateElementValue(view, def, i, values[i]))
	            changed = true;
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @return {?}
	 */
	function checkAndUpdateElementValue(view, def, bindingIdx, value) {
	    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
	        return false;
	    }
	    var /** @type {?} */ binding = def.bindings[bindingIdx];
	    var /** @type {?} */ elData = asElementData(view, def.index);
	    var /** @type {?} */ renderNode$$1 = elData.renderElement;
	    var /** @type {?} */ name = binding.name;
	    switch (binding.flags & 15 /* Types */) {
	        case 1 /* TypeElementAttribute */:
	            setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);
	            break;
	        case 2 /* TypeElementClass */:
	            setElementClass(view, renderNode$$1, name, value);
	            break;
	        case 4 /* TypeElementStyle */:
	            setElementStyle(view, binding, renderNode$$1, name, value);
	            break;
	        case 8 /* TypeProperty */:
	            var /** @type {?} */ bindView = (def.flags & 16777216 /* ComponentView */ &&
	                binding.flags & 32 /* SyntheticHostProperty */) ?
	                elData.componentView :
	                view;
	            setElementProperty(bindView, binding, renderNode$$1, name, value);
	            break;
	    }
	    return true;
	}
	/**
	 * @param {?} view
	 * @param {?} binding
	 * @param {?} renderNode
	 * @param {?} ns
	 * @param {?} name
	 * @param {?} value
	 * @return {?}
	 */
	function setElementAttribute(view, binding, renderNode$$1, ns, name, value) {
	    var /** @type {?} */ securityContext = binding.securityContext;
	    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
	    renderValue = renderValue != null ? renderValue.toString() : null;
	    var /** @type {?} */ renderer = view.renderer;
	    if (value != null) {
	        renderer.setAttribute(renderNode$$1, name, renderValue, ns);
	    }
	    else {
	        renderer.removeAttribute(renderNode$$1, name, ns);
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} renderNode
	 * @param {?} name
	 * @param {?} value
	 * @return {?}
	 */
	function setElementClass(view, renderNode$$1, name, value) {
	    var /** @type {?} */ renderer = view.renderer;
	    if (value) {
	        renderer.addClass(renderNode$$1, name);
	    }
	    else {
	        renderer.removeClass(renderNode$$1, name);
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} binding
	 * @param {?} renderNode
	 * @param {?} name
	 * @param {?} value
	 * @return {?}
	 */
	function setElementStyle(view, binding, renderNode$$1, name, value) {
	    var /** @type {?} */ renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, value);
	    if (renderValue != null) {
	        renderValue = renderValue.toString();
	        var /** @type {?} */ unit = binding.suffix;
	        if (unit != null) {
	            renderValue = renderValue + unit;
	        }
	    }
	    else {
	        renderValue = null;
	    }
	    var /** @type {?} */ renderer = view.renderer;
	    if (renderValue != null) {
	        renderer.setStyle(renderNode$$1, name, renderValue);
	    }
	    else {
	        renderer.removeStyle(renderNode$$1, name);
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} binding
	 * @param {?} renderNode
	 * @param {?} name
	 * @param {?} value
	 * @return {?}
	 */
	function setElementProperty(view, binding, renderNode$$1, name, value) {
	    var /** @type {?} */ securityContext = binding.securityContext;
	    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
	    view.renderer.setProperty(renderNode$$1, name, renderValue);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} ngContentIndex
	 * @param {?} index
	 * @return {?}
	 */
	function ngContentDef(ngContentIndex, index) {
	    return {
	        // will bet set by the view definition
	        index: undefined,
	        parent: undefined,
	        renderParent: undefined,
	        bindingIndex: undefined,
	        outputIndex: undefined,
	        // regular values
	        flags: 4 /* TypeNgContent */,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {}, ngContentIndex: ngContentIndex,
	        childCount: 0,
	        bindings: [],
	        bindingFlags: 0,
	        outputs: [],
	        element: undefined,
	        provider: undefined,
	        text: undefined,
	        query: undefined,
	        ngContent: { index: index }
	    };
	}
	/**
	 * @param {?} view
	 * @param {?} renderHost
	 * @param {?} def
	 * @return {?}
	 */
	function appendNgContent(view, renderHost, def) {
	    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
	    if (!parentEl) {
	        // Nothing to do if there is no parent element.
	        return;
	    }
	    var /** @type {?} */ ngContentIndex = def.ngContent.index;
	    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, undefined, undefined);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} parentView
	 * @param {?} elementData
	 * @param {?} viewIndex
	 * @param {?} view
	 * @return {?}
	 */
	function attachEmbeddedView(parentView, elementData, viewIndex, view) {
	    var /** @type {?} */ embeddedViews = elementData.viewContainer._embeddedViews;
	    if (viewIndex == null) {
	        viewIndex = embeddedViews.length;
	    }
	    view.viewContainerParent = parentView;
	    addToArray(embeddedViews, viewIndex, view);
	    var /** @type {?} */ dvcElementData = declaredViewContainer(view);
	    if (dvcElementData && dvcElementData !== elementData) {
	        var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;
	        if (!projectedViews) {
	            projectedViews = dvcElementData.template._projectedViews = [];
	        }
	        projectedViews.push(view);
	    }
	    Services.dirtyParentQueries(view);
	    var /** @type {?} */ prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;
	    renderAttachEmbeddedView(elementData, prevView, view);
	}
	/**
	 * @param {?} elementData
	 * @param {?} viewIndex
	 * @return {?}
	 */
	function detachEmbeddedView(elementData, viewIndex) {
	    var /** @type {?} */ embeddedViews = elementData.viewContainer._embeddedViews;
	    if (viewIndex == null || viewIndex >= embeddedViews.length) {
	        viewIndex = embeddedViews.length - 1;
	    }
	    if (viewIndex < 0) {
	        return null;
	    }
	    var /** @type {?} */ view = embeddedViews[viewIndex];
	    view.viewContainerParent = undefined;
	    removeFromArray(embeddedViews, viewIndex);
	    var /** @type {?} */ dvcElementData = declaredViewContainer(view);
	    if (dvcElementData && dvcElementData !== elementData) {
	        var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;
	        removeFromArray(projectedViews, projectedViews.indexOf(view));
	    }
	    Services.dirtyParentQueries(view);
	    renderDetachView(view);
	    return view;
	}
	/**
	 * @param {?} elementData
	 * @param {?} oldViewIndex
	 * @param {?} newViewIndex
	 * @return {?}
	 */
	function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
	    var /** @type {?} */ embeddedViews = elementData.viewContainer._embeddedViews;
	    var /** @type {?} */ view = embeddedViews[oldViewIndex];
	    removeFromArray(embeddedViews, oldViewIndex);
	    if (newViewIndex == null) {
	        newViewIndex = embeddedViews.length;
	    }
	    addToArray(embeddedViews, newViewIndex, view);
	    // Note: Don't need to change projectedViews as the order in there
	    // as always invalid...
	    Services.dirtyParentQueries(view);
	    renderDetachView(view);
	    var /** @type {?} */ prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
	    renderAttachEmbeddedView(elementData, prevView, view);
	    return view;
	}
	/**
	 * @param {?} elementData
	 * @param {?} prevView
	 * @param {?} view
	 * @return {?}
	 */
	function renderAttachEmbeddedView(elementData, prevView, view) {
	    var /** @type {?} */ prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) : elementData.renderElement;
	    var /** @type {?} */ parentNode = view.renderer.parentNode(prevRenderNode);
	    var /** @type {?} */ nextSibling = view.renderer.nextSibling(prevRenderNode);
	    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
	    // However, browsers automatically do `appendChild` when there is no `nextSibling`.
	    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function renderDetachView(view) {
	    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);
	}
	/**
	 * @param {?} arr
	 * @param {?} index
	 * @param {?} value
	 * @return {?}
	 */
	function addToArray(arr, index, value) {
	    // perf: array.push is faster than array.splice!
	    if (index >= arr.length) {
	        arr.push(value);
	    }
	    else {
	        arr.splice(index, 0, value);
	    }
	}
	/**
	 * @param {?} arr
	 * @param {?} index
	 * @return {?}
	 */
	function removeFromArray(arr, index) {
	    // perf: array.pop is faster than array.splice!
	    if (index >= arr.length - 1) {
	        arr.pop();
	    }
	    else {
	        arr.splice(index, 1);
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EMPTY_CONTEXT = new Object();
	/**
	 * @param {?} selector
	 * @param {?} componentType
	 * @param {?} viewDefFactory
	 * @param {?} inputs
	 * @param {?} outputs
	 * @param {?} ngContentSelectors
	 * @return {?}
	 */
	function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
	    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
	}
	/**
	 * @param {?} componentFactory
	 * @return {?}
	 */
	function getComponentViewDefinitionFactory(componentFactory) {
	    return ((componentFactory)).viewDefFactory;
	}
	var ComponentFactory_ = (function (_super) {
	    __extends(ComponentFactory_, _super);
	    /**
	     * @param {?} selector
	     * @param {?} componentType
	     * @param {?} viewDefFactory
	     * @param {?} _inputs
	     * @param {?} _outputs
	     * @param {?} ngContentSelectors
	     */
	    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
	        var _this = 
	        // Attention: this ctor is called as top level function.
	        // Putting any logic in here will destroy closure tree shaking!
	        _super.call(this) || this;
	        _this.selector = selector;
	        _this.componentType = componentType;
	        _this._inputs = _inputs;
	        _this._outputs = _outputs;
	        _this.ngContentSelectors = ngContentSelectors;
	        _this.viewDefFactory = viewDefFactory;
	        return _this;
	    }
	    Object.defineProperty(ComponentFactory_.prototype, "inputs", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ inputsArr = [];
	            for (var /** @type {?} */ propName in this._inputs) {
	                var /** @type {?} */ templateName = this._inputs[propName];
	                inputsArr.push({ propName: propName, templateName: templateName });
	            }
	            return inputsArr;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactory_.prototype, "outputs", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ outputsArr = [];
	            for (var /** @type {?} */ propName in this._outputs) {
	                var /** @type {?} */ templateName = this._outputs[propName];
	                outputsArr.push({ propName: propName, templateName: templateName });
	            }
	            return outputsArr;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Creates a new component.
	     * @param {?} injector
	     * @param {?=} projectableNodes
	     * @param {?=} rootSelectorOrNode
	     * @param {?=} ngModule
	     * @return {?}
	     */
	    ComponentFactory_.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
	        if (!ngModule) {
	            throw new Error('ngModule should be provided');
	        }
	        var /** @type {?} */ viewDef = resolveViewDefinition(this.viewDefFactory);
	        var /** @type {?} */ componentNodeIndex = viewDef.nodes[0].element.componentProvider.index;
	        var /** @type {?} */ view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);
	        var /** @type {?} */ component = asProviderData(view, componentNodeIndex).instance;
	        view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);
	        return new ComponentRef_(view, new ViewRef_(view), component);
	    };
	    return ComponentFactory_;
	}(ComponentFactory));
	var ComponentRef_ = (function (_super) {
	    __extends(ComponentRef_, _super);
	    /**
	     * @param {?} _view
	     * @param {?} _viewRef
	     * @param {?} _component
	     */
	    function ComponentRef_(_view, _viewRef, _component) {
	        var _this = _super.call(this) || this;
	        _this._view = _view;
	        _this._viewRef = _viewRef;
	        _this._component = _component;
	        _this._elDef = _this._view.def.nodes[0];
	        return _this;
	    }
	    Object.defineProperty(ComponentRef_.prototype, "location", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return new ElementRef(asElementData(this._view, this._elDef.index).renderElement);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef_.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return new Injector_(this._view, this._elDef); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef_.prototype, "instance", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._component; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(ComponentRef_.prototype, "hostView", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._viewRef; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._viewRef; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(ComponentRef_.prototype, "componentType", {
	        /**
	         * @return {?}
	         */
	        get: function () { return (this._component.constructor); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    ComponentRef_.prototype.destroy = function () { this._viewRef.destroy(); };
	    /**
	     * @param {?} callback
	     * @return {?}
	     */
	    ComponentRef_.prototype.onDestroy = function (callback) { this._viewRef.onDestroy(callback); };
	    return ComponentRef_;
	}(ComponentRef));
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} elData
	 * @return {?}
	 */
	function createViewContainerData(view, elDef, elData) {
	    return new ViewContainerRef_(view, elDef, elData);
	}
	var ViewContainerRef_ = (function () {
	    /**
	     * @param {?} _view
	     * @param {?} _elDef
	     * @param {?} _data
	     */
	    function ViewContainerRef_(_view, _elDef, _data) {
	        this._view = _view;
	        this._elDef = _elDef;
	        this._data = _data;
	        /**
	         * \@internal
	         */
	        this._embeddedViews = [];
	    }
	    Object.defineProperty(ViewContainerRef_.prototype, "element", {
	        /**
	         * @return {?}
	         */
	        get: function () { return new ElementRef(this._data.renderElement); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewContainerRef_.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return new Injector_(this._view, this._elDef); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ view = this._view;
	            var /** @type {?} */ elDef = this._elDef.parent;
	            while (!elDef && view) {
	                elDef = viewParentEl(view);
	                view = view.parent;
	            }
	            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.clear = function () {
	        var /** @type {?} */ len = this._embeddedViews.length;
	        for (var /** @type {?} */ i = len - 1; i >= 0; i--) {
	            var /** @type {?} */ view = detachEmbeddedView(this._data, i);
	            Services.destroyView(view);
	        }
	    };
	    /**
	     * @param {?} index
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.get = function (index) {
	        var /** @type {?} */ view = this._embeddedViews[index];
	        if (view) {
	            var /** @type {?} */ ref = new ViewRef_(view);
	            ref.attachToViewContainerRef(this);
	            return ref;
	        }
	        return null;
	    };
	    Object.defineProperty(ViewContainerRef_.prototype, "length", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._embeddedViews.length; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    /**
	     * @template C
	     * @param {?} templateRef
	     * @param {?=} context
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
	        var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context || ({}));
	        this.insert(viewRef, index);
	        return viewRef;
	    };
	    /**
	     * @template C
	     * @param {?} componentFactory
	     * @param {?=} index
	     * @param {?=} injector
	     * @param {?=} projectableNodes
	     * @param {?=} ngModuleRef
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {
	        var /** @type {?} */ contextInjector = injector || this.parentInjector;
	        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {
	            ngModuleRef = contextInjector.get(NgModuleRef);
	        }
	        var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
	        this.insert(componentRef.hostView, index);
	        return componentRef;
	    };
	    /**
	     * @param {?} viewRef
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.insert = function (viewRef, index) {
	        var /** @type {?} */ viewRef_ = (viewRef);
	        var /** @type {?} */ viewData = viewRef_._view;
	        attachEmbeddedView(this._view, this._data, index, viewData);
	        viewRef_.attachToViewContainerRef(this);
	        return viewRef;
	    };
	    /**
	     * @param {?} viewRef
	     * @param {?} currentIndex
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
	        var /** @type {?} */ previousIndex = this._embeddedViews.indexOf(viewRef._view);
	        moveEmbeddedView(this._data, previousIndex, currentIndex);
	        return viewRef;
	    };
	    /**
	     * @param {?} viewRef
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.indexOf = function (viewRef) {
	        return this._embeddedViews.indexOf(((viewRef))._view);
	    };
	    /**
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.remove = function (index) {
	        var /** @type {?} */ viewData = detachEmbeddedView(this._data, index);
	        if (viewData) {
	            Services.destroyView(viewData);
	        }
	    };
	    /**
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.detach = function (index) {
	        var /** @type {?} */ view = detachEmbeddedView(this._data, index);
	        return view ? new ViewRef_(view) : null;
	    };
	    return ViewContainerRef_;
	}());
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function createChangeDetectorRef(view) {
	    return new ViewRef_(view);
	}
	var ViewRef_ = (function () {
	    /**
	     * @param {?} _view
	     */
	    function ViewRef_(_view) {
	        this._view = _view;
	        this._viewContainerRef = null;
	        this._appRef = null;
	    }
	    Object.defineProperty(ViewRef_.prototype, "rootNodes", {
	        /**
	         * @return {?}
	         */
	        get: function () { return rootRenderNodes(this._view); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef_.prototype, "context", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._view.context; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef_.prototype, "destroyed", {
	        /**
	         * @return {?}
	         */
	        get: function () { return (this._view.state & 8 /* Destroyed */) !== 0; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.markForCheck = function () { markParentViewsForCheck(this._view); };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.detach = function () { this._view.state &= ~2 /* ChecksEnabled */; };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.detectChanges = function () { Services.checkAndUpdateView(this._view); };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.checkNoChanges = function () { Services.checkNoChangesView(this._view); };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.reattach = function () { this._view.state |= 2 /* ChecksEnabled */; };
	    /**
	     * @param {?} callback
	     * @return {?}
	     */
	    ViewRef_.prototype.onDestroy = function (callback) {
	        if (!this._view.disposables) {
	            this._view.disposables = [];
	        }
	        this._view.disposables.push(/** @type {?} */ (callback));
	    };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.destroy = function () {
	        if (this._appRef) {
	            this._appRef.detachView(this);
	        }
	        else if (this._viewContainerRef) {
	            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
	        }
	        Services.destroyView(this._view);
	    };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.detachFromAppRef = function () {
	        this._appRef = null;
	        renderDetachView(this._view);
	        Services.dirtyParentQueries(this._view);
	    };
	    /**
	     * @param {?} appRef
	     * @return {?}
	     */
	    ViewRef_.prototype.attachToAppRef = function (appRef) {
	        if (this._viewContainerRef) {
	            throw new Error('This view is already attached to a ViewContainer!');
	        }
	        this._appRef = appRef;
	    };
	    /**
	     * @param {?} vcRef
	     * @return {?}
	     */
	    ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {
	        if (this._appRef) {
	            throw new Error('This view is already attached directly to the ApplicationRef!');
	        }
	        this._viewContainerRef = vcRef;
	    };
	    return ViewRef_;
	}());
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function createTemplateData(view, def) {
	    return new TemplateRef_(view, def);
	}
	var TemplateRef_ = (function (_super) {
	    __extends(TemplateRef_, _super);
	    /**
	     * @param {?} _parentView
	     * @param {?} _def
	     */
	    function TemplateRef_(_parentView, _def) {
	        var _this = _super.call(this) || this;
	        _this._parentView = _parentView;
	        _this._def = _def;
	        return _this;
	    }
	    /**
	     * @param {?} context
	     * @return {?}
	     */
	    TemplateRef_.prototype.createEmbeddedView = function (context) {
	        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, context));
	    };
	    Object.defineProperty(TemplateRef_.prototype, "elementRef", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return new ElementRef(asElementData(this._parentView, this._def.index).renderElement);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TemplateRef_;
	}(TemplateRef));
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @return {?}
	 */
	function createInjector(view, elDef) {
	    return new Injector_(view, elDef);
	}
	var Injector_ = (function () {
	    /**
	     * @param {?} view
	     * @param {?} elDef
	     */
	    function Injector_(view, elDef) {
	        this.view = view;
	        this.elDef = elDef;
	    }
	    /**
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    Injector_.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
	        var /** @type {?} */ allowPrivateServices = this.elDef ? (this.elDef.flags & 16777216 /* ComponentView */) !== 0 : false;
	        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);
	    };
	    return Injector_;
	}());
	/**
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function nodeValue(view, index) {
	    var /** @type {?} */ def = view.def.nodes[index];
	    if (def.flags & 1 /* TypeElement */) {
	        var /** @type {?} */ elData = asElementData(view, def.index);
	        return def.element.template ? elData.template : elData.renderElement;
	    }
	    else if (def.flags & 2 /* TypeText */) {
	        return asTextData(view, def.index).renderText;
	    }
	    else if (def.flags & (10112 /* CatProvider */ | 8 /* TypePipe */)) {
	        return asProviderData(view, def.index).instance;
	    }
	    throw new Error("Illegal state: read nodeValue for node index " + index);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function createRendererV1(view) {
	    return new RendererAdapter(view.renderer);
	}
	var RendererAdapter = (function () {
	    /**
	     * @param {?} delegate
	     */
	    function RendererAdapter(delegate) {
	        this.delegate = delegate;
	    }
	    /**
	     * @param {?} selectorOrNode
	     * @return {?}
	     */
	    RendererAdapter.prototype.selectRootElement = function (selectorOrNode) {
	        return this.delegate.selectRootElement(selectorOrNode);
	    };
	    /**
	     * @param {?} parent
	     * @param {?} namespaceAndName
	     * @return {?}
	     */
	    RendererAdapter.prototype.createElement = function (parent, namespaceAndName) {
	        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
	        var /** @type {?} */ el = this.delegate.createElement(name, ns);
	        if (parent) {
	            this.delegate.appendChild(parent, el);
	        }
	        return el;
	    };
	    /**
	     * @param {?} hostElement
	     * @return {?}
	     */
	    RendererAdapter.prototype.createViewRoot = function (hostElement) { return hostElement; };
	    /**
	     * @param {?} parentElement
	     * @return {?}
	     */
	    RendererAdapter.prototype.createTemplateAnchor = function (parentElement) {
	        var /** @type {?} */ comment = this.delegate.createComment('');
	        if (parentElement) {
	            this.delegate.appendChild(parentElement, comment);
	        }
	        return comment;
	    };
	    /**
	     * @param {?} parentElement
	     * @param {?} value
	     * @return {?}
	     */
	    RendererAdapter.prototype.createText = function (parentElement, value) {
	        var /** @type {?} */ node = this.delegate.createText(value);
	        if (parentElement) {
	            this.delegate.appendChild(parentElement, node);
	        }
	        return node;
	    };
	    /**
	     * @param {?} parentElement
	     * @param {?} nodes
	     * @return {?}
	     */
	    RendererAdapter.prototype.projectNodes = function (parentElement, nodes) {
	        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	            this.delegate.appendChild(parentElement, nodes[i]);
	        }
	    };
	    /**
	     * @param {?} node
	     * @param {?} viewRootNodes
	     * @return {?}
	     */
	    RendererAdapter.prototype.attachViewAfter = function (node, viewRootNodes) {
	        var /** @type {?} */ parentElement = this.delegate.parentNode(node);
	        var /** @type {?} */ nextSibling = this.delegate.nextSibling(node);
	        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
	            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);
	        }
	    };
	    /**
	     * @param {?} viewRootNodes
	     * @return {?}
	     */
	    RendererAdapter.prototype.detachView = function (viewRootNodes) {
	        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
	            var /** @type {?} */ node = viewRootNodes[i];
	            var /** @type {?} */ parentElement = this.delegate.parentNode(node);
	            this.delegate.removeChild(parentElement, node);
	        }
	    };
	    /**
	     * @param {?} hostElement
	     * @param {?} viewAllNodes
	     * @return {?}
	     */
	    RendererAdapter.prototype.destroyView = function (hostElement, viewAllNodes) {
	        for (var /** @type {?} */ i = 0; i < viewAllNodes.length; i++) {
	            this.delegate.destroyNode(viewAllNodes[i]);
	        }
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} name
	     * @param {?} callback
	     * @return {?}
	     */
	    RendererAdapter.prototype.listen = function (renderElement, name, callback) {
	        return this.delegate.listen(renderElement, name, /** @type {?} */ (callback));
	    };
	    /**
	     * @param {?} target
	     * @param {?} name
	     * @param {?} callback
	     * @return {?}
	     */
	    RendererAdapter.prototype.listenGlobal = function (target, name, callback) {
	        return this.delegate.listen(target, name, /** @type {?} */ (callback));
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} propertyName
	     * @param {?} propertyValue
	     * @return {?}
	     */
	    RendererAdapter.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	        this.delegate.setProperty(renderElement, propertyName, propertyValue);
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} namespaceAndName
	     * @param {?} attributeValue
	     * @return {?}
	     */
	    RendererAdapter.prototype.setElementAttribute = function (renderElement, namespaceAndName, attributeValue) {
	        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
	        if (attributeValue != null) {
	            this.delegate.setAttribute(renderElement, name, attributeValue, ns);
	        }
	        else {
	            this.delegate.removeAttribute(renderElement, name, ns);
	        }
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} propertyName
	     * @param {?} propertyValue
	     * @return {?}
	     */
	    RendererAdapter.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
	    /**
	     * @param {?} renderElement
	     * @param {?} className
	     * @param {?} isAdd
	     * @return {?}
	     */
	    RendererAdapter.prototype.setElementClass = function (renderElement, className, isAdd) {
	        if (isAdd) {
	            this.delegate.addClass(renderElement, className);
	        }
	        else {
	            this.delegate.removeClass(renderElement, className);
	        }
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} styleName
	     * @param {?} styleValue
	     * @return {?}
	     */
	    RendererAdapter.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	        if (styleValue != null) {
	            this.delegate.setStyle(renderElement, styleName, styleValue);
	        }
	        else {
	            this.delegate.removeStyle(renderElement, styleName);
	        }
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} methodName
	     * @param {?} args
	     * @return {?}
	     */
	    RendererAdapter.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	        ((renderElement))[methodName].apply(renderElement, args);
	    };
	    /**
	     * @param {?} renderNode
	     * @param {?} text
	     * @return {?}
	     */
	    RendererAdapter.prototype.setText = function (renderNode$$1, text) { this.delegate.setValue(renderNode$$1, text); };
	    /**
	     * @return {?}
	     */
	    RendererAdapter.prototype.animate = function () { throw new Error('Renderer.animate is no longer supported!'); };
	    return RendererAdapter;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var RendererV1TokenKey = tokenKey(Renderer);
	var Renderer2TokenKey = tokenKey(Renderer2);
	var ElementRefTokenKey = tokenKey(ElementRef);
	var ViewContainerRefTokenKey = tokenKey(ViewContainerRef);
	var TemplateRefTokenKey = tokenKey(TemplateRef);
	var ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);
	var InjectorRefTokenKey = tokenKey(Injector);
	var NOT_CREATED = new Object();
	/**
	 * @param {?} flags
	 * @param {?} matchedQueries
	 * @param {?} childCount
	 * @param {?} ctor
	 * @param {?} deps
	 * @param {?=} props
	 * @param {?=} outputs
	 * @return {?}
	 */
	function directiveDef(flags, matchedQueries, childCount, ctor, deps, props, outputs) {
	    var /** @type {?} */ bindings = [];
	    if (props) {
	        for (var /** @type {?} */ prop in props) {
	            var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];
	            bindings[bindingIndex] = {
	                flags: 8 /* TypeProperty */,
	                name: prop, nonMinifiedName: nonMinifiedName,
	                ns: undefined,
	                securityContext: undefined,
	                suffix: undefined
	            };
	        }
	    }
	    var /** @type {?} */ outputDefs = [];
	    if (outputs) {
	        for (var /** @type {?} */ propName in outputs) {
	            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });
	        }
	    }
	    flags |= 8192 /* TypeDirective */;
	    return _def(flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
	}
	/**
	 * @param {?} flags
	 * @param {?} ctor
	 * @param {?} deps
	 * @return {?}
	 */
	function pipeDef(flags, ctor, deps) {
	    flags |= 8 /* TypePipe */;
	    return _def(flags, null, 0, ctor, ctor, deps);
	}
	/**
	 * @param {?} flags
	 * @param {?} matchedQueries
	 * @param {?} token
	 * @param {?} value
	 * @param {?} deps
	 * @return {?}
	 */
	function providerDef(flags, matchedQueries, token, value, deps) {
	    return _def(flags, matchedQueries, 0, token, value, deps);
	}
	/**
	 * @param {?} flags
	 * @param {?} matchedQueriesDsl
	 * @param {?} childCount
	 * @param {?} token
	 * @param {?} value
	 * @param {?} deps
	 * @param {?=} bindings
	 * @param {?=} outputs
	 * @return {?}
	 */
	function _def(flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
	    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
	    if (!outputs) {
	        outputs = [];
	    }
	    if (!bindings) {
	        bindings = [];
	    }
	    var /** @type {?} */ depDefs = deps.map(function (value) {
	        var /** @type {?} */ token;
	        var /** @type {?} */ flags;
	        if (Array.isArray(value)) {
	            flags = value[0], token = value[1];
	        }
	        else {
	            flags = 0 /* None */;
	            token = value;
	        }
	        return { flags: flags, token: token, tokenKey: tokenKey(token) };
	    });
	    return {
	        // will bet set by the view definition
	        index: undefined,
	        parent: undefined,
	        renderParent: undefined,
	        bindingIndex: undefined,
	        outputIndex: undefined,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,
	        ngContentIndex: undefined, childCount: childCount, bindings: bindings,
	        bindingFlags: calcBindingFlags(bindings), outputs: outputs,
	        element: undefined,
	        provider: { token: token, tokenKey: tokenKey(token), value: value, deps: depDefs },
	        text: undefined,
	        query: undefined,
	        ngContent: undefined
	    };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function createProviderInstance(view, def) {
	    return def.flags & 2048 /* LazyProvider */ ? NOT_CREATED : _createProviderInstance(view, def);
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function createPipeInstance(view, def) {
	    // deps are looked up from component.
	    var /** @type {?} */ compView = view;
	    while (compView.parent && !isComponentView(compView)) {
	        compView = compView.parent;
	    }
	    // pipes can see the private services of the component
	    var /** @type {?} */ allowPrivateServices = true;
	    // pipes are always eager and classes!
	    return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function createDirectiveInstance(view, def) {
	    // components can see other private services, other directives can't.
	    var /** @type {?} */ allowPrivateServices = (def.flags & 16384 /* Component */) > 0;
	    // directives are always eager and classes!
	    var /** @type {?} */ instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);
	    if (def.outputs.length) {
	        for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {
	            var /** @type {?} */ output = def.outputs[i];
	            var /** @type {?} */ subscription = instance[output.propName].subscribe(eventHandlerClosure(view, def.parent.index, output.eventName));
	            view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
	        }
	    }
	    return instance;
	}
	/**
	 * @param {?} view
	 * @param {?} index
	 * @param {?} eventName
	 * @return {?}
	 */
	function eventHandlerClosure(view, index, eventName) {
	    return function (event) { return dispatchEvent(view, index, eventName, event); };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} v0
	 * @param {?} v1
	 * @param {?} v2
	 * @param {?} v3
	 * @param {?} v4
	 * @param {?} v5
	 * @param {?} v6
	 * @param {?} v7
	 * @param {?} v8
	 * @param {?} v9
	 * @return {?}
	 */
	function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ providerData = asProviderData(view, def.index);
	    var /** @type {?} */ directive = providerData.instance;
	    var /** @type {?} */ changed = false;
	    var /** @type {?} */ changes;
	    var /** @type {?} */ bindLen = def.bindings.length;
	    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 0, v0, changes);
	    }
	    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 1, v1, changes);
	    }
	    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 2, v2, changes);
	    }
	    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 3, v3, changes);
	    }
	    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 4, v4, changes);
	    }
	    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 5, v5, changes);
	    }
	    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 6, v6, changes);
	    }
	    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 7, v7, changes);
	    }
	    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 8, v8, changes);
	    }
	    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 9, v9, changes);
	    }
	    if (changes) {
	        directive.ngOnChanges(changes);
	    }
	    if ((view.state & 1 /* FirstCheck */) && (def.flags & 32768 /* OnInit */)) {
	        directive.ngOnInit();
	    }
	    if (def.flags & 131072 /* DoCheck */) {
	        directive.ngDoCheck();
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} values
	 * @return {?}
	 */
	function checkAndUpdateDirectiveDynamic(view, def, values) {
	    var /** @type {?} */ providerData = asProviderData(view, def.index);
	    var /** @type {?} */ directive = providerData.instance;
	    var /** @type {?} */ changed = false;
	    var /** @type {?} */ changes;
	    for (var /** @type {?} */ i = 0; i < values.length; i++) {
	        if (checkBinding(view, def, i, values[i])) {
	            changed = true;
	            changes = updateProp(view, providerData, def, i, values[i], changes);
	        }
	    }
	    if (changes) {
	        directive.ngOnChanges(changes);
	    }
	    if ((view.state & 1 /* FirstCheck */) && (def.flags & 32768 /* OnInit */)) {
	        directive.ngOnInit();
	    }
	    if (def.flags & 131072 /* DoCheck */) {
	        directive.ngDoCheck();
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function _createProviderInstance(view, def) {
	    // private services can see other private services
	    var /** @type {?} */ allowPrivateServices = (def.flags & 4096 /* PrivateProvider */) > 0;
	    var /** @type {?} */ providerDef = def.provider;
	    var /** @type {?} */ injectable;
	    switch (def.flags & 100673535 /* Types */) {
	        case 256 /* TypeClassProvider */:
	            injectable =
	                createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);
	            break;
	        case 512 /* TypeFactoryProvider */:
	            injectable =
	                callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);
	            break;
	        case 1024 /* TypeUseExistingProvider */:
	            injectable = resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);
	            break;
	        case 128 /* TypeValueProvider */:
	            injectable = providerDef.value;
	            break;
	    }
	    return injectable;
	}
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} allowPrivateServices
	 * @param {?} ctor
	 * @param {?} deps
	 * @return {?}
	 */
	function createClass(view, elDef, allowPrivateServices, ctor, deps) {
	    var /** @type {?} */ len = deps.length;
	    var /** @type {?} */ injectable;
	    switch (len) {
	        case 0:
	            injectable = new ctor();
	            break;
	        case 1:
	            injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));
	            break;
	        case 2:
	            injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
	            break;
	        case 3:
	            injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
	            break;
	        default:
	            var /** @type {?} */ depValues = new Array(len);
	            for (var /** @type {?} */ i = 0; i < len; i++) {
	                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
	            }
	            injectable = new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();
	    }
	    return injectable;
	}
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} allowPrivateServices
	 * @param {?} factory
	 * @param {?} deps
	 * @return {?}
	 */
	function callFactory(view, elDef, allowPrivateServices, factory, deps) {
	    var /** @type {?} */ len = deps.length;
	    var /** @type {?} */ injectable;
	    switch (len) {
	        case 0:
	            injectable = factory();
	            break;
	        case 1:
	            injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));
	            break;
	        case 2:
	            injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
	            break;
	        case 3:
	            injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
	            break;
	        default:
	            var /** @type {?} */ depValues = Array(len);
	            for (var /** @type {?} */ i = 0; i < len; i++) {
	                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
	            }
	            injectable = factory.apply(void 0, depValues);
	    }
	    return injectable;
	}
	// This default value is when checking the hierarchy for a token.
	//
	// It means both:
	// - the token is not provided by the current injector,
	// - only the element injectors should be checked (ie do not check module injectors
	//
	//          mod1
	//         /
	//       el1   mod2
	//         \  /
	//         el2
	//
	// When requesting el2.injector.get(token), we should check in the following order and return the
	// first found value:
	// - el2.injector.get(token, default)
	// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module
	// - mod2.injector.get(token, default)
	var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} allowPrivateServices
	 * @param {?} depDef
	 * @param {?=} notFoundValue
	 * @return {?}
	 */
	function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {
	    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
	    if (depDef.flags & 8 /* Value */) {
	        return depDef.token;
	    }
	    var /** @type {?} */ startView = view;
	    if (depDef.flags & 2 /* Optional */) {
	        notFoundValue = null;
	    }
	    var /** @type {?} */ tokenKey$$1 = depDef.tokenKey;
	    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {
	        allowPrivateServices = false;
	        elDef = elDef.parent;
	    }
	    while (view) {
	        if (elDef) {
	            switch (tokenKey$$1) {
	                case RendererV1TokenKey: {
	                    var /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);
	                    return createRendererV1(compView);
	                }
	                case Renderer2TokenKey: {
	                    var /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);
	                    return compView.renderer;
	                }
	                case ElementRefTokenKey:
	                    return new ElementRef(asElementData(view, elDef.index).renderElement);
	                case ViewContainerRefTokenKey:
	                    return asElementData(view, elDef.index).viewContainer;
	                case TemplateRefTokenKey: {
	                    if (elDef.element.template) {
	                        return asElementData(view, elDef.index).template;
	                    }
	                    break;
	                }
	                case ChangeDetectorRefTokenKey: {
	                    var /** @type {?} */ cdView = findCompView(view, elDef, allowPrivateServices);
	                    return createChangeDetectorRef(cdView);
	                }
	                case InjectorRefTokenKey:
	                    return createInjector(view, elDef);
	                default:
	                    var /** @type {?} */ providerDef_1 = (allowPrivateServices ? elDef.element.allProviders :
	                        elDef.element.publicProviders)[tokenKey$$1];
	                    if (providerDef_1) {
	                        var /** @type {?} */ providerData = asProviderData(view, providerDef_1.index);
	                        if (providerData.instance === NOT_CREATED) {
	                            providerData.instance = _createProviderInstance(view, providerDef_1);
	                        }
	                        return providerData.instance;
	                    }
	            }
	        }
	        allowPrivateServices = isComponentView(view);
	        elDef = viewParentEl(view);
	        view = view.parent;
	    }
	    var /** @type {?} */ value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);
	    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||
	        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
	        // Return the value from the root element injector when
	        // - it provides it
	        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
	        // - the module injector should not be checked
	        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
	        return value;
	    }
	    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);
	}
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} allowPrivateServices
	 * @return {?}
	 */
	function findCompView(view, elDef, allowPrivateServices) {
	    var /** @type {?} */ compView;
	    if (allowPrivateServices) {
	        compView = asElementData(view, elDef.index).componentView;
	    }
	    else {
	        compView = view;
	        while (compView.parent && !isComponentView(compView)) {
	            compView = compView.parent;
	        }
	    }
	    return compView;
	}
	/**
	 * @param {?} view
	 * @param {?} providerData
	 * @param {?} def
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @param {?} changes
	 * @return {?}
	 */
	function updateProp(view, providerData, def, bindingIdx, value, changes) {
	    if (def.flags & 16384 /* Component */) {
	        var /** @type {?} */ compView = asElementData(view, def.parent.index).componentView;
	        if (compView.def.flags & 2 /* OnPush */) {
	            compView.state |= 2 /* ChecksEnabled */;
	        }
	    }
	    var /** @type {?} */ binding = def.bindings[bindingIdx];
	    var /** @type {?} */ propName = binding.name;
	    // Note: This is still safe with Closure Compiler as
	    // the user passed in the property name as an object has to `providerDef`,
	    // so Closure Compiler will have renamed the property correctly already.
	    providerData.instance[propName] = value;
	    if (def.flags & 262144 /* OnChanges */) {
	        changes = changes || {};
	        var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];
	        if (oldValue instanceof WrappedValue) {
	            oldValue = oldValue.wrapped;
	        }
	        var /** @type {?} */ binding_1 = def.bindings[bindingIdx];
	        changes[binding_1.nonMinifiedName] =
	            new SimpleChange(oldValue, value, (view.state & 1 /* FirstCheck */) !== 0);
	    }
	    view.oldValues[def.bindingIndex + bindingIdx] = value;
	    return changes;
	}
	/**
	 * @param {?} view
	 * @param {?} lifecycles
	 * @return {?}
	 */
	function callLifecycleHooksChildrenFirst(view, lifecycles) {
	    if (!(view.def.nodeFlags & lifecycles)) {
	        return;
	    }
	    var /** @type {?} */ nodes = view.def.nodes;
	    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	        var /** @type {?} */ nodeDef = nodes[i];
	        var /** @type {?} */ parent = nodeDef.parent;
	        if (!parent && nodeDef.flags & lifecycles) {
	            // matching root node (e.g. a pipe)
	            callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
	        }
	        if ((nodeDef.childFlags & lifecycles) === 0) {
	            // no child matches one of the lifecycles
	            i += nodeDef.childCount;
	        }
	        while (parent && (parent.flags & 1 /* TypeElement */) &&
	            i === parent.index + parent.childCount) {
	            // last child of an element
	            if (parent.directChildFlags & lifecycles) {
	                callElementProvidersLifecycles(view, parent, lifecycles);
	            }
	            parent = parent.parent;
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} lifecycles
	 * @return {?}
	 */
	function callElementProvidersLifecycles(view, elDef, lifecycles) {
	    for (var /** @type {?} */ i = elDef.index + 1; i <= elDef.index + elDef.childCount; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        if (nodeDef.flags & lifecycles) {
	            callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
	        }
	        // only visit direct children
	        i += nodeDef.childCount;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} index
	 * @param {?} lifecycles
	 * @return {?}
	 */
	function callProviderLifecycles(view, index, lifecycles) {
	    var /** @type {?} */ provider = asProviderData(view, index).instance;
	    if (provider === NOT_CREATED) {
	        return;
	    }
	    Services.setCurrentNode(view, index);
	    if (lifecycles & 524288 /* AfterContentInit */) {
	        provider.ngAfterContentInit();
	    }
	    if (lifecycles & 1048576 /* AfterContentChecked */) {
	        provider.ngAfterContentChecked();
	    }
	    if (lifecycles & 2097152 /* AfterViewInit */) {
	        provider.ngAfterViewInit();
	    }
	    if (lifecycles & 4194304 /* AfterViewChecked */) {
	        provider.ngAfterViewChecked();
	    }
	    if (lifecycles & 65536 /* OnDestroy */) {
	        provider.ngOnDestroy();
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} argCount
	 * @return {?}
	 */
	function purePipeDef(argCount) {
	    // argCount + 1 to include the pipe as first arg
	    return _pureExpressionDef(64 /* TypePurePipe */, new Array(argCount + 1));
	}
	/**
	 * @param {?} argCount
	 * @return {?}
	 */
	function pureArrayDef(argCount) {
	    return _pureExpressionDef(16 /* TypePureArray */, new Array(argCount));
	}
	/**
	 * @param {?} propertyNames
	 * @return {?}
	 */
	function pureObjectDef(propertyNames) {
	    return _pureExpressionDef(32 /* TypePureObject */, propertyNames);
	}
	/**
	 * @param {?} flags
	 * @param {?} propertyNames
	 * @return {?}
	 */
	function _pureExpressionDef(flags, propertyNames) {
	    var /** @type {?} */ bindings = new Array(propertyNames.length);
	    for (var /** @type {?} */ i = 0; i < propertyNames.length; i++) {
	        var /** @type {?} */ prop = propertyNames[i];
	        bindings[i] = {
	            flags: 8 /* TypeProperty */,
	            name: prop,
	            ns: undefined,
	            nonMinifiedName: prop,
	            securityContext: undefined,
	            suffix: undefined
	        };
	    }
	    return {
	        // will bet set by the view definition
	        index: undefined,
	        parent: undefined,
	        renderParent: undefined,
	        bindingIndex: undefined,
	        outputIndex: undefined,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {},
	        ngContentIndex: undefined,
	        childCount: 0, bindings: bindings,
	        bindingFlags: calcBindingFlags(bindings),
	        outputs: [],
	        element: undefined,
	        provider: undefined,
	        text: undefined,
	        query: undefined,
	        ngContent: undefined
	    };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function createPureExpression(view, def) {
	    return { value: undefined };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} v0
	 * @param {?} v1
	 * @param {?} v2
	 * @param {?} v3
	 * @param {?} v4
	 * @param {?} v5
	 * @param {?} v6
	 * @param {?} v7
	 * @param {?} v8
	 * @param {?} v9
	 * @return {?}
	 */
	function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ bindings = def.bindings;
	    var /** @type {?} */ changed = false;
	    var /** @type {?} */ bindLen = bindings.length;
	    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
	        changed = true;
	    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
	        changed = true;
	    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
	        changed = true;
	    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
	        changed = true;
	    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
	        changed = true;
	    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
	        changed = true;
	    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
	        changed = true;
	    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
	        changed = true;
	    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
	        changed = true;
	    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
	        changed = true;
	    if (changed) {
	        var /** @type {?} */ data = asPureExpressionData(view, def.index);
	        var /** @type {?} */ value = void 0;
	        switch (def.flags & 100673535 /* Types */) {
	            case 16 /* TypePureArray */:
	                value = new Array(bindings.length);
	                if (bindLen > 0)
	                    value[0] = v0;
	                if (bindLen > 1)
	                    value[1] = v1;
	                if (bindLen > 2)
	                    value[2] = v2;
	                if (bindLen > 3)
	                    value[3] = v3;
	                if (bindLen > 4)
	                    value[4] = v4;
	                if (bindLen > 5)
	                    value[5] = v5;
	                if (bindLen > 6)
	                    value[6] = v6;
	                if (bindLen > 7)
	                    value[7] = v7;
	                if (bindLen > 8)
	                    value[8] = v8;
	                if (bindLen > 9)
	                    value[9] = v9;
	                break;
	            case 32 /* TypePureObject */:
	                value = {};
	                if (bindLen > 0)
	                    value[bindings[0].name] = v0;
	                if (bindLen > 1)
	                    value[bindings[1].name] = v1;
	                if (bindLen > 2)
	                    value[bindings[2].name] = v2;
	                if (bindLen > 3)
	                    value[bindings[3].name] = v3;
	                if (bindLen > 4)
	                    value[bindings[4].name] = v4;
	                if (bindLen > 5)
	                    value[bindings[5].name] = v5;
	                if (bindLen > 6)
	                    value[bindings[6].name] = v6;
	                if (bindLen > 7)
	                    value[bindings[7].name] = v7;
	                if (bindLen > 8)
	                    value[bindings[8].name] = v8;
	                if (bindLen > 9)
	                    value[bindings[9].name] = v9;
	                break;
	            case 64 /* TypePurePipe */:
	                var /** @type {?} */ pipe = v0;
	                switch (bindLen) {
	                    case 1:
	                        value = pipe.transform(v0);
	                        break;
	                    case 2:
	                        value = pipe.transform(v1);
	                        break;
	                    case 3:
	                        value = pipe.transform(v1, v2);
	                        break;
	                    case 4:
	                        value = pipe.transform(v1, v2, v3);
	                        break;
	                    case 5:
	                        value = pipe.transform(v1, v2, v3, v4);
	                        break;
	                    case 6:
	                        value = pipe.transform(v1, v2, v3, v4, v5);
	                        break;
	                    case 7:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6);
	                        break;
	                    case 8:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
	                        break;
	                    case 9:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
	                        break;
	                    case 10:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
	                        break;
	                }
	                break;
	        }
	        data.value = value;
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} values
	 * @return {?}
	 */
	function checkAndUpdatePureExpressionDynamic(view, def, values) {
	    var /** @type {?} */ bindings = def.bindings;
	    var /** @type {?} */ changed = false;
	    for (var /** @type {?} */ i = 0; i < values.length; i++) {
	        // Note: We need to loop over all values, so that
	        // the old values are updates as well!
	        if (checkAndUpdateBinding(view, def, i, values[i])) {
	            changed = true;
	        }
	    }
	    if (changed) {
	        var /** @type {?} */ data = asPureExpressionData(view, def.index);
	        var /** @type {?} */ value = void 0;
	        switch (def.flags & 100673535 /* Types */) {
	            case 16 /* TypePureArray */:
	                value = values;
	                break;
	            case 32 /* TypePureObject */:
	                value = {};
	                for (var /** @type {?} */ i = 0; i < values.length; i++) {
	                    value[bindings[i].name] = values[i];
	                }
	                break;
	            case 64 /* TypePurePipe */:
	                var /** @type {?} */ pipe = values[0];
	                var /** @type {?} */ params = values.slice(1);
	                value = pipe.transform.apply(pipe, params);
	                break;
	        }
	        data.value = value;
	    }
	    return changed;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} flags
	 * @param {?} id
	 * @param {?} bindings
	 * @return {?}
	 */
	function queryDef(flags, id, bindings) {
	    var /** @type {?} */ bindingDefs = [];
	    for (var /** @type {?} */ propName in bindings) {
	        var /** @type {?} */ bindingType = bindings[propName];
	        bindingDefs.push({ propName: propName, bindingType: bindingType });
	    }
	    return {
	        // will bet set by the view definition
	        index: undefined,
	        parent: undefined,
	        renderParent: undefined,
	        bindingIndex: undefined,
	        outputIndex: undefined,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        ngContentIndex: undefined,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {},
	        childCount: 0,
	        bindings: [],
	        bindingFlags: 0,
	        outputs: [],
	        element: undefined,
	        provider: undefined,
	        text: undefined,
	        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },
	        ngContent: undefined
	    };
	}
	/**
	 * @return {?}
	 */
	function createQuery() {
	    return new QueryList();
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function dirtyParentQueries(view) {
	    var /** @type {?} */ queryIds = view.def.nodeMatchedQueries;
	    while (view.parent && isEmbeddedView(view)) {
	        var /** @type {?} */ tplDef = view.parentNodeDef;
	        view = view.parent;
	        // content queries
	        var /** @type {?} */ end = tplDef.index + tplDef.childCount;
	        for (var /** @type {?} */ i = 0; i <= end; i++) {
	            var /** @type {?} */ nodeDef = view.def.nodes[i];
	            if ((nodeDef.flags & 33554432 /* TypeContentQuery */) &&
	                (nodeDef.flags & 268435456 /* DynamicQuery */) &&
	                (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {
	                asQueryList(view, i).setDirty();
	            }
	            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.index) ||
	                !(nodeDef.childFlags & 33554432 /* TypeContentQuery */) ||
	                !(nodeDef.childFlags & 268435456 /* DynamicQuery */)) {
	                // skip elements that don't contain the template element or no query.
	                i += nodeDef.childCount;
	            }
	        }
	    }
	    // view queries
	    if (view.def.nodeFlags & 67108864 /* TypeViewQuery */) {
	        for (var /** @type {?} */ i = 0; i < view.def.nodes.length; i++) {
	            var /** @type {?} */ nodeDef = view.def.nodes[i];
	            if ((nodeDef.flags & 67108864 /* TypeViewQuery */) && (nodeDef.flags & 268435456 /* DynamicQuery */)) {
	                asQueryList(view, i).setDirty();
	            }
	            // only visit the root nodes
	            i += nodeDef.childCount;
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @return {?}
	 */
	function checkAndUpdateQuery(view, nodeDef) {
	    var /** @type {?} */ queryList = asQueryList(view, nodeDef.index);
	    if (!queryList.dirty) {
	        return;
	    }
	    var /** @type {?} */ directiveInstance;
	    var /** @type {?} */ newValues;
	    if (nodeDef.flags & 33554432 /* TypeContentQuery */) {
	        var /** @type {?} */ elementDef_1 = nodeDef.parent.parent;
	        newValues = calcQueryValues(view, elementDef_1.index, elementDef_1.index + elementDef_1.childCount, nodeDef.query, []);
	        directiveInstance = asProviderData(view, nodeDef.parent.index).instance;
	    }
	    else if (nodeDef.flags & 67108864 /* TypeViewQuery */) {
	        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);
	        directiveInstance = view.component;
	    }
	    queryList.reset(newValues);
	    var /** @type {?} */ bindings = nodeDef.query.bindings;
	    var /** @type {?} */ notify = false;
	    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
	        var /** @type {?} */ binding = bindings[i];
	        var /** @type {?} */ boundValue = void 0;
	        switch (binding.bindingType) {
	            case 0 /* First */:
	                boundValue = queryList.first;
	                break;
	            case 1 /* All */:
	                boundValue = queryList;
	                notify = true;
	                break;
	        }
	        directiveInstance[binding.propName] = boundValue;
	    }
	    if (notify) {
	        queryList.notifyOnChanges();
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} startIndex
	 * @param {?} endIndex
	 * @param {?} queryDef
	 * @param {?} values
	 * @return {?}
	 */
	function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
	    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        var /** @type {?} */ valueType = nodeDef.matchedQueries[queryDef.id];
	        if (valueType != null) {
	            values.push(getQueryValue(view, nodeDef, valueType));
	        }
	        if (nodeDef.flags & 1 /* TypeElement */ && nodeDef.element.template &&
	            (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) === queryDef.filterId) {
	            // check embedded views that were attached at the place of their template.
	            var /** @type {?} */ elementData = asElementData(view, i);
	            if (nodeDef.flags & 8388608 /* EmbeddedViews */) {
	                var /** @type {?} */ embeddedViews = elementData.viewContainer._embeddedViews;
	                for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
	                    var /** @type {?} */ embeddedView = embeddedViews[k];
	                    var /** @type {?} */ dvc = declaredViewContainer(embeddedView);
	                    if (dvc && dvc === elementData) {
	                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
	                    }
	                }
	            }
	            var /** @type {?} */ projectedViews = elementData.template._projectedViews;
	            if (projectedViews) {
	                for (var /** @type {?} */ k = 0; k < projectedViews.length; k++) {
	                    var /** @type {?} */ projectedView = projectedViews[k];
	                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
	                }
	            }
	        }
	        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
	            // if no child matches the query, skip the children.
	            i += nodeDef.childCount;
	        }
	    }
	    return values;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} queryValueType
	 * @return {?}
	 */
	function getQueryValue(view, nodeDef, queryValueType) {
	    if (queryValueType != null) {
	        // a match
	        var /** @type {?} */ value = void 0;
	        switch (queryValueType) {
	            case 1 /* RenderElement */:
	                value = asElementData(view, nodeDef.index).renderElement;
	                break;
	            case 0 /* ElementRef */:
	                value = new ElementRef(asElementData(view, nodeDef.index).renderElement);
	                break;
	            case 2 /* TemplateRef */:
	                value = asElementData(view, nodeDef.index).template;
	                break;
	            case 3 /* ViewContainerRef */:
	                value = asElementData(view, nodeDef.index).viewContainer;
	                break;
	            case 4 /* Provider */:
	                value = asProviderData(view, nodeDef.index).instance;
	                break;
	        }
	        return value;
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} ngContentIndex
	 * @param {?} constants
	 * @return {?}
	 */
	function textDef(ngContentIndex, constants) {
	    var /** @type {?} */ bindings = new Array(constants.length - 1);
	    for (var /** @type {?} */ i = 1; i < constants.length; i++) {
	        bindings[i - 1] = {
	            flags: 8 /* TypeProperty */,
	            name: undefined,
	            ns: undefined,
	            nonMinifiedName: undefined,
	            securityContext: undefined,
	            suffix: constants[i]
	        };
	    }
	    var /** @type {?} */ flags = 2;
	    return {
	        // will bet set by the view definition
	        index: undefined,
	        parent: undefined,
	        renderParent: undefined,
	        bindingIndex: undefined,
	        outputIndex: undefined,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {}, ngContentIndex: ngContentIndex,
	        childCount: 0, bindings: bindings,
	        bindingFlags: calcBindingFlags(bindings),
	        outputs: [],
	        element: undefined,
	        provider: undefined,
	        text: { prefix: constants[0] },
	        query: undefined,
	        ngContent: undefined
	    };
	}
	/**
	 * @param {?} view
	 * @param {?} renderHost
	 * @param {?} def
	 * @return {?}
	 */
	function createText(view, renderHost, def) {
	    var /** @type {?} */ renderNode$$1;
	    var /** @type {?} */ renderer = view.renderer;
	    renderNode$$1 = renderer.createText(def.text.prefix);
	    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
	    if (parentEl) {
	        renderer.appendChild(parentEl, renderNode$$1);
	    }
	    return { renderText: renderNode$$1 };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} v0
	 * @param {?} v1
	 * @param {?} v2
	 * @param {?} v3
	 * @param {?} v4
	 * @param {?} v5
	 * @param {?} v6
	 * @param {?} v7
	 * @param {?} v8
	 * @param {?} v9
	 * @return {?}
	 */
	function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ changed = false;
	    var /** @type {?} */ bindings = def.bindings;
	    var /** @type {?} */ bindLen = bindings.length;
	    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
	        changed = true;
	    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
	        changed = true;
	    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
	        changed = true;
	    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
	        changed = true;
	    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
	        changed = true;
	    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
	        changed = true;
	    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
	        changed = true;
	    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
	        changed = true;
	    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
	        changed = true;
	    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
	        changed = true;
	    if (changed) {
	        var /** @type {?} */ value = def.text.prefix;
	        if (bindLen > 0)
	            value += _addInterpolationPart(v0, bindings[0]);
	        if (bindLen > 1)
	            value += _addInterpolationPart(v1, bindings[1]);
	        if (bindLen > 2)
	            value += _addInterpolationPart(v2, bindings[2]);
	        if (bindLen > 3)
	            value += _addInterpolationPart(v3, bindings[3]);
	        if (bindLen > 4)
	            value += _addInterpolationPart(v4, bindings[4]);
	        if (bindLen > 5)
	            value += _addInterpolationPart(v5, bindings[5]);
	        if (bindLen > 6)
	            value += _addInterpolationPart(v6, bindings[6]);
	        if (bindLen > 7)
	            value += _addInterpolationPart(v7, bindings[7]);
	        if (bindLen > 8)
	            value += _addInterpolationPart(v8, bindings[8]);
	        if (bindLen > 9)
	            value += _addInterpolationPart(v9, bindings[9]);
	        var /** @type {?} */ renderNode$$1 = asTextData(view, def.index).renderText;
	        view.renderer.setValue(renderNode$$1, value);
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} values
	 * @return {?}
	 */
	function checkAndUpdateTextDynamic(view, def, values) {
	    var /** @type {?} */ bindings = def.bindings;
	    var /** @type {?} */ changed = false;
	    for (var /** @type {?} */ i = 0; i < values.length; i++) {
	        // Note: We need to loop over all values, so that
	        // the old values are updates as well!
	        if (checkAndUpdateBinding(view, def, i, values[i])) {
	            changed = true;
	        }
	    }
	    if (changed) {
	        var /** @type {?} */ value = '';
	        for (var /** @type {?} */ i = 0; i < values.length; i++) {
	            value = value + _addInterpolationPart(values[i], bindings[i]);
	        }
	        value = def.text.prefix + value;
	        var /** @type {?} */ renderNode$$1 = asTextData(view, def.index).renderText;
	        view.renderer.setValue(renderNode$$1, value);
	    }
	    return changed;
	}
	/**
	 * @param {?} value
	 * @param {?} binding
	 * @return {?}
	 */
	function _addInterpolationPart(value, binding) {
	    var /** @type {?} */ valueStr = value != null ? value.toString() : '';
	    return valueStr + binding.suffix;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} flags
	 * @param {?} nodes
	 * @param {?=} updateDirectives
	 * @param {?=} updateRenderer
	 * @return {?}
	 */
	function viewDef(flags, nodes, updateDirectives, updateRenderer) {
	    // clone nodes and set auto calculated values
	    var /** @type {?} */ viewBindingCount = 0;
	    var /** @type {?} */ viewDisposableCount = 0;
	    var /** @type {?} */ viewNodeFlags = 0;
	    var /** @type {?} */ viewRootNodeFlags = 0;
	    var /** @type {?} */ viewMatchedQueries = 0;
	    var /** @type {?} */ currentParent = null;
	    var /** @type {?} */ currentElementHasPublicProviders = false;
	    var /** @type {?} */ currentElementHasPrivateProviders = false;
	    var /** @type {?} */ lastRenderRootNode = null;
	    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	        while (currentParent && i > currentParent.index + currentParent.childCount) {
	            var /** @type {?} */ newParent = currentParent.parent;
	            if (newParent) {
	                newParent.childFlags |= currentParent.childFlags;
	                newParent.childMatchedQueries |= currentParent.childMatchedQueries;
	            }
	            currentParent = newParent;
	        }
	        var /** @type {?} */ node = nodes[i];
	        node.index = i;
	        node.parent = currentParent;
	        node.bindingIndex = viewBindingCount;
	        node.outputIndex = viewDisposableCount;
	        // renderParent needs to account for ng-container!
	        var /** @type {?} */ currentRenderParent = void 0;
	        if (currentParent && currentParent.flags & 1 /* TypeElement */ &&
	            !currentParent.element.name) {
	            currentRenderParent = currentParent.renderParent;
	        }
	        else {
	            currentRenderParent = currentParent;
	        }
	        node.renderParent = currentRenderParent;
	        if (node.element) {
	            var /** @type {?} */ elDef = node.element;
	            elDef.publicProviders =
	                currentParent ? currentParent.element.publicProviders : Object.create(null);
	            elDef.allProviders = elDef.publicProviders;
	            // Note: We assume that all providers of an element are before any child element!
	            currentElementHasPublicProviders = false;
	            currentElementHasPrivateProviders = false;
	        }
	        validateNode(currentParent, node, nodes.length);
	        viewNodeFlags |= node.flags;
	        viewMatchedQueries |= node.matchedQueryIds;
	        if (node.element && node.element.template) {
	            viewMatchedQueries |= node.element.template.nodeMatchedQueries;
	        }
	        if (currentParent) {
	            currentParent.childFlags |= node.flags;
	            currentParent.directChildFlags |= node.flags;
	            currentParent.childMatchedQueries |= node.matchedQueryIds;
	            if (node.element && node.element.template) {
	                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
	            }
	        }
	        else {
	            viewRootNodeFlags |= node.flags;
	        }
	        viewBindingCount += node.bindings.length;
	        viewDisposableCount += node.outputs.length;
	        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {
	            lastRenderRootNode = node;
	        }
	        if (node.flags & 10112 /* CatProvider */) {
	            if (!currentElementHasPublicProviders) {
	                currentElementHasPublicProviders = true;
	                // Use prototypical inheritance to not get O(n^2) complexity...
	                currentParent.element.publicProviders =
	                    Object.create(currentParent.element.publicProviders);
	                currentParent.element.allProviders = currentParent.element.publicProviders;
	            }
	            var /** @type {?} */ isPrivateService = (node.flags & 4096 /* PrivateProvider */) !== 0;
	            var /** @type {?} */ isComponent = (node.flags & 16384 /* Component */) !== 0;
	            if (!isPrivateService || isComponent) {
	                currentParent.element.publicProviders[node.provider.tokenKey] = node;
	            }
	            else {
	                if (!currentElementHasPrivateProviders) {
	                    currentElementHasPrivateProviders = true;
	                    // Use protoyypical inheritance to not get O(n^2) complexity...
	                    currentParent.element.allProviders = Object.create(currentParent.element.publicProviders);
	                }
	                currentParent.element.allProviders[node.provider.tokenKey] = node;
	            }
	            if (isComponent) {
	                currentParent.element.componentProvider = node;
	            }
	        }
	        if (node.childCount) {
	            currentParent = node;
	        }
	    }
	    while (currentParent) {
	        var /** @type {?} */ newParent = currentParent.parent;
	        if (newParent) {
	            newParent.childFlags |= currentParent.childFlags;
	            newParent.childMatchedQueries |= currentParent.childMatchedQueries;
	        }
	        currentParent = newParent;
	    }
	    var /** @type {?} */ handleEvent = function (view, nodeIndex, eventName, event) { return nodes[nodeIndex].element.handleEvent(view, eventName, event); };
	    return {
	        // Will be filled later...
	        factory: undefined,
	        nodeFlags: viewNodeFlags,
	        rootNodeFlags: viewRootNodeFlags,
	        nodeMatchedQueries: viewMatchedQueries, flags: flags,
	        nodes: nodes,
	        updateDirectives: updateDirectives || NOOP,
	        updateRenderer: updateRenderer || NOOP,
	        handleEvent: handleEvent || NOOP,
	        bindingCount: viewBindingCount,
	        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode
	    };
	}
	/**
	 * @param {?} parent
	 * @param {?} node
	 * @param {?} nodeCount
	 * @return {?}
	 */
	function validateNode(parent, node, nodeCount) {
	    var /** @type {?} */ template = node.element && node.element.template;
	    if (template) {
	        if (!template.lastRenderRootNode) {
	            throw new Error("Illegal State: Embedded templates without nodes are not allowed!");
	        }
	        if (template.lastRenderRootNode &&
	            template.lastRenderRootNode.flags & 8388608 /* EmbeddedViews */) {
	            throw new Error("Illegal State: Last root node of a template can't have embedded views, at index " + node.index + "!");
	        }
	    }
	    if (node.flags & 10112 /* CatProvider */) {
	        var /** @type {?} */ parentFlags = parent ? parent.flags : null;
	        if ((parentFlags & 1 /* TypeElement */) === 0) {
	            throw new Error("Illegal State: Provider/Directive nodes need to be children of elements or anchors, at index " + node.index + "!");
	        }
	    }
	    if (node.query) {
	        if (node.flags & 33554432 /* TypeContentQuery */ &&
	            (!parent || (parent.flags & 8192 /* TypeDirective */) === 0)) {
	            throw new Error("Illegal State: Content Query nodes need to be children of directives, at index " + node.index + "!");
	        }
	        if (node.flags & 67108864 /* TypeViewQuery */ && parent) {
	            throw new Error("Illegal State: View Query nodes have to be top level nodes, at index " + node.index + "!");
	        }
	    }
	    if (node.childCount) {
	        var /** @type {?} */ parentEnd = parent ? parent.index + parent.childCount : nodeCount - 1;
	        if (node.index <= parentEnd && node.index + node.childCount > parentEnd) {
	            throw new Error("Illegal State: childCount of node leads outside of parent, at index " + node.index + "!");
	        }
	    }
	}
	/**
	 * @param {?} parent
	 * @param {?} anchorDef
	 * @param {?=} context
	 * @return {?}
	 */
	function createEmbeddedView(parent, anchorDef$$1, context) {
	    // embedded views are seen as siblings to the anchor, so we need
	    // to get the parent of the anchor and use it as parentIndex.
	    var /** @type {?} */ view = createView(parent.root, parent.renderer, parent, anchorDef$$1, anchorDef$$1.element.template);
	    initView(view, parent.component, context);
	    createViewNodes(view);
	    return view;
	}
	/**
	 * @param {?} root
	 * @param {?} def
	 * @param {?=} context
	 * @return {?}
	 */
	function createRootView(root, def, context) {
	    var /** @type {?} */ view = createView(root, root.renderer, null, null, def);
	    initView(view, context, context);
	    createViewNodes(view);
	    return view;
	}
	/**
	 * @param {?} root
	 * @param {?} renderer
	 * @param {?} parent
	 * @param {?} parentNodeDef
	 * @param {?} def
	 * @return {?}
	 */
	function createView(root, renderer, parent, parentNodeDef, def) {
	    var /** @type {?} */ nodes = new Array(def.nodes.length);
	    var /** @type {?} */ disposables = def.outputCount ? new Array(def.outputCount) : undefined;
	    var /** @type {?} */ view = {
	        def: def,
	        parent: parent,
	        viewContainerParent: undefined, parentNodeDef: parentNodeDef,
	        context: undefined,
	        component: undefined, nodes: nodes,
	        state: 1 /* FirstCheck */ | 2 /* ChecksEnabled */, root: root, renderer: renderer,
	        oldValues: new Array(def.bindingCount), disposables: disposables
	    };
	    return view;
	}
	/**
	 * @param {?} view
	 * @param {?} component
	 * @param {?} context
	 * @return {?}
	 */
	function initView(view, component, context) {
	    view.component = component;
	    view.context = context;
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function createViewNodes(view) {
	    var /** @type {?} */ renderHost;
	    if (isComponentView(view)) {
	        var /** @type {?} */ hostDef = view.parentNodeDef;
	        renderHost = asElementData(view.parent, hostDef.parent.index).renderElement;
	    }
	    var /** @type {?} */ def = view.def;
	    var /** @type {?} */ nodes = view.nodes;
	    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
	        var /** @type {?} */ nodeDef = def.nodes[i];
	        Services.setCurrentNode(view, i);
	        var /** @type {?} */ nodeData = void 0;
	        switch (nodeDef.flags & 100673535 /* Types */) {
	            case 1 /* TypeElement */:
	                var /** @type {?} */ el = (createElement(view, renderHost, nodeDef));
	                var /** @type {?} */ componentView = void 0;
	                if (nodeDef.flags & 16777216 /* ComponentView */) {
	                    var /** @type {?} */ compViewDef = resolveViewDefinition(nodeDef.element.componentView);
	                    var /** @type {?} */ rendererType = nodeDef.element.componentRendererType;
	                    var /** @type {?} */ compRenderer = void 0;
	                    if (!rendererType) {
	                        compRenderer = view.root.renderer;
	                    }
	                    else {
	                        compRenderer = view.root.rendererFactory.createRenderer(el, rendererType);
	                    }
	                    componentView = createView(view.root, compRenderer, view, nodeDef.element.componentProvider, compViewDef);
	                }
	                listenToElementOutputs(view, componentView, nodeDef, el);
	                nodeData = ({
	                    renderElement: el,
	                    componentView: componentView,
	                    viewContainer: undefined,
	                    template: nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined
	                });
	                if (nodeDef.flags & 8388608 /* EmbeddedViews */) {
	                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);
	                }
	                break;
	            case 2 /* TypeText */:
	                nodeData = (createText(view, renderHost, nodeDef));
	                break;
	            case 256 /* TypeClassProvider */:
	            case 512 /* TypeFactoryProvider */:
	            case 1024 /* TypeUseExistingProvider */:
	            case 128 /* TypeValueProvider */: {
	                var /** @type {?} */ instance = createProviderInstance(view, nodeDef);
	                nodeData = ({ instance: instance });
	                break;
	            }
	            case 8 /* TypePipe */: {
	                var /** @type {?} */ instance = createPipeInstance(view, nodeDef);
	                nodeData = ({ instance: instance });
	                break;
	            }
	            case 8192 /* TypeDirective */: {
	                var /** @type {?} */ instance = createDirectiveInstance(view, nodeDef);
	                nodeData = ({ instance: instance });
	                if (nodeDef.flags & 16384 /* Component */) {
	                    var /** @type {?} */ compView = asElementData(view, nodeDef.parent.index).componentView;
	                    initView(compView, instance, instance);
	                }
	                break;
	            }
	            case 16 /* TypePureArray */:
	            case 32 /* TypePureObject */:
	            case 64 /* TypePurePipe */:
	                nodeData = (createPureExpression(view, nodeDef));
	                break;
	            case 33554432 /* TypeContentQuery */:
	            case 67108864 /* TypeViewQuery */:
	                nodeData = (createQuery());
	                break;
	            case 4 /* TypeNgContent */:
	                appendNgContent(view, renderHost, nodeDef);
	                // no runtime data needed for NgContent...
	                nodeData = undefined;
	                break;
	        }
	        nodes[i] = nodeData;
	    }
	    // Create the ViewData.nodes of component views after we created everything else,
	    // so that e.g. ng-content works
	    execComponentViewsAction(view, ViewAction.CreateViewNodes);
	    // fill static content and view queries
	    execQueriesAction(view, 33554432 /* TypeContentQuery */ | 67108864 /* TypeViewQuery */, 134217728 /* StaticQuery */, 0 /* CheckAndUpdate */);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function checkNoChangesView(view) {
	    Services.updateDirectives(view, 1 /* CheckNoChanges */);
	    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
	    Services.updateRenderer(view, 1 /* CheckNoChanges */);
	    execComponentViewsAction(view, ViewAction.CheckNoChanges);
	    // Note: We don't check queries for changes as we didn't do this in v2.x.
	    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function checkAndUpdateView(view) {
	    Services.updateDirectives(view, 0 /* CheckAndUpdate */);
	    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
	    execQueriesAction(view, 33554432 /* TypeContentQuery */, 268435456 /* DynamicQuery */, 0 /* CheckAndUpdate */);
	    callLifecycleHooksChildrenFirst(view, 1048576 /* AfterContentChecked */ |
	        (view.state & 1 /* FirstCheck */ ? 524288 /* AfterContentInit */ : 0));
	    Services.updateRenderer(view, 0 /* CheckAndUpdate */);
	    execComponentViewsAction(view, ViewAction.CheckAndUpdate);
	    execQueriesAction(view, 67108864 /* TypeViewQuery */, 268435456 /* DynamicQuery */, 0 /* CheckAndUpdate */);
	    callLifecycleHooksChildrenFirst(view, 4194304 /* AfterViewChecked */ |
	        (view.state & 1 /* FirstCheck */ ? 2097152 /* AfterViewInit */ : 0));
	    if (view.def.flags & 2 /* OnPush */) {
	        view.state &= ~2 /* ChecksEnabled */;
	    }
	    view.state &= ~1 /* FirstCheck */;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} argStyle
	 * @param {?=} v0
	 * @param {?=} v1
	 * @param {?=} v2
	 * @param {?=} v3
	 * @param {?=} v4
	 * @param {?=} v5
	 * @param {?=} v6
	 * @param {?=} v7
	 * @param {?=} v8
	 * @param {?=} v9
	 * @return {?}
	 */
	function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    if (argStyle === 0 /* Inline */) {
	        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    }
	    else {
	        return checkAndUpdateNodeDynamic(view, nodeDef, v0);
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?=} v0
	 * @param {?=} v1
	 * @param {?=} v2
	 * @param {?=} v3
	 * @param {?=} v4
	 * @param {?=} v5
	 * @param {?=} v6
	 * @param {?=} v7
	 * @param {?=} v8
	 * @param {?=} v9
	 * @return {?}
	 */
	function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ changed = false;
	    switch (nodeDef.flags & 100673535 /* Types */) {
	        case 1 /* TypeElement */:
	            changed = checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	            break;
	        case 2 /* TypeText */:
	            changed = checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	            break;
	        case 8192 /* TypeDirective */:
	            changed =
	                checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	            break;
	        case 16 /* TypePureArray */:
	        case 32 /* TypePureObject */:
	        case 64 /* TypePurePipe */:
	            changed =
	                checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	            break;
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} values
	 * @return {?}
	 */
	function checkAndUpdateNodeDynamic(view, nodeDef, values) {
	    var /** @type {?} */ changed = false;
	    switch (nodeDef.flags & 100673535 /* Types */) {
	        case 1 /* TypeElement */:
	            changed = checkAndUpdateElementDynamic(view, nodeDef, values);
	            break;
	        case 2 /* TypeText */:
	            changed = checkAndUpdateTextDynamic(view, nodeDef, values);
	            break;
	        case 8192 /* TypeDirective */:
	            changed = checkAndUpdateDirectiveDynamic(view, nodeDef, values);
	            break;
	        case 16 /* TypePureArray */:
	        case 32 /* TypePureObject */:
	        case 64 /* TypePurePipe */:
	            changed = checkAndUpdatePureExpressionDynamic(view, nodeDef, values);
	            break;
	    }
	    if (changed) {
	        // Update oldValues after all bindings have been updated,
	        // as a setter for a property might update other properties.
	        var /** @type {?} */ bindLen = nodeDef.bindings.length;
	        var /** @type {?} */ bindingStart = nodeDef.bindingIndex;
	        var /** @type {?} */ oldValues = view.oldValues;
	        for (var /** @type {?} */ i = 0; i < bindLen; i++) {
	            oldValues[bindingStart + i] = values[i];
	        }
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} argStyle
	 * @param {?=} v0
	 * @param {?=} v1
	 * @param {?=} v2
	 * @param {?=} v3
	 * @param {?=} v4
	 * @param {?=} v5
	 * @param {?=} v6
	 * @param {?=} v7
	 * @param {?=} v8
	 * @param {?=} v9
	 * @return {?}
	 */
	function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    if (argStyle === 0 /* Inline */) {
	        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    }
	    else {
	        checkNoChangesNodeDynamic(view, nodeDef, v0);
	    }
	    // Returning false is ok here as we would have thrown in case of a change.
	    return false;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} v0
	 * @param {?} v1
	 * @param {?} v2
	 * @param {?} v3
	 * @param {?} v4
	 * @param {?} v5
	 * @param {?} v6
	 * @param {?} v7
	 * @param {?} v8
	 * @param {?} v9
	 * @return {?}
	 */
	function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ bindLen = nodeDef.bindings.length;
	    if (bindLen > 0)
	        checkBindingNoChanges(view, nodeDef, 0, v0);
	    if (bindLen > 1)
	        checkBindingNoChanges(view, nodeDef, 1, v1);
	    if (bindLen > 2)
	        checkBindingNoChanges(view, nodeDef, 2, v2);
	    if (bindLen > 3)
	        checkBindingNoChanges(view, nodeDef, 3, v3);
	    if (bindLen > 4)
	        checkBindingNoChanges(view, nodeDef, 4, v4);
	    if (bindLen > 5)
	        checkBindingNoChanges(view, nodeDef, 5, v5);
	    if (bindLen > 6)
	        checkBindingNoChanges(view, nodeDef, 6, v6);
	    if (bindLen > 7)
	        checkBindingNoChanges(view, nodeDef, 7, v7);
	    if (bindLen > 8)
	        checkBindingNoChanges(view, nodeDef, 8, v8);
	    if (bindLen > 9)
	        checkBindingNoChanges(view, nodeDef, 9, v9);
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} values
	 * @return {?}
	 */
	function checkNoChangesNodeDynamic(view, nodeDef, values) {
	    for (var /** @type {?} */ i = 0; i < values.length; i++) {
	        checkBindingNoChanges(view, nodeDef, i, values[i]);
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @return {?}
	 */
	function checkNoChangesQuery(view, nodeDef) {
	    var /** @type {?} */ queryList = asQueryList(view, nodeDef.index);
	    if (queryList.dirty) {
	        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.index), "Query " + nodeDef.query.id + " not dirty", "Query " + nodeDef.query.id + " dirty", (view.state & 1 /* FirstCheck */) !== 0);
	    }
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function destroyView(view) {
	    if (view.state & 8 /* Destroyed */) {
	        return;
	    }
	    execEmbeddedViewsAction(view, ViewAction.Destroy);
	    execComponentViewsAction(view, ViewAction.Destroy);
	    callLifecycleHooksChildrenFirst(view, 65536 /* OnDestroy */);
	    if (view.disposables) {
	        for (var /** @type {?} */ i = 0; i < view.disposables.length; i++) {
	            view.disposables[i]();
	        }
	    }
	    if (view.renderer.destroyNode) {
	        destroyViewNodes(view);
	    }
	    if (isComponentView(view)) {
	        view.renderer.destroy();
	    }
	    view.state |= 8 /* Destroyed */;
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function destroyViewNodes(view) {
	    var /** @type {?} */ len = view.def.nodes.length;
	    for (var /** @type {?} */ i = 0; i < len; i++) {
	        var /** @type {?} */ def = view.def.nodes[i];
	        if (def.flags & 1 /* TypeElement */) {
	            view.renderer.destroyNode(asElementData(view, i).renderElement);
	        }
	        else if (def.flags & 2 /* TypeText */) {
	            view.renderer.destroyNode(asTextData(view, i).renderText);
	        }
	    }
	}
	var ViewAction = {};
	ViewAction.CreateViewNodes = 0;
	ViewAction.CheckNoChanges = 1;
	ViewAction.CheckAndUpdate = 2;
	ViewAction.Destroy = 3;
	ViewAction[ViewAction.CreateViewNodes] = "CreateViewNodes";
	ViewAction[ViewAction.CheckNoChanges] = "CheckNoChanges";
	ViewAction[ViewAction.CheckAndUpdate] = "CheckAndUpdate";
	ViewAction[ViewAction.Destroy] = "Destroy";
	/**
	 * @param {?} view
	 * @param {?} action
	 * @return {?}
	 */
	function execComponentViewsAction(view, action) {
	    var /** @type {?} */ def = view.def;
	    if (!(def.nodeFlags & 16777216 /* ComponentView */)) {
	        return;
	    }
	    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
	        var /** @type {?} */ nodeDef = def.nodes[i];
	        if (nodeDef.flags & 16777216 /* ComponentView */) {
	            // a leaf
	            callViewAction(asElementData(view, i).componentView, action);
	        }
	        else if ((nodeDef.childFlags & 16777216 /* ComponentView */) === 0) {
	            // a parent with leafs
	            // no child is a component,
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} action
	 * @return {?}
	 */
	function execEmbeddedViewsAction(view, action) {
	    var /** @type {?} */ def = view.def;
	    if (!(def.nodeFlags & 8388608 /* EmbeddedViews */)) {
	        return;
	    }
	    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
	        var /** @type {?} */ nodeDef = def.nodes[i];
	        if (nodeDef.flags & 8388608 /* EmbeddedViews */) {
	            // a leaf
	            var /** @type {?} */ embeddedViews = asElementData(view, i).viewContainer._embeddedViews;
	            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
	                callViewAction(embeddedViews[k], action);
	            }
	        }
	        else if ((nodeDef.childFlags & 8388608 /* EmbeddedViews */) === 0) {
	            // a parent with leafs
	            // no child is a component,
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} action
	 * @return {?}
	 */
	function callViewAction(view, action) {
	    var /** @type {?} */ viewState = view.state;
	    switch (action) {
	        case ViewAction.CheckNoChanges:
	            if ((viewState & 2 /* ChecksEnabled */) &&
	                (viewState & (4 /* Errored */ | 8 /* Destroyed */)) === 0) {
	                checkNoChangesView(view);
	            }
	            break;
	        case ViewAction.CheckAndUpdate:
	            if ((viewState & 2 /* ChecksEnabled */) &&
	                (viewState & (4 /* Errored */ | 8 /* Destroyed */)) === 0) {
	                checkAndUpdateView(view);
	            }
	            break;
	        case ViewAction.Destroy:
	            destroyView(view);
	            break;
	        case ViewAction.CreateViewNodes:
	            createViewNodes(view);
	            break;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} queryFlags
	 * @param {?} staticDynamicQueryFlag
	 * @param {?} checkType
	 * @return {?}
	 */
	function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
	    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
	        return;
	    }
	    var /** @type {?} */ nodeCount = view.def.nodes.length;
	    for (var /** @type {?} */ i = 0; i < nodeCount; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {
	            Services.setCurrentNode(view, nodeDef.index);
	            switch (checkType) {
	                case 0 /* CheckAndUpdate */:
	                    checkAndUpdateQuery(view, nodeDef);
	                    break;
	                case 1 /* CheckNoChanges */:
	                    checkNoChangesQuery(view, nodeDef);
	                    break;
	            }
	        }
	        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
	            // no child has a matching query
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var initialized = false;
	/**
	 * @return {?}
	 */
	function initServicesIfNeeded() {
	    if (initialized) {
	        return;
	    }
	    initialized = true;
	    var /** @type {?} */ services = isDevMode() ? createDebugServices() : createProdServices();
	    Services.setCurrentNode = services.setCurrentNode;
	    Services.createRootView = services.createRootView;
	    Services.createEmbeddedView = services.createEmbeddedView;
	    Services.checkAndUpdateView = services.checkAndUpdateView;
	    Services.checkNoChangesView = services.checkNoChangesView;
	    Services.destroyView = services.destroyView;
	    Services.resolveDep = resolveDep;
	    Services.createDebugContext = services.createDebugContext;
	    Services.handleEvent = services.handleEvent;
	    Services.updateDirectives = services.updateDirectives;
	    Services.updateRenderer = services.updateRenderer;
	    Services.dirtyParentQueries = dirtyParentQueries;
	}
	/**
	 * @return {?}
	 */
	function createProdServices() {
	    return {
	        setCurrentNode: function () { },
	        createRootView: createProdRootView,
	        createEmbeddedView: createEmbeddedView,
	        checkAndUpdateView: checkAndUpdateView,
	        checkNoChangesView: checkNoChangesView,
	        destroyView: destroyView,
	        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
	        handleEvent: function (view, nodeIndex, eventName, event) { return view.def.handleEvent(view, nodeIndex, eventName, event); },
	        updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
	            prodCheckNoChangesNode, view); },
	        updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
	            prodCheckNoChangesNode, view); },
	    };
	}
	/**
	 * @return {?}
	 */
	function createDebugServices() {
	    return {
	        setCurrentNode: debugSetCurrentNode,
	        createRootView: debugCreateRootView,
	        createEmbeddedView: debugCreateEmbeddedView,
	        checkAndUpdateView: debugCheckAndUpdateView,
	        checkNoChangesView: debugCheckNoChangesView,
	        destroyView: debugDestroyView,
	        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
	        handleEvent: debugHandleEvent,
	        updateDirectives: debugUpdateDirectives,
	        updateRenderer: debugUpdateRenderer
	    };
	}
	/**
	 * @param {?} elInjector
	 * @param {?} projectableNodes
	 * @param {?} rootSelectorOrNode
	 * @param {?} def
	 * @param {?} ngModule
	 * @param {?=} context
	 * @return {?}
	 */
	function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
	    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);
	    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
	}
	/**
	 * @param {?} elInjector
	 * @param {?} projectableNodes
	 * @param {?} rootSelectorOrNode
	 * @param {?} def
	 * @param {?} ngModule
	 * @param {?=} context
	 * @return {?}
	 */
	function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
	    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);
	    var /** @type {?} */ root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);
	    return callWithDebugContext(DebugAction.create, createRootView, null, [root, def, context]);
	}
	/**
	 * @param {?} elInjector
	 * @param {?} ngModule
	 * @param {?} rendererFactory
	 * @param {?} projectableNodes
	 * @param {?} rootSelectorOrNode
	 * @return {?}
	 */
	function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
	    var /** @type {?} */ sanitizer = ngModule.injector.get(Sanitizer);
	    var /** @type {?} */ renderer = rendererFactory.createRenderer(null, null);
	    return {
	        ngModule: ngModule,
	        injector: elInjector, projectableNodes: projectableNodes,
	        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer
	    };
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @param {?} argStyle
	 * @param {?=} v0
	 * @param {?=} v1
	 * @param {?=} v2
	 * @param {?=} v3
	 * @param {?=} v4
	 * @param {?=} v5
	 * @param {?=} v6
	 * @param {?=} v7
	 * @param {?=} v8
	 * @param {?=} v9
	 * @return {?}
	 */
	function prodCheckAndUpdateNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
	    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    return (nodeDef.flags & 112 /* CatPureExpression */) ?
	        asPureExpressionData(view, nodeIndex).value :
	        undefined;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @param {?} argStyle
	 * @param {?=} v0
	 * @param {?=} v1
	 * @param {?=} v2
	 * @param {?=} v3
	 * @param {?=} v4
	 * @param {?=} v5
	 * @param {?=} v6
	 * @param {?=} v7
	 * @param {?=} v8
	 * @param {?=} v9
	 * @return {?}
	 */
	function prodCheckNoChangesNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
	    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    return (nodeDef.flags & 112 /* CatPureExpression */) ?
	        asPureExpressionData(view, nodeIndex).value :
	        undefined;
	}
	/**
	 * @param {?} parent
	 * @param {?} anchorDef
	 * @param {?=} context
	 * @return {?}
	 */
	function debugCreateEmbeddedView(parent, anchorDef, context) {
	    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parent, anchorDef, context]);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function debugCheckAndUpdateView(view) {
	    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function debugCheckNoChangesView(view) {
	    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function debugDestroyView(view) {
	    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
	}
	var DebugAction = {};
	DebugAction.create = 0;
	DebugAction.detectChanges = 1;
	DebugAction.checkNoChanges = 2;
	DebugAction.destroy = 3;
	DebugAction.handleEvent = 4;
	DebugAction[DebugAction.create] = "create";
	DebugAction[DebugAction.detectChanges] = "detectChanges";
	DebugAction[DebugAction.checkNoChanges] = "checkNoChanges";
	DebugAction[DebugAction.destroy] = "destroy";
	DebugAction[DebugAction.handleEvent] = "handleEvent";
	var _currentAction;
	var _currentView;
	var _currentNodeIndex;
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @return {?}
	 */
	function debugSetCurrentNode(view, nodeIndex) {
	    _currentView = view;
	    _currentNodeIndex = nodeIndex;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @param {?} eventName
	 * @param {?} event
	 * @return {?}
	 */
	function debugHandleEvent(view, nodeIndex, eventName, event) {
	    debugSetCurrentNode(view, nodeIndex);
	    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
	}
	/**
	 * @param {?} view
	 * @param {?} checkType
	 * @return {?}
	 */
	function debugUpdateDirectives(view, checkType) {
	    if (view.state & 8 /* Destroyed */) {
	        throw viewDestroyedError(DebugAction[_currentAction]);
	    }
	    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
	    return view.def.updateDirectives(debugCheckDirectivesFn, view);
	    /**
	     * @param {?} view
	     * @param {?} nodeIndex
	     * @param {?} argStyle
	     * @param {...?} values
	     * @return {?}
	     */
	    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
	        var values = [];
	        for (var _i = 3; _i < arguments.length; _i++) {
	            values[_i - 3] = arguments[_i];
	        }
	        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
	        if (checkType === 0 /* CheckAndUpdate */) {
	            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
	        }
	        else {
	            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
	        }
	        if (nodeDef.flags & 8192 /* TypeDirective */) {
	            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
	        }
	        return (nodeDef.flags & 112 /* CatPureExpression */) ?
	            asPureExpressionData(view, nodeDef.index).value :
	            undefined;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} checkType
	 * @return {?}
	 */
	function debugUpdateRenderer(view, checkType) {
	    if (view.state & 8 /* Destroyed */) {
	        throw viewDestroyedError(DebugAction[_currentAction]);
	    }
	    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
	    return view.def.updateRenderer(debugCheckRenderNodeFn, view);
	    /**
	     * @param {?} view
	     * @param {?} nodeIndex
	     * @param {?} argStyle
	     * @param {...?} values
	     * @return {?}
	     */
	    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
	        var values = [];
	        for (var _i = 3; _i < arguments.length; _i++) {
	            values[_i - 3] = arguments[_i];
	        }
	        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
	        if (checkType === 0 /* CheckAndUpdate */) {
	            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
	        }
	        else {
	            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
	        }
	        if (nodeDef.flags & 3 /* CatRenderNode */) {
	            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
	        }
	        return (nodeDef.flags & 112 /* CatPureExpression */) ?
	            asPureExpressionData(view, nodeDef.index).value :
	            undefined;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} argStyle
	 * @param {?} givenValues
	 * @return {?}
	 */
	function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
	    var /** @type {?} */ changed = ((checkAndUpdateNode)).apply(void 0, [view, nodeDef, argStyle].concat(givenValues));
	    if (changed) {
	        var /** @type {?} */ values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;
	        if (nodeDef.flags & 8192 /* TypeDirective */) {
	            var /** @type {?} */ bindingValues = {};
	            for (var /** @type {?} */ i = 0; i < nodeDef.bindings.length; i++) {
	                var /** @type {?} */ binding = nodeDef.bindings[i];
	                var /** @type {?} */ value = values[i];
	                if (binding.flags & 8 /* TypeProperty */) {
	                    bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] =
	                        normalizeDebugBindingValue(value);
	                }
	            }
	            var /** @type {?} */ elDef = nodeDef.parent;
	            var /** @type {?} */ el = asElementData(view, elDef.index).renderElement;
	            if (!elDef.element.name) {
	                // a comment.
	                view.renderer.setValue(el, "bindings=" + JSON.stringify(bindingValues, null, 2));
	            }
	            else {
	                // a regular element.
	                for (var /** @type {?} */ attr in bindingValues) {
	                    var /** @type {?} */ value = bindingValues[attr];
	                    if (value != null) {
	                        view.renderer.setAttribute(el, attr, value);
	                    }
	                    else {
	                        view.renderer.removeAttribute(el, attr);
	                    }
	                }
	            }
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} argStyle
	 * @param {?} values
	 * @return {?}
	 */
	function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
	    ((checkNoChangesNode)).apply(void 0, [view, nodeDef, argStyle].concat(values));
	}
	/**
	 * @param {?} name
	 * @return {?}
	 */
	function normalizeDebugBindingName(name) {
	    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
	    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
	    return "ng-reflect-" + name;
	}
	var CAMEL_CASE_REGEXP = /([A-Z])/g;
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function camelCaseToDashCase(input) {
	    return input.replace(CAMEL_CASE_REGEXP, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i] = arguments[_i];
	        }
	        return '-' + m[1].toLowerCase();
	    });
	}
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function normalizeDebugBindingValue(value) {
	    try {
	        // Limit the size of the value as otherwise the DOM just gets polluted.
	        return value ? value.toString().slice(0, 30) : value;
	    }
	    catch (e) {
	        return '[ERROR] Exception while trying to serialize the value';
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @return {?}
	 */
	function nextDirectiveWithBinding(view, nodeIndex) {
	    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        if (nodeDef.flags & 8192 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {
	            return i;
	        }
	    }
	    return undefined;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @return {?}
	 */
	function nextRenderNodeWithBinding(view, nodeIndex) {
	    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {
	            return i;
	        }
	    }
	    return undefined;
	}
	var DebugContext_ = (function () {
	    /**
	     * @param {?} view
	     * @param {?} nodeIndex
	     */
	    function DebugContext_(view, nodeIndex) {
	        this.view = view;
	        this.nodeIndex = nodeIndex;
	        if (nodeIndex == null) {
	            this.nodeIndex = nodeIndex = 0;
	        }
	        this.nodeDef = view.def.nodes[nodeIndex];
	        var elDef = this.nodeDef;
	        var elView = view;
	        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {
	            elDef = elDef.parent;
	        }
	        if (!elDef) {
	            while (!elDef && elView) {
	                elDef = viewParentEl(elView);
	                elView = elView.parent;
	            }
	        }
	        this.elDef = elDef;
	        this.elView = elView;
	    }
	    Object.defineProperty(DebugContext_.prototype, "elOrCompView", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            // Has to be done lazily as we use the DebugContext also during creation of elements...
	            return asElementData(this.elView, this.elDef.index).componentView || this.view;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return createInjector(this.elView, this.elDef); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "component", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.elOrCompView.component; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "context", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.elOrCompView.context; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "providerTokens", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ tokens = [];
	            if (this.elDef) {
	                for (var /** @type {?} */ i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
	                    var /** @type {?} */ childDef = this.elView.def.nodes[i];
	                    if (childDef.flags & 10112 /* CatProvider */) {
	                        tokens.push(childDef.provider.token);
	                    }
	                    i += childDef.childCount;
	                }
	            }
	            return tokens;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "references", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ references = {};
	            if (this.elDef) {
	                collectReferences(this.elView, this.elDef, references);
	                for (var /** @type {?} */ i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
	                    var /** @type {?} */ childDef = this.elView.def.nodes[i];
	                    if (childDef.flags & 10112 /* CatProvider */) {
	                        collectReferences(this.elView, childDef, references);
	                    }
	                    i += childDef.childCount;
	                }
	            }
	            return references;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "componentRenderElement", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ elData = findHostElement(this.elOrCompView);
	            return elData ? elData.renderElement : undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "renderNode", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :
	                renderNode(this.elView, this.elDef);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} console
	     * @param {...?} values
	     * @return {?}
	     */
	    DebugContext_.prototype.logError = function (console) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var /** @type {?} */ logViewDef;
	        var /** @type {?} */ logNodeIndex;
	        if (this.nodeDef.flags & 2 /* TypeText */) {
	            logViewDef = this.view.def;
	            logNodeIndex = this.nodeDef.index;
	        }
	        else {
	            logViewDef = this.elView.def;
	            logNodeIndex = this.elDef.index;
	        }
	        // Note: we only generate a log function for text and element nodes
	        // to make the generated code as small as possible.
	        var /** @type {?} */ renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);
	        var /** @type {?} */ currRenderNodeIndex = -1;
	        var /** @type {?} */ nodeLogger = function () {
	            currRenderNodeIndex++;
	            if (currRenderNodeIndex === renderNodeIndex) {
	                return (_a = console.error).bind.apply(_a, [console].concat(values));
	            }
	            else {
	                return NOOP;
	            }
	            var _a;
	        };
	        logViewDef.factory(nodeLogger);
	        if (currRenderNodeIndex < renderNodeIndex) {
	            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');
	            console.error.apply(console, values);
	        }
	    };
	    return DebugContext_;
	}());
	/**
	 * @param {?} viewDef
	 * @param {?} nodeIndex
	 * @return {?}
	 */
	function getRenderNodeIndex(viewDef$$1, nodeIndex) {
	    var /** @type {?} */ renderNodeIndex = -1;
	    for (var /** @type {?} */ i = 0; i <= nodeIndex; i++) {
	        var /** @type {?} */ nodeDef = viewDef$$1.nodes[i];
	        if (nodeDef.flags & 3 /* CatRenderNode */) {
	            renderNodeIndex++;
	        }
	    }
	    return renderNodeIndex;
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function findHostElement(view) {
	    while (view && !isComponentView(view)) {
	        view = view.parent;
	    }
	    if (view.parent) {
	        return asElementData(view.parent, viewParentEl(view).index);
	    }
	    return undefined;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} references
	 * @return {?}
	 */
	function collectReferences(view, nodeDef, references) {
	    for (var /** @type {?} */ refName in nodeDef.references) {
	        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
	    }
	}
	/**
	 * @param {?} action
	 * @param {?} fn
	 * @param {?} self
	 * @param {?} args
	 * @return {?}
	 */
	function callWithDebugContext(action, fn, self, args) {
	    var /** @type {?} */ oldAction = _currentAction;
	    var /** @type {?} */ oldView = _currentView;
	    var /** @type {?} */ oldNodeIndex = _currentNodeIndex;
	    try {
	        _currentAction = action;
	        var /** @type {?} */ result = fn.apply(self, args);
	        _currentView = oldView;
	        _currentNodeIndex = oldNodeIndex;
	        _currentAction = oldAction;
	        return result;
	    }
	    catch (e) {
	        if (isViewDebugError(e) || !_currentView) {
	            throw e;
	        }
	        _currentView.state |= 4 /* Errored */;
	        throw viewWrappedDebugError(e, getCurrentDebugContext());
	    }
	}
	/**
	 * @return {?}
	 */
	function getCurrentDebugContext() {
	    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
	}
	var DebugRendererFactory2 = (function () {
	    /**
	     * @param {?} delegate
	     */
	    function DebugRendererFactory2(delegate) {
	        this.delegate = delegate;
	    }
	    /**
	     * @param {?} element
	     * @param {?} renderData
	     * @return {?}
	     */
	    DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {
	        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
	    };
	    return DebugRendererFactory2;
	}());
	var DebugRenderer2 = (function () {
	    /**
	     * @param {?} delegate
	     */
	    function DebugRenderer2(delegate) {
	        this.delegate = delegate;
	    }
	    Object.defineProperty(DebugRenderer2.prototype, "data", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.delegate.data; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    DebugRenderer2.prototype.destroyNode = function (node) {
	        removeDebugNodeFromIndex(getDebugNode(node));
	        if (this.delegate.destroyNode) {
	            this.delegate.destroyNode(node);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    DebugRenderer2.prototype.destroy = function () { this.delegate.destroy(); };
	    /**
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DebugRenderer2.prototype.createElement = function (name, namespace) {
	        var /** @type {?} */ el = this.delegate.createElement(name, namespace);
	        var /** @type {?} */ debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            var /** @type {?} */ debugEl = new DebugElement(el, null, debugCtx);
	            debugEl.name = name;
	            indexDebugNode(debugEl);
	        }
	        return el;
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DebugRenderer2.prototype.createComment = function (value) {
	        var /** @type {?} */ comment = this.delegate.createComment(value);
	        var /** @type {?} */ debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            indexDebugNode(new DebugNode(comment, null, debugCtx));
	        }
	        return comment;
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DebugRenderer2.prototype.createText = function (value) {
	        var /** @type {?} */ text = this.delegate.createText(value);
	        var /** @type {?} */ debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            indexDebugNode(new DebugNode(text, null, debugCtx));
	        }
	        return text;
	    };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @return {?}
	     */
	    DebugRenderer2.prototype.appendChild = function (parent, newChild) {
	        var /** @type {?} */ debugEl = getDebugNode(parent);
	        var /** @type {?} */ debugChildEl = getDebugNode(newChild);
	        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
	            debugEl.addChild(debugChildEl);
	        }
	        this.delegate.appendChild(parent, newChild);
	    };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @param {?} refChild
	     * @return {?}
	     */
	    DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
	        var /** @type {?} */ debugEl = getDebugNode(parent);
	        var /** @type {?} */ debugChildEl = getDebugNode(newChild);
	        var /** @type {?} */ debugRefEl = getDebugNode(refChild);
	        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
	            debugEl.insertBefore(debugRefEl, debugChildEl);
	        }
	        this.delegate.insertBefore(parent, newChild, refChild);
	    };
	    /**
	     * @param {?} parent
	     * @param {?} oldChild
	     * @return {?}
	     */
	    DebugRenderer2.prototype.removeChild = function (parent, oldChild) {
	        var /** @type {?} */ debugEl = getDebugNode(parent);
	        var /** @type {?} */ debugChildEl = getDebugNode(oldChild);
	        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
	            debugEl.removeChild(debugChildEl);
	        }
	        this.delegate.removeChild(parent, oldChild);
	    };
	    /**
	     * @param {?} selectorOrNode
	     * @return {?}
	     */
	    DebugRenderer2.prototype.selectRootElement = function (selectorOrNode) {
	        var /** @type {?} */ el = this.delegate.selectRootElement(selectorOrNode);
	        var /** @type {?} */ debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            indexDebugNode(new DebugElement(el, null, debugCtx));
	        }
	        return el;
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;
	            debugEl.attributes[fullName] = value;
	        }
	        this.delegate.setAttribute(el, name, value, namespace);
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;
	            debugEl.attributes[fullName] = null;
	        }
	        this.delegate.removeAttribute(el, name, namespace);
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    DebugRenderer2.prototype.addClass = function (el, name) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.classes[name] = true;
	        }
	        this.delegate.addClass(el, name);
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    DebugRenderer2.prototype.removeClass = function (el, name) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.classes[name] = false;
	        }
	        this.delegate.removeClass(el, name);
	    };
	    /**
	     * @param {?} el
	     * @param {?} style
	     * @param {?} value
	     * @param {?} flags
	     * @return {?}
	     */
	    DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.styles[style] = value;
	        }
	        this.delegate.setStyle(el, style, value, flags);
	    };
	    /**
	     * @param {?} el
	     * @param {?} style
	     * @param {?} flags
	     * @return {?}
	     */
	    DebugRenderer2.prototype.removeStyle = function (el, style, flags) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.styles[style] = null;
	        }
	        this.delegate.removeStyle(el, style, flags);
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DebugRenderer2.prototype.setProperty = function (el, name, value) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.properties[name] = value;
	        }
	        this.delegate.setProperty(el, name, value);
	    };
	    /**
	     * @param {?} target
	     * @param {?} eventName
	     * @param {?} callback
	     * @return {?}
	     */
	    DebugRenderer2.prototype.listen = function (target, eventName, callback) {
	        if (typeof target !== 'string') {
	            var /** @type {?} */ debugEl = getDebugNode(target);
	            if (debugEl) {
	                debugEl.listeners.push(new EventListener(eventName, callback));
	            }
	        }
	        return this.delegate.listen(target, eventName, callback);
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    DebugRenderer2.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    DebugRenderer2.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };
	    /**
	     * @param {?} node
	     * @param {?} value
	     * @return {?}
	     */
	    DebugRenderer2.prototype.setValue = function (node, value) { return this.delegate.setValue(node, value); };
	    return DebugRenderer2;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @return {?}
	 */
	function _iterableDiffersFactory() {
	    return defaultIterableDiffers;
	}
	/**
	 * @return {?}
	 */
	function _keyValueDiffersFactory() {
	    return defaultKeyValueDiffers;
	}
	/**
	 * @param {?=} locale
	 * @return {?}
	 */
	function _localeFactory(locale) {
	    return locale || 'en-US';
	}
	/**
	 * @return {?}
	 */
	function _initViewEngine() {
	    initServicesIfNeeded();
	}
	/**
	 * This module includes the providers of \@angular/core that are needed
	 * to bootstrap components via `ApplicationRef`.
	 *
	 * \@experimental
	 */
	var ApplicationModule = (function () {
	    /**
	     * @param {?} appRef
	     */
	    function ApplicationModule(appRef) {
	    }
	    return ApplicationModule;
	}());
	ApplicationModule.decorators = [
	    { type: NgModule, args: [{
	                providers: [
	                    ApplicationRef_,
	                    { provide: ApplicationRef, useExisting: ApplicationRef_ },
	                    ApplicationInitStatus,
	                    Compiler,
	                    APP_ID_RANDOM_PROVIDER,
	                    { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
	                    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
	                    {
	                        provide: LOCALE_ID,
	                        useFactory: _localeFactory,
	                        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]
	                    },
	                    { provide: APP_INITIALIZER, useValue: _initViewEngine, multi: true },
	                ]
	            },] },
	];
	/**
	 * @nocollapse
	 */
	ApplicationModule.ctorParameters = function () { return [
	    { type: ApplicationRef, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var LifecycleHooks = {};
	LifecycleHooks.OnInit = 0;
	LifecycleHooks.OnDestroy = 1;
	LifecycleHooks.DoCheck = 2;
	LifecycleHooks.OnChanges = 3;
	LifecycleHooks.AfterContentInit = 4;
	LifecycleHooks.AfterContentChecked = 5;
	LifecycleHooks.AfterViewInit = 6;
	LifecycleHooks.AfterViewChecked = 7;
	LifecycleHooks[LifecycleHooks.OnInit] = "OnInit";
	LifecycleHooks[LifecycleHooks.OnDestroy] = "OnDestroy";
	LifecycleHooks[LifecycleHooks.DoCheck] = "DoCheck";
	LifecycleHooks[LifecycleHooks.OnChanges] = "OnChanges";
	LifecycleHooks[LifecycleHooks.AfterContentInit] = "AfterContentInit";
	LifecycleHooks[LifecycleHooks.AfterContentChecked] = "AfterContentChecked";
	LifecycleHooks[LifecycleHooks.AfterViewInit] = "AfterViewInit";
	LifecycleHooks[LifecycleHooks.AfterViewChecked] = "AfterViewChecked";
	var LIFECYCLE_HOOKS_VALUES = [
	    LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,
	    LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,
	    LifecycleHooks.AfterViewChecked
	];
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@experimental Animation support is experimental.
	 */
	/**
	 * `trigger` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `trigger` Creates an animation trigger which will a list of {\@link state state} and {\@link
	 * transition transition} entries that will be evaluated when the expression bound to the trigger
	 * changes.
	 *
	 * Triggers are registered within the component annotation data under the {\@link
	 * Component#animations-anchor animations section}. An animation trigger can be placed on an element
	 * within a template by referencing the name of the trigger followed by the expression value that the
	 * trigger is bound to (in the form of `[\@triggerName]="expression"`.
	 *
	 * ### Usage
	 *
	 * `trigger` will create an animation trigger reference based on the provided `name` value. The
	 * provided `animation` value is expected to be an array consisting of {\@link state state} and {\@link
	 * transition transition} declarations.
	 *
	 * ```typescript
	 * \@Component({
	 *   selector: 'my-component',
	 *   templateUrl: 'my-component-tpl.html',
	 *   animations: [
	 *     trigger("myAnimationTrigger", [
	 *       state(...),
	 *       state(...),
	 *       transition(...),
	 *       transition(...)
	 *     ])
	 *   ]
	 * })
	 * class MyComponent {
	 *   myStatusExp = "something";
	 * }
	 * ```
	 *
	 * The template associated with this component will make use of the `myAnimationTrigger` animation
	 * trigger by binding to an element within its template code.
	 *
	 * ```html
	 * <!-- somewhere inside of my-component-tpl.html -->
	 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
	 * tools/gulp-tasks/validate-commit-message.js ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} name
	 * @param {?} definitions
	 * @return {?}
	 */
	function trigger$1(name, definitions) {
	    return { name: name, definitions: definitions };
	}
	/**
	 * `animate` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `animate` specifies an animation step that will apply the provided `styles` data for a given
	 * amount of time based on the provided `timing` expression value. Calls to `animate` are expected
	 * to be used within {\@link sequence an animation sequence}, {\@link group group}, or {\@link
	 * transition transition}.
	 *
	 * ### Usage
	 *
	 * The `animate` function accepts two input parameters: `timing` and `styles`:
	 *
	 * - `timing` is a string based value that can be a combination of a duration with optional delay
	 * and easing values. The format for the expression breaks down to `duration delay easing`
	 * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
	 * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the
	 * `duration` value in millisecond form.
	 * - `styles` is the style input data which can either be a call to {\@link style style} or {\@link
	 * keyframes keyframes}. If left empty then the styles from the destination state will be collected
	 * and used (this is useful when describing an animation step that will complete an animation by
	 * {\@link transition#the-final-animate-call animating to the final state}).
	 *
	 * ```typescript
	 * // various functions for specifying timing data
	 * animate(500, style(...))
	 * animate("1s", style(...))
	 * animate("100ms 0.5s", style(...))
	 * animate("5s ease", style(...))
	 * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
	 *
	 * // either style() of keyframes() can be used
	 * animate(500, style({ background: "red" }))
	 * animate(500, keyframes([
	 *   style({ background: "blue" })),
	 *   style({ background: "red" }))
	 * ])
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} timings
	 * @param {?=} styles
	 * @return {?}
	 */
	function animate$1(timings, styles) {
	    if (styles === void 0) { styles = null; }
	    return { type: 4 /* Animate */, styles: styles, timings: timings };
	}
	/**
	 * `group` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are
	 * useful when a series of styles must be animated/closed off at different statrting/ending times.
	 *
	 * The `group` function can either be used within a {\@link sequence sequence} or a {\@link transition
	 * transition} and it will only continue to the next instruction once all of the inner animation
	 * steps have completed.
	 *
	 * ### Usage
	 *
	 * The `steps` data that is passed into the `group` animation function can either consist of {\@link
	 * style style} or {\@link animate animate} function calls. Each call to `style()` or `animate()`
	 * within a group will be executed instantly (use {\@link keyframes keyframes} or a {\@link
	 * animate#usage animate() with a delay value} to offset styles to be applied at a later time).
	 *
	 * ```typescript
	 * group([
	 *   animate("1s", { background: "black" }))
	 *   animate("2s", { color: "white" }))
	 * ])
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} steps
	 * @return {?}
	 */
	function group$1(steps) {
	    return { type: 3 /* Group */, steps: steps };
	}
	/**
	 * `sequence` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by
	 * default when an array is passed as animation data into {\@link transition transition}.)
	 *
	 * The `sequence` function can either be used within a {\@link group group} or a {\@link transition
	 * transition} and it will only continue to the next instruction once each of the inner animation
	 * steps have completed.
	 *
	 * To perform animation styling in parallel with other animation steps then have a look at the
	 * {\@link group group} animation function.
	 *
	 * ### Usage
	 *
	 * The `steps` data that is passed into the `sequence` animation function can either consist of
	 * {\@link style style} or {\@link animate animate} function calls. A call to `style()` will apply the
	 * provided styling data immediately while a call to `animate()` will apply its styling data over a
	 * given time depending on its timing data.
	 *
	 * ```typescript
	 * sequence([
	 *   style({ opacity: 0 })),
	 *   animate("1s", { opacity: 1 }))
	 * ])
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} steps
	 * @return {?}
	 */
	function sequence$1(steps) {
	    return { type: 2 /* Sequence */, steps: steps };
	}
	/**
	 * `style` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `style` declares a key/value object containing CSS properties/styles that can then be used for
	 * {\@link state animation states}, within an {\@link sequence animation sequence}, or as styling data
	 * for both {\@link animate animate} and {\@link keyframes keyframes}.
	 *
	 * ### Usage
	 *
	 * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs
	 * to be defined.
	 *
	 * ```typescript
	 * // string values are used for css properties
	 * style({ background: "red", color: "blue" })
	 *
	 * // numerical (pixel) values are also supported
	 * style({ width: 100, height: 0 })
	 * ```
	 *
	 * #### Auto-styles (using `*`)
	 *
	 * When an asterix (`*`) character is used as a value then it will be detected from the element
	 * being animated and applied as animation data when the animation starts.
	 *
	 * This feature proves useful for a state depending on layout and/or environment factors; in such
	 * cases the styles are calculated just before the animation starts.
	 *
	 * ```typescript
	 * // the steps below will animate from 0 to the
	 * // actual height of the element
	 * style({ height: 0 }),
	 * animate("1s", style({ height: "*" }))
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} tokens
	 * @return {?}
	 */
	function style$1(tokens) {
	    return { type: 6 /* Style */, styles: tokens };
	}
	/**
	 * `state` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `state` declares an animation state within the given trigger. When a state is active within a
	 * component then its associated styles will persist on the element that the trigger is attached to
	 * (even when the animation ends).
	 *
	 * To animate between states, have a look at the animation {\@link transition transition} DSL
	 * function. To register states to an animation trigger please have a look at the {\@link trigger
	 * trigger} function.
	 *
	 * #### The `void` state
	 *
	 * The `void` state value is a reserved word that angular uses to determine when the element is not
	 * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
	 * associated element is void).
	 *
	 * #### The `*` (default) state
	 *
	 * The `*` state (when styled) is a fallback state that will be used if the state that is being
	 * animated is not declared within the trigger.
	 *
	 * ### Usage
	 *
	 * `state` will declare an animation state with its associated styles
	 * within the given trigger.
	 *
	 * - `stateNameExpr` can be one or more state names separated by commas.
	 * - `styles` refers to the {\@link style styling data} that will be persisted on the element once
	 * the state has been reached.
	 *
	 * ```typescript
	 * // "void" is a reserved name for a state and is used to represent
	 * // the state in which an element is detached from from the application.
	 * state("void", style({ height: 0 }))
	 *
	 * // user-defined states
	 * state("closed", style({ height: 0 }))
	 * state("open, visible", style({ height: "*" }))
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} name
	 * @param {?} styles
	 * @return {?}
	 */
	function state$1(name, styles) {
	    return { type: 0 /* State */, name: name, styles: styles };
	}
	/**
	 * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `keyframes` specifies a collection of {\@link style style} entries each optionally characterized
	 * by an `offset` value.
	 *
	 * ### Usage
	 *
	 * The `keyframes` animation function is designed to be used alongside the {\@link animate animate}
	 * animation function. Instead of applying animations from where they are currently to their
	 * destination, keyframes can describe how each style entry is applied and at what point within the
	 * animation arc (much like CSS Keyframe Animations do).
	 *
	 * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what
	 * percentage of the animate time the styles will be applied.
	 *
	 * ```typescript
	 * // the provided offset values describe when each backgroundColor value is applied.
	 * animate("5s", keyframes([
	 *   style({ backgroundColor: "red", offset: 0 }),
	 *   style({ backgroundColor: "blue", offset: 0.2 }),
	 *   style({ backgroundColor: "orange", offset: 0.3 }),
	 *   style({ backgroundColor: "black", offset: 1 })
	 * ]))
	 * ```
	 *
	 * Alternatively, if there are no `offset` values used within the style entries then the offsets
	 * will be calculated automatically.
	 *
	 * ```typescript
	 * animate("5s", keyframes([
	 *   style({ backgroundColor: "red" }) // offset = 0
	 *   style({ backgroundColor: "blue" }) // offset = 0.33
	 *   style({ backgroundColor: "orange" }) // offset = 0.66
	 *   style({ backgroundColor: "black" }) // offset = 1
	 * ]))
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} steps
	 * @return {?}
	 */
	function keyframes$1(steps) {
	    return { type: 5 /* KeyframeSequence */, steps: steps };
	}
	/**
	 * `transition` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `transition` declares the {\@link sequence sequence of animation steps} that will be run when the
	 * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>
	 * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting
	 * and/or ending state).
	 *
	 * A function can also be provided as the `stateChangeExpr` argument for a transition and this
	 * function will be executed each time a state change occurs. If the value returned within the
	 * function is true then the associated animation will be run.
	 *
	 * Animation transitions are placed within an {\@link trigger animation trigger}. For an transition
	 * to animate to a state value and persist its styles then one or more {\@link state animation
	 * states} is expected to be defined.
	 *
	 * ### Usage
	 *
	 * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
	 * what the previous state is and what the current state has become. In other words, if a transition
	 * is defined that matches the old/current state criteria then the associated animation will be
	 * triggered.
	 *
	 * ```typescript
	 * // all transition/state changes are defined within an animation trigger
	 * trigger("myAnimationTrigger", [
	 *   // if a state is defined then its styles will be persisted when the
	 *   // animation has fully completed itself
	 *   state("on", style({ background: "green" })),
	 *   state("off", style({ background: "grey" })),
	 *
	 *   // a transition animation that will be kicked off when the state value
	 *   // bound to "myAnimationTrigger" changes from "on" to "off"
	 *   transition("on => off", animate(500)),
	 *
	 *   // it is also possible to do run the same animation for both directions
	 *   transition("on <=> off", animate(500)),
	 *
	 *   // or to define multiple states pairs separated by commas
	 *   transition("on => off, off => void", animate(500)),
	 *
	 *   // this is a catch-all state change for when an element is inserted into
	 *   // the page and the destination state is unknown
	 *   transition("void => *", [
	 *     style({ opacity: 0 }),
	 *     animate(500)
	 *   ]),
	 *
	 *   // this will capture a state change between any states
	 *   transition("* => *", animate("1s 0s")),
	 *
	 *   // you can also go full out and include a function
	 *   transition((fromState, toState) => {
	 *     // when `true` then it will allow the animation below to be invoked
	 *     return fromState == "off" && toState == "on";
	 *   }, animate("1s 0s"))
	 * ])
	 * ```
	 *
	 * The template associated with this component will make use of the `myAnimationTrigger` animation
	 * trigger by binding to an element within its template code.
	 *
	 * ```html
	 * <!-- somewhere inside of my-component-tpl.html -->
	 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
	 * ```
	 *
	 * #### The final `animate` call
	 *
	 * If the final step within the transition steps is a call to `animate()` that **only** uses a
	 * timing value with **no style data** then it will be automatically used as the final animation arc
	 * for the element to animate itself to the final state. This involves an automatic mix of
	 * adding/removing CSS styles so that the element will be in the exact state it should be for the
	 * applied state to be presented correctly.
	 *
	 * ```
	 * // start off by hiding the element, but make sure that it animates properly to whatever state
	 * // is currently active for "myAnimationTrigger"
	 * transition("void => *", [
	 *   style({ opacity: 0 }),
	 *   animate(500)
	 * ])
	 * ```
	 *
	 * ### Transition Aliases (`:enter` and `:leave`)
	 *
	 * Given that enter (insertion) and leave (removal) animations are so common, the `transition`
	 * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*
	 * => void` state changes.
	 *
	 * ```
	 * transition(":enter", [
	 *   style({ opacity: 0 }),
	 *   animate(500, style({ opacity: 1 }))
	 * ])
	 * transition(":leave", [
	 *   animate(500, style({ opacity: 0 }))
	 * ])
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} stateChangeExpr
	 * @param {?} steps
	 * @return {?}
	 */
	function transition$1(stateChangeExpr, steps) {
	    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps };
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 */
	var AUTO_STYLE$$1 = '*';
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} name
	 * @param {?} definitions
	 * @return {?}
	 */
	function trigger$$1(name, definitions) {
	    return trigger$1(name, definitions);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} timings
	 * @param {?=} styles
	 * @return {?}
	 */
	function animate$$1(timings, styles) {
	    if (styles === void 0) { styles = null; }
	    return animate$1(timings, styles);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} steps
	 * @return {?}
	 */
	function group$$1(steps) {
	    return group$1(steps);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} steps
	 * @return {?}
	 */
	function sequence$$1(steps) {
	    return sequence$1(steps);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} tokens
	 * @return {?}
	 */
	function style$$1(tokens) {
	    return style$1(tokens);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} name
	 * @param {?} styles
	 * @return {?}
	 */
	function state$$1(name, styles) {
	    return state$1(name, styles);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} steps
	 * @return {?}
	 */
	function keyframes$$1(steps) {
	    return keyframes$1(steps);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} stateChangeExpr
	 * @param {?} steps
	 * @return {?}
	 */
	function transition$$1(stateChangeExpr, steps) {
	    return transition$1(stateChangeExpr, steps);
	}

	exports.Class = Class;
	exports.createPlatform = createPlatform;
	exports.assertPlatform = assertPlatform;
	exports.destroyPlatform = destroyPlatform;
	exports.getPlatform = getPlatform;
	exports.PlatformRef = PlatformRef;
	exports.ApplicationRef = ApplicationRef;
	exports.enableProdMode = enableProdMode;
	exports.isDevMode = isDevMode;
	exports.createPlatformFactory = createPlatformFactory;
	exports.NgProbeToken = NgProbeToken;
	exports.APP_ID = APP_ID;
	exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;
	exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;
	exports.PLATFORM_ID = PLATFORM_ID;
	exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;
	exports.APP_INITIALIZER = APP_INITIALIZER;
	exports.ApplicationInitStatus = ApplicationInitStatus;
	exports.DebugElement = DebugElement;
	exports.DebugNode = DebugNode;
	exports.asNativeElements = asNativeElements;
	exports.getDebugNode = getDebugNode;
	exports.Testability = Testability;
	exports.TestabilityRegistry = TestabilityRegistry;
	exports.setTestabilityGetter = setTestabilityGetter;
	exports.TRANSLATIONS = TRANSLATIONS;
	exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;
	exports.LOCALE_ID = LOCALE_ID;
	exports.MissingTranslationStrategy = MissingTranslationStrategy;
	exports.ApplicationModule = ApplicationModule;
	exports.wtfCreateScope = wtfCreateScope;
	exports.wtfLeave = wtfLeave;
	exports.wtfStartTimeRange = wtfStartTimeRange;
	exports.wtfEndTimeRange = wtfEndTimeRange;
	exports.Type = Type;
	exports.EventEmitter = EventEmitter;
	exports.ErrorHandler = ErrorHandler;
	exports.Sanitizer = Sanitizer;
	exports.SecurityContext = SecurityContext;
	exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;
	exports.Attribute = Attribute;
	exports.ContentChild = ContentChild;
	exports.ContentChildren = ContentChildren;
	exports.Query = Query;
	exports.ViewChild = ViewChild;
	exports.ViewChildren = ViewChildren;
	exports.Component = Component;
	exports.Directive = Directive;
	exports.HostBinding = HostBinding;
	exports.HostListener = HostListener;
	exports.Input = Input;
	exports.Output = Output;
	exports.Pipe = Pipe;
	exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;
	exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;
	exports.NgModule = NgModule;
	exports.ViewEncapsulation = ViewEncapsulation;
	exports.Version = Version;
	exports.VERSION = VERSION;
	exports.forwardRef = forwardRef;
	exports.resolveForwardRef = resolveForwardRef;
	exports.Injector = Injector;
	exports.ReflectiveInjector = ReflectiveInjector;
	exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
	exports.ReflectiveKey = ReflectiveKey;
	exports.InjectionToken = InjectionToken;
	exports.OpaqueToken = OpaqueToken;
	exports.Inject = Inject;
	exports.Optional = Optional;
	exports.Injectable = Injectable;
	exports.Self = Self;
	exports.SkipSelf = SkipSelf;
	exports.Host = Host;
	exports.NgZone = NgZone;
	exports.RenderComponentType = RenderComponentType;
	exports.Renderer = Renderer;
	exports.Renderer2 = Renderer2;
	exports.RendererFactory2 = RendererFactory2;
	exports.RendererStyleFlags2 = RendererStyleFlags2;
	exports.RootRenderer = RootRenderer;
	exports.COMPILER_OPTIONS = COMPILER_OPTIONS;
	exports.Compiler = Compiler;
	exports.CompilerFactory = CompilerFactory;
	exports.ModuleWithComponentFactories = ModuleWithComponentFactories;
	exports.ComponentFactory = ComponentFactory;
	exports.ComponentRef = ComponentRef;
	exports.ComponentFactoryResolver = ComponentFactoryResolver;
	exports.ElementRef = ElementRef;
	exports.NgModuleFactory = NgModuleFactory;
	exports.NgModuleRef = NgModuleRef;
	exports.NgModuleFactoryLoader = NgModuleFactoryLoader;
	exports.getModuleFactory = getModuleFactory;
	exports.QueryList = QueryList;
	exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;
	exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;
	exports.TemplateRef = TemplateRef;
	exports.ViewContainerRef = ViewContainerRef;
	exports.EmbeddedViewRef = EmbeddedViewRef;
	exports.ViewRef = ViewRef;
	exports.ChangeDetectionStrategy = ChangeDetectionStrategy;
	exports.ChangeDetectorRef = ChangeDetectorRef;
	exports.DefaultIterableDiffer = DefaultIterableDiffer;
	exports.IterableDiffers = IterableDiffers;
	exports.KeyValueDiffers = KeyValueDiffers;
	exports.SimpleChange = SimpleChange;
	exports.WrappedValue = WrappedValue;
	exports.platformCore = platformCore;
	exports.ɵALLOW_MULTIPLE_PLATFORMS = ALLOW_MULTIPLE_PLATFORMS;
	exports.ɵAPP_ID_RANDOM_PROVIDER = APP_ID_RANDOM_PROVIDER;
	exports.ɵValueUnwrapper = ValueUnwrapper;
	exports.ɵdevModeEqual = devModeEqual;
	exports.ɵisListLikeIterable = isListLikeIterable;
	exports.ɵChangeDetectorStatus = ChangeDetectorStatus;
	exports.ɵisDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;
	exports.ɵConsole = Console;
	exports.ɵERROR_COMPONENT_TYPE = ERROR_COMPONENT_TYPE;
	exports.ɵComponentFactory = ComponentFactory;
	exports.ɵCodegenComponentFactoryResolver = CodegenComponentFactoryResolver;
	exports.ɵLIFECYCLE_HOOKS_VALUES = LIFECYCLE_HOOKS_VALUES;
	exports.ɵLifecycleHooks = LifecycleHooks;
	exports.ɵViewMetadata = ViewMetadata;
	exports.ɵReflector = Reflector;
	exports.ɵreflector = reflector;
	exports.ɵReflectionCapabilities = ReflectionCapabilities;
	exports.ɵReflectorReader = ReflectorReader;
	exports.ɵRenderDebugInfo = RenderDebugInfo;
	exports.ɵglobal = _global;
	exports.ɵlooseIdentical = looseIdentical;
	exports.ɵstringify = stringify;
	exports.ɵmakeDecorator = makeDecorator;
	exports.ɵisObservable = isObservable;
	exports.ɵisPromise = isPromise;
	exports.ɵmerge = merge$1;
	exports.ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR;
	exports.ɵNgModuleInjector = NgModuleInjector;
	exports.ɵregisterModuleFactory = registerModuleFactory;
	exports.ɵEMPTY_ARRAY = EMPTY_ARRAY;
	exports.ɵEMPTY_MAP = EMPTY_MAP;
	exports.ɵand = anchorDef;
	exports.ɵccf = createComponentFactory;
	exports.ɵcrt = createRendererType2;
	exports.ɵdid = directiveDef;
	exports.ɵeld = elementDef;
	exports.ɵelementEventFullName = elementEventFullName;
	exports.ɵgetComponentViewDefinitionFactory = getComponentViewDefinitionFactory;
	exports.ɵinlineInterpolate = inlineInterpolate;
	exports.ɵinterpolate = interpolate;
	exports.ɵncd = ngContentDef;
	exports.ɵnov = nodeValue;
	exports.ɵpid = pipeDef;
	exports.ɵprd = providerDef;
	exports.ɵpad = pureArrayDef;
	exports.ɵpod = pureObjectDef;
	exports.ɵppd = purePipeDef;
	exports.ɵqud = queryDef;
	exports.ɵted = textDef;
	exports.ɵunv = unwrapValue;
	exports.ɵvid = viewDef;
	exports.AUTO_STYLE = AUTO_STYLE$$1;
	exports.trigger = trigger$$1;
	exports.animate = animate$$1;
	exports.group = group$$1;
	exports.sequence = sequence$$1;
	exports.style = style$$1;
	exports.state = state$$1;
	exports.keyframes = keyframes$$1;
	exports.transition = transition$$1;
	exports.ɵba = animate$1;
	exports.ɵbb = group$1;
	exports.ɵbf = keyframes$1;
	exports.ɵbc = sequence$1;
	exports.ɵbe = state$1;
	exports.ɵbd = style$1;
	exports.ɵbg = transition$1;
	exports.ɵz = trigger$1;
	exports.ɵo = _initViewEngine;
	exports.ɵl = _iterableDiffersFactory;
	exports.ɵm = _keyValueDiffersFactory;
	exports.ɵn = _localeFactory;
	exports.ɵf = ApplicationRef_;
	exports.ɵg = _appIdRandomProviderFactory;
	exports.ɵh = defaultIterableDiffers;
	exports.ɵi = defaultKeyValueDiffers;
	exports.ɵj = DefaultIterableDifferFactory;
	exports.ɵk = DefaultKeyValueDifferFactory;
	exports.ɵc = ReflectiveInjector_;
	exports.ɵd = ReflectiveDependency;
	exports.ɵe = resolveReflectiveProviders;
	exports.ɵp = wtfEnabled;
	exports.ɵr = createScope$1;
	exports.ɵq = detectWTF;
	exports.ɵu = endTimeRange;
	exports.ɵs = leave;
	exports.ɵt = startTimeRange;
	exports.ɵa = makeParamDecorator;
	exports.ɵb = makePropDecorator;
	exports.ɵw = _def;
	exports.ɵx = DebugContext;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));
	//# sourceMappingURL=core.umd.js.map

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(208);
	var toSubscriber_1 = __webpack_require__(209);
	var observable_1 = __webpack_require__(220);
	/**
	 * A representation of any set of values over any amount of time. This the most basic building block
	 * of RxJS.
	 *
	 * @class Observable<T>
	 */
	var Observable = (function () {
	    /**
	     * @constructor
	     * @param {Function} subscribe the function that is  called when the Observable is
	     * initially subscribed to. This function is given a Subscriber, to which new values
	     * can be `next`ed, or an `error` method can be called to raise an error, or
	     * `complete` can be called to notify of a successful completion.
	     */
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    /**
	     * Creates a new Observable, with this Observable as the source, and the passed
	     * operator defined as the new observable's operator.
	     * @method lift
	     * @param {Operator} operator the operator defining the operation to take on the observable
	     * @return {Observable} a new observable with the Operator applied
	     */
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var operator = this.operator;
	        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
	        if (operator) {
	            operator.call(sink, this.source);
	        }
	        else {
	            sink.add(this._trySubscribe(sink));
	        }
	        if (sink.syncErrorThrowable) {
	            sink.syncErrorThrowable = false;
	            if (sink.syncErrorThrown) {
	                throw sink.syncErrorValue;
	            }
	        }
	        return sink;
	    };
	    Observable.prototype._trySubscribe = function (sink) {
	        try {
	            return this._subscribe(sink);
	        }
	        catch (err) {
	            sink.syncErrorThrown = true;
	            sink.syncErrorValue = err;
	            sink.error(err);
	        }
	    };
	    /**
	     * @method forEach
	     * @param {Function} next a handler for each value emitted by the observable
	     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
	     * @return {Promise} a promise that either resolves on observable completion or
	     *  rejects with the handled error
	     */
	    Observable.prototype.forEach = function (next, PromiseCtor) {
	        var _this = this;
	        if (!PromiseCtor) {
	            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	                PromiseCtor = root_1.root.Rx.config.Promise;
	            }
	            else if (root_1.root.Promise) {
	                PromiseCtor = root_1.root.Promise;
	            }
	        }
	        if (!PromiseCtor) {
	            throw new Error('no Promise impl found');
	        }
	        return new PromiseCtor(function (resolve, reject) {
	            var subscription = _this.subscribe(function (value) {
	                if (subscription) {
	                    // if there is a subscription, then we can surmise
	                    // the next handling is asynchronous. Any errors thrown
	                    // need to be rejected explicitly and unsubscribe must be
	                    // called manually
	                    try {
	                        next(value);
	                    }
	                    catch (err) {
	                        reject(err);
	                        subscription.unsubscribe();
	                    }
	                }
	                else {
	                    // if there is NO subscription, then we're getting a nexted
	                    // value synchronously during subscription. We can just call it.
	                    // If it errors, Observable's `subscribe` will ensure the
	                    // unsubscription logic is called, then synchronously rethrow the error.
	                    // After that, Promise will trap the error and send it
	                    // down the rejection path.
	                    next(value);
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        return this.source.subscribe(subscriber);
	    };
	    /**
	     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
	     * @method Symbol.observable
	     * @return {Observable} this instance of the observable
	     */
	    Observable.prototype[observable_1.$$observable] = function () {
	        return this;
	    };
	    // HACK: Since TypeScript inherits static properties too, we have to
	    // fight against TypeScript here so Subject can have a different static create signature
	    /**
	     * Creates a new cold Observable by calling the Observable constructor
	     * @static true
	     * @owner Observable
	     * @method create
	     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
	     * @return {Observable} a new cold observable
	     */
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	exports.Observable = Observable;
	//# sourceMappingURL=Observable.js.map

/***/ },
/* 208 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	/**
	 * window: browser in DOM main thread
	 * self: browser in WebWorker
	 * global: Node.js/other
	 */
	exports.root = (typeof window == 'object' && window.window === window && window
	    || typeof self == 'object' && self.self === self && self
	    || typeof global == 'object' && global.global === global && global);
	if (!exports.root) {
	    throw new Error('RxJS could not find any global context (window, self, global)');
	}
	//# sourceMappingURL=root.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Subscriber_1 = __webpack_require__(210);
	var rxSubscriber_1 = __webpack_require__(219);
	var Observer_1 = __webpack_require__(218);
	function toSubscriber(nextOrObserver, error, complete) {
	    if (nextOrObserver) {
	        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
	            return nextOrObserver;
	        }
	        if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
	            return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
	        }
	    }
	    if (!nextOrObserver && !error && !complete) {
	        return new Subscriber_1.Subscriber(Observer_1.empty);
	    }
	    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
	}
	exports.toSubscriber = toSubscriber;
	//# sourceMappingURL=toSubscriber.js.map

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isFunction_1 = __webpack_require__(211);
	var Subscription_1 = __webpack_require__(212);
	var Observer_1 = __webpack_require__(218);
	var rxSubscriber_1 = __webpack_require__(219);
	/**
	 * Implements the {@link Observer} interface and extends the
	 * {@link Subscription} class. While the {@link Observer} is the public API for
	 * consuming the values of an {@link Observable}, all Observers get converted to
	 * a Subscriber, in order to provide Subscription-like capabilities such as
	 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
	 * implementing operators, but it is rarely used as a public API.
	 *
	 * @class Subscriber<T>
	 */
	var Subscriber = (function (_super) {
	    __extends(Subscriber, _super);
	    /**
	     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
	     * defined Observer or a `next` callback function.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     */
	    function Subscriber(destinationOrNext, error, complete) {
	        _super.call(this);
	        this.syncErrorValue = null;
	        this.syncErrorThrown = false;
	        this.syncErrorThrowable = false;
	        this.isStopped = false;
	        switch (arguments.length) {
	            case 0:
	                this.destination = Observer_1.empty;
	                break;
	            case 1:
	                if (!destinationOrNext) {
	                    this.destination = Observer_1.empty;
	                    break;
	                }
	                if (typeof destinationOrNext === 'object') {
	                    if (destinationOrNext instanceof Subscriber) {
	                        this.destination = destinationOrNext;
	                        this.destination.add(this);
	                    }
	                    else {
	                        this.syncErrorThrowable = true;
	                        this.destination = new SafeSubscriber(this, destinationOrNext);
	                    }
	                    break;
	                }
	            default:
	                this.syncErrorThrowable = true;
	                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
	                break;
	        }
	    }
	    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () { return this; };
	    /**
	     * A static factory for a Subscriber, given a (potentially partial) definition
	     * of an Observer.
	     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
	     * Observer represented by the given arguments.
	     */
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber(next, error, complete);
	        subscriber.syncErrorThrowable = false;
	        return subscriber;
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `next` from
	     * the Observable, with a value. The Observable may call this method 0 or more
	     * times.
	     * @param {T} [value] The `next` value.
	     * @return {void}
	     */
	    Subscriber.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._next(value);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `error` from
	     * the Observable, with an attached {@link Error}. Notifies the Observer that
	     * the Observable has experienced an error condition.
	     * @param {any} [err] The `error` exception.
	     * @return {void}
	     */
	    Subscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive a valueless notification of type
	     * `complete` from the Observable. Notifies the Observer that the Observable
	     * has finished sending push-based notifications.
	     * @return {void}
	     */
	    Subscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.isStopped = true;
	        _super.prototype.unsubscribe.call(this);
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    Subscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.unsubscribe();
	    };
	    Subscriber.prototype._unsubscribeAndRecycle = function () {
	        var _a = this, _parent = _a._parent, _parents = _a._parents;
	        this._parent = null;
	        this._parents = null;
	        this.unsubscribe();
	        this.closed = false;
	        this.isStopped = false;
	        this._parent = _parent;
	        this._parents = _parents;
	        return this;
	    };
	    return Subscriber;
	}(Subscription_1.Subscription));
	exports.Subscriber = Subscriber;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SafeSubscriber = (function (_super) {
	    __extends(SafeSubscriber, _super);
	    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
	        _super.call(this);
	        this._parentSubscriber = _parentSubscriber;
	        var next;
	        var context = this;
	        if (isFunction_1.isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            context = observerOrNext;
	            next = observerOrNext.next;
	            error = observerOrNext.error;
	            complete = observerOrNext.complete;
	            if (isFunction_1.isFunction(context.unsubscribe)) {
	                this.add(context.unsubscribe.bind(context));
	            }
	            context.unsubscribe = this.unsubscribe.bind(this);
	        }
	        this._context = context;
	        this._next = next;
	        this._error = error;
	        this._complete = complete;
	    }
	    SafeSubscriber.prototype.next = function (value) {
	        if (!this.isStopped && this._next) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (!_parentSubscriber.syncErrorThrowable) {
	                this.__tryOrUnsub(this._next, value);
	            }
	            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (this._error) {
	                if (!_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._error, err);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, this._error, err);
	                    this.unsubscribe();
	                }
	            }
	            else if (!_parentSubscriber.syncErrorThrowable) {
	                this.unsubscribe();
	                throw err;
	            }
	            else {
	                _parentSubscriber.syncErrorValue = err;
	                _parentSubscriber.syncErrorThrown = true;
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (this._complete) {
	                if (!_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._complete);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, this._complete);
	                    this.unsubscribe();
	                }
	            }
	            else {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            this.unsubscribe();
	            throw err;
	        }
	    };
	    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            parent.syncErrorValue = err;
	            parent.syncErrorThrown = true;
	            return true;
	        }
	        return false;
	    };
	    SafeSubscriber.prototype._unsubscribe = function () {
	        var _parentSubscriber = this._parentSubscriber;
	        this._context = null;
	        this._parentSubscriber = null;
	        _parentSubscriber.unsubscribe();
	    };
	    return SafeSubscriber;
	}(Subscriber));
	//# sourceMappingURL=Subscriber.js.map

/***/ },
/* 211 */
/***/ function(module, exports) {

	"use strict";
	function isFunction(x) {
	    return typeof x === 'function';
	}
	exports.isFunction = isFunction;
	//# sourceMappingURL=isFunction.js.map

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var isArray_1 = __webpack_require__(213);
	var isObject_1 = __webpack_require__(214);
	var isFunction_1 = __webpack_require__(211);
	var tryCatch_1 = __webpack_require__(215);
	var errorObject_1 = __webpack_require__(216);
	var UnsubscriptionError_1 = __webpack_require__(217);
	/**
	 * Represents a disposable resource, such as the execution of an Observable. A
	 * Subscription has one important method, `unsubscribe`, that takes no argument
	 * and just disposes the resource held by the subscription.
	 *
	 * Additionally, subscriptions may be grouped together through the `add()`
	 * method, which will attach a child Subscription to the current Subscription.
	 * When a Subscription is unsubscribed, all its children (and its grandchildren)
	 * will be unsubscribed as well.
	 *
	 * @class Subscription
	 */
	var Subscription = (function () {
	    /**
	     * @param {function(): void} [unsubscribe] A function describing how to
	     * perform the disposal of resources when the `unsubscribe` method is called.
	     */
	    function Subscription(unsubscribe) {
	        /**
	         * A flag to indicate whether this Subscription has already been unsubscribed.
	         * @type {boolean}
	         */
	        this.closed = false;
	        this._parent = null;
	        this._parents = null;
	        this._subscriptions = null;
	        if (unsubscribe) {
	            this._unsubscribe = unsubscribe;
	        }
	    }
	    /**
	     * Disposes the resources held by the subscription. May, for instance, cancel
	     * an ongoing Observable execution or cancel any other type of work that
	     * started when the Subscription was created.
	     * @return {void}
	     */
	    Subscription.prototype.unsubscribe = function () {
	        var hasErrors = false;
	        var errors;
	        if (this.closed) {
	            return;
	        }
	        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
	        this.closed = true;
	        this._parent = null;
	        this._parents = null;
	        // null out _subscriptions first so any child subscriptions that attempt
	        // to remove themselves from this subscription will noop
	        this._subscriptions = null;
	        var index = -1;
	        var len = _parents ? _parents.length : 0;
	        // if this._parent is null, then so is this._parents, and we
	        // don't have to remove ourselves from any parent subscriptions.
	        while (_parent) {
	            _parent.remove(this);
	            // if this._parents is null or index >= len,
	            // then _parent is set to null, and the loop exits
	            _parent = ++index < len && _parents[index] || null;
	        }
	        if (isFunction_1.isFunction(_unsubscribe)) {
	            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
	            if (trial === errorObject_1.errorObject) {
	                hasErrors = true;
	                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
	                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);
	            }
	        }
	        if (isArray_1.isArray(_subscriptions)) {
	            index = -1;
	            len = _subscriptions.length;
	            while (++index < len) {
	                var sub = _subscriptions[index];
	                if (isObject_1.isObject(sub)) {
	                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
	                    if (trial === errorObject_1.errorObject) {
	                        hasErrors = true;
	                        errors = errors || [];
	                        var err = errorObject_1.errorObject.e;
	                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
	                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
	                        }
	                        else {
	                            errors.push(err);
	                        }
	                    }
	                }
	            }
	        }
	        if (hasErrors) {
	            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
	        }
	    };
	    /**
	     * Adds a tear down to be called during the unsubscribe() of this
	     * Subscription.
	     *
	     * If the tear down being added is a subscription that is already
	     * unsubscribed, is the same reference `add` is being called on, or is
	     * `Subscription.EMPTY`, it will not be added.
	     *
	     * If this subscription is already in an `closed` state, the passed
	     * tear down logic will be executed immediately.
	     *
	     * @param {TeardownLogic} teardown The additional logic to execute on
	     * teardown.
	     * @return {Subscription} Returns the Subscription used or created to be
	     * added to the inner subscriptions list. This Subscription can be used with
	     * `remove()` to remove the passed teardown logic from the inner subscriptions
	     * list.
	     */
	    Subscription.prototype.add = function (teardown) {
	        if (!teardown || (teardown === Subscription.EMPTY)) {
	            return Subscription.EMPTY;
	        }
	        if (teardown === this) {
	            return this;
	        }
	        var subscription = teardown;
	        switch (typeof teardown) {
	            case 'function':
	                subscription = new Subscription(teardown);
	            case 'object':
	                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
	                    return subscription;
	                }
	                else if (this.closed) {
	                    subscription.unsubscribe();
	                    return subscription;
	                }
	                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
	                    var tmp = subscription;
	                    subscription = new Subscription();
	                    subscription._subscriptions = [tmp];
	                }
	                break;
	            default:
	                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
	        }
	        var subscriptions = this._subscriptions || (this._subscriptions = []);
	        subscriptions.push(subscription);
	        subscription._addParent(this);
	        return subscription;
	    };
	    /**
	     * Removes a Subscription from the internal list of subscriptions that will
	     * unsubscribe during the unsubscribe process of this Subscription.
	     * @param {Subscription} subscription The subscription to remove.
	     * @return {void}
	     */
	    Subscription.prototype.remove = function (subscription) {
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.prototype._addParent = function (parent) {
	        var _a = this, _parent = _a._parent, _parents = _a._parents;
	        if (!_parent || _parent === parent) {
	            // If we don't have a parent, or the new parent is the same as the
	            // current parent, then set this._parent to the new parent.
	            this._parent = parent;
	        }
	        else if (!_parents) {
	            // If there's already one parent, but not multiple, allocate an Array to
	            // store the rest of the parent Subscriptions.
	            this._parents = [parent];
	        }
	        else if (_parents.indexOf(parent) === -1) {
	            // Only add the new parent to the _parents list if it's not already there.
	            _parents.push(parent);
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.closed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	}());
	exports.Subscription = Subscription;
	function flattenUnsubscriptionErrors(errors) {
	    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
	}
	//# sourceMappingURL=Subscription.js.map

/***/ },
/* 213 */
/***/ function(module, exports) {

	"use strict";
	exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
	//# sourceMappingURL=isArray.js.map

/***/ },
/* 214 */
/***/ function(module, exports) {

	"use strict";
	function isObject(x) {
	    return x != null && typeof x === 'object';
	}
	exports.isObject = isObject;
	//# sourceMappingURL=isObject.js.map

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var errorObject_1 = __webpack_require__(216);
	var tryCatchTarget;
	function tryCatcher() {
	    try {
	        return tryCatchTarget.apply(this, arguments);
	    }
	    catch (e) {
	        errorObject_1.errorObject.e = e;
	        return errorObject_1.errorObject;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}
	exports.tryCatch = tryCatch;
	;
	//# sourceMappingURL=tryCatch.js.map

/***/ },
/* 216 */
/***/ function(module, exports) {

	"use strict";
	// typeof any so that it we don't have to cast when comparing a result to the error object
	exports.errorObject = { e: {} };
	//# sourceMappingURL=errorObject.js.map

/***/ },
/* 217 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when one or more errors have occurred during the
	 * `unsubscribe` of a {@link Subscription}.
	 */
	var UnsubscriptionError = (function (_super) {
	    __extends(UnsubscriptionError, _super);
	    function UnsubscriptionError(errors) {
	        _super.call(this);
	        this.errors = errors;
	        var err = Error.call(this, errors ?
	            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
	        this.name = err.name = 'UnsubscriptionError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return UnsubscriptionError;
	}(Error));
	exports.UnsubscriptionError = UnsubscriptionError;
	//# sourceMappingURL=UnsubscriptionError.js.map

/***/ },
/* 218 */
/***/ function(module, exports) {

	"use strict";
	exports.empty = {
	    closed: true,
	    next: function (value) { },
	    error: function (err) { throw err; },
	    complete: function () { }
	};
	//# sourceMappingURL=Observer.js.map

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(208);
	var Symbol = root_1.root.Symbol;
	exports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
	    Symbol.for('rxSubscriber') : '@@rxSubscriber';
	//# sourceMappingURL=rxSubscriber.js.map

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(208);
	function getSymbolObservable(context) {
	    var $$observable;
	    var Symbol = context.Symbol;
	    if (typeof Symbol === 'function') {
	        if (Symbol.observable) {
	            $$observable = Symbol.observable;
	        }
	        else {
	            $$observable = Symbol('observable');
	            Symbol.observable = $$observable;
	        }
	    }
	    else {
	        $$observable = '@@observable';
	    }
	    return $$observable;
	}
	exports.getSymbolObservable = getSymbolObservable;
	exports.$$observable = getSymbolObservable(root_1.root);
	//# sourceMappingURL=observable.js.map

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var merge_1 = __webpack_require__(222);
	exports.merge = merge_1.mergeStatic;
	//# sourceMappingURL=merge.js.map

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(207);
	var ArrayObservable_1 = __webpack_require__(223);
	var mergeAll_1 = __webpack_require__(227);
	var isScheduler_1 = __webpack_require__(226);
	/* tslint:enable:max-line-length */
	/**
	 * Creates an output Observable which concurrently emits all values from every
	 * given input Observable.
	 *
	 * <span class="informal">Flattens multiple Observables together by blending
	 * their values into one Observable.</span>
	 *
	 * <img src="./img/merge.png" width="100%">
	 *
	 * `merge` subscribes to each given input Observable (either the source or an
	 * Observable given as argument), and simply forwards (without doing any
	 * transformation) all the values from all the input Observables to the output
	 * Observable. The output Observable only completes once all input Observables
	 * have completed. Any error delivered by an input Observable will be immediately
	 * emitted on the output Observable.
	 *
	 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var timer = Rx.Observable.interval(1000);
	 * var clicksOrTimer = clicks.merge(timer);
	 * clicksOrTimer.subscribe(x => console.log(x));
	 *
	 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
	 * var timer1 = Rx.Observable.interval(1000).take(10);
	 * var timer2 = Rx.Observable.interval(2000).take(6);
	 * var timer3 = Rx.Observable.interval(500).take(10);
	 * var concurrent = 2; // the argument
	 * var merged = timer1.merge(timer2, timer3, concurrent);
	 * merged.subscribe(x => console.log(x));
	 *
	 * @see {@link mergeAll}
	 * @see {@link mergeMap}
	 * @see {@link mergeMapTo}
	 * @see {@link mergeScan}
	 *
	 * @param {ObservableInput} other An input Observable to merge with the source
	 * Observable. More than one input Observables may be given as argument.
	 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
	 * Observables being subscribed to concurrently.
	 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
	 * concurrency of input Observables.
	 * @return {Observable} An Observable that emits items that are the result of
	 * every input Observable.
	 * @method merge
	 * @owner Observable
	 */
	function merge() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    return this.lift.call(mergeStatic.apply(void 0, [this].concat(observables)));
	}
	exports.merge = merge;
	/* tslint:enable:max-line-length */
	/**
	 * Creates an output Observable which concurrently emits all values from every
	 * given input Observable.
	 *
	 * <span class="informal">Flattens multiple Observables together by blending
	 * their values into one Observable.</span>
	 *
	 * <img src="./img/merge.png" width="100%">
	 *
	 * `merge` subscribes to each given input Observable (as arguments), and simply
	 * forwards (without doing any transformation) all the values from all the input
	 * Observables to the output Observable. The output Observable only completes
	 * once all input Observables have completed. Any error delivered by an input
	 * Observable will be immediately emitted on the output Observable.
	 *
	 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var timer = Rx.Observable.interval(1000);
	 * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
	 * clicksOrTimer.subscribe(x => console.log(x));
	 *
	 * // Results in the following:
	 * // timer will emit ascending values, one every second(1000ms) to console
	 * // clicks logs MouseEvents to console everytime the "document" is clicked
	 * // Since the two streams are merged you see these happening
	 * // as they occur.
	 *
	 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
	 * var timer1 = Rx.Observable.interval(1000).take(10);
	 * var timer2 = Rx.Observable.interval(2000).take(6);
	 * var timer3 = Rx.Observable.interval(500).take(10);
	 * var concurrent = 2; // the argument
	 * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
	 * merged.subscribe(x => console.log(x));
	 *
	 * // Results in the following:
	 * // - First timer1 and timer2 will run concurrently
	 * // - timer1 will emit a value every 1000ms for 10 iterations
	 * // - timer2 will emit a value every 2000ms for 6 iterations
	 * // - after timer1 hits it's max iteration, timer2 will
	 * //   continue, and timer3 will start to run concurrently with timer2
	 * // - when timer2 hits it's max iteration it terminates, and
	 * //   timer3 will continue to emit a value every 500ms until it is complete
	 *
	 * @see {@link mergeAll}
	 * @see {@link mergeMap}
	 * @see {@link mergeMapTo}
	 * @see {@link mergeScan}
	 *
	 * @param {...ObservableInput} observables Input Observables to merge together.
	 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
	 * Observables being subscribed to concurrently.
	 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
	 * concurrency of input Observables.
	 * @return {Observable} an Observable that emits items that are the result of
	 * every input Observable.
	 * @static true
	 * @name merge
	 * @owner Observable
	 */
	function mergeStatic() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    var concurrent = Number.POSITIVE_INFINITY;
	    var scheduler = null;
	    var last = observables[observables.length - 1];
	    if (isScheduler_1.isScheduler(last)) {
	        scheduler = observables.pop();
	        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
	            concurrent = observables.pop();
	        }
	    }
	    else if (typeof last === 'number') {
	        concurrent = observables.pop();
	    }
	    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
	        return observables[0];
	    }
	    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));
	}
	exports.mergeStatic = mergeStatic;
	//# sourceMappingURL=merge.js.map

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(207);
	var ScalarObservable_1 = __webpack_require__(224);
	var EmptyObservable_1 = __webpack_require__(225);
	var isScheduler_1 = __webpack_require__(226);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var ArrayObservable = (function (_super) {
	    __extends(ArrayObservable, _super);
	    function ArrayObservable(array, scheduler) {
	        _super.call(this);
	        this.array = array;
	        this.scheduler = scheduler;
	        if (!scheduler && array.length === 1) {
	            this._isScalar = true;
	            this.value = array[0];
	        }
	    }
	    ArrayObservable.create = function (array, scheduler) {
	        return new ArrayObservable(array, scheduler);
	    };
	    /**
	     * Creates an Observable that emits some values you specify as arguments,
	     * immediately one after the other, and then emits a complete notification.
	     *
	     * <span class="informal">Emits the arguments you provide, then completes.
	     * </span>
	     *
	     * <img src="./img/of.png" width="100%">
	     *
	     * This static operator is useful for creating a simple Observable that only
	     * emits the arguments given, and the complete notification thereafter. It can
	     * be used for composing with other Observables, such as with {@link concat}.
	     * By default, it uses a `null` IScheduler, which means the `next`
	     * notifications are sent synchronously, although with a different IScheduler
	     * it is possible to determine when those notifications will be delivered.
	     *
	     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
	     * var numbers = Rx.Observable.of(10, 20, 30);
	     * var letters = Rx.Observable.of('a', 'b', 'c');
	     * var interval = Rx.Observable.interval(1000);
	     * var result = numbers.concat(letters).concat(interval);
	     * result.subscribe(x => console.log(x));
	     *
	     * @see {@link create}
	     * @see {@link empty}
	     * @see {@link never}
	     * @see {@link throw}
	     *
	     * @param {...T} values Arguments that represent `next` values to be emitted.
	     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
	     * the emissions of the `next` notifications.
	     * @return {Observable<T>} An Observable that emits each given input value.
	     * @static true
	     * @name of
	     * @owner Observable
	     */
	    ArrayObservable.of = function () {
	        var array = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            array[_i - 0] = arguments[_i];
	        }
	        var scheduler = array[array.length - 1];
	        if (isScheduler_1.isScheduler(scheduler)) {
	            array.pop();
	        }
	        else {
	            scheduler = null;
	        }
	        var len = array.length;
	        if (len > 1) {
	            return new ArrayObservable(array, scheduler);
	        }
	        else if (len === 1) {
	            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
	        }
	        else {
	            return new EmptyObservable_1.EmptyObservable(scheduler);
	        }
	    };
	    ArrayObservable.dispatch = function (state) {
	        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
	        if (index >= count) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(array[index]);
	        if (subscriber.closed) {
	            return;
	        }
	        state.index = index + 1;
	        this.schedule(state);
	    };
	    ArrayObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var array = this.array;
	        var count = array.length;
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(ArrayObservable.dispatch, 0, {
	                array: array, index: index, count: count, subscriber: subscriber
	            });
	        }
	        else {
	            for (var i = 0; i < count && !subscriber.closed; i++) {
	                subscriber.next(array[i]);
	            }
	            subscriber.complete();
	        }
	    };
	    return ArrayObservable;
	}(Observable_1.Observable));
	exports.ArrayObservable = ArrayObservable;
	//# sourceMappingURL=ArrayObservable.js.map

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(207);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var ScalarObservable = (function (_super) {
	    __extends(ScalarObservable, _super);
	    function ScalarObservable(value, scheduler) {
	        _super.call(this);
	        this.value = value;
	        this.scheduler = scheduler;
	        this._isScalar = true;
	        if (scheduler) {
	            this._isScalar = false;
	        }
	    }
	    ScalarObservable.create = function (value, scheduler) {
	        return new ScalarObservable(value, scheduler);
	    };
	    ScalarObservable.dispatch = function (state) {
	        var done = state.done, value = state.value, subscriber = state.subscriber;
	        if (done) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(value);
	        if (subscriber.closed) {
	            return;
	        }
	        state.done = true;
	        this.schedule(state);
	    };
	    ScalarObservable.prototype._subscribe = function (subscriber) {
	        var value = this.value;
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(ScalarObservable.dispatch, 0, {
	                done: false, value: value, subscriber: subscriber
	            });
	        }
	        else {
	            subscriber.next(value);
	            if (!subscriber.closed) {
	                subscriber.complete();
	            }
	        }
	    };
	    return ScalarObservable;
	}(Observable_1.Observable));
	exports.ScalarObservable = ScalarObservable;
	//# sourceMappingURL=ScalarObservable.js.map

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(207);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var EmptyObservable = (function (_super) {
	    __extends(EmptyObservable, _super);
	    function EmptyObservable(scheduler) {
	        _super.call(this);
	        this.scheduler = scheduler;
	    }
	    /**
	     * Creates an Observable that emits no items to the Observer and immediately
	     * emits a complete notification.
	     *
	     * <span class="informal">Just emits 'complete', and nothing else.
	     * </span>
	     *
	     * <img src="./img/empty.png" width="100%">
	     *
	     * This static operator is useful for creating a simple Observable that only
	     * emits the complete notification. It can be used for composing with other
	     * Observables, such as in a {@link mergeMap}.
	     *
	     * @example <caption>Emit the number 7, then complete.</caption>
	     * var result = Rx.Observable.empty().startWith(7);
	     * result.subscribe(x => console.log(x));
	     *
	     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
	     * var interval = Rx.Observable.interval(1000);
	     * var result = interval.mergeMap(x =>
	     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
	     * );
	     * result.subscribe(x => console.log(x));
	     *
	     * // Results in the following to the console:
	     * // x is equal to the count on the interval eg(0,1,2,3,...)
	     * // x will occur every 1000ms
	     * // if x % 2 is equal to 1 print abc
	     * // if x % 2 is not equal to 1 nothing will be output
	     *
	     * @see {@link create}
	     * @see {@link never}
	     * @see {@link of}
	     * @see {@link throw}
	     *
	     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
	     * the emission of the complete notification.
	     * @return {Observable} An "empty" Observable: emits only the complete
	     * notification.
	     * @static true
	     * @name empty
	     * @owner Observable
	     */
	    EmptyObservable.create = function (scheduler) {
	        return new EmptyObservable(scheduler);
	    };
	    EmptyObservable.dispatch = function (arg) {
	        var subscriber = arg.subscriber;
	        subscriber.complete();
	    };
	    EmptyObservable.prototype._subscribe = function (subscriber) {
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
	        }
	        else {
	            subscriber.complete();
	        }
	    };
	    return EmptyObservable;
	}(Observable_1.Observable));
	exports.EmptyObservable = EmptyObservable;
	//# sourceMappingURL=EmptyObservable.js.map

/***/ },
/* 226 */
/***/ function(module, exports) {

	"use strict";
	function isScheduler(value) {
	    return value && typeof value.schedule === 'function';
	}
	exports.isScheduler = isScheduler;
	//# sourceMappingURL=isScheduler.js.map

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(228);
	var subscribeToResult_1 = __webpack_require__(229);
	/**
	 * Converts a higher-order Observable into a first-order Observable which
	 * concurrently delivers all values that are emitted on the inner Observables.
	 *
	 * <span class="informal">Flattens an Observable-of-Observables.</span>
	 *
	 * <img src="./img/mergeAll.png" width="100%">
	 *
	 * `mergeAll` subscribes to an Observable that emits Observables, also known as
	 * a higher-order Observable. Each time it observes one of these emitted inner
	 * Observables, it subscribes to that and delivers all the values from the
	 * inner Observable on the output Observable. The output Observable only
	 * completes once all inner Observables have completed. Any error delivered by
	 * a inner Observable will be immediately emitted on the output Observable.
	 *
	 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
	 * var firstOrder = higherOrder.mergeAll();
	 * firstOrder.subscribe(x => console.log(x));
	 *
	 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
	 * var firstOrder = higherOrder.mergeAll(2);
	 * firstOrder.subscribe(x => console.log(x));
	 *
	 * @see {@link combineAll}
	 * @see {@link concatAll}
	 * @see {@link exhaust}
	 * @see {@link merge}
	 * @see {@link mergeMap}
	 * @see {@link mergeMapTo}
	 * @see {@link mergeScan}
	 * @see {@link switch}
	 * @see {@link zipAll}
	 *
	 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
	 * Observables being subscribed to concurrently.
	 * @return {Observable} An Observable that emits values coming from all the
	 * inner Observables emitted by the source Observable.
	 * @method mergeAll
	 * @owner Observable
	 */
	function mergeAll(concurrent) {
	    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	    return this.lift(new MergeAllOperator(concurrent));
	}
	exports.mergeAll = mergeAll;
	var MergeAllOperator = (function () {
	    function MergeAllOperator(concurrent) {
	        this.concurrent = concurrent;
	    }
	    MergeAllOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));
	    };
	    return MergeAllOperator;
	}());
	exports.MergeAllOperator = MergeAllOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var MergeAllSubscriber = (function (_super) {
	    __extends(MergeAllSubscriber, _super);
	    function MergeAllSubscriber(destination, concurrent) {
	        _super.call(this, destination);
	        this.concurrent = concurrent;
	        this.hasCompleted = false;
	        this.buffer = [];
	        this.active = 0;
	    }
	    MergeAllSubscriber.prototype._next = function (observable) {
	        if (this.active < this.concurrent) {
	            this.active++;
	            this.add(subscribeToResult_1.subscribeToResult(this, observable));
	        }
	        else {
	            this.buffer.push(observable);
	        }
	    };
	    MergeAllSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	    };
	    MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return MergeAllSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	exports.MergeAllSubscriber = MergeAllSubscriber;
	//# sourceMappingURL=mergeAll.js.map

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(210);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var OuterSubscriber = (function (_super) {
	    __extends(OuterSubscriber, _super);
	    function OuterSubscriber() {
	        _super.apply(this, arguments);
	    }
	    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
	        this.destination.error(error);
	    };
	    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.destination.complete();
	    };
	    return OuterSubscriber;
	}(Subscriber_1.Subscriber));
	exports.OuterSubscriber = OuterSubscriber;
	//# sourceMappingURL=OuterSubscriber.js.map

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(208);
	var isArrayLike_1 = __webpack_require__(230);
	var isPromise_1 = __webpack_require__(231);
	var isObject_1 = __webpack_require__(214);
	var Observable_1 = __webpack_require__(207);
	var iterator_1 = __webpack_require__(232);
	var InnerSubscriber_1 = __webpack_require__(233);
	var observable_1 = __webpack_require__(220);
	function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
	    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
	    if (destination.closed) {
	        return null;
	    }
	    if (result instanceof Observable_1.Observable) {
	        if (result._isScalar) {
	            destination.next(result.value);
	            destination.complete();
	            return null;
	        }
	        else {
	            return result.subscribe(destination);
	        }
	    }
	    else if (isArrayLike_1.isArrayLike(result)) {
	        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
	            destination.next(result[i]);
	        }
	        if (!destination.closed) {
	            destination.complete();
	        }
	    }
	    else if (isPromise_1.isPromise(result)) {
	        result.then(function (value) {
	            if (!destination.closed) {
	                destination.next(value);
	                destination.complete();
	            }
	        }, function (err) { return destination.error(err); })
	            .then(null, function (err) {
	            // Escaping the Promise trap: globally throw unhandled errors
	            root_1.root.setTimeout(function () { throw err; });
	        });
	        return destination;
	    }
	    else if (result && typeof result[iterator_1.$$iterator] === 'function') {
	        var iterator = result[iterator_1.$$iterator]();
	        do {
	            var item = iterator.next();
	            if (item.done) {
	                destination.complete();
	                break;
	            }
	            destination.next(item.value);
	            if (destination.closed) {
	                break;
	            }
	        } while (true);
	    }
	    else if (result && typeof result[observable_1.$$observable] === 'function') {
	        var obs = result[observable_1.$$observable]();
	        if (typeof obs.subscribe !== 'function') {
	            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
	        }
	        else {
	            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
	        }
	    }
	    else {
	        var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
	        var msg = ("You provided " + value + " where a stream was expected.")
	            + ' You can provide an Observable, Promise, Array, or Iterable.';
	        destination.error(new TypeError(msg));
	    }
	    return null;
	}
	exports.subscribeToResult = subscribeToResult;
	//# sourceMappingURL=subscribeToResult.js.map

/***/ },
/* 230 */
/***/ function(module, exports) {

	"use strict";
	exports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });
	//# sourceMappingURL=isArrayLike.js.map

/***/ },
/* 231 */
/***/ function(module, exports) {

	"use strict";
	function isPromise(value) {
	    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
	}
	exports.isPromise = isPromise;
	//# sourceMappingURL=isPromise.js.map

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(208);
	function symbolIteratorPonyfill(root) {
	    var Symbol = root.Symbol;
	    if (typeof Symbol === 'function') {
	        if (!Symbol.iterator) {
	            Symbol.iterator = Symbol('iterator polyfill');
	        }
	        return Symbol.iterator;
	    }
	    else {
	        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)
	        var Set_1 = root.Set;
	        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
	            return '@@iterator';
	        }
	        var Map_1 = root.Map;
	        // required for compatability with es6-shim
	        if (Map_1) {
	            var keys = Object.getOwnPropertyNames(Map_1.prototype);
	            for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.
	                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
	                    return key;
	                }
	            }
	        }
	        return '@@iterator';
	    }
	}
	exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
	exports.$$iterator = symbolIteratorPonyfill(root_1.root);
	//# sourceMappingURL=iterator.js.map

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(210);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var InnerSubscriber = (function (_super) {
	    __extends(InnerSubscriber, _super);
	    function InnerSubscriber(parent, outerValue, outerIndex) {
	        _super.call(this);
	        this.parent = parent;
	        this.outerValue = outerValue;
	        this.outerIndex = outerIndex;
	        this.index = 0;
	    }
	    InnerSubscriber.prototype._next = function (value) {
	        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
	    };
	    InnerSubscriber.prototype._error = function (error) {
	        this.parent.notifyError(error, this);
	        this.unsubscribe();
	    };
	    InnerSubscriber.prototype._complete = function () {
	        this.parent.notifyComplete(this);
	        this.unsubscribe();
	    };
	    return InnerSubscriber;
	}(Subscriber_1.Subscriber));
	exports.InnerSubscriber = InnerSubscriber;
	//# sourceMappingURL=InnerSubscriber.js.map

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var multicast_1 = __webpack_require__(235);
	var Subject_1 = __webpack_require__(237);
	function shareSubjectFactory() {
	    return new Subject_1.Subject();
	}
	/**
	 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
	 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
	 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
	 * This is an alias for .publish().refCount().
	 *
	 * <img src="./img/share.png" width="100%">
	 *
	 * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
	 * @method share
	 * @owner Observable
	 */
	function share() {
	    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
	}
	exports.share = share;
	;
	//# sourceMappingURL=share.js.map

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ConnectableObservable_1 = __webpack_require__(236);
	/* tslint:enable:max-line-length */
	/**
	 * Returns an Observable that emits the results of invoking a specified selector on items
	 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
	 *
	 * <img src="./img/multicast.png" width="100%">
	 *
	 * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through
	 * which the source sequence's elements will be multicast to the selector function
	 * or Subject to push source elements into.
	 * @param {Function} [selector] - Optional selector function that can use the multicasted source stream
	 * as many times as needed, without causing multiple subscriptions to the source stream.
	 * Subscribers to the given source will receive all notifications of the source from the
	 * time of the subscription forward.
	 * @return {Observable} An Observable that emits the results of invoking the selector
	 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
	 * the underlying stream.
	 * @method multicast
	 * @owner Observable
	 */
	function multicast(subjectOrSubjectFactory, selector) {
	    var subjectFactory;
	    if (typeof subjectOrSubjectFactory === 'function') {
	        subjectFactory = subjectOrSubjectFactory;
	    }
	    else {
	        subjectFactory = function subjectFactory() {
	            return subjectOrSubjectFactory;
	        };
	    }
	    if (typeof selector === 'function') {
	        return this.lift(new MulticastOperator(subjectFactory, selector));
	    }
	    var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);
	    connectable.source = this;
	    connectable.subjectFactory = subjectFactory;
	    return connectable;
	}
	exports.multicast = multicast;
	var MulticastOperator = (function () {
	    function MulticastOperator(subjectFactory, selector) {
	        this.subjectFactory = subjectFactory;
	        this.selector = selector;
	    }
	    MulticastOperator.prototype.call = function (subscriber, source) {
	        var selector = this.selector;
	        var subject = this.subjectFactory();
	        var subscription = selector(subject).subscribe(subscriber);
	        subscription.add(source.subscribe(subject));
	        return subscription;
	    };
	    return MulticastOperator;
	}());
	exports.MulticastOperator = MulticastOperator;
	//# sourceMappingURL=multicast.js.map

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(237);
	var Observable_1 = __webpack_require__(207);
	var Subscriber_1 = __webpack_require__(210);
	var Subscription_1 = __webpack_require__(212);
	/**
	 * @class ConnectableObservable<T>
	 */
	var ConnectableObservable = (function (_super) {
	    __extends(ConnectableObservable, _super);
	    function ConnectableObservable(source, subjectFactory) {
	        _super.call(this);
	        this.source = source;
	        this.subjectFactory = subjectFactory;
	        this._refCount = 0;
	    }
	    ConnectableObservable.prototype._subscribe = function (subscriber) {
	        return this.getSubject().subscribe(subscriber);
	    };
	    ConnectableObservable.prototype.getSubject = function () {
	        var subject = this._subject;
	        if (!subject || subject.isStopped) {
	            this._subject = this.subjectFactory();
	        }
	        return this._subject;
	    };
	    ConnectableObservable.prototype.connect = function () {
	        var connection = this._connection;
	        if (!connection) {
	            connection = this._connection = new Subscription_1.Subscription();
	            connection.add(this.source
	                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
	            if (connection.closed) {
	                this._connection = null;
	                connection = Subscription_1.Subscription.EMPTY;
	            }
	            else {
	                this._connection = connection;
	            }
	        }
	        return connection;
	    };
	    ConnectableObservable.prototype.refCount = function () {
	        return this.lift(new RefCountOperator(this));
	    };
	    return ConnectableObservable;
	}(Observable_1.Observable));
	exports.ConnectableObservable = ConnectableObservable;
	exports.connectableObservableDescriptor = {
	    operator: { value: null },
	    _refCount: { value: 0, writable: true },
	    _subscribe: { value: ConnectableObservable.prototype._subscribe },
	    getSubject: { value: ConnectableObservable.prototype.getSubject },
	    connect: { value: ConnectableObservable.prototype.connect },
	    refCount: { value: ConnectableObservable.prototype.refCount }
	};
	var ConnectableSubscriber = (function (_super) {
	    __extends(ConnectableSubscriber, _super);
	    function ConnectableSubscriber(destination, connectable) {
	        _super.call(this, destination);
	        this.connectable = connectable;
	    }
	    ConnectableSubscriber.prototype._error = function (err) {
	        this._unsubscribe();
	        _super.prototype._error.call(this, err);
	    };
	    ConnectableSubscriber.prototype._complete = function () {
	        this._unsubscribe();
	        _super.prototype._complete.call(this);
	    };
	    ConnectableSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (connectable) {
	            this.connectable = null;
	            var connection = connectable._connection;
	            connectable._refCount = 0;
	            connectable._subject = null;
	            connectable._connection = null;
	            if (connection) {
	                connection.unsubscribe();
	            }
	        }
	    };
	    return ConnectableSubscriber;
	}(Subject_1.SubjectSubscriber));
	var RefCountOperator = (function () {
	    function RefCountOperator(connectable) {
	        this.connectable = connectable;
	    }
	    RefCountOperator.prototype.call = function (subscriber, source) {
	        var connectable = this.connectable;
	        connectable._refCount++;
	        var refCounter = new RefCountSubscriber(subscriber, connectable);
	        var subscription = source.subscribe(refCounter);
	        if (!refCounter.closed) {
	            refCounter.connection = connectable.connect();
	        }
	        return subscription;
	    };
	    return RefCountOperator;
	}());
	var RefCountSubscriber = (function (_super) {
	    __extends(RefCountSubscriber, _super);
	    function RefCountSubscriber(destination, connectable) {
	        _super.call(this, destination);
	        this.connectable = connectable;
	    }
	    RefCountSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (!connectable) {
	            this.connection = null;
	            return;
	        }
	        this.connectable = null;
	        var refCount = connectable._refCount;
	        if (refCount <= 0) {
	            this.connection = null;
	            return;
	        }
	        connectable._refCount = refCount - 1;
	        if (refCount > 1) {
	            this.connection = null;
	            return;
	        }
	        ///
	        // Compare the local RefCountSubscriber's connection Subscription to the
	        // connection Subscription on the shared ConnectableObservable. In cases
	        // where the ConnectableObservable source synchronously emits values, and
	        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
	        // execution continues to here before the RefCountOperator has a chance to
	        // supply the RefCountSubscriber with the shared connection Subscription.
	        // For example:
	        // ```
	        // Observable.range(0, 10)
	        //   .publish()
	        //   .refCount()
	        //   .take(5)
	        //   .subscribe();
	        // ```
	        // In order to account for this case, RefCountSubscriber should only dispose
	        // the ConnectableObservable's shared connection Subscription if the
	        // connection Subscription exists, *and* either:
	        //   a. RefCountSubscriber doesn't have a reference to the shared connection
	        //      Subscription yet, or,
	        //   b. RefCountSubscriber's connection Subscription reference is identical
	        //      to the shared connection Subscription
	        ///
	        var connection = this.connection;
	        var sharedConnection = connectable._connection;
	        this.connection = null;
	        if (sharedConnection && (!connection || sharedConnection === connection)) {
	            sharedConnection.unsubscribe();
	        }
	    };
	    return RefCountSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=ConnectableObservable.js.map

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(207);
	var Subscriber_1 = __webpack_require__(210);
	var Subscription_1 = __webpack_require__(212);
	var ObjectUnsubscribedError_1 = __webpack_require__(238);
	var SubjectSubscription_1 = __webpack_require__(239);
	var rxSubscriber_1 = __webpack_require__(219);
	/**
	 * @class SubjectSubscriber<T>
	 */
	var SubjectSubscriber = (function (_super) {
	    __extends(SubjectSubscriber, _super);
	    function SubjectSubscriber(destination) {
	        _super.call(this, destination);
	        this.destination = destination;
	    }
	    return SubjectSubscriber;
	}(Subscriber_1.Subscriber));
	exports.SubjectSubscriber = SubjectSubscriber;
	/**
	 * @class Subject<T>
	 */
	var Subject = (function (_super) {
	    __extends(Subject, _super);
	    function Subject() {
	        _super.call(this);
	        this.observers = [];
	        this.closed = false;
	        this.isStopped = false;
	        this.hasError = false;
	        this.thrownError = null;
	    }
	    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
	        return new SubjectSubscriber(this);
	    };
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype.next = function (value) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        if (!this.isStopped) {
	            var observers = this.observers;
	            var len = observers.length;
	            var copy = observers.slice();
	            for (var i = 0; i < len; i++) {
	                copy[i].next(value);
	            }
	        }
	    };
	    Subject.prototype.error = function (err) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.hasError = true;
	        this.thrownError = err;
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].error(err);
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.complete = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].complete();
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = true;
	        this.closed = true;
	        this.observers = null;
	    };
	    Subject.prototype._trySubscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else {
	            return _super.prototype._trySubscribe.call(this, subscriber);
	        }
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable_1.Observable();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject(destination, source);
	    };
	    return Subject;
	}(Observable_1.Observable));
	exports.Subject = Subject;
	/**
	 * @class AnonymousSubject<T>
	 */
	var AnonymousSubject = (function (_super) {
	    __extends(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        _super.call(this);
	        this.destination = destination;
	        this.source = source;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var destination = this.destination;
	        if (destination && destination.next) {
	            destination.next(value);
	        }
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var destination = this.destination;
	        if (destination && destination.error) {
	            this.destination.error(err);
	        }
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var destination = this.destination;
	        if (destination && destination.complete) {
	            this.destination.complete();
	        }
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        if (source) {
	            return this.source.subscribe(subscriber);
	        }
	        else {
	            return Subscription_1.Subscription.EMPTY;
	        }
	    };
	    return AnonymousSubject;
	}(Subject));
	exports.AnonymousSubject = AnonymousSubject;
	//# sourceMappingURL=Subject.js.map

/***/ },
/* 238 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when an action is invalid because the object has been
	 * unsubscribed.
	 *
	 * @see {@link Subject}
	 * @see {@link BehaviorSubject}
	 *
	 * @class ObjectUnsubscribedError
	 */
	var ObjectUnsubscribedError = (function (_super) {
	    __extends(ObjectUnsubscribedError, _super);
	    function ObjectUnsubscribedError() {
	        var err = _super.call(this, 'object unsubscribed');
	        this.name = err.name = 'ObjectUnsubscribedError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return ObjectUnsubscribedError;
	}(Error));
	exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
	//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(212);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SubjectSubscription = (function (_super) {
	    __extends(SubjectSubscription, _super);
	    function SubjectSubscription(subject, subscriber) {
	        _super.call(this);
	        this.subject = subject;
	        this.subscriber = subscriber;
	        this.closed = false;
	    }
	    SubjectSubscription.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = null;
	        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
	            return;
	        }
	        var subscriberIndex = observers.indexOf(this.subscriber);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };
	    return SubjectSubscription;
	}(Subscription_1.Subscription));
	exports.SubjectSubscription = SubjectSubscription;
	//# sourceMappingURL=SubjectSubscription.js.map

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(241), __webpack_require__(206)) :
		typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core'], factory) :
		(factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}),global.ng.common,global.ng.core));
	}(this, (function (exports,_angular_common,_angular_core) { 'use strict';

	var __extends = (undefined && undefined.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _DOM = null;
	/**
	 * @return {?}
	 */
	function getDOM() {
	    return _DOM;
	}
	/**
	 * @param {?} adapter
	 * @return {?}
	 */
	/**
	 * @param {?} adapter
	 * @return {?}
	 */
	function setRootDomAdapter(adapter) {
	    if (!_DOM) {
	        _DOM = adapter;
	    }
	}
	/**
	 * Provides DOM operations in an environment-agnostic way.
	 *
	 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
	 * can introduce XSS risks.
	 * @abstract
	 */
	var DomAdapter = (function () {
	    function DomAdapter() {
	        this.resourceLoaderType = null;
	    }
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.hasProperty = function (element, name) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setProperty = function (el, name, value) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.getProperty = function (el, name) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} methodName
	     * @param {?} args
	     * @return {?}
	     */
	    DomAdapter.prototype.invoke = function (el, methodName, args) { };
	    /**
	     * @abstract
	     * @param {?} error
	     * @return {?}
	     */
	    DomAdapter.prototype.logError = function (error) { };
	    /**
	     * @abstract
	     * @param {?} error
	     * @return {?}
	     */
	    DomAdapter.prototype.log = function (error) { };
	    /**
	     * @abstract
	     * @param {?} error
	     * @return {?}
	     */
	    DomAdapter.prototype.logGroup = function (error) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.logGroupEnd = function () { };
	    Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
	        /**
	         * Maps attribute names to their corresponding property names for cases
	         * where attribute name doesn't match property name.
	         * @return {?}
	         */
	        get: function () { return this._attrToPropMap; },
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        set: function (value) { this._attrToPropMap = value; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    
	    /**
	     * @abstract
	     * @param {?} nodeA
	     * @param {?} nodeB
	     * @return {?}
	     */
	    DomAdapter.prototype.contains = function (nodeA, nodeB) { };
	    /**
	     * @abstract
	     * @param {?} templateHtml
	     * @return {?}
	     */
	    DomAdapter.prototype.parse = function (templateHtml) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} selector
	     * @return {?}
	     */
	    DomAdapter.prototype.querySelector = function (el, selector) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} selector
	     * @return {?}
	     */
	    DomAdapter.prototype.querySelectorAll = function (el, selector) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} evt
	     * @param {?} listener
	     * @return {?}
	     */
	    DomAdapter.prototype.on = function (el, evt, listener) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} evt
	     * @param {?} listener
	     * @return {?}
	     */
	    DomAdapter.prototype.onAndCancel = function (el, evt, listener) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} evt
	     * @return {?}
	     */
	    DomAdapter.prototype.dispatchEvent = function (el, evt) { };
	    /**
	     * @abstract
	     * @param {?} eventType
	     * @return {?}
	     */
	    DomAdapter.prototype.createMouseEvent = function (eventType) { };
	    /**
	     * @abstract
	     * @param {?} eventType
	     * @return {?}
	     */
	    DomAdapter.prototype.createEvent = function (eventType) { };
	    /**
	     * @abstract
	     * @param {?} evt
	     * @return {?}
	     */
	    DomAdapter.prototype.preventDefault = function (evt) { };
	    /**
	     * @abstract
	     * @param {?} evt
	     * @return {?}
	     */
	    DomAdapter.prototype.isPrevented = function (evt) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getInnerHTML = function (el) { };
	    /**
	     * Returns content if el is a <template> element, null otherwise.
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getTemplateContent = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getOuterHTML = function (el) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.nodeName = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.nodeValue = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.type = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.content = function (node) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.firstChild = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.nextSibling = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.parentElement = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.childNodes = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.childNodesAsList = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.clearNodes = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.appendChild = function (el, node) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.removeChild = function (el, node) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} newNode
	     * @param {?} oldNode
	     * @return {?}
	     */
	    DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.remove = function (el) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} ref
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.insertBefore = function (parent, ref, node) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} ref
	     * @param {?} nodes
	     * @return {?}
	     */
	    DomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} el
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.insertAfter = function (parent, el, node) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setInnerHTML = function (el, value) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getText = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setText = function (el, value) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getValue = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setValue = function (el, value) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getChecked = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setChecked = function (el, value) { };
	    /**
	     * @abstract
	     * @param {?} text
	     * @return {?}
	     */
	    DomAdapter.prototype.createComment = function (text) { };
	    /**
	     * @abstract
	     * @param {?} html
	     * @return {?}
	     */
	    DomAdapter.prototype.createTemplate = function (html) { };
	    /**
	     * @abstract
	     * @param {?} tagName
	     * @param {?=} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.createElement = function (tagName, doc) { };
	    /**
	     * @abstract
	     * @param {?} ns
	     * @param {?} tagName
	     * @param {?=} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { };
	    /**
	     * @abstract
	     * @param {?} text
	     * @param {?=} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.createTextNode = function (text, doc) { };
	    /**
	     * @abstract
	     * @param {?} attrName
	     * @param {?} attrValue
	     * @param {?=} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { };
	    /**
	     * @abstract
	     * @param {?} css
	     * @param {?=} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.createStyleElement = function (css, doc) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.createShadowRoot = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getShadowRoot = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getHost = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getDistributedNodes = function (el) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.clone /*<T extends Node>*/ = function (node) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.getElementsByClassName = function (element, name) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.getElementsByTagName = function (element, name) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @return {?}
	     */
	    DomAdapter.prototype.classList = function (element) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    DomAdapter.prototype.addClass = function (element, className) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    DomAdapter.prototype.removeClass = function (element, className) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    DomAdapter.prototype.hasClass = function (element, className) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} styleName
	     * @param {?} styleValue
	     * @return {?}
	     */
	    DomAdapter.prototype.setStyle = function (element, styleName, styleValue) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} styleName
	     * @return {?}
	     */
	    DomAdapter.prototype.removeStyle = function (element, styleName) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} styleName
	     * @return {?}
	     */
	    DomAdapter.prototype.getStyle = function (element, styleName) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} styleName
	     * @param {?=} styleValue
	     * @return {?}
	     */
	    DomAdapter.prototype.hasStyle = function (element, styleName, styleValue) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @return {?}
	     */
	    DomAdapter.prototype.tagName = function (element) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @return {?}
	     */
	    DomAdapter.prototype.attributeMap = function (element) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.hasAttribute = function (element, attribute) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.getAttribute = function (element, attribute) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.getAttributeNS = function (element, ns, attribute) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setAttribute = function (element, name, value) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setAttributeNS = function (element, ns, name, value) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.removeAttribute = function (element, attribute) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.removeAttributeNS = function (element, ns, attribute) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.templateAwareRoot = function (el) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.createHtmlDocument = function () { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getBoundingClientRect = function (el) { };
	    /**
	     * @abstract
	     * @param {?} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.getTitle = function (doc) { };
	    /**
	     * @abstract
	     * @param {?} doc
	     * @param {?} newTitle
	     * @return {?}
	     */
	    DomAdapter.prototype.setTitle = function (doc, newTitle) { };
	    /**
	     * @abstract
	     * @param {?} n
	     * @param {?} selector
	     * @return {?}
	     */
	    DomAdapter.prototype.elementMatches = function (n, selector) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.isTemplateElement = function (el) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.isTextNode = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.isCommentNode = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.isElementNode = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.hasShadowRoot = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.isShadowRoot = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.importIntoDoc /*<T extends Node>*/ = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.adoptNode /*<T extends Node>*/ = function (node) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @return {?}
	     */
	    DomAdapter.prototype.getHref = function (element) { };
	    /**
	     * @abstract
	     * @param {?} event
	     * @return {?}
	     */
	    DomAdapter.prototype.getEventKey = function (event) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} baseUrl
	     * @param {?} href
	     * @return {?}
	     */
	    DomAdapter.prototype.resolveAndSetHref = function (element, baseUrl, href) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.supportsDOMEvents = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.supportsNativeShadowDOM = function () { };
	    /**
	     * @abstract
	     * @param {?} doc
	     * @param {?} target
	     * @return {?}
	     */
	    DomAdapter.prototype.getGlobalEventTarget = function (doc, target) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.getHistory = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.getLocation = function () { };
	    /**
	     * @abstract
	     * @param {?} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.getBaseHref = function (doc) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.resetBaseElement = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.getUserAgent = function () { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setData = function (element, name, value) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @return {?}
	     */
	    DomAdapter.prototype.getComputedStyle = function (element) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.getData = function (element, name) { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setGlobalVar = function (name, value) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.supportsWebAnimation = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.performanceNow = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.getAnimationPrefix = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.getTransitionEnd = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.supportsAnimation = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.supportsCookies = function () { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.getCookie = function (name) { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setCookie = function (name, value) { };
	    return DomAdapter;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Provides DOM operations in any browser environment.
	 *
	 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
	 * can introduce XSS risks.
	 * @abstract
	 */
	var GenericBrowserDomAdapter = (function (_super) {
	    __extends(GenericBrowserDomAdapter, _super);
	    function GenericBrowserDomAdapter() {
	        var _this = _super.call(this) || this;
	        _this._animationPrefix = null;
	        _this._transitionEnd = null;
	        try {
	            var element_1 = _this.createElement('div', document);
	            if (_this.getStyle(element_1, 'animationName') != null) {
	                _this._animationPrefix = '';
	            }
	            else {
	                var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
	                for (var i = 0; i < domPrefixes.length; i++) {
	                    if (_this.getStyle(element_1, domPrefixes[i] + 'AnimationName') != null) {
	                        _this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
	                        break;
	                    }
	                }
	            }
	            var transEndEventNames_1 = {
	                WebkitTransition: 'webkitTransitionEnd',
	                MozTransition: 'transitionend',
	                OTransition: 'oTransitionEnd otransitionend',
	                transition: 'transitionend'
	            };
	            Object.keys(transEndEventNames_1).forEach(function (key) {
	                if (_this.getStyle(element_1, key) != null) {
	                    _this._transitionEnd = transEndEventNames_1[key];
	                }
	            });
	        }
	        catch (e) {
	            _this._animationPrefix = null;
	            _this._transitionEnd = null;
	        }
	        return _this;
	    }
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return ((el)).getDistributedNodes(); };
	    /**
	     * @param {?} el
	     * @param {?} baseUrl
	     * @param {?} href
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
	        el.href = href == null ? baseUrl : baseUrl + '/../' + href;
	    };
	    /**
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
	    /**
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
	        return typeof ((document.body)).createShadowRoot === 'function';
	    };
	    /**
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };
	    /**
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };
	    /**
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
	        return this._animationPrefix != null && this._transitionEnd != null;
	    };
	    return GenericBrowserDomAdapter;
	}(DomAdapter));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _attrToPropMap = {
	    'class': 'className',
	    'innerHtml': 'innerHTML',
	    'readonly': 'readOnly',
	    'tabindex': 'tabIndex',
	};
	var DOM_KEY_LOCATION_NUMPAD = 3;
	// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
	var _keyMap = {
	    // The following values are here for cross-browser compatibility and to match the W3C standard
	    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
	    '\b': 'Backspace',
	    '\t': 'Tab',
	    '\x7F': 'Delete',
	    '\x1B': 'Escape',
	    'Del': 'Delete',
	    'Esc': 'Escape',
	    'Left': 'ArrowLeft',
	    'Right': 'ArrowRight',
	    'Up': 'ArrowUp',
	    'Down': 'ArrowDown',
	    'Menu': 'ContextMenu',
	    'Scroll': 'ScrollLock',
	    'Win': 'OS'
	};
	// There is a bug in Chrome for numeric keypad keys:
	// https://code.google.com/p/chromium/issues/detail?id=155654
	// 1, 2, 3 ... are reported as A, B, C ...
	var _chromeNumKeyPadMap = {
	    'A': '1',
	    'B': '2',
	    'C': '3',
	    'D': '4',
	    'E': '5',
	    'F': '6',
	    'G': '7',
	    'H': '8',
	    'I': '9',
	    'J': '*',
	    'K': '+',
	    'M': '-',
	    'N': '.',
	    'O': '/',
	    '\x60': '0',
	    '\x90': 'NumLock'
	};
	var nodeContains;
	if (_angular_core.ɵglobal['Node']) {
	    nodeContains = _angular_core.ɵglobal['Node'].prototype.contains || function (node) {
	        return !!(this.compareDocumentPosition(node) & 16);
	    };
	}
	var BrowserDomAdapter = (function (_super) {
	    __extends(BrowserDomAdapter, _super);
	    function BrowserDomAdapter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} templateHtml
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setProperty = function (el, name, value) { ((el))[name] = value; };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getProperty = function (el, name) { return ((el))[name]; };
	    /**
	     * @param {?} el
	     * @param {?} methodName
	     * @param {?} args
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.invoke = function (el, methodName, args) { ((el))[methodName].apply(((el)), args); };
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.logError = function (error) {
	        if (window.console) {
	            if (console.error) {
	                console.error(error);
	            }
	            else {
	                console.log(error);
	            }
	        }
	    };
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.log = function (error) {
	        if (window.console) {
	            window.console.log && window.console.log(error);
	        }
	    };
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.logGroup = function (error) {
	        if (window.console) {
	            window.console.group && window.console.group(error);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.logGroupEnd = function () {
	        if (window.console) {
	            window.console.groupEnd && window.console.groupEnd();
	        }
	    };
	    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
	        /**
	         * @return {?}
	         */
	        get: function () { return _attrToPropMap; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} nodeA
	     * @param {?} nodeB
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.contains = function (nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); };
	    /**
	     * @param {?} el
	     * @param {?} selector
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };
	    /**
	     * @param {?} el
	     * @param {?} selector
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
	    /**
	     * @param {?} el
	     * @param {?} evt
	     * @param {?} listener
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
	    /**
	     * @param {?} el
	     * @param {?} evt
	     * @param {?} listener
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
	        el.addEventListener(evt, listener, false);
	        // Needed to follow Dart's subscription semantic, until fix of
	        // https://code.google.com/p/dart/issues/detail?id=17406
	        return function () { el.removeEventListener(evt, listener, false); };
	    };
	    /**
	     * @param {?} el
	     * @param {?} evt
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
	    /**
	     * @param {?} eventType
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
	        var /** @type {?} */ evt = document.createEvent('MouseEvent');
	        evt.initEvent(eventType, true, true);
	        return evt;
	    };
	    /**
	     * @param {?} eventType
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createEvent = function (eventType) {
	        var /** @type {?} */ evt = document.createEvent('Event');
	        evt.initEvent(eventType, true, true);
	        return evt;
	    };
	    /**
	     * @param {?} evt
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.preventDefault = function (evt) {
	        evt.preventDefault();
	        evt.returnValue = false;
	    };
	    /**
	     * @param {?} evt
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isPrevented = function (evt) {
	        return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getTemplateContent = function (el) {
	        return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.type = function (node) { return node.type; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.content = function (node) {
	        if (this.hasProperty(node, 'content')) {
	            return ((node)).content;
	        }
	        else {
	            return node;
	        }
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.childNodesAsList = function (el) {
	        var /** @type {?} */ childNodes = el.childNodes;
	        var /** @type {?} */ res = new Array(childNodes.length);
	        for (var /** @type {?} */ i = 0; i < childNodes.length; i++) {
	            res[i] = childNodes[i];
	        }
	        return res;
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.clearNodes = function (el) {
	        while (el.firstChild) {
	            el.removeChild(el.firstChild);
	        }
	    };
	    /**
	     * @param {?} el
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
	    /**
	     * @param {?} el
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
	    /**
	     * @param {?} el
	     * @param {?} newChild
	     * @param {?} oldChild
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.remove = function (node) {
	        if (node.parentNode) {
	            node.parentNode.removeChild(node);
	        }
	        return node;
	    };
	    /**
	     * @param {?} parent
	     * @param {?} ref
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.insertBefore = function (parent, ref, node) { parent.insertBefore(node, ref); };
	    /**
	     * @param {?} parent
	     * @param {?} ref
	     * @param {?} nodes
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) {
	        nodes.forEach(function (n) { return parent.insertBefore(n, ref); });
	    };
	    /**
	     * @param {?} parent
	     * @param {?} ref
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.insertAfter = function (parent, ref, node) { parent.insertBefore(node, ref.nextSibling); };
	    /**
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
	    /**
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
	    /**
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
	    /**
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
	    /**
	     * @param {?} text
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
	    /**
	     * @param {?} html
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createTemplate = function (html) {
	        var /** @type {?} */ t = document.createElement('template');
	        t.innerHTML = html;
	        return t;
	    };
	    /**
	     * @param {?} tagName
	     * @param {?=} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createElement(tagName);
	    };
	    /**
	     * @param {?} ns
	     * @param {?} tagName
	     * @param {?=} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createElementNS(ns, tagName);
	    };
	    /**
	     * @param {?} text
	     * @param {?=} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createTextNode(text);
	    };
	    /**
	     * @param {?} attrName
	     * @param {?} attrValue
	     * @param {?=} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	        if (doc === void 0) { doc = document; }
	        var /** @type {?} */ el = (doc.createElement('SCRIPT'));
	        el.setAttribute(attrName, attrValue);
	        return el;
	    };
	    /**
	     * @param {?} css
	     * @param {?=} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
	        if (doc === void 0) { doc = document; }
	        var /** @type {?} */ style = (doc.createElement('style'));
	        this.appendChild(style, this.createTextNode(css));
	        return style;
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createShadowRoot = function (el) { return ((el)).createShadowRoot(); };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getShadowRoot = function (el) { return ((el)).shadowRoot; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getHost = function (el) { return ((el)).host; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
	        return element.getElementsByClassName(name);
	    };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
	        return element.getElementsByTagName(name);
	    };
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
	    /**
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };
	    /**
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };
	    /**
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasClass = function (element, className) {
	        return element.classList.contains(className);
	    };
	    /**
	     * @param {?} element
	     * @param {?} styleName
	     * @param {?} styleValue
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
	        element.style[styleName] = styleValue;
	    };
	    /**
	     * @param {?} element
	     * @param {?} stylename
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
	        // IE requires '' instead of null
	        // see https://github.com/angular/angular/issues/7916
	        element.style[stylename] = '';
	    };
	    /**
	     * @param {?} element
	     * @param {?} stylename
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
	    /**
	     * @param {?} element
	     * @param {?} styleName
	     * @param {?=} styleValue
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
	        if (styleValue === void 0) { styleValue = null; }
	        var /** @type {?} */ value = this.getStyle(element, styleName) || '';
	        return styleValue ? value == styleValue : value.length > 0;
	    };
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.attributeMap = function (element) {
	        var /** @type {?} */ res = new Map();
	        var /** @type {?} */ elAttrs = element.attributes;
	        for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {
	            var /** @type {?} */ attrib = elAttrs[i];
	            res.set(attrib.name, attrib.value);
	        }
	        return res;
	    };
	    /**
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
	        return element.hasAttribute(attribute);
	    };
	    /**
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} attribute
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {
	        return element.hasAttributeNS(ns, attribute);
	    };
	    /**
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
	        return element.getAttribute(attribute);
	    };
	    /**
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {
	        return element.getAttributeNS(ns, name);
	    };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
	    /**
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
	        element.setAttributeNS(ns, name, value);
	    };
	    /**
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
	    /**
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {
	        element.removeAttributeNS(ns, name);
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createHtmlDocument = function () {
	        return document.implementation.createHTMLDocument('fakeTitle');
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
	        try {
	            return el.getBoundingClientRect();
	        }
	        catch (e) {
	            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
	        }
	    };
	    /**
	     * @param {?} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getTitle = function (doc) { return document.title; };
	    /**
	     * @param {?} doc
	     * @param {?} newTitle
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setTitle = function (doc, newTitle) { document.title = newTitle || ''; };
	    /**
	     * @param {?} n
	     * @param {?} selector
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
	        if (n instanceof HTMLElement) {
	            return n.matches && n.matches(selector) ||
	                n.msMatchesSelector && n.msMatchesSelector(selector) ||
	                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
	        }
	        return false;
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isTemplateElement = function (el) {
	        return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
	        return node.shadowRoot != null && node instanceof HTMLElement;
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getHref = function (el) { return ((el)).href; };
	    /**
	     * @param {?} event
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getEventKey = function (event) {
	        var /** @type {?} */ key = event.key;
	        if (key == null) {
	            key = event.keyIdentifier;
	            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
	            // Safari cf
	            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
	            if (key == null) {
	                return 'Unidentified';
	            }
	            if (key.startsWith('U+')) {
	                key = String.fromCharCode(parseInt(key.substring(2), 16));
	                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
	                    // There is a bug in Chrome for numeric keypad keys:
	                    // https://code.google.com/p/chromium/issues/detail?id=155654
	                    // 1, 2, 3 ... are reported as A, B, C ...
	                    key = ((_chromeNumKeyPadMap))[key];
	                }
	            }
	        }
	        return _keyMap[key] || key;
	    };
	    /**
	     * @param {?} doc
	     * @param {?} target
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getGlobalEventTarget = function (doc, target) {
	        if (target === 'window') {
	            return window;
	        }
	        if (target === 'document') {
	            return document;
	        }
	        if (target === 'body') {
	            return document.body;
	        }
	    };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
	    /**
	     * @param {?} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getBaseHref = function (doc) {
	        var /** @type {?} */ href = getBaseElementHref();
	        return href == null ? null : relativePath(href);
	    };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setData = function (element, name, value) {
	        this.setAttribute(element, 'data-' + name, value);
	    };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getData = function (element, name) {
	        return this.getAttribute(element, 'data-' + name);
	    };
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
	    /**
	     * @param {?} path
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { setValueOnPath(_angular_core.ɵglobal, path, value); };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.supportsWebAnimation = function () {
	        return typeof ((Element)).prototype['animate'] === 'function';
	    };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.performanceNow = function () {
	        // performance.now() is not available in all browsers, see
	        // http://caniuse.com/#search=performance.now
	        return window.performance && window.performance.now ? window.performance.now() :
	            new Date().getTime();
	    };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.supportsCookies = function () { return true; };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setCookie = function (name, value) {
	        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does
	        // not clear other cookies.
	        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
	    };
	    return BrowserDomAdapter;
	}(GenericBrowserDomAdapter));
	var baseElement = null;
	/**
	 * @return {?}
	 */
	function getBaseElementHref() {
	    if (!baseElement) {
	        baseElement = document.querySelector('base');
	        if (!baseElement) {
	            return null;
	        }
	    }
	    return baseElement.getAttribute('href');
	}
	// based on urlUtils.js in AngularJS 1
	var urlParsingNode;
	/**
	 * @param {?} url
	 * @return {?}
	 */
	function relativePath(url) {
	    if (!urlParsingNode) {
	        urlParsingNode = document.createElement('a');
	    }
	    urlParsingNode.setAttribute('href', url);
	    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
	        '/' + urlParsingNode.pathname;
	}
	/**
	 * @param {?} cookieStr
	 * @param {?} name
	 * @return {?}
	 */
	function parseCookieValue(cookieStr, name) {
	    name = encodeURIComponent(name);
	    for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
	        var cookie = _a[_i];
	        var /** @type {?} */ eqIndex = cookie.indexOf('=');
	        var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1];
	        if (cookieName.trim() === name) {
	            return decodeURIComponent(cookieValue);
	        }
	    }
	    return null;
	}
	/**
	 * @param {?} global
	 * @param {?} path
	 * @param {?} value
	 * @return {?}
	 */
	function setValueOnPath(global, path, value) {
	    var /** @type {?} */ parts = path.split('.');
	    var /** @type {?} */ obj = global;
	    while (parts.length > 1) {
	        var /** @type {?} */ name = parts.shift();
	        if (obj.hasOwnProperty(name) && obj[name] != null) {
	            obj = obj[name];
	        }
	        else {
	            obj = obj[name] = {};
	        }
	    }
	    if (obj === undefined || obj === null) {
	        obj = {};
	    }
	    obj[parts.shift()] = value;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
	 *
	 * Note: Document might not be available in the Application Context when Application and Rendering
	 * Contexts are not the same (e.g. when running the application into a Web Worker).
	 *
	 * \@stable
	 */
	var DOCUMENT = new _angular_core.InjectionToken('DocumentToken');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 * @return {?}
	 */
	function supportsState() {
	    return !!window.history.pushState;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
	 * This class should not be used directly by an application developer. Instead, use
	 * {\@link Location}.
	 */
	var BrowserPlatformLocation = (function (_super) {
	    __extends(BrowserPlatformLocation, _super);
	    /**
	     * @param {?} _doc
	     */
	    function BrowserPlatformLocation(_doc) {
	        var _this = _super.call(this) || this;
	        _this._doc = _doc;
	        _this._init();
	        return _this;
	    }
	    /**
	     * \@internal
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype._init = function () {
	        this._location = getDOM().getLocation();
	        this._history = getDOM().getHistory();
	    };
	    Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._location; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref(this._doc); };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.onPopState = function (fn) {
	        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.onHashChange = function (fn) {
	        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);
	    };
	    Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._location.pathname; },
	        /**
	         * @param {?} newPath
	         * @return {?}
	         */
	        set: function (newPath) { this._location.pathname = newPath; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._location.search; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._location.hash; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
	        if (supportsState()) {
	            this._history.pushState(state, title, url);
	        }
	        else {
	            this._location.hash = url;
	        }
	    };
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
	        if (supportsState()) {
	            this._history.replaceState(state, title, url);
	        }
	        else {
	            this._location.hash = url;
	        }
	    };
	    /**
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };
	    /**
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.back = function () { this._history.back(); };
	    return BrowserPlatformLocation;
	}(_angular_common.PlatformLocation));
	BrowserPlatformLocation.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	BrowserPlatformLocation.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A service that can be used to get and add meta tags.
	 *
	 * \@experimental
	 */
	var Meta = (function () {
	    /**
	     * @param {?} _doc
	     */
	    function Meta(_doc) {
	        this._doc = _doc;
	        this._dom = getDOM();
	    }
	    /**
	     * @param {?} tag
	     * @param {?=} forceCreation
	     * @return {?}
	     */
	    Meta.prototype.addTag = function (tag, forceCreation) {
	        if (forceCreation === void 0) { forceCreation = false; }
	        if (!tag)
	            return null;
	        return this._getOrCreateElement(tag, forceCreation);
	    };
	    /**
	     * @param {?} tags
	     * @param {?=} forceCreation
	     * @return {?}
	     */
	    Meta.prototype.addTags = function (tags, forceCreation) {
	        var _this = this;
	        if (forceCreation === void 0) { forceCreation = false; }
	        if (!tags)
	            return [];
	        return tags.reduce(function (result, tag) {
	            if (tag) {
	                result.push(_this._getOrCreateElement(tag, forceCreation));
	            }
	            return result;
	        }, []);
	    };
	    /**
	     * @param {?} attrSelector
	     * @return {?}
	     */
	    Meta.prototype.getTag = function (attrSelector) {
	        if (!attrSelector)
	            return null;
	        return this._dom.querySelector(this._doc, "meta[" + attrSelector + "]");
	    };
	    /**
	     * @param {?} attrSelector
	     * @return {?}
	     */
	    Meta.prototype.getTags = function (attrSelector) {
	        if (!attrSelector)
	            return [];
	        var /** @type {?} */ list /*NodeList*/ = this._dom.querySelectorAll(this._doc, "meta[" + attrSelector + "]");
	        return list ? [].slice.call(list) : [];
	    };
	    /**
	     * @param {?} tag
	     * @param {?=} selector
	     * @return {?}
	     */
	    Meta.prototype.updateTag = function (tag, selector) {
	        if (!tag)
	            return null;
	        selector = selector || this._parseSelector(tag);
	        var /** @type {?} */ meta = this.getTag(selector);
	        if (meta) {
	            return this._setMetaElementAttributes(tag, meta);
	        }
	        return this._getOrCreateElement(tag, true);
	    };
	    /**
	     * @param {?} attrSelector
	     * @return {?}
	     */
	    Meta.prototype.removeTag = function (attrSelector) { this.removeTagElement(this.getTag(attrSelector)); };
	    /**
	     * @param {?} meta
	     * @return {?}
	     */
	    Meta.prototype.removeTagElement = function (meta) {
	        if (meta) {
	            this._dom.remove(meta);
	        }
	    };
	    /**
	     * @param {?} meta
	     * @param {?=} forceCreation
	     * @return {?}
	     */
	    Meta.prototype._getOrCreateElement = function (meta, forceCreation) {
	        if (forceCreation === void 0) { forceCreation = false; }
	        if (!forceCreation) {
	            var /** @type {?} */ selector = this._parseSelector(meta);
	            var /** @type {?} */ elem = this.getTag(selector);
	            // It's allowed to have multiple elements with the same name so it's not enough to
	            // just check that element with the same name already present on the page. We also need to
	            // check if element has tag attributes
	            if (elem && this._containsAttributes(meta, elem))
	                return elem;
	        }
	        var /** @type {?} */ element = (this._dom.createElement('meta'));
	        this._setMetaElementAttributes(meta, element);
	        var /** @type {?} */ head = this._dom.getElementsByTagName(this._doc, 'head')[0];
	        this._dom.appendChild(head, element);
	        return element;
	    };
	    /**
	     * @param {?} tag
	     * @param {?} el
	     * @return {?}
	     */
	    Meta.prototype._setMetaElementAttributes = function (tag, el) {
	        var _this = this;
	        Object.keys(tag).forEach(function (prop) { return _this._dom.setAttribute(el, prop, tag[prop]); });
	        return el;
	    };
	    /**
	     * @param {?} tag
	     * @return {?}
	     */
	    Meta.prototype._parseSelector = function (tag) {
	        var /** @type {?} */ attr = tag.name ? 'name' : 'property';
	        return attr + "=\"" + tag[attr] + "\"";
	    };
	    /**
	     * @param {?} tag
	     * @param {?} elem
	     * @return {?}
	     */
	    Meta.prototype._containsAttributes = function (tag, elem) {
	        var _this = this;
	        return Object.keys(tag).every(function (key) { return _this._dom.getAttribute(elem, key) === tag[key]; });
	    };
	    return Meta;
	}());
	Meta.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	Meta.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An id that identifies a particular application being bootstrapped, that should
	 * match across the client/server boundary.
	 */
	var TRANSITION_ID = new _angular_core.InjectionToken('TRANSITION_ID');
	/**
	 * @param {?} transitionId
	 * @param {?} document
	 * @return {?}
	 */
	function bootstrapListenerFactory(transitionId, document) {
	    var /** @type {?} */ factory = function () {
	        var /** @type {?} */ dom = getDOM();
	        var /** @type {?} */ styles = Array.prototype.slice.apply(dom.querySelectorAll(document, "style[ng-transition]"));
	        styles.filter(function (el) { return dom.getAttribute(el, 'ng-transition') === transitionId; })
	            .forEach(function (el) { return dom.remove(el); });
	    };
	    return factory;
	}
	var SERVER_TRANSITION_PROVIDERS = [
	    {
	        provide: _angular_core.APP_INITIALIZER,
	        useFactory: bootstrapListenerFactory,
	        deps: [TRANSITION_ID, DOCUMENT],
	        multi: true
	    },
	];
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var BrowserGetTestability = (function () {
	    function BrowserGetTestability() {
	    }
	    /**
	     * @return {?}
	     */
	    BrowserGetTestability.init = function () { _angular_core.setTestabilityGetter(new BrowserGetTestability()); };
	    /**
	     * @param {?} registry
	     * @return {?}
	     */
	    BrowserGetTestability.prototype.addToWindow = function (registry) {
	        _angular_core.ɵglobal['getAngularTestability'] = function (elem, findInAncestors) {
	            if (findInAncestors === void 0) { findInAncestors = true; }
	            var /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);
	            if (testability == null) {
	                throw new Error('Could not find testability for element.');
	            }
	            return testability;
	        };
	        _angular_core.ɵglobal['getAllAngularTestabilities'] = function () { return registry.getAllTestabilities(); };
	        _angular_core.ɵglobal['getAllAngularRootElements'] = function () { return registry.getAllRootElements(); };
	        var /** @type {?} */ whenAllStable = function (callback /** TODO #9100 */) {
	            var /** @type {?} */ testabilities = _angular_core.ɵglobal['getAllAngularTestabilities']();
	            var /** @type {?} */ count = testabilities.length;
	            var /** @type {?} */ didWork = false;
	            var /** @type {?} */ decrement = function (didWork_ /** TODO #9100 */) {
	                didWork = didWork || didWork_;
	                count--;
	                if (count == 0) {
	                    callback(didWork);
	                }
	            };
	            testabilities.forEach(function (testability /** TODO #9100 */) {
	                testability.whenStable(decrement);
	            });
	        };
	        if (!_angular_core.ɵglobal['frameworkStabilizers']) {
	            _angular_core.ɵglobal['frameworkStabilizers'] = [];
	        }
	        _angular_core.ɵglobal['frameworkStabilizers'].push(whenAllStable);
	    };
	    /**
	     * @param {?} registry
	     * @param {?} elem
	     * @param {?} findInAncestors
	     * @return {?}
	     */
	    BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	        if (elem == null) {
	            return null;
	        }
	        var /** @type {?} */ t = registry.getTestability(elem);
	        if (t != null) {
	            return t;
	        }
	        else if (!findInAncestors) {
	            return null;
	        }
	        if (getDOM().isShadowRoot(elem)) {
	            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
	        }
	        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
	    };
	    return BrowserGetTestability;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A service that can be used to get and set the title of a current HTML document.
	 *
	 * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)
	 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
	 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
	 * title value.
	 *
	 * \@experimental
	 */
	var Title = (function () {
	    /**
	     * @param {?} _doc
	     */
	    function Title(_doc) {
	        this._doc = _doc;
	    }
	    /**
	     * Get the title of the current HTML document.
	     * @return {?}
	     */
	    Title.prototype.getTitle = function () { return getDOM().getTitle(this._doc); };
	    /**
	     * Set the title of the current HTML document.
	     * @param {?} newTitle
	     * @return {?}
	     */
	    Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(this._doc, newTitle); };
	    return Title;
	}());
	Title.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	Title.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CORE_TOKENS = {
	    'ApplicationRef': _angular_core.ApplicationRef,
	    'NgZone': _angular_core.NgZone,
	};
	var INSPECT_GLOBAL_NAME = 'ng.probe';
	var CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
	/**
	 * Returns a {\@link DebugElement} for the given native DOM element, or
	 * null if the given native element does not have an Angular view associated
	 * with it.
	 * @param {?} element
	 * @return {?}
	 */
	function inspectNativeElement(element) {
	    return _angular_core.getDebugNode(element);
	}
	/**
	 * Deprecated. Use the one from '\@angular/core'.
	 * @deprecated
	 */
	var NgProbeToken$1 = (function () {
	    /**
	     * @param {?} name
	     * @param {?} token
	     */
	    function NgProbeToken$1(name, token) {
	        this.name = name;
	        this.token = token;
	    }
	    return NgProbeToken$1;
	}());
	/**
	 * @param {?} extraTokens
	 * @param {?} coreTokens
	 * @return {?}
	 */
	function _createNgProbe(extraTokens, coreTokens) {
	    var /** @type {?} */ tokens = (extraTokens || []).concat(coreTokens || []);
	    getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
	    getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, _angular_core.ɵmerge(CORE_TOKENS, _ngProbeTokensToMap(tokens || [])));
	    return function () { return inspectNativeElement; };
	}
	/**
	 * @param {?} tokens
	 * @return {?}
	 */
	function _ngProbeTokensToMap(tokens) {
	    return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
	}
	/**
	 * Providers which support debugging Angular applications (e.g. via `ng.probe`).
	 */
	var ELEMENT_PROBE_PROVIDERS = [
	    {
	        provide: _angular_core.APP_INITIALIZER,
	        useFactory: _createNgProbe,
	        deps: [
	            [NgProbeToken$1, new _angular_core.Optional()],
	            [_angular_core.NgProbeToken, new _angular_core.Optional()],
	        ],
	        multi: true,
	    },
	];
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@stable
	 */
	var EVENT_MANAGER_PLUGINS = new _angular_core.InjectionToken('EventManagerPlugins');
	/**
	 * \@stable
	 */
	var EventManager = (function () {
	    /**
	     * @param {?} plugins
	     * @param {?} _zone
	     */
	    function EventManager(plugins, _zone) {
	        var _this = this;
	        this._zone = _zone;
	        this._eventNameToPlugin = new Map();
	        plugins.forEach(function (p) { return p.manager = _this; });
	        this._plugins = plugins.slice().reverse();
	    }
	    /**
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    EventManager.prototype.addEventListener = function (element, eventName, handler) {
	        var /** @type {?} */ plugin = this._findPluginFor(eventName);
	        return plugin.addEventListener(element, eventName, handler);
	    };
	    /**
	     * @param {?} target
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	        var /** @type {?} */ plugin = this._findPluginFor(eventName);
	        return plugin.addGlobalEventListener(target, eventName, handler);
	    };
	    /**
	     * @return {?}
	     */
	    EventManager.prototype.getZone = function () { return this._zone; };
	    /**
	     * \@internal
	     * @param {?} eventName
	     * @return {?}
	     */
	    EventManager.prototype._findPluginFor = function (eventName) {
	        var /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);
	        if (plugin) {
	            return plugin;
	        }
	        var /** @type {?} */ plugins = this._plugins;
	        for (var /** @type {?} */ i = 0; i < plugins.length; i++) {
	            var /** @type {?} */ plugin_1 = plugins[i];
	            if (plugin_1.supports(eventName)) {
	                this._eventNameToPlugin.set(eventName, plugin_1);
	                return plugin_1;
	            }
	        }
	        throw new Error("No event manager plugin found for event " + eventName);
	    };
	    return EventManager;
	}());
	EventManager.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	EventManager.ctorParameters = function () { return [
	    { type: Array, decorators: [{ type: _angular_core.Inject, args: [EVENT_MANAGER_PLUGINS,] },] },
	    { type: _angular_core.NgZone, },
	]; };
	/**
	 * @abstract
	 */
	var EventManagerPlugin = (function () {
	    /**
	     * @param {?} _doc
	     */
	    function EventManagerPlugin(_doc) {
	        this._doc = _doc;
	    }
	    /**
	     * @abstract
	     * @param {?} eventName
	     * @return {?}
	     */
	    EventManagerPlugin.prototype.supports = function (eventName) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { };
	    /**
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
	        var /** @type {?} */ target = getDOM().getGlobalEventTarget(this._doc, element);
	        if (!target) {
	            throw new Error("Unsupported event target " + target + " for event " + eventName);
	        }
	        return this.addEventListener(target, eventName, handler);
	    };
	    
	    return EventManagerPlugin;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SharedStylesHost = (function () {
	    function SharedStylesHost() {
	        /**
	         * \@internal
	         */
	        this._stylesSet = new Set();
	    }
	    /**
	     * @param {?} styles
	     * @return {?}
	     */
	    SharedStylesHost.prototype.addStyles = function (styles) {
	        var _this = this;
	        var /** @type {?} */ additions = new Set();
	        styles.forEach(function (style) {
	            if (!_this._stylesSet.has(style)) {
	                _this._stylesSet.add(style);
	                additions.add(style);
	            }
	        });
	        this.onStylesAdded(additions);
	    };
	    /**
	     * @param {?} additions
	     * @return {?}
	     */
	    SharedStylesHost.prototype.onStylesAdded = function (additions) { };
	    /**
	     * @return {?}
	     */
	    SharedStylesHost.prototype.getAllStyles = function () { return Array.from(this._stylesSet); };
	    return SharedStylesHost;
	}());
	SharedStylesHost.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	SharedStylesHost.ctorParameters = function () { return []; };
	var DomSharedStylesHost = (function (_super) {
	    __extends(DomSharedStylesHost, _super);
	    /**
	     * @param {?} _doc
	     */
	    function DomSharedStylesHost(_doc) {
	        var _this = _super.call(this) || this;
	        _this._doc = _doc;
	        _this._hostNodes = new Set();
	        _this._styleNodes = new Set();
	        _this._hostNodes.add(_doc.head);
	        return _this;
	    }
	    /**
	     * @param {?} styles
	     * @param {?} host
	     * @return {?}
	     */
	    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
	        var _this = this;
	        styles.forEach(function (style) {
	            var /** @type {?} */ styleEl = _this._doc.createElement('style');
	            styleEl.textContent = style;
	            _this._styleNodes.add(host.appendChild(styleEl));
	        });
	    };
	    /**
	     * @param {?} hostNode
	     * @return {?}
	     */
	    DomSharedStylesHost.prototype.addHost = function (hostNode) {
	        this._addStylesToHost(this._stylesSet, hostNode);
	        this._hostNodes.add(hostNode);
	    };
	    /**
	     * @param {?} hostNode
	     * @return {?}
	     */
	    DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };
	    /**
	     * @param {?} additions
	     * @return {?}
	     */
	    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
	        var _this = this;
	        this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });
	    };
	    /**
	     * @return {?}
	     */
	    DomSharedStylesHost.prototype.ngOnDestroy = function () { this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); }); };
	    return DomSharedStylesHost;
	}(SharedStylesHost));
	DomSharedStylesHost.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	DomSharedStylesHost.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NAMESPACE_URIS = {
	    'svg': 'http://www.w3.org/2000/svg',
	    'xhtml': 'http://www.w3.org/1999/xhtml',
	    'xlink': 'http://www.w3.org/1999/xlink',
	    'xml': 'http://www.w3.org/XML/1998/namespace',
	    'xmlns': 'http://www.w3.org/2000/xmlns/',
	};
	var COMPONENT_REGEX = /%COMP%/g;
	var COMPONENT_VARIABLE = '%COMP%';
	var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	/**
	 * @param {?} componentShortId
	 * @return {?}
	 */
	function shimContentAttribute(componentShortId) {
	    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
	}
	/**
	 * @param {?} componentShortId
	 * @return {?}
	 */
	function shimHostAttribute(componentShortId) {
	    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
	}
	/**
	 * @param {?} compId
	 * @param {?} styles
	 * @param {?} target
	 * @return {?}
	 */
	function flattenStyles(compId, styles, target) {
	    for (var /** @type {?} */ i = 0; i < styles.length; i++) {
	        var /** @type {?} */ style = styles[i];
	        if (Array.isArray(style)) {
	            flattenStyles(compId, style, target);
	        }
	        else {
	            style = style.replace(COMPONENT_REGEX, compId);
	            target.push(style);
	        }
	    }
	    return target;
	}
	/**
	 * @param {?} eventHandler
	 * @return {?}
	 */
	function decoratePreventDefault(eventHandler) {
	    return function (event) {
	        var /** @type {?} */ allowDefaultBehavior = eventHandler(event);
	        if (allowDefaultBehavior === false) {
	            // TODO(tbosch): move preventDefault into event plugins...
	            event.preventDefault();
	            event.returnValue = false;
	        }
	    };
	}
	var DomRendererFactory2 = (function () {
	    /**
	     * @param {?} eventManager
	     * @param {?} sharedStylesHost
	     */
	    function DomRendererFactory2(eventManager, sharedStylesHost) {
	        this.eventManager = eventManager;
	        this.sharedStylesHost = sharedStylesHost;
	        this.rendererByCompId = new Map();
	        this.defaultRenderer = new DefaultDomRenderer2(eventManager);
	    }
	    
	    /**
	     * @param {?} element
	     * @param {?} type
	     * @return {?}
	     */
	    DomRendererFactory2.prototype.createRenderer = function (element, type) {
	        if (!element || !type) {
	            return this.defaultRenderer;
	        }
	        switch (type.encapsulation) {
	            case _angular_core.ViewEncapsulation.Emulated: {
	                var /** @type {?} */ renderer = this.rendererByCompId.get(type.id);
	                if (!renderer) {
	                    renderer =
	                        new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);
	                    this.rendererByCompId.set(type.id, renderer);
	                }
	                ((renderer)).applyToHost(element);
	                return renderer;
	            }
	            case _angular_core.ViewEncapsulation.Native:
	                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);
	            default: {
	                if (!this.rendererByCompId.has(type.id)) {
	                    var /** @type {?} */ styles = flattenStyles(type.id, type.styles, []);
	                    this.sharedStylesHost.addStyles(styles);
	                    this.rendererByCompId.set(type.id, this.defaultRenderer);
	                }
	                return this.defaultRenderer;
	            }
	        }
	    };
	    return DomRendererFactory2;
	}());
	DomRendererFactory2.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	DomRendererFactory2.ctorParameters = function () { return [
	    { type: EventManager, },
	    { type: DomSharedStylesHost, },
	]; };
	var DefaultDomRenderer2 = (function () {
	    /**
	     * @param {?} eventManager
	     */
	    function DefaultDomRenderer2(eventManager) {
	        this.eventManager = eventManager;
	        this.data = Object.create(null);
	    }
	    /**
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.destroy = function () { };
	    /**
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.createElement = function (name, namespace) {
	        if (namespace) {
	            return document.createElementNS(NAMESPACE_URIS[namespace], name);
	        }
	        return document.createElement(name);
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.createComment = function (value) { return document.createComment(value); };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.createText = function (value) { return document.createTextNode(value); };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.appendChild = function (parent, newChild) { parent.appendChild(newChild); };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @param {?} refChild
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
	        if (parent) {
	            parent.insertBefore(newChild, refChild);
	        }
	    };
	    /**
	     * @param {?} parent
	     * @param {?} oldChild
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.removeChild = function (parent, oldChild) {
	        if (parent) {
	            parent.removeChild(oldChild);
	        }
	    };
	    /**
	     * @param {?} selectorOrNode
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.selectRootElement = function (selectorOrNode) {
	        var /** @type {?} */ el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :
	            selectorOrNode;
	        if (!el) {
	            throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
	        }
	        el.textContent = '';
	        return el;
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.parentNode = function (node) { return node.parentNode; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.nextSibling = function (node) { return node.nextSibling; };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
	        if (namespace) {
	            name = namespace + ":" + name;
	            var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];
	            if (namespaceUri) {
	                el.setAttributeNS(namespaceUri, name, value);
	            }
	            else {
	                el.setAttribute(name, value);
	            }
	        }
	        else {
	            el.setAttribute(name, value);
	        }
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.removeAttribute = function (el, name, namespace) {
	        if (namespace) {
	            var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];
	            if (namespaceUri) {
	                el.removeAttributeNS(namespaceUri, name);
	            }
	            else {
	                el.removeAttribute(namespace + ":" + name);
	            }
	        }
	        else {
	            el.removeAttribute(name);
	        }
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.addClass = function (el, name) { el.classList.add(name); };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.removeClass = function (el, name) { el.classList.remove(name); };
	    /**
	     * @param {?} el
	     * @param {?} style
	     * @param {?} value
	     * @param {?} flags
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.setStyle = function (el, style, value, flags) {
	        if (flags & _angular_core.RendererStyleFlags2.DashCase) {
	            el.style.setProperty(style, value, !!(flags & _angular_core.RendererStyleFlags2.Important) ? 'important' : '');
	        }
	        else {
	            el.style[style] = value;
	        }
	    };
	    /**
	     * @param {?} el
	     * @param {?} style
	     * @param {?} flags
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.removeStyle = function (el, style, flags) {
	        if (flags & _angular_core.RendererStyleFlags2.DashCase) {
	            el.style.removeProperty(style);
	        }
	        else {
	            // IE requires '' instead of null
	            // see https://github.com/angular/angular/issues/7916
	            el.style[style] = '';
	        }
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.setProperty = function (el, name, value) {
	        checkNoSyntheticProp(name, 'property');
	        el[name] = value;
	    };
	    /**
	     * @param {?} node
	     * @param {?} value
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.setValue = function (node, value) { node.nodeValue = value; };
	    /**
	     * @param {?} target
	     * @param {?} event
	     * @param {?} callback
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.listen = function (target, event, callback) {
	        checkNoSyntheticProp(event, 'listener');
	        if (typeof target === 'string') {
	            return (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback)));
	        }
	        return ((this.eventManager.addEventListener(target, event, decoratePreventDefault(callback))));
	    };
	    return DefaultDomRenderer2;
	}());
	var AT_CHARCODE = '@'.charCodeAt(0);
	/**
	 * @param {?} name
	 * @param {?} nameKind
	 * @return {?}
	 */
	function checkNoSyntheticProp(name, nameKind) {
	    if (name.charCodeAt(0) === AT_CHARCODE) {
	        throw new Error("Found the synthetic " + nameKind + " " + name + ". Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.");
	    }
	}
	var EmulatedEncapsulationDomRenderer2 = (function (_super) {
	    __extends(EmulatedEncapsulationDomRenderer2, _super);
	    /**
	     * @param {?} eventManager
	     * @param {?} sharedStylesHost
	     * @param {?} component
	     */
	    function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component) {
	        var _this = _super.call(this, eventManager) || this;
	        _this.component = component;
	        var styles = flattenStyles(component.id, component.styles, []);
	        sharedStylesHost.addStyles(styles);
	        _this.contentAttr = shimContentAttribute(component.id);
	        _this.hostAttr = shimHostAttribute(component.id);
	        return _this;
	    }
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function (element) { _super.prototype.setAttribute.call(this, element, this.hostAttr, ''); };
	    /**
	     * @param {?} parent
	     * @param {?} name
	     * @return {?}
	     */
	    EmulatedEncapsulationDomRenderer2.prototype.createElement = function (parent, name) {
	        var /** @type {?} */ el = _super.prototype.createElement.call(this, parent, name);
	        _super.prototype.setAttribute.call(this, el, this.contentAttr, '');
	        return el;
	    };
	    return EmulatedEncapsulationDomRenderer2;
	}(DefaultDomRenderer2));
	var ShadowDomRenderer = (function (_super) {
	    __extends(ShadowDomRenderer, _super);
	    /**
	     * @param {?} eventManager
	     * @param {?} sharedStylesHost
	     * @param {?} hostEl
	     * @param {?} component
	     */
	    function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
	        var _this = _super.call(this, eventManager) || this;
	        _this.sharedStylesHost = sharedStylesHost;
	        _this.hostEl = hostEl;
	        _this.component = component;
	        _this.shadowRoot = hostEl.createShadowRoot();
	        _this.sharedStylesHost.addHost(_this.shadowRoot);
	        var styles = flattenStyles(component.id, component.styles, []);
	        for (var i = 0; i < styles.length; i++) {
	            var styleEl = document.createElement('style');
	            styleEl.textContent = styles[i];
	            _this.shadowRoot.appendChild(styleEl);
	        }
	        return _this;
	    }
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.nodeOrShadowRoot = function (node) { return node === this.hostEl ? this.shadowRoot : node; };
	    /**
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.destroy = function () { this.sharedStylesHost.removeHost(this.shadowRoot); };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.appendChild = function (parent, newChild) {
	        return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);
	    };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @param {?} refChild
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.insertBefore = function (parent, newChild, refChild) {
	        return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
	    };
	    /**
	     * @param {?} parent
	     * @param {?} oldChild
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.removeChild = function (parent, oldChild) {
	        return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.parentNode = function (node) {
	        return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));
	    };
	    return ShadowDomRenderer;
	}(DefaultDomRenderer2));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DomEventsPlugin = (function (_super) {
	    __extends(DomEventsPlugin, _super);
	    /**
	     * @param {?} doc
	     */
	    function DomEventsPlugin(doc) {
	        return _super.call(this, doc) || this;
	    }
	    /**
	     * @param {?} eventName
	     * @return {?}
	     */
	    DomEventsPlugin.prototype.supports = function (eventName) { return true; };
	    /**
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        element.addEventListener(eventName, /** @type {?} */ (handler), false);
	        return function () { return element.removeEventListener(eventName, /** @type {?} */ (handler), false); };
	    };
	    return DomEventsPlugin;
	}(EventManagerPlugin));
	DomEventsPlugin.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	DomEventsPlugin.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EVENT_NAMES = {
	    // pan
	    'pan': true,
	    'panstart': true,
	    'panmove': true,
	    'panend': true,
	    'pancancel': true,
	    'panleft': true,
	    'panright': true,
	    'panup': true,
	    'pandown': true,
	    // pinch
	    'pinch': true,
	    'pinchstart': true,
	    'pinchmove': true,
	    'pinchend': true,
	    'pinchcancel': true,
	    'pinchin': true,
	    'pinchout': true,
	    // press
	    'press': true,
	    'pressup': true,
	    // rotate
	    'rotate': true,
	    'rotatestart': true,
	    'rotatemove': true,
	    'rotateend': true,
	    'rotatecancel': true,
	    // swipe
	    'swipe': true,
	    'swipeleft': true,
	    'swiperight': true,
	    'swipeup': true,
	    'swipedown': true,
	    // tap
	    'tap': true,
	};
	/**
	 * A DI token that you can use to provide{\@link HammerGestureConfig} to Angular. Use it to configure
	 * Hammer gestures.
	 *
	 * \@experimental
	 */
	var HAMMER_GESTURE_CONFIG = new _angular_core.InjectionToken('HammerGestureConfig');
	/**
	 * \@experimental
	 */
	var HammerGestureConfig = (function () {
	    function HammerGestureConfig() {
	        this.events = [];
	        this.overrides = {};
	    }
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    HammerGestureConfig.prototype.buildHammer = function (element) {
	        var /** @type {?} */ mc = new Hammer(element);
	        mc.get('pinch').set({ enable: true });
	        mc.get('rotate').set({ enable: true });
	        for (var /** @type {?} */ eventName in this.overrides) {
	            mc.get(eventName).set(this.overrides[eventName]);
	        }
	        return mc;
	    };
	    return HammerGestureConfig;
	}());
	HammerGestureConfig.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	HammerGestureConfig.ctorParameters = function () { return []; };
	var HammerGesturesPlugin = (function (_super) {
	    __extends(HammerGesturesPlugin, _super);
	    /**
	     * @param {?} doc
	     * @param {?} _config
	     */
	    function HammerGesturesPlugin(doc, _config) {
	        var _this = _super.call(this, doc) || this;
	        _this._config = _config;
	        return _this;
	    }
	    /**
	     * @param {?} eventName
	     * @return {?}
	     */
	    HammerGesturesPlugin.prototype.supports = function (eventName) {
	        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
	            return false;
	        }
	        if (!((window)).Hammer) {
	            throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
	        }
	        return true;
	    };
	    /**
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var _this = this;
	        var /** @type {?} */ zone = this.manager.getZone();
	        eventName = eventName.toLowerCase();
	        return zone.runOutsideAngular(function () {
	            // Creating the manager bind events, must be done outside of angular
	            var /** @type {?} */ mc = _this._config.buildHammer(element);
	            var /** @type {?} */ callback = function (eventObj) {
	                zone.runGuarded(function () { handler(eventObj); });
	            };
	            mc.on(eventName, callback);
	            return function () { return mc.off(eventName, callback); };
	        });
	    };
	    /**
	     * @param {?} eventName
	     * @return {?}
	     */
	    HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };
	    return HammerGesturesPlugin;
	}(EventManagerPlugin));
	HammerGesturesPlugin.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	HammerGesturesPlugin.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	    { type: HammerGestureConfig, decorators: [{ type: _angular_core.Inject, args: [HAMMER_GESTURE_CONFIG,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
	var MODIFIER_KEY_GETTERS = {
	    'alt': function (event) { return event.altKey; },
	    'control': function (event) { return event.ctrlKey; },
	    'meta': function (event) { return event.metaKey; },
	    'shift': function (event) { return event.shiftKey; }
	};
	/**
	 * \@experimental
	 */
	var KeyEventsPlugin = (function (_super) {
	    __extends(KeyEventsPlugin, _super);
	    /**
	     * @param {?} doc
	     */
	    function KeyEventsPlugin(doc) {
	        return _super.call(this, doc) || this;
	    }
	    /**
	     * @param {?} eventName
	     * @return {?}
	     */
	    KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };
	    /**
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var /** @type {?} */ parsedEvent = KeyEventsPlugin.parseEventName(eventName);
	        var /** @type {?} */ outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
	        return this.manager.getZone().runOutsideAngular(function () {
	            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
	        });
	    };
	    /**
	     * @param {?} eventName
	     * @return {?}
	     */
	    KeyEventsPlugin.parseEventName = function (eventName) {
	        var /** @type {?} */ parts = eventName.toLowerCase().split('.');
	        var /** @type {?} */ domEventName = parts.shift();
	        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
	            return null;
	        }
	        var /** @type {?} */ key = KeyEventsPlugin._normalizeKey(parts.pop());
	        var /** @type {?} */ fullKey = '';
	        MODIFIER_KEYS.forEach(function (modifierName) {
	            var /** @type {?} */ index = parts.indexOf(modifierName);
	            if (index > -1) {
	                parts.splice(index, 1);
	                fullKey += modifierName + '.';
	            }
	        });
	        fullKey += key;
	        if (parts.length != 0 || key.length === 0) {
	            // returning null instead of throwing to let another plugin process the event
	            return null;
	        }
	        var /** @type {?} */ result = {};
	        result['domEventName'] = domEventName;
	        result['fullKey'] = fullKey;
	        return result;
	    };
	    /**
	     * @param {?} event
	     * @return {?}
	     */
	    KeyEventsPlugin.getEventFullKey = function (event) {
	        var /** @type {?} */ fullKey = '';
	        var /** @type {?} */ key = getDOM().getEventKey(event);
	        key = key.toLowerCase();
	        if (key === ' ') {
	            key = 'space'; // for readability
	        }
	        else if (key === '.') {
	            key = 'dot'; // because '.' is used as a separator in event names
	        }
	        MODIFIER_KEYS.forEach(function (modifierName) {
	            if (modifierName != key) {
	                var /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
	                if (modifierGetter(event)) {
	                    fullKey += modifierName + '.';
	                }
	            }
	        });
	        fullKey += key;
	        return fullKey;
	    };
	    /**
	     * @param {?} fullKey
	     * @param {?} handler
	     * @param {?} zone
	     * @return {?}
	     */
	    KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
	        return function (event /** TODO #9100 */) {
	            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
	                zone.runGuarded(function () { return handler(event); });
	            }
	        };
	    };
	    /**
	     * \@internal
	     * @param {?} keyName
	     * @return {?}
	     */
	    KeyEventsPlugin._normalizeKey = function (keyName) {
	        // TODO: switch to a Map if the mapping grows too much
	        switch (keyName) {
	            case 'esc':
	                return 'escape';
	            default:
	                return keyName;
	        }
	    };
	    return KeyEventsPlugin;
	}(EventManagerPlugin));
	KeyEventsPlugin.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	KeyEventsPlugin.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A pattern that recognizes a commonly useful subset of URLs that are safe.
	 *
	 * This regular expression matches a subset of URLs that will not cause script
	 * execution if used in URL context within a HTML document. Specifically, this
	 * regular expression matches if (comment from here on and regex copied from
	 * Soy's EscapingConventions):
	 * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
	 * (2) or no protocol.  A protocol must be followed by a colon. The below
	 *     allows that by allowing colons only after one of the characters [/?#].
	 *     A colon after a hash (#) must be in the fragment.
	 *     Otherwise, a colon after a (?) must be in a query.
	 *     Otherwise, a colon after a single solidus (/) must be in a path.
	 *     Otherwise, a colon after a double solidus (//) must be in the authority
	 *     (before port).
	 *
	 * The pattern disallows &, used in HTML entity declarations before
	 * one of the characters in [/?#]. This disallows HTML entities used in the
	 * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
	 * It also disallows HTML entities in the first path part of a relative path,
	 * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
	 * that. More importantly, it disallows masking of a colon,
	 * e.g. "javascript&#58;...".
	 *
	 * This regular expression was taken from the Closure sanitization library.
	 */
	var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
	/** A pattern that matches safe data URLs. Only matches image, video and audio types. */
	var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
	/**
	 * @param {?} url
	 * @return {?}
	 */
	function sanitizeUrl(url) {
	    url = String(url);
	    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
	        return url;
	    if (_angular_core.isDevMode()) {
	        getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
	    }
	    return 'unsafe:' + url;
	}
	/**
	 * @param {?} srcset
	 * @return {?}
	 */
	function sanitizeSrcset(srcset) {
	    srcset = String(srcset);
	    return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */
	var inertElement = null;
	/** Lazily initialized to make sure the DOM adapter gets set before use. */
	var DOM = null;
	/**
	 * Returns an HTML element that is guaranteed to not execute code when creating elements in it.
	 * @return {?}
	 */
	function getInertElement() {
	    if (inertElement)
	        return inertElement;
	    DOM = getDOM();
	    // Prefer using <template> element if supported.
	    var /** @type {?} */ templateEl = DOM.createElement('template');
	    if ('content' in templateEl)
	        return templateEl;
	    var /** @type {?} */ doc = DOM.createHtmlDocument();
	    inertElement = DOM.querySelector(doc, 'body');
	    if (inertElement == null) {
	        // usually there should be only one body element in the document, but IE doesn't have any, so we
	        // need to create one.
	        var /** @type {?} */ html = DOM.createElement('html', doc);
	        inertElement = DOM.createElement('body', doc);
	        DOM.appendChild(html, inertElement);
	        DOM.appendChild(doc, html);
	    }
	    return inertElement;
	}
	/**
	 * @param {?} tags
	 * @return {?}
	 */
	function tagSet(tags) {
	    var /** @type {?} */ res = {};
	    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
	        var t = _a[_i];
	        res[t] = true;
	    }
	    return res;
	}
	/**
	 * @param {...?} sets
	 * @return {?}
	 */
	function merge() {
	    var sets = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sets[_i] = arguments[_i];
	    }
	    var /** @type {?} */ res = {};
	    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
	        var s = sets_1[_a];
	        for (var /** @type {?} */ v in s) {
	            if (s.hasOwnProperty(v))
	                res[v] = true;
	        }
	    }
	    return res;
	}
	// Good source of info about elements and attributes
	// http://dev.w3.org/html5/spec/Overview.html#semantics
	// http://simon.html5.org/html-elements
	// Safe Void Elements - HTML5
	// http://dev.w3.org/html5/spec/Overview.html#void-elements
	var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
	// Elements that you can, intentionally, leave open (and which close themselves)
	// http://dev.w3.org/html5/spec/Overview.html#optional-tags
	var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
	var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
	var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
	// Safe Block Elements - HTML5
	var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
	    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
	    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
	// Inline Elements - HTML5
	var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
	    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
	    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
	var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
	// Attributes that have href and hence need to be sanitized
	var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
	// Attributes that have special href set hence need to be sanitized
	var SRCSET_ATTRS = tagSet('srcset');
	var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
	    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
	    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
	    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
	    'valign,value,vspace,width');
	// NB: This currently conciously doesn't support SVG. SVG sanitization has had several security
	// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
	// innerHTML is required, SVG attributes should be added here.
	// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
	// can be sanitized, but they increase security surface area without a legitimate use case, so they
	// are left out here.
	var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
	/**
	 * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
	 * attributes.
	 */
	var SanitizingHtmlSerializer = (function () {
	    function SanitizingHtmlSerializer() {
	        this.sanitizedSomething = false;
	        this.buf = [];
	    }
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
	        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
	        // However this code never accesses properties off of `document` before deleting its contents
	        // again, so it shouldn't be vulnerable to DOM clobbering.
	        var /** @type {?} */ current = el.firstChild;
	        while (current) {
	            if (DOM.isElementNode(current)) {
	                this.startElement(/** @type {?} */ (current));
	            }
	            else if (DOM.isTextNode(current)) {
	                this.chars(DOM.nodeValue(current));
	            }
	            else {
	                // Strip non-element, non-text nodes.
	                this.sanitizedSomething = true;
	            }
	            if (DOM.firstChild(current)) {
	                current = DOM.firstChild(current);
	                continue;
	            }
	            while (current) {
	                // Leaving the element. Walk up and to the right, closing tags as we go.
	                if (DOM.isElementNode(current)) {
	                    this.endElement(/** @type {?} */ (current));
	                }
	                var /** @type {?} */ next = checkClobberedElement(current, DOM.nextSibling(current));
	                if (next) {
	                    current = next;
	                    break;
	                }
	                current = checkClobberedElement(current, DOM.parentElement(current));
	            }
	        }
	        return this.buf.join('');
	    };
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    SanitizingHtmlSerializer.prototype.startElement = function (element) {
	        var _this = this;
	        var /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();
	        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
	            this.sanitizedSomething = true;
	            return;
	        }
	        this.buf.push('<');
	        this.buf.push(tagName);
	        DOM.attributeMap(element).forEach(function (value, attrName) {
	            var /** @type {?} */ lower = attrName.toLowerCase();
	            if (!VALID_ATTRS.hasOwnProperty(lower)) {
	                _this.sanitizedSomething = true;
	                return;
	            }
	            // TODO(martinprobst): Special case image URIs for data:image/...
	            if (URI_ATTRS[lower])
	                value = sanitizeUrl(value);
	            if (SRCSET_ATTRS[lower])
	                value = sanitizeSrcset(value);
	            _this.buf.push(' ');
	            _this.buf.push(attrName);
	            _this.buf.push('="');
	            _this.buf.push(encodeEntities(value));
	            _this.buf.push('"');
	        });
	        this.buf.push('>');
	    };
	    /**
	     * @param {?} current
	     * @return {?}
	     */
	    SanitizingHtmlSerializer.prototype.endElement = function (current) {
	        var /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();
	        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
	            this.buf.push('</');
	            this.buf.push(tagName);
	            this.buf.push('>');
	        }
	    };
	    /**
	     * @param {?} chars
	     * @return {?}
	     */
	    SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };
	    return SanitizingHtmlSerializer;
	}());
	/**
	 * @param {?} node
	 * @param {?} nextNode
	 * @return {?}
	 */
	function checkClobberedElement(node, nextNode) {
	    if (nextNode && DOM.contains(node, nextNode)) {
	        throw new Error("Failed to sanitize html because the element is clobbered: " + DOM.getOuterHTML(node));
	    }
	    return nextNode;
	}
	// Regular Expressions for parsing tags and attributes
	var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
	// ! to ~ is the ASCII range.
	var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
	/**
	 * Escapes all potentially dangerous characters, so that the
	 * resulting string can be safely inserted into attribute or
	 * element text.
	 * @param {?} value
	 * @return {?}
	 */
	function encodeEntities(value) {
	    return value.replace(/&/g, '&amp;')
	        .replace(SURROGATE_PAIR_REGEXP, function (match) {
	        var /** @type {?} */ hi = match.charCodeAt(0);
	        var /** @type {?} */ low = match.charCodeAt(1);
	        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
	    })
	        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })
	        .replace(/</g, '&lt;')
	        .replace(/>/g, '&gt;');
	}
	/**
	 * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
	 * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').
	 *
	 * This is undesirable since we don't want to allow any of these custom attributes. This method
	 * strips them all.
	 * @param {?} el
	 * @return {?}
	 */
	function stripCustomNsAttrs(el) {
	    DOM.attributeMap(el).forEach(function (_, attrName) {
	        if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
	            DOM.removeAttribute(el, attrName);
	        }
	    });
	    for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
	        var n = _a[_i];
	        if (DOM.isElementNode(n))
	            stripCustomNsAttrs(/** @type {?} */ (n));
	    }
	}
	/**
	 * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
	 * the DOM in a browser environment.
	 * @param {?} defaultDoc
	 * @param {?} unsafeHtmlInput
	 * @return {?}
	 */
	function sanitizeHtml(defaultDoc, unsafeHtmlInput) {
	    try {
	        var /** @type {?} */ containerEl = getInertElement();
	        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
	        var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
	        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
	        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
	        var /** @type {?} */ mXSSAttempts = 5;
	        var /** @type {?} */ parsedHtml = unsafeHtml;
	        do {
	            if (mXSSAttempts === 0) {
	                throw new Error('Failed to sanitize html because the input is unstable');
	            }
	            mXSSAttempts--;
	            unsafeHtml = parsedHtml;
	            DOM.setInnerHTML(containerEl, unsafeHtml);
	            if (defaultDoc.documentMode) {
	                // strip custom-namespaced attributes on IE<=11
	                stripCustomNsAttrs(containerEl);
	            }
	            parsedHtml = DOM.getInnerHTML(containerEl);
	        } while (unsafeHtml !== parsedHtml);
	        var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();
	        var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
	        // Clear out the body element.
	        var /** @type {?} */ parent = DOM.getTemplateContent(containerEl) || containerEl;
	        for (var _i = 0, _a = DOM.childNodesAsList(parent); _i < _a.length; _i++) {
	            var child = _a[_i];
	            DOM.removeChild(parent, child);
	        }
	        if (_angular_core.isDevMode() && sanitizer.sanitizedSomething) {
	            DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
	        }
	        return safeHtml;
	    }
	    catch (e) {
	        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
	        inertElement = null;
	        throw e;
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Regular expression for safe style values.
	 *
	 * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
	 *
	 * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
	 * font-family) and hence could allow multiple values to get injected, but that should pose no risk
	 * of XSS.
	 *
	 * The function expression checks only for XSS safety, not for CSS validity.
	 *
	 * This regular expression was taken from the Closure sanitization library, and augmented for
	 * transformation values.
	 */
	var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
	var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
	var COLOR_FNS = '(?:rgb|hsl)a?';
	var GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';
	var CSS3_FNS = '(?:calc|attr)';
	var FN_ARGS = '\\([-0-9.%, #a-zA-Z]+\\)';
	var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|" +
	    ("(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + "|" + GRADIENTS + "|" + CSS3_FNS + ")") +
	    (FN_ARGS + ")$"), 'g');
	/**
	 * Matches a `url(...)` value with an arbitrary argument as long as it does
	 * not contain parentheses.
	 *
	 * The URL value still needs to be sanitized separately.
	 *
	 * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
	 * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
	 * by observing whether scroll bars are displayed, or character ranges used by a font face
	 * definition.
	 *
	 * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
	 * binding a URL value without further cooperation from the page will cause an information leak, and
	 * if so, it is just a leak, not a full blown XSS vulnerability.
	 *
	 * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
	 * code is permissive and allows URLs that sanitize otherwise.
	 */
	var URL_RE = /^url\(([^)]+)\)$/;
	/**
	 * Checks that quotes (" and ') are properly balanced inside a string. Assumes
	 * that neither escape (\) nor any other character that could result in
	 * breaking out of a string parsing context are allowed;
	 * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
	 *
	 * This code was taken from the Closure sanitization library.
	 * @param {?} value
	 * @return {?}
	 */
	function hasBalancedQuotes(value) {
	    var /** @type {?} */ outsideSingle = true;
	    var /** @type {?} */ outsideDouble = true;
	    for (var /** @type {?} */ i = 0; i < value.length; i++) {
	        var /** @type {?} */ c = value.charAt(i);
	        if (c === '\'' && outsideDouble) {
	            outsideSingle = !outsideSingle;
	        }
	        else if (c === '"' && outsideSingle) {
	            outsideDouble = !outsideDouble;
	        }
	    }
	    return outsideSingle && outsideDouble;
	}
	/**
	 * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
	 * value) and returns a value that is safe to use in a browser environment.
	 * @param {?} value
	 * @return {?}
	 */
	function sanitizeStyle(value) {
	    value = String(value).trim(); // Make sure it's actually a string.
	    if (!value)
	        return '';
	    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
	    // reasoning behind this.
	    var /** @type {?} */ urlMatch = value.match(URL_RE);
	    if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
	        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
	        return value; // Safe style values.
	    }
	    if (_angular_core.isDevMode()) {
	        getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
	    }
	    return 'unsafe';
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
	 * values to be safe to use in the different DOM contexts.
	 *
	 * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
	 * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
	 * the website.
	 *
	 * In specific situations, it might be necessary to disable sanitization, for example if the
	 * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
	 * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
	 * methods, and then binding to that value from the template.
	 *
	 * These situations should be very rare, and extraordinary care must be taken to avoid creating a
	 * Cross Site Scripting (XSS) security bug!
	 *
	 * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
	 * close as possible to the source of the value, to make it easy to verify no security bug is
	 * created by its use.
	 *
	 * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
	 * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
	 * code. The sanitizer leaves safe values intact.
	 *
	 * \@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
	 * sanitization for the value passed in. Carefully check and audit all values and code paths going
	 * into this call. Make sure any user data is appropriately escaped for this security context.
	 * For more detail, see the [Security Guide](http://g.co/ng/security).
	 *
	 * \@stable
	 * @abstract
	 */
	var DomSanitizer = (function () {
	    function DomSanitizer() {
	    }
	    /**
	     * Sanitizes a value for use in the given SecurityContext.
	     *
	     * If value is trusted for the context, this method will unwrap the contained safe value and use
	     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example
	     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation
	     * is responsible to make sure that the value can definitely be safely used in the given context.
	     * @abstract
	     * @param {?} context
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.sanitize = function (context, value) { };
	    /**
	     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML
	     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will
	     * leave safe HTML intact, so in most situations this method should not be used.
	     *
	     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	     * security risks!
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { };
	    /**
	     * Bypass security and trust the given value to be safe style value (CSS).
	     *
	     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	     * security risks!
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { };
	    /**
	     * Bypass security and trust the given value to be safe JavaScript.
	     *
	     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	     * security risks!
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { };
	    /**
	     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used
	     * in hyperlinks or `<img src>`.
	     *
	     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	     * security risks!
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { };
	    /**
	     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may
	     * be used to load executable code from, like `<script src>`, or `<iframe src>`.
	     *
	     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	     * security risks!
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { };
	    return DomSanitizer;
	}());
	var DomSanitizerImpl = (function (_super) {
	    __extends(DomSanitizerImpl, _super);
	    /**
	     * @param {?} _doc
	     */
	    function DomSanitizerImpl(_doc) {
	        var _this = _super.call(this) || this;
	        _this._doc = _doc;
	        return _this;
	    }
	    /**
	     * @param {?} ctx
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
	        if (value == null)
	            return null;
	        switch (ctx) {
	            case _angular_core.SecurityContext.NONE:
	                return value;
	            case _angular_core.SecurityContext.HTML:
	                if (value instanceof SafeHtmlImpl)
	                    return value.changingThisBreaksApplicationSecurity;
	                this.checkNotSafeValue(value, 'HTML');
	                return sanitizeHtml(this._doc, String(value));
	            case _angular_core.SecurityContext.STYLE:
	                if (value instanceof SafeStyleImpl)
	                    return value.changingThisBreaksApplicationSecurity;
	                this.checkNotSafeValue(value, 'Style');
	                return sanitizeStyle(value);
	            case _angular_core.SecurityContext.SCRIPT:
	                if (value instanceof SafeScriptImpl)
	                    return value.changingThisBreaksApplicationSecurity;
	                this.checkNotSafeValue(value, 'Script');
	                throw new Error('unsafe value used in a script context');
	            case _angular_core.SecurityContext.URL:
	                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
	                    // Allow resource URLs in URL contexts, they are strictly more trusted.
	                    return value.changingThisBreaksApplicationSecurity;
	                }
	                this.checkNotSafeValue(value, 'URL');
	                return sanitizeUrl(String(value));
	            case _angular_core.SecurityContext.RESOURCE_URL:
	                if (value instanceof SafeResourceUrlImpl) {
	                    return value.changingThisBreaksApplicationSecurity;
	                }
	                this.checkNotSafeValue(value, 'ResourceURL');
	                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
	            default:
	                throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
	        }
	    };
	    /**
	     * @param {?} value
	     * @param {?} expectedType
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
	        if (value instanceof SafeValueImpl) {
	            throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName() + " " +
	                "(see http://g.co/ng/security#xss)");
	        }
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
	        return new SafeResourceUrlImpl(value);
	    };
	    return DomSanitizerImpl;
	}(DomSanitizer));
	DomSanitizerImpl.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	DomSanitizerImpl.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @abstract
	 */
	var SafeValueImpl = (function () {
	    /**
	     * @param {?} changingThisBreaksApplicationSecurity
	     */
	    function SafeValueImpl(changingThisBreaksApplicationSecurity) {
	        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
	        // empty
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    SafeValueImpl.prototype.getTypeName = function () { };
	    /**
	     * @return {?}
	     */
	    SafeValueImpl.prototype.toString = function () {
	        return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity +
	            " (see http://g.co/ng/security#xss)";
	    };
	    return SafeValueImpl;
	}());
	var SafeHtmlImpl = (function (_super) {
	    __extends(SafeHtmlImpl, _super);
	    function SafeHtmlImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @return {?}
	     */
	    SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };
	    return SafeHtmlImpl;
	}(SafeValueImpl));
	var SafeStyleImpl = (function (_super) {
	    __extends(SafeStyleImpl, _super);
	    function SafeStyleImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @return {?}
	     */
	    SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };
	    return SafeStyleImpl;
	}(SafeValueImpl));
	var SafeScriptImpl = (function (_super) {
	    __extends(SafeScriptImpl, _super);
	    function SafeScriptImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @return {?}
	     */
	    SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };
	    return SafeScriptImpl;
	}(SafeValueImpl));
	var SafeUrlImpl = (function (_super) {
	    __extends(SafeUrlImpl, _super);
	    function SafeUrlImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @return {?}
	     */
	    SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };
	    return SafeUrlImpl;
	}(SafeValueImpl));
	var SafeResourceUrlImpl = (function (_super) {
	    __extends(SafeResourceUrlImpl, _super);
	    function SafeResourceUrlImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @return {?}
	     */
	    SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };
	    return SafeResourceUrlImpl;
	}(SafeValueImpl));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
	    { provide: _angular_core.PLATFORM_ID, useValue: _angular_common.ɵPLATFORM_BROWSER_ID },
	    { provide: _angular_core.PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
	    { provide: _angular_common.PlatformLocation, useClass: BrowserPlatformLocation },
	    { provide: DOCUMENT, useFactory: _document, deps: [] },
	];
	/**
	 * \@security Replacing built-in sanitization providers exposes the application to XSS risks.
	 * Attacker-controlled data introduced by an unsanitized provider could expose your
	 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	 * \@experimental
	 */
	var BROWSER_SANITIZATION_PROVIDERS = [
	    { provide: _angular_core.Sanitizer, useExisting: DomSanitizer },
	    { provide: DomSanitizer, useClass: DomSanitizerImpl },
	];
	/**
	 * \@stable
	 */
	var platformBrowser = _angular_core.createPlatformFactory(_angular_core.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
	/**
	 * @return {?}
	 */
	function initDomAdapter() {
	    BrowserDomAdapter.makeCurrent();
	    BrowserGetTestability.init();
	}
	/**
	 * @return {?}
	 */
	function errorHandler() {
	    return new _angular_core.ErrorHandler();
	}
	/**
	 * @return {?}
	 */
	function _document() {
	    return document;
	}
	/**
	 * The ng module for the browser.
	 *
	 * \@stable
	 */
	var BrowserModule = (function () {
	    /**
	     * @param {?} parentModule
	     */
	    function BrowserModule(parentModule) {
	        if (parentModule) {
	            throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
	        }
	    }
	    /**
	     * Configures a browser-based application to transition from a server-rendered app, if
	     * one is present on the page. The specified parameters must include an application id,
	     * which must match between the client and server applications.
	     *
	     * \@experimental
	     * @param {?} params
	     * @return {?}
	     */
	    BrowserModule.withServerTransition = function (params) {
	        return {
	            ngModule: BrowserModule,
	            providers: [
	                { provide: _angular_core.APP_ID, useValue: params.appId },
	                { provide: TRANSITION_ID, useExisting: _angular_core.APP_ID },
	                SERVER_TRANSITION_PROVIDERS,
	            ],
	        };
	    };
	    return BrowserModule;
	}());
	BrowserModule.decorators = [
	    { type: _angular_core.NgModule, args: [{
	                providers: [
	                    BROWSER_SANITIZATION_PROVIDERS,
	                    { provide: _angular_core.ErrorHandler, useFactory: errorHandler, deps: [] },
	                    { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },
	                    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },
	                    { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },
	                    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },
	                    DomRendererFactory2,
	                    { provide: _angular_core.RendererFactory2, useExisting: DomRendererFactory2 },
	                    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
	                    DomSharedStylesHost,
	                    _angular_core.Testability,
	                    EventManager,
	                    ELEMENT_PROBE_PROVIDERS,
	                    Meta,
	                    Title,
	                ],
	                exports: [_angular_common.CommonModule, _angular_core.ApplicationModule]
	            },] },
	];
	/**
	 * @nocollapse
	 */
	BrowserModule.ctorParameters = function () { return [
	    { type: BrowserModule, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.SkipSelf },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var win = typeof window !== 'undefined' && window || {};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ChangeDetectionPerfRecord = (function () {
	    /**
	     * @param {?} msPerTick
	     * @param {?} numTicks
	     */
	    function ChangeDetectionPerfRecord(msPerTick, numTicks) {
	        this.msPerTick = msPerTick;
	        this.numTicks = numTicks;
	    }
	    return ChangeDetectionPerfRecord;
	}());
	/**
	 * Entry point for all Angular profiling-related debug tools. This object
	 * corresponds to the `ng.profiler` in the dev console.
	 */
	var AngularProfiler = (function () {
	    /**
	     * @param {?} ref
	     */
	    function AngularProfiler(ref) {
	        this.appRef = ref.injector.get(_angular_core.ApplicationRef);
	    }
	    /**
	     * Exercises change detection in a loop and then prints the average amount of
	     * time in milliseconds how long a single round of change detection takes for
	     * the current state of the UI. It runs a minimum of 5 rounds for a minimum
	     * of 500 milliseconds.
	     *
	     * Optionally, a user may pass a `config` parameter containing a map of
	     * options. Supported options are:
	     *
	     * `record` (boolean) - causes the profiler to record a CPU profile while
	     * it exercises the change detector. Example:
	     *
	     * ```
	     * ng.profiler.timeChangeDetection({record: true})
	     * ```
	     * @param {?} config
	     * @return {?}
	     */
	    AngularProfiler.prototype.timeChangeDetection = function (config) {
	        var /** @type {?} */ record = config && config['record'];
	        var /** @type {?} */ profileName = 'Change Detection';
	        // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened
	        var /** @type {?} */ isProfilerAvailable = win.console.profile != null;
	        if (record && isProfilerAvailable) {
	            win.console.profile(profileName);
	        }
	        var /** @type {?} */ start = getDOM().performanceNow();
	        var /** @type {?} */ numTicks = 0;
	        while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {
	            this.appRef.tick();
	            numTicks++;
	        }
	        var /** @type {?} */ end = getDOM().performanceNow();
	        if (record && isProfilerAvailable) {
	            // need to cast to <any> because type checker thinks there's no argument
	            // while in fact there is:
	            //
	            // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd
	            ((win.console.profileEnd))(profileName);
	        }
	        var /** @type {?} */ msPerTick = (end - start) / numTicks;
	        win.console.log("ran " + numTicks + " change detection cycles");
	        win.console.log(msPerTick.toFixed(2) + " ms per check");
	        return new ChangeDetectionPerfRecord(msPerTick, numTicks);
	    };
	    return AngularProfiler;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var PROFILER_GLOBAL_NAME = 'ng.profiler';
	/**
	 * Enabled Angular debug tools that are accessible via your browser's
	 * developer console.
	 *
	 * Usage:
	 *
	 * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
	 * 1. Type `ng.` (usually the console will show auto-complete suggestion)
	 * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
	 *    then hit Enter.
	 *
	 * \@experimental All debugging apis are currently experimental.
	 * @template T
	 * @param {?} ref
	 * @return {?}
	 */
	function enableDebugTools(ref) {
	    getDOM().setGlobalVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));
	    return ref;
	}
	/**
	 * Disables Angular tools.
	 *
	 * \@experimental All debugging apis are currently experimental.
	 * @return {?}
	 */
	function disableDebugTools() {
	    getDOM().setGlobalVar(PROFILER_GLOBAL_NAME, null);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Predicates for use with {\@link DebugElement}'s query functions.
	 *
	 * \@experimental All debugging apis are currently experimental.
	 */
	var By = (function () {
	    function By() {
	    }
	    /**
	     * Match all elements.
	     *
	     * ## Example
	     *
	     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
	     * @return {?}
	     */
	    By.all = function () { return function (debugElement) { return true; }; };
	    /**
	     * Match elements by the given CSS selector.
	     *
	     * ## Example
	     *
	     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
	     * @param {?} selector
	     * @return {?}
	     */
	    By.css = function (selector) {
	        return function (debugElement) {
	            return debugElement.nativeElement != null ?
	                getDOM().elementMatches(debugElement.nativeElement, selector) :
	                false;
	        };
	    };
	    /**
	     * Match elements that have the given directive present.
	     *
	     * ## Example
	     *
	     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
	     * @param {?} type
	     * @return {?}
	     */
	    By.directive = function (type) {
	        return function (debugElement) { return debugElement.providerTokens.indexOf(type) !== -1; };
	    };
	    return By;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * Entry point for all public APIs of the common package.
	 */
	/**
	 * \@stable
	 */
	var VERSION = new _angular_core.Version('4.0.0');

	exports.BrowserModule = BrowserModule;
	exports.platformBrowser = platformBrowser;
	exports.Meta = Meta;
	exports.Title = Title;
	exports.disableDebugTools = disableDebugTools;
	exports.enableDebugTools = enableDebugTools;
	exports.By = By;
	exports.NgProbeToken = NgProbeToken$1;
	exports.DOCUMENT = DOCUMENT;
	exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;
	exports.EventManager = EventManager;
	exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;
	exports.HammerGestureConfig = HammerGestureConfig;
	exports.DomSanitizer = DomSanitizer;
	exports.VERSION = VERSION;
	exports.ɵBROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS;
	exports.ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS = INTERNAL_BROWSER_PLATFORM_PROVIDERS;
	exports.ɵinitDomAdapter = initDomAdapter;
	exports.ɵBrowserDomAdapter = BrowserDomAdapter;
	exports.ɵsetValueOnPath = setValueOnPath;
	exports.ɵBrowserPlatformLocation = BrowserPlatformLocation;
	exports.ɵTRANSITION_ID = TRANSITION_ID;
	exports.ɵBrowserGetTestability = BrowserGetTestability;
	exports.ɵELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS;
	exports.ɵDomAdapter = DomAdapter;
	exports.ɵgetDOM = getDOM;
	exports.ɵsetRootDomAdapter = setRootDomAdapter;
	exports.ɵDomRendererFactory2 = DomRendererFactory2;
	exports.ɵNAMESPACE_URIS = NAMESPACE_URIS;
	exports.ɵflattenStyles = flattenStyles;
	exports.ɵshimContentAttribute = shimContentAttribute;
	exports.ɵshimHostAttribute = shimHostAttribute;
	exports.ɵDomEventsPlugin = DomEventsPlugin;
	exports.ɵHammerGesturesPlugin = HammerGesturesPlugin;
	exports.ɵKeyEventsPlugin = KeyEventsPlugin;
	exports.ɵDomSharedStylesHost = DomSharedStylesHost;
	exports.ɵSharedStylesHost = SharedStylesHost;
	exports.ɵb = _document;
	exports.ɵa = errorHandler;
	exports.ɵh = GenericBrowserDomAdapter;
	exports.ɵg = SERVER_TRANSITION_PROVIDERS;
	exports.ɵf = bootstrapListenerFactory;
	exports.ɵc = _createNgProbe;
	exports.ɵd = EventManagerPlugin;
	exports.ɵe = DomSanitizerImpl;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));
	//# sourceMappingURL=platform-browser.umd.js.map


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(206)) :
		typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
		(factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}),global.ng.core));
	}(this, (function (exports,_angular_core) { 'use strict';

	var __extends = (undefined && undefined.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This class should not be used directly by an application developer. Instead, use
	 * {\@link Location}.
	 *
	 * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
	 * agnostic.
	 * This means that we can have different implementation of `PlatformLocation` for the different
	 * platforms
	 * that angular supports. For example, the default `PlatformLocation` is {\@link
	 * BrowserPlatformLocation},
	 * however when you run your app in a WebWorker you use {\@link WebWorkerPlatformLocation}.
	 *
	 * The `PlatformLocation` class is used directly by all implementations of {\@link LocationStrategy}
	 * when
	 * they need to interact with the DOM apis like pushState, popState, etc...
	 *
	 * {\@link LocationStrategy} in turn is used by the {\@link Location} service which is used directly
	 * by
	 * the {\@link Router} in order to navigate between routes. Since all interactions between {\@link
	 * Router} /
	 * {\@link Location} / {\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
	 * class
	 * they are all platform independent.
	 *
	 * \@stable
	 * @abstract
	 */
	var PlatformLocation = (function () {
	    function PlatformLocation() {
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    PlatformLocation.prototype.getBaseHrefFromDOM = function () { };
	    /**
	     * @abstract
	     * @param {?} fn
	     * @return {?}
	     */
	    PlatformLocation.prototype.onPopState = function (fn) { };
	    /**
	     * @abstract
	     * @param {?} fn
	     * @return {?}
	     */
	    PlatformLocation.prototype.onHashChange = function (fn) { };
	    Object.defineProperty(PlatformLocation.prototype, "pathname", {
	        /**
	         * @return {?}
	         */
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PlatformLocation.prototype, "search", {
	        /**
	         * @return {?}
	         */
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PlatformLocation.prototype, "hash", {
	        /**
	         * @return {?}
	         */
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @abstract
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @return {?}
	     */
	    PlatformLocation.prototype.replaceState = function (state, title, url) { };
	    /**
	     * @abstract
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @return {?}
	     */
	    PlatformLocation.prototype.pushState = function (state, title, url) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    PlatformLocation.prototype.forward = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    PlatformLocation.prototype.back = function () { };
	    return PlatformLocation;
	}());
	/**
	 * \@whatItDoes indicates when a location is initialized
	 * \@experimental
	 */
	var LOCATION_INITIALIZED = new _angular_core.InjectionToken('Location Initialized');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * `LocationStrategy` is responsible for representing and reading route state
	 * from the browser's URL. Angular provides two strategies:
	 * {\@link HashLocationStrategy} and {\@link PathLocationStrategy}.
	 *
	 * This is used under the hood of the {\@link Location} service.
	 *
	 * Applications should use the {\@link Router} or {\@link Location} services to
	 * interact with application route state.
	 *
	 * For instance, {\@link HashLocationStrategy} produces URLs like
	 * `http://example.com#/foo`, and {\@link PathLocationStrategy} produces
	 * `http://example.com/foo` as an equivalent URL.
	 *
	 * See these two classes for more.
	 *
	 * \@stable
	 * @abstract
	 */
	var LocationStrategy = (function () {
	    function LocationStrategy() {
	    }
	    /**
	     * @abstract
	     * @param {?=} includeHash
	     * @return {?}
	     */
	    LocationStrategy.prototype.path = function (includeHash) { };
	    /**
	     * @abstract
	     * @param {?} internal
	     * @return {?}
	     */
	    LocationStrategy.prototype.prepareExternalUrl = function (internal) { };
	    /**
	     * @abstract
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @param {?} queryParams
	     * @return {?}
	     */
	    LocationStrategy.prototype.pushState = function (state, title, url, queryParams) { };
	    /**
	     * @abstract
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @param {?} queryParams
	     * @return {?}
	     */
	    LocationStrategy.prototype.replaceState = function (state, title, url, queryParams) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    LocationStrategy.prototype.forward = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    LocationStrategy.prototype.back = function () { };
	    /**
	     * @abstract
	     * @param {?} fn
	     * @return {?}
	     */
	    LocationStrategy.prototype.onPopState = function (fn) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    LocationStrategy.prototype.getBaseHref = function () { };
	    return LocationStrategy;
	}());
	/**
	 * The `APP_BASE_HREF` token represents the base href to be used with the
	 * {\@link PathLocationStrategy}.
	 *
	 * If you're using {\@link PathLocationStrategy}, you must provide a provider to a string
	 * representing the URL prefix that should be preserved when generating and recognizing
	 * URLs.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * import {Component, NgModule} from '\@angular/core';
	 * import {APP_BASE_HREF} from '\@angular/common';
	 *
	 * \@NgModule({
	 *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
	 * })
	 * class AppModule {}
	 * ```
	 *
	 * \@stable
	 */
	var APP_BASE_HREF = new _angular_core.InjectionToken('appBaseHref');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.
	 * \@description
	 * Depending on which {\@link LocationStrategy} is used, `Location` will either persist
	 * to the URL's path or the URL's hash segment.
	 *
	 * Note: it's better to use {\@link Router#navigate} service to trigger route changes. Use
	 * `Location` only if you need to interact with or create normalized URLs outside of
	 * routing.
	 *
	 * `Location` is responsible for normalizing the URL against the application's base href.
	 * A normalized URL is absolute from the URL host, includes the application's base href, and has no
	 * trailing slash:
	 * - `/my/app/user/123` is normalized
	 * - `my/app/user/123` **is not** normalized
	 * - `/my/app/user/123/` **is not** normalized
	 *
	 * ### Example
	 * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
	 * \@stable
	 */
	var Location = (function () {
	    /**
	     * @param {?} platformStrategy
	     */
	    function Location(platformStrategy) {
	        var _this = this;
	        /**
	         * \@internal
	         */
	        this._subject = new _angular_core.EventEmitter();
	        this._platformStrategy = platformStrategy;
	        var browserBaseHref = this._platformStrategy.getBaseHref();
	        this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
	        this._platformStrategy.onPopState(function (ev) {
	            _this._subject.emit({
	                'url': _this.path(true),
	                'pop': true,
	                'type': ev.type,
	            });
	        });
	    }
	    /**
	     * @param {?=} includeHash
	     * @return {?}
	     */
	    Location.prototype.path = function (includeHash) {
	        if (includeHash === void 0) { includeHash = false; }
	        return this.normalize(this._platformStrategy.path(includeHash));
	    };
	    /**
	     * Normalizes the given path and compares to the current normalized path.
	     * @param {?} path
	     * @param {?=} query
	     * @return {?}
	     */
	    Location.prototype.isCurrentPathEqualTo = function (path, query) {
	        if (query === void 0) { query = ''; }
	        return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
	    };
	    /**
	     * Given a string representing a URL, returns the normalized URL path without leading or
	     * trailing slashes.
	     * @param {?} url
	     * @return {?}
	     */
	    Location.prototype.normalize = function (url) {
	        return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
	    };
	    /**
	     * Given a string representing a URL, returns the platform-specific external URL path.
	     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
	     * before normalizing. This method will also add a hash if `HashLocationStrategy` is
	     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
	     * @param {?} url
	     * @return {?}
	     */
	    Location.prototype.prepareExternalUrl = function (url) {
	        if (url && url[0] !== '/') {
	            url = '/' + url;
	        }
	        return this._platformStrategy.prepareExternalUrl(url);
	    };
	    /**
	     * Changes the browsers URL to the normalized version of the given URL, and pushes a
	     * new item onto the platform's history.
	     * @param {?} path
	     * @param {?=} query
	     * @return {?}
	     */
	    Location.prototype.go = function (path, query) {
	        if (query === void 0) { query = ''; }
	        this._platformStrategy.pushState(null, '', path, query);
	    };
	    /**
	     * Changes the browsers URL to the normalized version of the given URL, and replaces
	     * the top item on the platform's history stack.
	     * @param {?} path
	     * @param {?=} query
	     * @return {?}
	     */
	    Location.prototype.replaceState = function (path, query) {
	        if (query === void 0) { query = ''; }
	        this._platformStrategy.replaceState(null, '', path, query);
	    };
	    /**
	     * Navigates forward in the platform's history.
	     * @return {?}
	     */
	    Location.prototype.forward = function () { this._platformStrategy.forward(); };
	    /**
	     * Navigates back in the platform's history.
	     * @return {?}
	     */
	    Location.prototype.back = function () { this._platformStrategy.back(); };
	    /**
	     * Subscribe to the platform's `popState` events.
	     * @param {?} onNext
	     * @param {?=} onThrow
	     * @param {?=} onReturn
	     * @return {?}
	     */
	    Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
	        if (onThrow === void 0) { onThrow = null; }
	        if (onReturn === void 0) { onReturn = null; }
	        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
	    };
	    /**
	     * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
	     * is.
	     * @param {?} params
	     * @return {?}
	     */
	    Location.normalizeQueryParams = function (params) {
	        return params && params[0] !== '?' ? '?' + params : params;
	    };
	    /**
	     * Given 2 parts of a url, join them with a slash if needed.
	     * @param {?} start
	     * @param {?} end
	     * @return {?}
	     */
	    Location.joinWithSlash = function (start, end) {
	        if (start.length == 0) {
	            return end;
	        }
	        if (end.length == 0) {
	            return start;
	        }
	        var /** @type {?} */ slashes = 0;
	        if (start.endsWith('/')) {
	            slashes++;
	        }
	        if (end.startsWith('/')) {
	            slashes++;
	        }
	        if (slashes == 2) {
	            return start + end.substring(1);
	        }
	        if (slashes == 1) {
	            return start + end;
	        }
	        return start + '/' + end;
	    };
	    /**
	     * If url has a trailing slash, remove it, otherwise return url as is.
	     * @param {?} url
	     * @return {?}
	     */
	    Location.stripTrailingSlash = function (url) { return url.replace(/\/$/, ''); };
	    return Location;
	}());
	Location.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	Location.ctorParameters = function () { return [
	    { type: LocationStrategy, },
	]; };
	/**
	 * @param {?} baseHref
	 * @param {?} url
	 * @return {?}
	 */
	function _stripBaseHref(baseHref, url) {
	    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
	}
	/**
	 * @param {?} url
	 * @return {?}
	 */
	function _stripIndexHtml(url) {
	    return url.replace(/\/index.html$/, '');
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@whatItDoes Use URL hash for storing application location data.
	 * \@description
	 * `HashLocationStrategy` is a {\@link LocationStrategy} used to configure the
	 * {\@link Location} service to represent its state in the
	 * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
	 * of the browser's URL.
	 *
	 * For instance, if you call `location.go('/foo')`, the browser's URL will become
	 * `example.com#/foo`.
	 *
	 * ### Example
	 *
	 * {\@example common/location/ts/hash_location_component.ts region='LocationComponent'}
	 *
	 * \@stable
	 */
	var HashLocationStrategy = (function (_super) {
	    __extends(HashLocationStrategy, _super);
	    /**
	     * @param {?} _platformLocation
	     * @param {?=} _baseHref
	     */
	    function HashLocationStrategy(_platformLocation, _baseHref) {
	        var _this = _super.call(this) || this;
	        _this._platformLocation = _platformLocation;
	        _this._baseHref = '';
	        if (_baseHref != null) {
	            _this._baseHref = _baseHref;
	        }
	        return _this;
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.onPopState = function (fn) {
	        this._platformLocation.onPopState(fn);
	        this._platformLocation.onHashChange(fn);
	    };
	    /**
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	    /**
	     * @param {?=} includeHash
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.path = function (includeHash) {
	        if (includeHash === void 0) { includeHash = false; }
	        // the hash value is always prefixed with a `#`
	        // and if it is empty then it will stay empty
	        var /** @type {?} */ path = this._platformLocation.hash;
	        if (path == null)
	            path = '#';
	        return path.length > 0 ? path.substring(1) : path;
	    };
	    /**
	     * @param {?} internal
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	        var /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);
	        return url.length > 0 ? ('#' + url) : url;
	    };
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} path
	     * @param {?} queryParams
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
	        var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	        if (url.length == 0) {
	            url = this._platformLocation.pathname;
	        }
	        this._platformLocation.pushState(state, title, url);
	    };
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} path
	     * @param {?} queryParams
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
	        var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	        if (url.length == 0) {
	            url = this._platformLocation.pathname;
	        }
	        this._platformLocation.replaceState(state, title, url);
	    };
	    /**
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	    /**
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	    return HashLocationStrategy;
	}(LocationStrategy));
	HashLocationStrategy.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	HashLocationStrategy.ctorParameters = function () { return [
	    { type: PlatformLocation, },
	    { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@whatItDoes Use URL for storing application location data.
	 * \@description
	 * `PathLocationStrategy` is a {\@link LocationStrategy} used to configure the
	 * {\@link Location} service to represent its state in the
	 * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
	 * browser's URL.
	 *
	 * If you're using `PathLocationStrategy`, you must provide a {\@link APP_BASE_HREF}
	 * or add a base element to the document. This URL prefix that will be preserved
	 * when generating and recognizing URLs.
	 *
	 * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
	 * `location.go('/foo')`, the browser's URL will become
	 * `example.com/my/app/foo`.
	 *
	 * Similarly, if you add `<base href='/my/app'/>` to the document and call
	 * `location.go('/foo')`, the browser's URL will become
	 * `example.com/my/app/foo`.
	 *
	 * ### Example
	 *
	 * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
	 *
	 * \@stable
	 */
	var PathLocationStrategy = (function (_super) {
	    __extends(PathLocationStrategy, _super);
	    /**
	     * @param {?} _platformLocation
	     * @param {?=} href
	     */
	    function PathLocationStrategy(_platformLocation, href) {
	        var _this = _super.call(this) || this;
	        _this._platformLocation = _platformLocation;
	        if (href == null) {
	            href = _this._platformLocation.getBaseHrefFromDOM();
	        }
	        if (href == null) {
	            throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
	        }
	        _this._baseHref = href;
	        return _this;
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.onPopState = function (fn) {
	        this._platformLocation.onPopState(fn);
	        this._platformLocation.onHashChange(fn);
	    };
	    /**
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	    /**
	     * @param {?} internal
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	        return Location.joinWithSlash(this._baseHref, internal);
	    };
	    /**
	     * @param {?=} includeHash
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.path = function (includeHash) {
	        if (includeHash === void 0) { includeHash = false; }
	        var /** @type {?} */ pathname = this._platformLocation.pathname +
	            Location.normalizeQueryParams(this._platformLocation.search);
	        var /** @type {?} */ hash = this._platformLocation.hash;
	        return hash && includeHash ? "" + pathname + hash : pathname;
	    };
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @param {?} queryParams
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
	        var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	        this._platformLocation.pushState(state, title, externalUrl);
	    };
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @param {?} queryParams
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
	        var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	        this._platformLocation.replaceState(state, title, externalUrl);
	    };
	    /**
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	    /**
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	    return PathLocationStrategy;
	}(LocationStrategy));
	PathLocationStrategy.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	PathLocationStrategy.ctorParameters = function () { return [
	    { type: PlatformLocation, },
	    { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@experimental
	 * @abstract
	 */
	var NgLocalization = (function () {
	    function NgLocalization() {
	    }
	    /**
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    NgLocalization.prototype.getPluralCategory = function (value) { };
	    return NgLocalization;
	}());
	/**
	 * Returns the plural category for a given value.
	 * - "=value" when the case exists,
	 * - the plural category otherwise
	 *
	 * \@internal
	 * @param {?} value
	 * @param {?} cases
	 * @param {?} ngLocalization
	 * @return {?}
	 */
	function getPluralCategory(value, cases, ngLocalization) {
	    var /** @type {?} */ key = "=" + value;
	    if (cases.indexOf(key) > -1) {
	        return key;
	    }
	    key = ngLocalization.getPluralCategory(value);
	    if (cases.indexOf(key) > -1) {
	        return key;
	    }
	    if (cases.indexOf('other') > -1) {
	        return 'other';
	    }
	    throw new Error("No plural message found for value \"" + value + "\"");
	}
	/**
	 * Returns the plural case based on the locale
	 *
	 * \@experimental
	 */
	var NgLocaleLocalization = (function (_super) {
	    __extends(NgLocaleLocalization, _super);
	    /**
	     * @param {?} locale
	     */
	    function NgLocaleLocalization(locale) {
	        var _this = _super.call(this) || this;
	        _this.locale = locale;
	        return _this;
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    NgLocaleLocalization.prototype.getPluralCategory = function (value) {
	        var /** @type {?} */ plural = getPluralCase(this.locale, value);
	        switch (plural) {
	            case Plural.Zero:
	                return 'zero';
	            case Plural.One:
	                return 'one';
	            case Plural.Two:
	                return 'two';
	            case Plural.Few:
	                return 'few';
	            case Plural.Many:
	                return 'many';
	            default:
	                return 'other';
	        }
	    };
	    return NgLocaleLocalization;
	}(NgLocalization));
	NgLocaleLocalization.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	NgLocaleLocalization.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	]; };
	var Plural = {};
	Plural.Zero = 0;
	Plural.One = 1;
	Plural.Two = 2;
	Plural.Few = 3;
	Plural.Many = 4;
	Plural.Other = 5;
	Plural[Plural.Zero] = "Zero";
	Plural[Plural.One] = "One";
	Plural[Plural.Two] = "Two";
	Plural[Plural.Few] = "Few";
	Plural[Plural.Many] = "Many";
	Plural[Plural.Other] = "Other";
	/**
	 * Returns the plural case based on the locale
	 *
	 * \@experimental
	 * @param {?} locale
	 * @param {?} nLike
	 * @return {?}
	 */
	function getPluralCase(locale, nLike) {
	    // TODO(vicb): lazy compute
	    if (typeof nLike === 'string') {
	        nLike = parseInt(/** @type {?} */ (nLike), 10);
	    }
	    var /** @type {?} */ n = (nLike);
	    var /** @type {?} */ nDecimal = n.toString().replace(/^[^.]*\.?/, '');
	    var /** @type {?} */ i = Math.floor(Math.abs(n));
	    var /** @type {?} */ v = nDecimal.length;
	    var /** @type {?} */ f = parseInt(nDecimal, 10);
	    var /** @type {?} */ t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
	    var /** @type {?} */ lang = locale.split('-')[0].toLowerCase();
	    switch (lang) {
	        case 'af':
	        case 'asa':
	        case 'az':
	        case 'bem':
	        case 'bez':
	        case 'bg':
	        case 'brx':
	        case 'ce':
	        case 'cgg':
	        case 'chr':
	        case 'ckb':
	        case 'ee':
	        case 'el':
	        case 'eo':
	        case 'es':
	        case 'eu':
	        case 'fo':
	        case 'fur':
	        case 'gsw':
	        case 'ha':
	        case 'haw':
	        case 'hu':
	        case 'jgo':
	        case 'jmc':
	        case 'ka':
	        case 'kk':
	        case 'kkj':
	        case 'kl':
	        case 'ks':
	        case 'ksb':
	        case 'ky':
	        case 'lb':
	        case 'lg':
	        case 'mas':
	        case 'mgo':
	        case 'ml':
	        case 'mn':
	        case 'nb':
	        case 'nd':
	        case 'ne':
	        case 'nn':
	        case 'nnh':
	        case 'nyn':
	        case 'om':
	        case 'or':
	        case 'os':
	        case 'ps':
	        case 'rm':
	        case 'rof':
	        case 'rwk':
	        case 'saq':
	        case 'seh':
	        case 'sn':
	        case 'so':
	        case 'sq':
	        case 'ta':
	        case 'te':
	        case 'teo':
	        case 'tk':
	        case 'tr':
	        case 'ug':
	        case 'uz':
	        case 'vo':
	        case 'vun':
	        case 'wae':
	        case 'xog':
	            if (n === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'agq':
	        case 'bas':
	        case 'cu':
	        case 'dav':
	        case 'dje':
	        case 'dua':
	        case 'dyo':
	        case 'ebu':
	        case 'ewo':
	        case 'guz':
	        case 'kam':
	        case 'khq':
	        case 'ki':
	        case 'kln':
	        case 'kok':
	        case 'ksf':
	        case 'lrc':
	        case 'lu':
	        case 'luo':
	        case 'luy':
	        case 'mer':
	        case 'mfe':
	        case 'mgh':
	        case 'mua':
	        case 'mzn':
	        case 'nmg':
	        case 'nus':
	        case 'qu':
	        case 'rn':
	        case 'rw':
	        case 'sbp':
	        case 'twq':
	        case 'vai':
	        case 'yav':
	        case 'yue':
	        case 'zgh':
	        case 'ak':
	        case 'ln':
	        case 'mg':
	        case 'pa':
	        case 'ti':
	            if (n === Math.floor(n) && n >= 0 && n <= 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'am':
	        case 'as':
	        case 'bn':
	        case 'fa':
	        case 'gu':
	        case 'hi':
	        case 'kn':
	        case 'mr':
	        case 'zu':
	            if (i === 0 || n === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'ar':
	            if (n === 0)
	                return Plural.Zero;
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
	                return Plural.Few;
	            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
	                return Plural.Many;
	            return Plural.Other;
	        case 'ast':
	        case 'ca':
	        case 'de':
	        case 'en':
	        case 'et':
	        case 'fi':
	        case 'fy':
	        case 'gl':
	        case 'it':
	        case 'nl':
	        case 'sv':
	        case 'sw':
	        case 'ur':
	        case 'yi':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            return Plural.Other;
	        case 'be':
	            if (n % 10 === 1 && !(n % 100 === 11))
	                return Plural.One;
	            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&
	                !(n % 100 >= 12 && n % 100 <= 14))
	                return Plural.Few;
	            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||
	                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
	                return Plural.Many;
	            return Plural.Other;
	        case 'br':
	            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
	                return Plural.One;
	            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
	                return Plural.Two;
	            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&
	                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||
	                    n % 100 >= 90 && n % 100 <= 99))
	                return Plural.Few;
	            if (!(n === 0) && n % 1e6 === 0)
	                return Plural.Many;
	            return Plural.Other;
	        case 'bs':
	        case 'hr':
	        case 'sr':
	            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
	                return Plural.One;
	            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                !(i % 100 >= 12 && i % 100 <= 14) ||
	                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&
	                    !(f % 100 >= 12 && f % 100 <= 14))
	                return Plural.Few;
	            return Plural.Other;
	        case 'cs':
	        case 'sk':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
	                return Plural.Few;
	            if (!(v === 0))
	                return Plural.Many;
	            return Plural.Other;
	        case 'cy':
	            if (n === 0)
	                return Plural.Zero;
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            if (n === 3)
	                return Plural.Few;
	            if (n === 6)
	                return Plural.Many;
	            return Plural.Other;
	        case 'da':
	            if (n === 1 || !(t === 0) && (i === 0 || i === 1))
	                return Plural.One;
	            return Plural.Other;
	        case 'dsb':
	        case 'hsb':
	            if (v === 0 && i % 100 === 1 || f % 100 === 1)
	                return Plural.One;
	            if (v === 0 && i % 100 === 2 || f % 100 === 2)
	                return Plural.Two;
	            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||
	                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
	                return Plural.Few;
	            return Plural.Other;
	        case 'ff':
	        case 'fr':
	        case 'hy':
	        case 'kab':
	            if (i === 0 || i === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'fil':
	            if (v === 0 && (i === 1 || i === 2 || i === 3) ||
	                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||
	                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
	                return Plural.One;
	            return Plural.Other;
	        case 'ga':
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            if (n === Math.floor(n) && n >= 3 && n <= 6)
	                return Plural.Few;
	            if (n === Math.floor(n) && n >= 7 && n <= 10)
	                return Plural.Many;
	            return Plural.Other;
	        case 'gd':
	            if (n === 1 || n === 11)
	                return Plural.One;
	            if (n === 2 || n === 12)
	                return Plural.Two;
	            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
	                return Plural.Few;
	            return Plural.Other;
	        case 'gv':
	            if (v === 0 && i % 10 === 1)
	                return Plural.One;
	            if (v === 0 && i % 10 === 2)
	                return Plural.Two;
	            if (v === 0 &&
	                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
	                return Plural.Few;
	            if (!(v === 0))
	                return Plural.Many;
	            return Plural.Other;
	        case 'he':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (i === 2 && v === 0)
	                return Plural.Two;
	            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
	                return Plural.Many;
	            return Plural.Other;
	        case 'is':
	            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
	                return Plural.One;
	            return Plural.Other;
	        case 'ksh':
	            if (n === 0)
	                return Plural.Zero;
	            if (n === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'kw':
	        case 'naq':
	        case 'se':
	        case 'smn':
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            return Plural.Other;
	        case 'lag':
	            if (n === 0)
	                return Plural.Zero;
	            if ((i === 0 || i === 1) && !(n === 0))
	                return Plural.One;
	            return Plural.Other;
	        case 'lt':
	            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
	                return Plural.One;
	            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&
	                !(n % 100 >= 11 && n % 100 <= 19))
	                return Plural.Few;
	            if (!(f === 0))
	                return Plural.Many;
	            return Plural.Other;
	        case 'lv':
	        case 'prg':
	            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||
	                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
	                return Plural.Zero;
	            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||
	                !(v === 2) && f % 10 === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'mk':
	            if (v === 0 && i % 10 === 1 || f % 10 === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'mt':
	            if (n === 1)
	                return Plural.One;
	            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
	                return Plural.Few;
	            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
	                return Plural.Many;
	            return Plural.Other;
	        case 'pl':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                !(i % 100 >= 12 && i % 100 <= 14))
	                return Plural.Few;
	            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||
	                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
	                return Plural.Many;
	            return Plural.Other;
	        case 'pt':
	            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
	                return Plural.One;
	            return Plural.Other;
	        case 'ro':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (!(v === 0) || n === 0 ||
	                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
	                return Plural.Few;
	            return Plural.Other;
	        case 'ru':
	        case 'uk':
	            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
	                return Plural.One;
	            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                !(i % 100 >= 12 && i % 100 <= 14))
	                return Plural.Few;
	            if (v === 0 && i % 10 === 0 ||
	                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
	                return Plural.Many;
	            return Plural.Other;
	        case 'shi':
	            if (i === 0 || n === 1)
	                return Plural.One;
	            if (n === Math.floor(n) && n >= 2 && n <= 10)
	                return Plural.Few;
	            return Plural.Other;
	        case 'si':
	            if (n === 0 || n === 1 || i === 0 && f === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'sl':
	            if (v === 0 && i % 100 === 1)
	                return Plural.One;
	            if (v === 0 && i % 100 === 2)
	                return Plural.Two;
	            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
	                return Plural.Few;
	            return Plural.Other;
	        case 'tzm':
	            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
	                return Plural.One;
	            return Plural.Other;
	        default:
	            return Plural.Other;
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Adds and removes CSS classes on an HTML element.
	 *
	 * \@howToUse
	 * ```
	 *     <some-element [ngClass]="'first second'">...</some-element>
	 *
	 *     <some-element [ngClass]="['first', 'second']">...</some-element>
	 *
	 *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
	 *
	 *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
	 *
	 *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
	 * ```
	 *
	 * \@description
	 *
	 * The CSS classes are updated as follows, depending on the type of the expression evaluation:
	 * - `string` - the CSS classes listed in the string (space delimited) are added,
	 * - `Array` - the CSS classes declared as Array elements are added,
	 * - `Object` - keys are CSS classes that get added when the expression given in the value
	 *              evaluates to a truthy value, otherwise they are removed.
	 *
	 * \@stable
	 */
	var NgClass = (function () {
	    /**
	     * @param {?} _iterableDiffers
	     * @param {?} _keyValueDiffers
	     * @param {?} _ngEl
	     * @param {?} _renderer
	     */
	    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
	        this._iterableDiffers = _iterableDiffers;
	        this._keyValueDiffers = _keyValueDiffers;
	        this._ngEl = _ngEl;
	        this._renderer = _renderer;
	        this._initialClasses = [];
	    }
	    Object.defineProperty(NgClass.prototype, "klass", {
	        /**
	         * @param {?} v
	         * @return {?}
	         */
	        set: function (v) {
	            this._applyInitialClasses(true);
	            this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
	            this._applyInitialClasses(false);
	            this._applyClasses(this._rawClass, false);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgClass.prototype, "ngClass", {
	        /**
	         * @param {?} v
	         * @return {?}
	         */
	        set: function (v) {
	            this._cleanupClasses(this._rawClass);
	            this._iterableDiffer = null;
	            this._keyValueDiffer = null;
	            this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
	            if (this._rawClass) {
	                if (_angular_core.ɵisListLikeIterable(this._rawClass)) {
	                    this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
	                }
	                else {
	                    this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    NgClass.prototype.ngDoCheck = function () {
	        if (this._iterableDiffer) {
	            var /** @type {?} */ iterableChanges = this._iterableDiffer.diff(/** @type {?} */ (this._rawClass));
	            if (iterableChanges) {
	                this._applyIterableChanges(iterableChanges);
	            }
	        }
	        else if (this._keyValueDiffer) {
	            var /** @type {?} */ keyValueChanges = this._keyValueDiffer.diff(/** @type {?} */ (this._rawClass));
	            if (keyValueChanges) {
	                this._applyKeyValueChanges(keyValueChanges);
	            }
	        }
	    };
	    /**
	     * @param {?} rawClassVal
	     * @return {?}
	     */
	    NgClass.prototype._cleanupClasses = function (rawClassVal) {
	        this._applyClasses(rawClassVal, true);
	        this._applyInitialClasses(false);
	    };
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgClass.prototype._applyKeyValueChanges = function (changes) {
	        var _this = this;
	        changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	        changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	        changes.forEachRemovedItem(function (record) {
	            if (record.previousValue) {
	                _this._toggleClass(record.key, false);
	            }
	        });
	    };
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgClass.prototype._applyIterableChanges = function (changes) {
	        var _this = this;
	        changes.forEachAddedItem(function (record) {
	            if (typeof record.item === 'string') {
	                _this._toggleClass(record.item, true);
	            }
	            else {
	                throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + _angular_core.ɵstringify(record.item));
	            }
	        });
	        changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });
	    };
	    /**
	     * @param {?} isCleanup
	     * @return {?}
	     */
	    NgClass.prototype._applyInitialClasses = function (isCleanup) {
	        var _this = this;
	        this._initialClasses.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	    };
	    /**
	     * @param {?} rawClassVal
	     * @param {?} isCleanup
	     * @return {?}
	     */
	    NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
	        var _this = this;
	        if (rawClassVal) {
	            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
	                ((rawClassVal)).forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	            }
	            else {
	                Object.keys(rawClassVal).forEach(function (klass) {
	                    if (rawClassVal[klass] != null)
	                        _this._toggleClass(klass, !isCleanup);
	                });
	            }
	        }
	    };
	    /**
	     * @param {?} klass
	     * @param {?} enabled
	     * @return {?}
	     */
	    NgClass.prototype._toggleClass = function (klass, enabled) {
	        var _this = this;
	        klass = klass.trim();
	        if (klass) {
	            klass.split(/\s+/g).forEach(function (klass) { _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, !!enabled); });
	        }
	    };
	    return NgClass;
	}());
	NgClass.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngClass]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgClass.ctorParameters = function () { return [
	    { type: _angular_core.IterableDiffers, },
	    { type: _angular_core.KeyValueDiffers, },
	    { type: _angular_core.ElementRef, },
	    { type: _angular_core.Renderer, },
	]; };
	NgClass.propDecorators = {
	    'klass': [{ type: _angular_core.Input, args: ['class',] },],
	    'ngClass': [{ type: _angular_core.Input },],
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Instantiates a single {\@link Component} type and inserts its Host View into current View.
	 * `NgComponentOutlet` provides a declarative approach for dynamic component creation.
	 *
	 * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and
	 * any existing component will get destroyed.
	 *
	 * ### Fine tune control
	 *
	 * You can control the component creation process by using the following optional attributes:
	 *
	 * * `ngComponentOutletInjector`: Optional custom {\@link Injector} that will be used as parent for
	 * the Component. Defaults to the injector of the current view container.
	 *
	 * * `ngComponentOutletProviders`: Optional injectable objects ({\@link Provider}) that are visible
	 * to the component.
	 *
	 * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content
	 * section of the component, if exists.
	 *
	 * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other
	 * module, then load a component from that module.
	 *
	 * ### Syntax
	 *
	 * Simple
	 * ```
	 * <ng-container *ngComponentOutlet="componentTypeExpression"></ng-container>
	 * ```
	 *
	 * Customized injector/content
	 * ```
	 * <ng-container *ngComponentOutlet="componentTypeExpression;
	 *                                   injector: injectorExpression;
	 *                                   content: contentNodesExpression;">
	 * </ng-container>
	 * ```
	 *
	 * Customized ngModuleFactory
	 * ```
	 * <ng-container *ngComponentOutlet="componentTypeExpression;
	 *                                   ngModuleFactory: moduleFactory;">
	 * </ng-container>
	 * ```
	 * # Example
	 *
	 * {\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}
	 *
	 * A more complete example with additional options:
	 *
	 * {\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}
	 * A more complete example with ngModuleFactory:
	 *
	 * {\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}
	 *
	 * \@experimental
	 */
	var NgComponentOutlet = (function () {
	    /**
	     * @param {?} _viewContainerRef
	     */
	    function NgComponentOutlet(_viewContainerRef) {
	        this._viewContainerRef = _viewContainerRef;
	        this._componentRef = null;
	        this._moduleRef = null;
	    }
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgComponentOutlet.prototype.ngOnChanges = function (changes) {
	        this._viewContainerRef.clear();
	        this._componentRef = null;
	        if (this.ngComponentOutlet) {
	            var /** @type {?} */ elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
	            if (changes['ngComponentOutletNgModuleFactory']) {
	                if (this._moduleRef)
	                    this._moduleRef.destroy();
	                if (this.ngComponentOutletNgModuleFactory) {
	                    var /** @type {?} */ parentModule = elInjector.get(_angular_core.NgModuleRef);
	                    this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
	                }
	                else {
	                    this._moduleRef = null;
	                }
	            }
	            var /** @type {?} */ componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :
	                elInjector.get(_angular_core.ComponentFactoryResolver);
	            var /** @type {?} */ componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);
	            this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    NgComponentOutlet.prototype.ngOnDestroy = function () {
	        if (this._moduleRef)
	            this._moduleRef.destroy();
	    };
	    return NgComponentOutlet;
	}());
	NgComponentOutlet.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngComponentOutlet]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgComponentOutlet.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	]; };
	NgComponentOutlet.propDecorators = {
	    'ngComponentOutlet': [{ type: _angular_core.Input },],
	    'ngComponentOutletInjector': [{ type: _angular_core.Input },],
	    'ngComponentOutletContent': [{ type: _angular_core.Input },],
	    'ngComponentOutletNgModuleFactory': [{ type: _angular_core.Input },],
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@stable
	 */
	var NgForOfContext = (function () {
	    /**
	     * @param {?} $implicit
	     * @param {?} ngForOf
	     * @param {?} index
	     * @param {?} count
	     */
	    function NgForOfContext($implicit, ngForOf, index, count) {
	        this.$implicit = $implicit;
	        this.ngForOf = ngForOf;
	        this.index = index;
	        this.count = count;
	    }
	    Object.defineProperty(NgForOfContext.prototype, "first", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.index === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOfContext.prototype, "last", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.index === this.count - 1; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOfContext.prototype, "even", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.index % 2 === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOfContext.prototype, "odd", {
	        /**
	         * @return {?}
	         */
	        get: function () { return !this.even; },
	        enumerable: true,
	        configurable: true
	    });
	    return NgForOfContext;
	}());
	/**
	 * The `NgForOf` directive instantiates a template once per item from an iterable. The context
	 * for each instantiated template inherits from the outer context with the given loop variable
	 * set to the current item from the iterable.
	 *
	 * ### Local Variables
	 *
	 * `NgForOf` provides several exported values that can be aliased to local variables:
	 *
	 * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).
	 * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is
	 * more complex then a property access, for example when using the async pipe (`userStreams |
	 * async`).
	 * - `index: number`: The index of the current item in the iterable.
	 * - `first: boolean`: True when the item is the first item in the iterable.
	 * - `last: boolean`: True when the item is the last item in the iterable.
	 * - `even: boolean`: True when the item has an even index in the iterable.
	 * - `odd: boolean`: True when the item has an odd index in the iterable.
	 *
	 * ```
	 * <li *ngFor="let user of userObservable | async as users; index as i; first as isFirst">
	 *    {{i}}/{{users.length}}. {{user}} <span *ngIf="isFirst">default</span>
	 * </li>
	 * ```
	 *
	 * ### Change Propagation
	 *
	 * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 * * Otherwise, the DOM element for that item will remain the same.
	 *
	 * Angular uses object identity to track insertions and deletions within the iterator and reproduce
	 * those changes in the DOM. This has important implications for animations and any stateful
	 * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can
	 * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state
	 * such as user input.
	 *
	 * It is possible for the identities of elements in the iterator to change while the data does not.
	 * This can happen, for example, if the iterator produced from an RPC to the server, and that
	 * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
	 * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
	 * elements were deleted and all new elements inserted). This is an expensive operation and should
	 * be avoided if possible.
	 *
	 * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.
	 * `trackBy` takes a function which has two arguments: `index` and `item`.
	 * If `trackBy` is given, Angular tracks changes by the return value of the function.
	 *
	 * ### Syntax
	 *
	 * - `<li *ngFor="let item of items; index as i; trackBy: trackByFn">...</li>`
	 * - `<li template="ngFor let item of items; index as i; trackBy: trackByFn">...</li>`
	 *
	 * With `<ng-template>` element:
	 *
	 * ```
	 * <ng-template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
	 *   <li>...</li>
	 * </ng-template>
	 * ```
	 *
	 * ### Example
	 *
	 * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
	 * example.
	 *
	 * \@stable
	 */
	var NgForOf = (function () {
	    /**
	     * @param {?} _viewContainer
	     * @param {?} _template
	     * @param {?} _differs
	     */
	    function NgForOf(_viewContainer, _template, _differs) {
	        this._viewContainer = _viewContainer;
	        this._template = _template;
	        this._differs = _differs;
	        this._differ = null;
	    }
	    Object.defineProperty(NgForOf.prototype, "ngForTrackBy", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._trackByFn; },
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        set: function (fn) {
	            if (_angular_core.isDevMode() && fn != null && typeof fn !== 'function') {
	                // TODO(vicb): use a log service once there is a public one available
	                if ((console) && (console.warn)) {
	                    console.warn("trackBy must be a function, but received " + JSON.stringify(fn) + ". " +
	                        "See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.");
	                }
	            }
	            this._trackByFn = fn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOf.prototype, "ngForTemplate", {
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        set: function (value) {
	            // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1
	            // The current type is too restrictive; a template that just uses index, for example,
	            // should be acceptable.
	            if (value) {
	                this._template = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgForOf.prototype.ngOnChanges = function (changes) {
	        if ('ngForOf' in changes) {
	            // React on ngForOf changes only once all inputs have been initialized
	            var /** @type {?} */ value = changes['ngForOf'].currentValue;
	            if (!this._differ && value) {
	                try {
	                    this._differ = this._differs.find(value).create(this.ngForTrackBy);
	                }
	                catch (e) {
	                    throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
	                }
	            }
	        }
	    };
	    /**
	     * @return {?}
	     */
	    NgForOf.prototype.ngDoCheck = function () {
	        if (this._differ) {
	            var /** @type {?} */ changes = this._differ.diff(this.ngForOf);
	            if (changes)
	                this._applyChanges(changes);
	        }
	    };
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgForOf.prototype._applyChanges = function (changes) {
	        var _this = this;
	        var /** @type {?} */ insertTuples = [];
	        changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
	            if (item.previousIndex == null) {
	                var /** @type {?} */ view = _this._viewContainer.createEmbeddedView(_this._template, new NgForOfContext(null, _this.ngForOf, null, null), currentIndex);
	                var /** @type {?} */ tuple = new RecordViewTuple(item, view);
	                insertTuples.push(tuple);
	            }
	            else if (currentIndex == null) {
	                _this._viewContainer.remove(adjustedPreviousIndex);
	            }
	            else {
	                var /** @type {?} */ view = _this._viewContainer.get(adjustedPreviousIndex);
	                _this._viewContainer.move(view, currentIndex);
	                var /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */ (view));
	                insertTuples.push(tuple);
	            }
	        });
	        for (var /** @type {?} */ i = 0; i < insertTuples.length; i++) {
	            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
	        }
	        for (var /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {
	            var /** @type {?} */ viewRef = (this._viewContainer.get(i));
	            viewRef.context.index = i;
	            viewRef.context.count = ilen;
	        }
	        changes.forEachIdentityChange(function (record) {
	            var /** @type {?} */ viewRef = (_this._viewContainer.get(record.currentIndex));
	            viewRef.context.$implicit = record.item;
	        });
	    };
	    /**
	     * @param {?} view
	     * @param {?} record
	     * @return {?}
	     */
	    NgForOf.prototype._perViewChange = function (view, record) {
	        view.context.$implicit = record.item;
	    };
	    return NgForOf;
	}());
	NgForOf.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngFor][ngForOf]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgForOf.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	    { type: _angular_core.TemplateRef, },
	    { type: _angular_core.IterableDiffers, },
	]; };
	NgForOf.propDecorators = {
	    'ngForOf': [{ type: _angular_core.Input },],
	    'ngForTrackBy': [{ type: _angular_core.Input },],
	    'ngForTemplate': [{ type: _angular_core.Input },],
	};
	var RecordViewTuple = (function () {
	    /**
	     * @param {?} record
	     * @param {?} view
	     */
	    function RecordViewTuple(record, view) {
	        this.record = record;
	        this.view = view;
	    }
	    return RecordViewTuple;
	}());
	/**
	 * @deprecated from v4.0.0 - Use NgForOf instead.
	 */
	var NgFor = NgForOf;
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function getTypeNameForDebugging(type) {
	    return type['name'] || typeof type;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Conditionally includes a template based on the value of an `expression`.
	 *
	 * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place
	 * when expression is truthy or falsy respectively. Typically the:
	 *  - `then` template is the inline template of `ngIf` unless bound to a different value.
	 *  - `else` template is blank unless it is bound.
	 *
	 * # Most common usage
	 *
	 * The most common usage of the `ngIf` directive is to conditionally show the inline template as
	 * seen in this example:
	 * {\@example common/ngIf/ts/module.ts region='NgIfSimple'}
	 *
	 * # Showing an alternative template using `else`
	 *
	 * If it is necessary to display a template when the `expression` is falsy use the `else` template
	 * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.
	 * The template can be defined anywhere in the component view but is typically placed right after
	 * `ngIf` for readability.
	 *
	 * {\@example common/ngIf/ts/module.ts region='NgIfElse'}
	 *
	 * # Using non-inlined `then` template
	 *
	 * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using
	 * a binding (just like `else`). Because `then` and `else` are bindings, the template references can
	 * change at runtime as shown in this example.
	 *
	 * {\@example common/ngIf/ts/module.ts region='NgIfThenElse'}
	 *
	 * # Storing conditional result in a variable
	 *
	 * A common pattern is that we need to show a set of properties from the same object. If the
	 * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against
	 * dereferencing a `null` value. This is especially the case when waiting on async data such as
	 * when using the `async` pipe as shown in folowing example:
	 *
	 * ```
	 * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!
	 * ```
	 *
	 * There are several inefficiencies in the above example:
	 *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the
	 *    example above.
	 *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.
	 *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.
	 *  - We have to place the `async` pipe in parenthesis.
	 *
	 * A better way to do this is to use `ngIf` and store the result of the condition in a local
	 * variable as shown in the the example below:
	 *
	 * {\@example common/ngIf/ts/module.ts region='NgIfAs'}
	 *
	 * Notice that:
	 *  - We use only one `async` pipe and hence only one subscription gets created.
	 *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.
	 *  - The local `user` can then be bound repeatedly in a more efficient way.
	 *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only
	 *    display the data if `userStream` returns a value.
	 *  - We can display an alternative template while waiting for the data.
	 *
	 * ### Syntax
	 *
	 * Simple form:
	 * - `<div *ngIf="condition">...</div>`
	 * - `<div template="ngIf condition">...</div>`
	 * - `<ng-template [ngIf]="condition"><div>...</div></ng-template>`
	 *
	 * Form with an else block:
	 * ```
	 * <div *ngIf="condition; else elseBlock">...</div>
	 * <ng-template #elseBlock>...</ng-template>
	 * ```
	 *
	 * Form with a `then` and `else` block:
	 * ```
	 * <div *ngIf="condition; then thenBlock else elseBlock"></div>
	 * <ng-template #thenBlock>...</ng-template>
	 * <ng-template #elseBlock>...</ng-template>
	 * ```
	 *
	 * Form with storing the value locally:
	 * ```
	 * <div *ngIf="condition as value; else elseBlock">{{value}}</div>
	 * <ng-template #elseBlock>...</ng-template>
	 * ```
	 *
	 * \@stable
	 */
	var NgIf = (function () {
	    /**
	     * @param {?} _viewContainer
	     * @param {?} templateRef
	     */
	    function NgIf(_viewContainer, templateRef) {
	        this._viewContainer = _viewContainer;
	        this._context = new NgIfContext();
	        this._thenTemplateRef = null;
	        this._elseTemplateRef = null;
	        this._thenViewRef = null;
	        this._elseViewRef = null;
	        this._thenTemplateRef = templateRef;
	    }
	    Object.defineProperty(NgIf.prototype, "ngIf", {
	        /**
	         * @param {?} condition
	         * @return {?}
	         */
	        set: function (condition) {
	            this._context.$implicit = this._context.ngIf = condition;
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgIf.prototype, "ngIfThen", {
	        /**
	         * @param {?} templateRef
	         * @return {?}
	         */
	        set: function (templateRef) {
	            this._thenTemplateRef = templateRef;
	            this._thenViewRef = null; // clear previous view if any.
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgIf.prototype, "ngIfElse", {
	        /**
	         * @param {?} templateRef
	         * @return {?}
	         */
	        set: function (templateRef) {
	            this._elseTemplateRef = templateRef;
	            this._elseViewRef = null; // clear previous view if any.
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    NgIf.prototype._updateView = function () {
	        if (this._context.$implicit) {
	            if (!this._thenViewRef) {
	                this._viewContainer.clear();
	                this._elseViewRef = null;
	                if (this._thenTemplateRef) {
	                    this._thenViewRef =
	                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
	                }
	            }
	        }
	        else {
	            if (!this._elseViewRef) {
	                this._viewContainer.clear();
	                this._thenViewRef = null;
	                if (this._elseTemplateRef) {
	                    this._elseViewRef =
	                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
	                }
	            }
	        }
	    };
	    return NgIf;
	}());
	NgIf.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngIf]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgIf.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	    { type: _angular_core.TemplateRef, },
	]; };
	NgIf.propDecorators = {
	    'ngIf': [{ type: _angular_core.Input },],
	    'ngIfThen': [{ type: _angular_core.Input },],
	    'ngIfElse': [{ type: _angular_core.Input },],
	};
	/**
	 * \@stable
	 */
	var NgIfContext = (function () {
	    function NgIfContext() {
	        this.$implicit = null;
	        this.ngIf = null;
	    }
	    return NgIfContext;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SwitchView = (function () {
	    /**
	     * @param {?} _viewContainerRef
	     * @param {?} _templateRef
	     */
	    function SwitchView(_viewContainerRef, _templateRef) {
	        this._viewContainerRef = _viewContainerRef;
	        this._templateRef = _templateRef;
	        this._created = false;
	    }
	    /**
	     * @return {?}
	     */
	    SwitchView.prototype.create = function () {
	        this._created = true;
	        this._viewContainerRef.createEmbeddedView(this._templateRef);
	    };
	    /**
	     * @return {?}
	     */
	    SwitchView.prototype.destroy = function () {
	        this._created = false;
	        this._viewContainerRef.clear();
	    };
	    /**
	     * @param {?} created
	     * @return {?}
	     */
	    SwitchView.prototype.enforceState = function (created) {
	        if (created && !this._created) {
	            this.create();
	        }
	        else if (!created && this._created) {
	            this.destroy();
	        }
	    };
	    return SwitchView;
	}());
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch
	 *             expression.
	 *
	 * \@howToUse
	 * ```
	 *     <container-element [ngSwitch]="switch_expression">
	 *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
	 *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
	 *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
	 *       <ng-container *ngSwitchCase="match_expression_3">
	 *         <!-- use a ng-container to group multiple root nodes -->
	 *         <inner-element></inner-element>
	 *         <inner-other-element></inner-other-element>
	 *       </ng-container>
	 *       <some-element *ngSwitchDefault>...</some-element>
	 *     </container-element>
	 * ```
	 * \@description
	 *
	 * `NgSwitch` stamps out nested views when their match expression value matches the value of the
	 * switch expression.
	 *
	 * In other words:
	 * - you define a container element (where you place the directive with a switch expression on the
	 * `[ngSwitch]="..."` attribute)
	 * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
	 * root elements.
	 *
	 * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
	 * be preserved at the location.
	 *
	 * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
	 * expression is evaluated.
	 * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
	 * stamped out.
	 *
	 * \@stable
	 */
	var NgSwitch = (function () {
	    function NgSwitch() {
	        this._defaultUsed = false;
	        this._caseCount = 0;
	        this._lastCaseCheckIndex = 0;
	        this._lastCasesMatched = false;
	    }
	    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
	        /**
	         * @param {?} newValue
	         * @return {?}
	         */
	        set: function (newValue) {
	            this._ngSwitch = newValue;
	            if (this._caseCount === 0) {
	                this._updateDefaultCases(true);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * \@internal
	     * @return {?}
	     */
	    NgSwitch.prototype._addCase = function () { return this._caseCount++; };
	    /**
	     * \@internal
	     * @param {?} view
	     * @return {?}
	     */
	    NgSwitch.prototype._addDefault = function (view) {
	        if (!this._defaultViews) {
	            this._defaultViews = [];
	        }
	        this._defaultViews.push(view);
	    };
	    /**
	     * \@internal
	     * @param {?} value
	     * @return {?}
	     */
	    NgSwitch.prototype._matchCase = function (value) {
	        var /** @type {?} */ matched = value == this._ngSwitch;
	        this._lastCasesMatched = this._lastCasesMatched || matched;
	        this._lastCaseCheckIndex++;
	        if (this._lastCaseCheckIndex === this._caseCount) {
	            this._updateDefaultCases(!this._lastCasesMatched);
	            this._lastCaseCheckIndex = 0;
	            this._lastCasesMatched = false;
	        }
	        return matched;
	    };
	    /**
	     * @param {?} useDefault
	     * @return {?}
	     */
	    NgSwitch.prototype._updateDefaultCases = function (useDefault) {
	        if (this._defaultViews && useDefault !== this._defaultUsed) {
	            this._defaultUsed = useDefault;
	            for (var /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {
	                var /** @type {?} */ defaultView = this._defaultViews[i];
	                defaultView.enforceState(useDefault);
	            }
	        }
	    };
	    return NgSwitch;
	}());
	NgSwitch.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngSwitch]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgSwitch.ctorParameters = function () { return []; };
	NgSwitch.propDecorators = {
	    'ngSwitch': [{ type: _angular_core.Input },],
	};
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgSwitch} when the
	 *             given expression evaluate to respectively the same/different value as the switch
	 *             expression.
	 *
	 * \@howToUse
	 * ```
	 * <container-element [ngSwitch]="switch_expression">
	 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
	 * </container-element>
	 * ```
	 * \@description
	 *
	 * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
	 * expression.
	 *
	 * If multiple match expressions match the switch expression value, all of them are displayed.
	 *
	 * See {\@link NgSwitch} for more details and example.
	 *
	 * \@stable
	 */
	var NgSwitchCase = (function () {
	    /**
	     * @param {?} viewContainer
	     * @param {?} templateRef
	     * @param {?} ngSwitch
	     */
	    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
	        this.ngSwitch = ngSwitch;
	        ngSwitch._addCase();
	        this._view = new SwitchView(viewContainer, templateRef);
	    }
	    /**
	     * @return {?}
	     */
	    NgSwitchCase.prototype.ngDoCheck = function () { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); };
	    return NgSwitchCase;
	}());
	NgSwitchCase.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngSwitchCase]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgSwitchCase.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	    { type: _angular_core.TemplateRef, },
	    { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	]; };
	NgSwitchCase.propDecorators = {
	    'ngSwitchCase': [{ type: _angular_core.Input },],
	};
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Creates a view that is added to the parent {\@link NgSwitch} when no case expressions
	 * match the
	 *             switch expression.
	 *
	 * \@howToUse
	 * ```
	 * <container-element [ngSwitch]="switch_expression">
	 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
	 *   <some-other-element *ngSwitchDefault>...</some-other-element>
	 * </container-element>
	 * ```
	 *
	 * \@description
	 *
	 * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
	 * expression.
	 *
	 * See {\@link NgSwitch} for more details and example.
	 *
	 * \@stable
	 */
	var NgSwitchDefault = (function () {
	    /**
	     * @param {?} viewContainer
	     * @param {?} templateRef
	     * @param {?} ngSwitch
	     */
	    function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
	        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
	    }
	    return NgSwitchDefault;
	}());
	NgSwitchDefault.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngSwitchDefault]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgSwitchDefault.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	    { type: _angular_core.TemplateRef, },
	    { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
	 *
	 * \@howToUse
	 * ```
	 * <some-element [ngPlural]="value">
	 *   <ng-template ngPluralCase="=0">there is nothing</ng-template>
	 *   <ng-template ngPluralCase="=1">there is one</ng-template>
	 *   <ng-template ngPluralCase="few">there are a few</ng-template>
	 * </some-element>
	 * ```
	 *
	 * \@description
	 *
	 * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
	 * that match the switch expression's pluralization category.
	 *
	 * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
	 * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
	 * expression:
	 * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
	 *   matches the switch expression exactly,
	 * - otherwise, the view will be treated as a "category match", and will only display if exact
	 *   value matches aren't found and the value maps to its category for the defined locale.
	 *
	 * See http://cldr.unicode.org/index/cldr-spec/plural-rules
	 *
	 * \@experimental
	 */
	var NgPlural = (function () {
	    /**
	     * @param {?} _localization
	     */
	    function NgPlural(_localization) {
	        this._localization = _localization;
	        this._caseViews = {};
	    }
	    Object.defineProperty(NgPlural.prototype, "ngPlural", {
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        set: function (value) {
	            this._switchValue = value;
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} value
	     * @param {?} switchView
	     * @return {?}
	     */
	    NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView; };
	    /**
	     * @return {?}
	     */
	    NgPlural.prototype._updateView = function () {
	        this._clearViews();
	        var /** @type {?} */ cases = Object.keys(this._caseViews);
	        var /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);
	        this._activateView(this._caseViews[key]);
	    };
	    /**
	     * @return {?}
	     */
	    NgPlural.prototype._clearViews = function () {
	        if (this._activeView)
	            this._activeView.destroy();
	    };
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    NgPlural.prototype._activateView = function (view) {
	        if (view) {
	            this._activeView = view;
	            this._activeView.create();
	        }
	    };
	    return NgPlural;
	}());
	NgPlural.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngPlural]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgPlural.ctorParameters = function () { return [
	    { type: NgLocalization, },
	]; };
	NgPlural.propDecorators = {
	    'ngPlural': [{ type: _angular_core.Input },],
	};
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgPlural} when the
	 *             given expression matches the plural expression according to CLDR rules.
	 *
	 * \@howToUse
	 * ```
	 * <some-element [ngPlural]="value">
	 *   <ng-template ngPluralCase="=0">...</ng-template>
	 *   <ng-template ngPluralCase="other">...</ng-template>
	 * </some-element>
	 * ```
	 *
	 * See {\@link NgPlural} for more details and example.
	 *
	 * \@experimental
	 */
	var NgPluralCase = (function () {
	    /**
	     * @param {?} value
	     * @param {?} template
	     * @param {?} viewContainer
	     * @param {?} ngPlural
	     */
	    function NgPluralCase(value, template, viewContainer, ngPlural) {
	        this.value = value;
	        var isANumber = !isNaN(Number(value));
	        ngPlural.addCase(isANumber ? "=" + value : value, new SwitchView(viewContainer, template));
	    }
	    return NgPluralCase;
	}());
	NgPluralCase.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngPluralCase]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgPluralCase.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Attribute, args: ['ngPluralCase',] },] },
	    { type: _angular_core.TemplateRef, },
	    { type: _angular_core.ViewContainerRef, },
	    { type: NgPlural, decorators: [{ type: _angular_core.Host },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Update an HTML element styles.
	 *
	 * \@howToUse
	 * ```
	 * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
	 *
	 * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
	 *
	 * <some-element [ngStyle]="objExp">...</some-element>
	 * ```
	 *
	 * \@description
	 *
	 * The styles are updated according to the value of the expression evaluation:
	 * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
	 * - values are the values assigned to those properties (expressed in the given unit).
	 *
	 * \@stable
	 */
	var NgStyle = (function () {
	    /**
	     * @param {?} _differs
	     * @param {?} _ngEl
	     * @param {?} _renderer
	     */
	    function NgStyle(_differs, _ngEl, _renderer) {
	        this._differs = _differs;
	        this._ngEl = _ngEl;
	        this._renderer = _renderer;
	    }
	    Object.defineProperty(NgStyle.prototype, "ngStyle", {
	        /**
	         * @param {?} v
	         * @return {?}
	         */
	        set: function (v) {
	            this._ngStyle = v;
	            if (!this._differ && v) {
	                this._differ = this._differs.find(v).create();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    NgStyle.prototype.ngDoCheck = function () {
	        if (this._differ) {
	            var /** @type {?} */ changes = this._differ.diff(this._ngStyle);
	            if (changes) {
	                this._applyChanges(changes);
	            }
	        }
	    };
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgStyle.prototype._applyChanges = function (changes) {
	        var _this = this;
	        changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });
	        changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	        changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	    };
	    /**
	     * @param {?} nameAndUnit
	     * @param {?} value
	     * @return {?}
	     */
	    NgStyle.prototype._setStyle = function (nameAndUnit, value) {
	        var _a = nameAndUnit.split('.'), name = _a[0], unit = _a[1];
	        value = value != null && unit ? "" + value + unit : value;
	        this._renderer.setElementStyle(this._ngEl.nativeElement, name, /** @type {?} */ (value));
	    };
	    return NgStyle;
	}());
	NgStyle.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngStyle]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgStyle.ctorParameters = function () { return [
	    { type: _angular_core.KeyValueDiffers, },
	    { type: _angular_core.ElementRef, },
	    { type: _angular_core.Renderer, },
	]; };
	NgStyle.propDecorators = {
	    'ngStyle': [{ type: _angular_core.Input },],
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Inserts an embedded view from a prepared `TemplateRef`
	 *
	 * \@howToUse
	 * ```
	 * <ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
	 * ```
	 *
	 * \@description
	 *
	 * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.
	 * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding
	 * by the local template `let` declarations.
	 *
	 * Note: using the key `$implicit` in the context object will set it's value as default.
	 *
	 * # Example
	 *
	 * {\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}
	 *
	 * \@experimental
	 */
	var NgTemplateOutlet = (function () {
	    /**
	     * @param {?} _viewContainerRef
	     */
	    function NgTemplateOutlet(_viewContainerRef) {
	        this._viewContainerRef = _viewContainerRef;
	    }
	    Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
	        /**
	         * @deprecated v4.0.0 - Renamed to ngTemplateOutletContext.
	         * @param {?} context
	         * @return {?}
	         */
	        set: function (context) { this.ngTemplateOutletContext = context; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgTemplateOutlet.prototype.ngOnChanges = function (changes) {
	        if (this._viewRef) {
	            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
	        }
	        if (this.ngTemplateOutlet) {
	            this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext);
	        }
	    };
	    return NgTemplateOutlet;
	}());
	NgTemplateOutlet.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngTemplateOutlet]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgTemplateOutlet.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	]; };
	NgTemplateOutlet.propDecorators = {
	    'ngTemplateOutletContext': [{ type: _angular_core.Input },],
	    'ngTemplateOutlet': [{ type: _angular_core.Input },],
	    'ngOutletContext': [{ type: _angular_core.Input },],
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A collection of Angular directives that are likely to be used in each and every Angular
	 * application.
	 */
	var COMMON_DIRECTIVES = [
	    NgClass,
	    NgComponentOutlet,
	    NgForOf,
	    NgIf,
	    NgTemplateOutlet,
	    NgStyle,
	    NgSwitch,
	    NgSwitchCase,
	    NgSwitchDefault,
	    NgPlural,
	    NgPluralCase,
	];
	/**
	 * A collection of deprecated directives that are no longer part of the core module.
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} type
	 * @param {?} value
	 * @return {?}
	 */
	function invalidPipeArgumentError(type, value) {
	    return Error("InvalidPipeArgument: '" + value + "' for pipe '" + _angular_core.ɵstringify(type) + "'");
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ObservableStrategy = (function () {
	    function ObservableStrategy() {
	    }
	    /**
	     * @param {?} async
	     * @param {?} updateLatestValue
	     * @return {?}
	     */
	    ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	        return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });
	    };
	    /**
	     * @param {?} subscription
	     * @return {?}
	     */
	    ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe(); };
	    /**
	     * @param {?} subscription
	     * @return {?}
	     */
	    ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe(); };
	    return ObservableStrategy;
	}());
	var PromiseStrategy = (function () {
	    function PromiseStrategy() {
	    }
	    /**
	     * @param {?} async
	     * @param {?} updateLatestValue
	     * @return {?}
	     */
	    PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	        return async.then(updateLatestValue, function (e) { throw e; });
	    };
	    /**
	     * @param {?} subscription
	     * @return {?}
	     */
	    PromiseStrategy.prototype.dispose = function (subscription) { };
	    /**
	     * @param {?} subscription
	     * @return {?}
	     */
	    PromiseStrategy.prototype.onDestroy = function (subscription) { };
	    return PromiseStrategy;
	}());
	var _promiseStrategy = new PromiseStrategy();
	var _observableStrategy = new ObservableStrategy();
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Unwraps a value from an asynchronous primitive.
	 * \@howToUse `observable_or_promise_expression | async`
	 * \@description
	 * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
	 * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
	 * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
	 * potential memory leaks.
	 *
	 *
	 * ## Examples
	 *
	 * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
	 * promise.
	 *
	 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
	 *
	 * It's also possible to use `async` with Observables. The example below binds the `time` Observable
	 * to the view. The Observable continuously updates the view with the current time.
	 *
	 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
	 *
	 * \@stable
	 */
	var AsyncPipe = (function () {
	    /**
	     * @param {?} _ref
	     */
	    function AsyncPipe(_ref) {
	        this._ref = _ref;
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._obj = null;
	        this._strategy = null;
	    }
	    /**
	     * @return {?}
	     */
	    AsyncPipe.prototype.ngOnDestroy = function () {
	        if (this._subscription) {
	            this._dispose();
	        }
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    AsyncPipe.prototype.transform = function (obj) {
	        if (!this._obj) {
	            if (obj) {
	                this._subscribe(obj);
	            }
	            this._latestReturnedValue = this._latestValue;
	            return this._latestValue;
	        }
	        if (obj !== this._obj) {
	            this._dispose();
	            return this.transform(/** @type {?} */ (obj));
	        }
	        if (this._latestValue === this._latestReturnedValue) {
	            return this._latestReturnedValue;
	        }
	        this._latestReturnedValue = this._latestValue;
	        return _angular_core.WrappedValue.wrap(this._latestValue);
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    AsyncPipe.prototype._subscribe = function (obj) {
	        var _this = this;
	        this._obj = obj;
	        this._strategy = this._selectStrategy(obj);
	        this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    AsyncPipe.prototype._selectStrategy = function (obj) {
	        if (_angular_core.ɵisPromise(obj)) {
	            return _promiseStrategy;
	        }
	        if (_angular_core.ɵisObservable(obj)) {
	            return _observableStrategy;
	        }
	        throw invalidPipeArgumentError(AsyncPipe, obj);
	    };
	    /**
	     * @return {?}
	     */
	    AsyncPipe.prototype._dispose = function () {
	        this._strategy.dispose(this._subscription);
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._obj = null;
	    };
	    /**
	     * @param {?} async
	     * @param {?} value
	     * @return {?}
	     */
	    AsyncPipe.prototype._updateLatestValue = function (async, value) {
	        if (async === this._obj) {
	            this._latestValue = value;
	            this._ref.markForCheck();
	        }
	    };
	    return AsyncPipe;
	}());
	AsyncPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'async', pure: false },] },
	];
	/**
	 * @nocollapse
	 */
	AsyncPipe.ctorParameters = function () { return [
	    { type: _angular_core.ChangeDetectorRef, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Transforms text to lowercase.
	 *
	 * {\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }
	 *
	 * \@stable
	 */
	var LowerCasePipe = (function () {
	    function LowerCasePipe() {
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    LowerCasePipe.prototype.transform = function (value) {
	        if (!value)
	            return value;
	        if (typeof value !== 'string') {
	            throw invalidPipeArgumentError(LowerCasePipe, value);
	        }
	        return value.toLowerCase();
	    };
	    return LowerCasePipe;
	}());
	LowerCasePipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'lowercase' },] },
	];
	/**
	 * @nocollapse
	 */
	LowerCasePipe.ctorParameters = function () { return []; };
	/**
	 * Helper method to transform a single word to titlecase.
	 *
	 * \@stable
	 * @param {?} word
	 * @return {?}
	 */
	function titleCaseWord(word) {
	    if (!word)
	        return word;
	    return word[0].toUpperCase() + word.substr(1).toLowerCase();
	}
	/**
	 * Transforms text to titlecase.
	 *
	 * \@stable
	 */
	var TitleCasePipe = (function () {
	    function TitleCasePipe() {
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    TitleCasePipe.prototype.transform = function (value) {
	        if (!value)
	            return value;
	        if (typeof value !== 'string') {
	            throw invalidPipeArgumentError(TitleCasePipe, value);
	        }
	        return value.split(/\b/g).map(function (word) { return titleCaseWord(word); }).join('');
	    };
	    return TitleCasePipe;
	}());
	TitleCasePipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'titlecase' },] },
	];
	/**
	 * @nocollapse
	 */
	TitleCasePipe.ctorParameters = function () { return []; };
	/**
	 * Transforms text to uppercase.
	 *
	 * \@stable
	 */
	var UpperCasePipe = (function () {
	    function UpperCasePipe() {
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    UpperCasePipe.prototype.transform = function (value) {
	        if (!value)
	            return value;
	        if (typeof value !== 'string') {
	            throw invalidPipeArgumentError(UpperCasePipe, value);
	        }
	        return value.toUpperCase();
	    };
	    return UpperCasePipe;
	}());
	UpperCasePipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'uppercase' },] },
	];
	/**
	 * @nocollapse
	 */
	UpperCasePipe.ctorParameters = function () { return []; };
	var NumberFormatStyle = {};
	NumberFormatStyle.Decimal = 0;
	NumberFormatStyle.Percent = 1;
	NumberFormatStyle.Currency = 2;
	NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
	NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
	NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";
	var NumberFormatter = (function () {
	    function NumberFormatter() {
	    }
	    /**
	     * @param {?} num
	     * @param {?} locale
	     * @param {?} style
	     * @param {?=} __3
	     * @return {?}
	     */
	    NumberFormatter.format = function (num, locale, style, _a) {
	        var _b = _a === void 0 ? {} : _a, minimumIntegerDigits = _b.minimumIntegerDigits, minimumFractionDigits = _b.minimumFractionDigits, maximumFractionDigits = _b.maximumFractionDigits, currency = _b.currency, _c = _b.currencyAsSymbol, currencyAsSymbol = _c === void 0 ? false : _c;
	        var /** @type {?} */ options = {
	            minimumIntegerDigits: minimumIntegerDigits,
	            minimumFractionDigits: minimumFractionDigits,
	            maximumFractionDigits: maximumFractionDigits,
	            style: NumberFormatStyle[style].toLowerCase()
	        };
	        if (style == NumberFormatStyle.Currency) {
	            options.currency = currency;
	            options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
	        }
	        return new Intl.NumberFormat(locale, options).format(num);
	    };
	    return NumberFormatter;
	}());
	var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
	var PATTERN_ALIASES = {
	    // Keys are quoted so they do not get renamed during closure compilation.
	    'yMMMdjms': datePartGetterFactory(combine([
	        digitCondition('year', 1),
	        nameCondition('month', 3),
	        digitCondition('day', 1),
	        digitCondition('hour', 1),
	        digitCondition('minute', 1),
	        digitCondition('second', 1),
	    ])),
	    'yMdjm': datePartGetterFactory(combine([
	        digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),
	        digitCondition('hour', 1), digitCondition('minute', 1)
	    ])),
	    'yMMMMEEEEd': datePartGetterFactory(combine([
	        digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),
	        digitCondition('day', 1)
	    ])),
	    'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
	    'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
	    'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
	    'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
	    'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
	};
	var DATE_FORMATS = {
	    // Keys are quoted so they do not get renamed.
	    'yyyy': datePartGetterFactory(digitCondition('year', 4)),
	    'yy': datePartGetterFactory(digitCondition('year', 2)),
	    'y': datePartGetterFactory(digitCondition('year', 1)),
	    'MMMM': datePartGetterFactory(nameCondition('month', 4)),
	    'MMM': datePartGetterFactory(nameCondition('month', 3)),
	    'MM': datePartGetterFactory(digitCondition('month', 2)),
	    'M': datePartGetterFactory(digitCondition('month', 1)),
	    'LLLL': datePartGetterFactory(nameCondition('month', 4)),
	    'L': datePartGetterFactory(nameCondition('month', 1)),
	    'dd': datePartGetterFactory(digitCondition('day', 2)),
	    'd': datePartGetterFactory(digitCondition('day', 1)),
	    'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
	    'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
	    'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
	    'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	    'jj': datePartGetterFactory(digitCondition('hour', 2)),
	    'j': datePartGetterFactory(digitCondition('hour', 1)),
	    'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
	    'm': datePartGetterFactory(digitCondition('minute', 1)),
	    'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),
	    's': datePartGetterFactory(digitCondition('second', 1)),
	    // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	    // we can be just safely rely on using `sss` since we currently don't support single or two digit
	    // fractions
	    'sss': datePartGetterFactory(digitCondition('second', 3)),
	    'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),
	    'EEE': datePartGetterFactory(nameCondition('weekday', 3)),
	    'EE': datePartGetterFactory(nameCondition('weekday', 2)),
	    'E': datePartGetterFactory(nameCondition('weekday', 1)),
	    'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	    'Z': timeZoneGetter('short'),
	    'z': timeZoneGetter('long'),
	    'ww': datePartGetterFactory({}),
	    // first Thursday of the year. not support ?
	    'w': datePartGetterFactory({}),
	    // of the year not support ?
	    'G': datePartGetterFactory(nameCondition('era', 1)),
	    'GG': datePartGetterFactory(nameCondition('era', 2)),
	    'GGG': datePartGetterFactory(nameCondition('era', 3)),
	    'GGGG': datePartGetterFactory(nameCondition('era', 4))
	};
	/**
	 * @param {?} inner
	 * @return {?}
	 */
	function digitModifier(inner) {
	    return function (date, locale) {
	        var /** @type {?} */ result = inner(date, locale);
	        return result.length == 1 ? '0' + result : result;
	    };
	}
	/**
	 * @param {?} inner
	 * @return {?}
	 */
	function hourClockExtractor(inner) {
	    return function (date, locale) { return inner(date, locale).split(' ')[1]; };
	}
	/**
	 * @param {?} inner
	 * @return {?}
	 */
	function hourExtractor(inner) {
	    return function (date, locale) { return inner(date, locale).split(' ')[0]; };
	}
	/**
	 * @param {?} date
	 * @param {?} locale
	 * @param {?} options
	 * @return {?}
	 */
	function intlDateFormat(date, locale, options) {
	    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
	}
	/**
	 * @param {?} timezone
	 * @return {?}
	 */
	function timeZoneGetter(timezone) {
	    // To workaround `Intl` API restriction for single timezone let format with 24 hours
	    var /** @type {?} */ options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
	    return function (date, locale) {
	        var /** @type {?} */ result = intlDateFormat(date, locale, options);
	        // Then extract first 3 letters that related to hours
	        return result ? result.substring(3) : '';
	    };
	}
	/**
	 * @param {?} options
	 * @param {?} value
	 * @return {?}
	 */
	function hour12Modify(options, value) {
	    options.hour12 = value;
	    return options;
	}
	/**
	 * @param {?} prop
	 * @param {?} len
	 * @return {?}
	 */
	function digitCondition(prop, len) {
	    var /** @type {?} */ result = {};
	    result[prop] = len === 2 ? '2-digit' : 'numeric';
	    return result;
	}
	/**
	 * @param {?} prop
	 * @param {?} len
	 * @return {?}
	 */
	function nameCondition(prop, len) {
	    var /** @type {?} */ result = {};
	    if (len < 4) {
	        result[prop] = len > 1 ? 'short' : 'narrow';
	    }
	    else {
	        result[prop] = 'long';
	    }
	    return result;
	}
	/**
	 * @param {?} options
	 * @return {?}
	 */
	function combine(options) {
	    return ((Object)).assign.apply(((Object)), [{}].concat(options));
	}
	/**
	 * @param {?} ret
	 * @return {?}
	 */
	function datePartGetterFactory(ret) {
	    return function (date, locale) { return intlDateFormat(date, locale, ret); };
	}
	var DATE_FORMATTER_CACHE = new Map();
	/**
	 * @param {?} format
	 * @param {?} date
	 * @param {?} locale
	 * @return {?}
	 */
	function dateFormatter(format, date, locale) {
	    var /** @type {?} */ fn = PATTERN_ALIASES[format];
	    if (fn)
	        return fn(date, locale);
	    var /** @type {?} */ cacheKey = format;
	    var /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);
	    if (!parts) {
	        parts = [];
	        var /** @type {?} */ match = void 0;
	        DATE_FORMATS_SPLIT.exec(format);
	        while (format) {
	            match = DATE_FORMATS_SPLIT.exec(format);
	            if (match) {
	                parts = parts.concat(match.slice(1));
	                format = parts.pop();
	            }
	            else {
	                parts.push(format);
	                format = null;
	            }
	        }
	        DATE_FORMATTER_CACHE.set(cacheKey, parts);
	    }
	    return parts.reduce(function (text, part) {
	        var /** @type {?} */ fn = DATE_FORMATS[part];
	        return text + (fn ? fn(date, locale) : partToTime(part));
	    }, '');
	}
	/**
	 * @param {?} part
	 * @return {?}
	 */
	function partToTime(part) {
	    return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
	}
	var DateFormatter = (function () {
	    function DateFormatter() {
	    }
	    /**
	     * @param {?} date
	     * @param {?} locale
	     * @param {?} pattern
	     * @return {?}
	     */
	    DateFormatter.format = function (date, locale, pattern) {
	        return dateFormatter(pattern, date, locale);
	    };
	    return DateFormatter;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
	/**
	 * @param {?} pipe
	 * @param {?} locale
	 * @param {?} value
	 * @param {?} style
	 * @param {?} digits
	 * @param {?=} currency
	 * @param {?=} currencyAsSymbol
	 * @return {?}
	 */
	function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
	    if (currency === void 0) { currency = null; }
	    if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
	    if (value == null)
	        return null;
	    // Convert strings to numbers
	    value = typeof value === 'string' && isNumeric(value) ? +value : value;
	    if (typeof value !== 'number') {
	        throw invalidPipeArgumentError(pipe, value);
	    }
	    var /** @type {?} */ minInt;
	    var /** @type {?} */ minFraction;
	    var /** @type {?} */ maxFraction;
	    if (style !== NumberFormatStyle.Currency) {
	        // rely on Intl default for currency
	        minInt = 1;
	        minFraction = 0;
	        maxFraction = 3;
	    }
	    if (digits) {
	        var /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);
	        if (parts === null) {
	            throw new Error(digits + " is not a valid digit info for number pipes");
	        }
	        if (parts[1] != null) {
	            minInt = parseIntAutoRadix(parts[1]);
	        }
	        if (parts[3] != null) {
	            minFraction = parseIntAutoRadix(parts[3]);
	        }
	        if (parts[5] != null) {
	            maxFraction = parseIntAutoRadix(parts[5]);
	        }
	    }
	    return NumberFormatter.format(/** @type {?} */ (value), locale, style, {
	        minimumIntegerDigits: minInt,
	        minimumFractionDigits: minFraction,
	        maximumFractionDigits: maxFraction,
	        currency: currency,
	        currencyAsSymbol: currencyAsSymbol,
	    });
	}
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Formats a number according to locale rules.
	 * \@howToUse `number_expression | number[:digitInfo]`
	 *
	 * Formats a number as text. Group sizing and separator and other locale-specific
	 * configurations are based on the active locale.
	 *
	 * where `expression` is a number:
	 *  - `digitInfo` is a `string` which has a following format: <br>
	 *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
	 *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
	 *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
	 *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
	 *
	 * For more information on the acceptable range for each of these numbers and other
	 * details see your native internationalization library.
	 *
	 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	 * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
	 *
	 * ### Example
	 *
	 * {\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}
	 *
	 * \@stable
	 */
	var DecimalPipe = (function () {
	    /**
	     * @param {?} _locale
	     */
	    function DecimalPipe(_locale) {
	        this._locale = _locale;
	    }
	    /**
	     * @param {?} value
	     * @param {?=} digits
	     * @return {?}
	     */
	    DecimalPipe.prototype.transform = function (value, digits) {
	        if (digits === void 0) { digits = null; }
	        return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
	    };
	    return DecimalPipe;
	}());
	DecimalPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'number' },] },
	];
	/**
	 * @nocollapse
	 */
	DecimalPipe.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	]; };
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Formats a number as a percentage according to locale rules.
	 * \@howToUse `number_expression | percent[:digitInfo]`
	 *
	 * \@description
	 *
	 * Formats a number as percentage.
	 *
	 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
	 *
	 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	 * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
	 *
	 * ### Example
	 *
	 * {\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}
	 *
	 * \@stable
	 */
	var PercentPipe = (function () {
	    /**
	     * @param {?} _locale
	     */
	    function PercentPipe(_locale) {
	        this._locale = _locale;
	    }
	    /**
	     * @param {?} value
	     * @param {?=} digits
	     * @return {?}
	     */
	    PercentPipe.prototype.transform = function (value, digits) {
	        if (digits === void 0) { digits = null; }
	        return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
	    };
	    return PercentPipe;
	}());
	PercentPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'percent' },] },
	];
	/**
	 * @nocollapse
	 */
	PercentPipe.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	]; };
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Formats a number as currency using locale rules.
	 * \@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`
	 * \@description
	 *
	 * Use `currency` to format a number as currency.
	 *
	 * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
	 *    as `USD` for the US dollar and `EUR` for the euro.
	 * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
	 *   - `true`: use symbol (e.g. `$`).
	 *   - `false`(default): use code (e.g. `USD`).
	 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
	 *
	 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	 * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
	 *
	 * ### Example
	 *
	 * {\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}
	 *
	 * \@stable
	 */
	var CurrencyPipe = (function () {
	    /**
	     * @param {?} _locale
	     */
	    function CurrencyPipe(_locale) {
	        this._locale = _locale;
	    }
	    /**
	     * @param {?} value
	     * @param {?=} currencyCode
	     * @param {?=} symbolDisplay
	     * @param {?=} digits
	     * @return {?}
	     */
	    CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
	        if (currencyCode === void 0) { currencyCode = 'USD'; }
	        if (symbolDisplay === void 0) { symbolDisplay = false; }
	        if (digits === void 0) { digits = null; }
	        return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
	    };
	    return CurrencyPipe;
	}());
	CurrencyPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'currency' },] },
	];
	/**
	 * @nocollapse
	 */
	CurrencyPipe.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	]; };
	/**
	 * @param {?} text
	 * @return {?}
	 */
	function parseIntAutoRadix(text) {
	    var /** @type {?} */ result = parseInt(text);
	    if (isNaN(result)) {
	        throw new Error('Invalid integer literal when parsing ' + text);
	    }
	    return result;
	}
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function isNumeric(value) {
	    return !isNaN(value - parseFloat(value));
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Formats a date according to locale rules.
	 * \@howToUse `date_expression | date[:format]`
	 * \@description
	 *
	 * Where:
	 * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
	 * (https://www.w3.org/TR/NOTE-datetime).
	 * - `format` indicates which date/time components to include. The format can be predefined as
	 *   shown below or custom as shown in the table.
	 *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
	 *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
	 *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
	 *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
	 *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
	 *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
	 *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
	 *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
	 *
	 *
	 *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |
	 *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|
	 *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |
	 *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |
	 *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
	 *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |
	 *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
	 *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |
	 *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|
	 *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |
	 *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |
	 *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |
	 *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |
	 *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |
	 *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |
	 *
	 * In javascript, only the components specified will be respected (not the ordering,
	 * punctuations, ...) and details of the formatting will be dependent on the locale.
	 *
	 * Timezone of the formatted text will be the local system timezone of the end-user's machine.
	 *
	 * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
	 * applied and the formatted text will have the same day, month and year of the expression.
	 *
	 * WARNINGS:
	 * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
	 *   Instead users should treat the date as an immutable object and change the reference when the
	 *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
	 *   which would be an expensive operation).
	 * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
	 *   browsers.
	 *
	 * ### Examples
	 *
	 * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
	 * in the _local_ time and locale is 'en-US':
	 *
	 * ```
	 *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
	 *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
	 *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
	 *     {{ dateObj | date:'mmss' }}        // output is '43:11'
	 * ```
	 *
	 * {\@example common/pipes/ts/date_pipe.ts region='DatePipe'}
	 *
	 * \@stable
	 */
	var DatePipe = (function () {
	    /**
	     * @param {?} _locale
	     */
	    function DatePipe(_locale) {
	        this._locale = _locale;
	    }
	    /**
	     * @param {?} value
	     * @param {?=} pattern
	     * @return {?}
	     */
	    DatePipe.prototype.transform = function (value, pattern) {
	        if (pattern === void 0) { pattern = 'mediumDate'; }
	        var /** @type {?} */ date;
	        if (isBlank(value) || value !== value)
	            return null;
	        if (typeof value === 'string') {
	            value = value.trim();
	        }
	        if (isDate(value)) {
	            date = value;
	        }
	        else if (isNumeric(value)) {
	            date = new Date(parseFloat(value));
	        }
	        else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
	            /**
	            * For ISO Strings without time the day, month and year must be extracted from the ISO String
	            * before Date creation to avoid time offset and errors in the new Date.
	            * If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
	            * date, some browsers (e.g. IE 9) will throw an invalid Date error
	            * If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
	            * is applied
	            * Note: ISO months are 0 for January, 1 for February, ...
	            */
	            var _a = value.split('-').map(function (val) { return parseInt(val, 10); }), y = _a[0], m = _a[1], d = _a[2];
	            date = new Date(y, m - 1, d);
	        }
	        else {
	            date = new Date(value);
	        }
	        if (!isDate(date)) {
	            var /** @type {?} */ match = void 0;
	            if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {
	                date = isoStringToDate(match);
	            }
	            else {
	                throw invalidPipeArgumentError(DatePipe, value);
	            }
	        }
	        return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
	    };
	    return DatePipe;
	}());
	/**
	 * \@internal
	 */
	DatePipe._ALIASES = {
	    'medium': 'yMMMdjms',
	    'short': 'yMdjm',
	    'fullDate': 'yMMMMEEEEd',
	    'longDate': 'yMMMMd',
	    'mediumDate': 'yMMMd',
	    'shortDate': 'yMd',
	    'mediumTime': 'jms',
	    'shortTime': 'jm'
	};
	DatePipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'date', pure: true },] },
	];
	/**
	 * @nocollapse
	 */
	DatePipe.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	]; };
	/**
	 * @param {?} obj
	 * @return {?}
	 */
	function isBlank(obj) {
	    return obj == null || obj === '';
	}
	/**
	 * @param {?} obj
	 * @return {?}
	 */
	function isDate(obj) {
	    return obj instanceof Date && !isNaN(obj.valueOf());
	}
	/**
	 * @param {?} match
	 * @return {?}
	 */
	function isoStringToDate(match) {
	    var /** @type {?} */ date = new Date(0);
	    var /** @type {?} */ tzHour = 0;
	    var /** @type {?} */ tzMin = 0;
	    var /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
	    var /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;
	    if (match[9]) {
	        tzHour = toInt(match[9] + match[10]);
	        tzMin = toInt(match[9] + match[11]);
	    }
	    dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
	    var /** @type {?} */ h = toInt(match[4] || '0') - tzHour;
	    var /** @type {?} */ m = toInt(match[5] || '0') - tzMin;
	    var /** @type {?} */ s = toInt(match[6] || '0');
	    var /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
	    timeSetter.call(date, h, m, s, ms);
	    return date;
	}
	/**
	 * @param {?} str
	 * @return {?}
	 */
	function toInt(str) {
	    return parseInt(str, 10);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _INTERPOLATION_REGEXP = /#/g;
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.
	 * \@howToUse `expression | i18nPlural:mapping`
	 * \@description
	 *
	 *  Where:
	 *  - `expression` is a number.
	 *  - `mapping` is an object that mimics the ICU format, see
	 *    http://userguide.icu-project.org/formatparse/messages
	 *
	 *  ## Example
	 *
	 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
	 *
	 * \@experimental
	 */
	var I18nPluralPipe = (function () {
	    /**
	     * @param {?} _localization
	     */
	    function I18nPluralPipe(_localization) {
	        this._localization = _localization;
	    }
	    /**
	     * @param {?} value
	     * @param {?} pluralMap
	     * @return {?}
	     */
	    I18nPluralPipe.prototype.transform = function (value, pluralMap) {
	        if (value == null)
	            return '';
	        if (typeof pluralMap !== 'object' || pluralMap === null) {
	            throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);
	        }
	        var /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
	        return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
	    };
	    return I18nPluralPipe;
	}());
	I18nPluralPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'i18nPlural', pure: true },] },
	];
	/**
	 * @nocollapse
	 */
	I18nPluralPipe.ctorParameters = function () { return [
	    { type: NgLocalization, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Generic selector that displays the string that matches the current value.
	 * \@howToUse `expression | i18nSelect:mapping`
	 * \@description
	 *
	 *  Where `mapping` is an object that indicates the text that should be displayed
	 *  for different values of the provided `expression`.
	 *  If none of the keys of the mapping match the value of the `expression`, then the content
	 *  of the `other` key is returned when present, otherwise an empty string is returned.
	 *
	 *  ## Example
	 *
	 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
	 *
	 *  \@experimental
	 */
	var I18nSelectPipe = (function () {
	    function I18nSelectPipe() {
	    }
	    /**
	     * @param {?} value
	     * @param {?} mapping
	     * @return {?}
	     */
	    I18nSelectPipe.prototype.transform = function (value, mapping) {
	        if (value == null)
	            return '';
	        if (typeof mapping !== 'object' || typeof value !== 'string') {
	            throw invalidPipeArgumentError(I18nSelectPipe, mapping);
	        }
	        if (mapping.hasOwnProperty(value)) {
	            return mapping[value];
	        }
	        if (mapping.hasOwnProperty('other')) {
	            return mapping['other'];
	        }
	        return '';
	    };
	    return I18nSelectPipe;
	}());
	I18nSelectPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'i18nSelect', pure: true },] },
	];
	/**
	 * @nocollapse
	 */
	I18nSelectPipe.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Converts value into JSON string.
	 * \@howToUse `expression | json`
	 * \@description
	 *
	 * Converts value into string using `JSON.stringify`. Useful for debugging.
	 *
	 * ### Example
	 * {\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
	 *
	 * \@stable
	 */
	var JsonPipe = (function () {
	    function JsonPipe() {
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    JsonPipe.prototype.transform = function (value) { return JSON.stringify(value, null, 2); };
	    return JsonPipe;
	}());
	JsonPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'json', pure: false },] },
	];
	/**
	 * @nocollapse
	 */
	JsonPipe.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Creates a new List or String containing a subset (slice) of the elements.
	 * \@howToUse `array_or_string_expression | slice:start[:end]`
	 * \@description
	 *
	 * Where the input expression is a `List` or `String`, and:
	 * - `start`: The starting index of the subset to return.
	 *   - **a positive integer**: return the item at `start` index and all items after
	 *     in the list or string expression.
	 *   - **a negative integer**: return the item at `start` index from the end and all items after
	 *     in the list or string expression.
	 *   - **if positive and greater than the size of the expression**: return an empty list or string.
	 *   - **if negative and greater than the size of the expression**: return entire list or string.
	 * - `end`: The ending index of the subset to return.
	 *   - **omitted**: return all items until the end.
	 *   - **if positive**: return all items before `end` index of the list or string.
	 *   - **if negative**: return all items before `end` index from the end of the list or string.
	 *
	 * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
	 * and `String.prototype.slice()`.
	 *
	 * When operating on a [List], the returned list is always a copy even when all
	 * the elements are being returned.
	 *
	 * When operating on a blank value, the pipe returns the blank value.
	 *
	 * ## List Example
	 *
	 * This `ngFor` example:
	 *
	 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
	 *
	 * produces the following:
	 *
	 *     <li>b</li>
	 *     <li>c</li>
	 *
	 * ## String Examples
	 *
	 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
	 *
	 * \@stable
	 */
	var SlicePipe = (function () {
	    function SlicePipe() {
	    }
	    /**
	     * @param {?} value
	     * @param {?} start
	     * @param {?=} end
	     * @return {?}
	     */
	    SlicePipe.prototype.transform = function (value, start, end) {
	        if (value == null)
	            return value;
	        if (!this.supports(value)) {
	            throw invalidPipeArgumentError(SlicePipe, value);
	        }
	        return value.slice(start, end);
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    SlicePipe.prototype.supports = function (obj) { return typeof obj === 'string' || Array.isArray(obj); };
	    return SlicePipe;
	}());
	SlicePipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'slice', pure: false },] },
	];
	/**
	 * @nocollapse
	 */
	SlicePipe.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * This module provides a set of common Pipes.
	 */
	/**
	 * A collection of Angular pipes that are likely to be used in each and every application.
	 */
	var COMMON_PIPES = [
	    AsyncPipe,
	    UpperCasePipe,
	    LowerCasePipe,
	    JsonPipe,
	    SlicePipe,
	    DecimalPipe,
	    PercentPipe,
	    TitleCasePipe,
	    CurrencyPipe,
	    DatePipe,
	    I18nPluralPipe,
	    I18nSelectPipe,
	];
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The module that includes all the basic Angular directives like {\@link NgIf}, {\@link NgForOf}, ...
	 *
	 * \@stable
	 */
	var CommonModule = (function () {
	    function CommonModule() {
	    }
	    return CommonModule;
	}());
	CommonModule.decorators = [
	    { type: _angular_core.NgModule, args: [{
	                declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
	                exports: [COMMON_DIRECTIVES, COMMON_PIPES],
	                providers: [
	                    { provide: NgLocalization, useClass: NgLocaleLocalization },
	                ],
	            },] },
	];
	/**
	 * @nocollapse
	 */
	CommonModule.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var PLATFORM_BROWSER_ID = 'browser';
	var PLATFORM_SERVER_ID = 'server';
	var PLATFORM_WORKER_APP_ID = 'browserWorkerApp';
	var PLATFORM_WORKER_UI_ID = 'browserWorkerUi';
	/**
	 * Returns whether a platform id represents a browser platform.
	 * \@experimental
	 * @param {?} platformId
	 * @return {?}
	 */
	function isPlatformBrowser(platformId) {
	    return platformId === PLATFORM_BROWSER_ID;
	}
	/**
	 * Returns whether a platform id represents a server platform.
	 * \@experimental
	 * @param {?} platformId
	 * @return {?}
	 */
	function isPlatformServer(platformId) {
	    return platformId === PLATFORM_SERVER_ID;
	}
	/**
	 * Returns whether a platform id represents a web worker app platform.
	 * \@experimental
	 * @param {?} platformId
	 * @return {?}
	 */
	function isPlatformWorkerApp(platformId) {
	    return platformId === PLATFORM_WORKER_APP_ID;
	}
	/**
	 * Returns whether a platform id represents a web worker UI platform.
	 * \@experimental
	 * @param {?} platformId
	 * @return {?}
	 */
	function isPlatformWorkerUi(platformId) {
	    return platformId === PLATFORM_WORKER_UI_ID;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * Entry point for all public APIs of the common package.
	 */
	/**
	 * \@stable
	 */
	var VERSION = new _angular_core.Version('4.0.0');

	exports.NgLocaleLocalization = NgLocaleLocalization;
	exports.NgLocalization = NgLocalization;
	exports.CommonModule = CommonModule;
	exports.NgClass = NgClass;
	exports.NgFor = NgFor;
	exports.NgForOf = NgForOf;
	exports.NgForOfContext = NgForOfContext;
	exports.NgIf = NgIf;
	exports.NgIfContext = NgIfContext;
	exports.NgPlural = NgPlural;
	exports.NgPluralCase = NgPluralCase;
	exports.NgStyle = NgStyle;
	exports.NgSwitch = NgSwitch;
	exports.NgSwitchCase = NgSwitchCase;
	exports.NgSwitchDefault = NgSwitchDefault;
	exports.NgTemplateOutlet = NgTemplateOutlet;
	exports.NgComponentOutlet = NgComponentOutlet;
	exports.AsyncPipe = AsyncPipe;
	exports.DatePipe = DatePipe;
	exports.I18nPluralPipe = I18nPluralPipe;
	exports.I18nSelectPipe = I18nSelectPipe;
	exports.JsonPipe = JsonPipe;
	exports.LowerCasePipe = LowerCasePipe;
	exports.CurrencyPipe = CurrencyPipe;
	exports.DecimalPipe = DecimalPipe;
	exports.PercentPipe = PercentPipe;
	exports.SlicePipe = SlicePipe;
	exports.UpperCasePipe = UpperCasePipe;
	exports.TitleCasePipe = TitleCasePipe;
	exports.ɵPLATFORM_BROWSER_ID = PLATFORM_BROWSER_ID;
	exports.ɵPLATFORM_SERVER_ID = PLATFORM_SERVER_ID;
	exports.ɵPLATFORM_WORKER_APP_ID = PLATFORM_WORKER_APP_ID;
	exports.ɵPLATFORM_WORKER_UI_ID = PLATFORM_WORKER_UI_ID;
	exports.isPlatformBrowser = isPlatformBrowser;
	exports.isPlatformServer = isPlatformServer;
	exports.isPlatformWorkerApp = isPlatformWorkerApp;
	exports.isPlatformWorkerUi = isPlatformWorkerUi;
	exports.VERSION = VERSION;
	exports.PlatformLocation = PlatformLocation;
	exports.LOCATION_INITIALIZED = LOCATION_INITIALIZED;
	exports.LocationStrategy = LocationStrategy;
	exports.APP_BASE_HREF = APP_BASE_HREF;
	exports.HashLocationStrategy = HashLocationStrategy;
	exports.PathLocationStrategy = PathLocationStrategy;
	exports.Location = Location;
	exports.ɵa = COMMON_DIRECTIVES;
	exports.ɵb = COMMON_PIPES;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));
	//# sourceMappingURL=common.umd.js.map


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(243), __webpack_require__(206), __webpack_require__(241), __webpack_require__(240)) :
		typeof define === 'function' && define.amd ? define(['exports', '@angular/compiler', '@angular/core', '@angular/common', '@angular/platform-browser'], factory) :
		(factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}),global.ng.compiler,global.ng.core,global.ng.common,global.ng.platformBrowser));
	}(this, (function (exports,_angular_compiler,_angular_core,_angular_common,_angular_platformBrowser) { 'use strict';

	var __extends = (undefined && undefined.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ResourceLoaderImpl = (function (_super) {
	    __extends(ResourceLoaderImpl, _super);
	    function ResourceLoaderImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ResourceLoaderImpl.prototype.get = function (url) {
	        var resolve;
	        var reject;
	        var promise = new Promise(function (res, rej) {
	            resolve = res;
	            reject = rej;
	        });
	        var xhr = new XMLHttpRequest();
	        xhr.open('GET', url, true);
	        xhr.responseType = 'text';
	        xhr.onload = function () {
	            // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	            // response/responseType properties were introduced in ResourceLoader Level2 spec (supported
	            // by IE10)
	            var response = xhr.response || xhr.responseText;
	            // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	            var status = xhr.status === 1223 ? 204 : xhr.status;
	            // fix status code when it is 0 (0 status is undocumented).
	            // Occurs when accessing file resources or on Android 4.1 stock browser
	            // while retrieving files from application cache.
	            if (status === 0) {
	                status = response ? 200 : 0;
	            }
	            if (200 <= status && status <= 300) {
	                resolve(response);
	            }
	            else {
	                reject("Failed to load " + url);
	            }
	        };
	        xhr.onerror = function () { reject("Failed to load " + url); };
	        xhr.send();
	        return promise;
	    };
	    return ResourceLoaderImpl;
	}(_angular_compiler.ResourceLoader));
	ResourceLoaderImpl.decorators = [
	    { type: _angular_core.Injectable },
	];
	/** @nocollapse */
	ResourceLoaderImpl.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [
	    _angular_platformBrowser.ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS,
	    {
	        provide: _angular_core.COMPILER_OPTIONS,
	        useValue: { providers: [{ provide: _angular_compiler.ResourceLoader, useClass: ResourceLoaderImpl }] },
	        multi: true
	    },
	    { provide: _angular_core.PLATFORM_ID, useValue: _angular_common.ɵPLATFORM_BROWSER_ID },
	];
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An implementation of ResourceLoader that uses a template cache to avoid doing an actual
	 * ResourceLoader.
	 *
	 * The template cache needs to be built and loaded into window.$templateCache
	 * via a separate mechanism.
	 */
	var CachedResourceLoader = (function (_super) {
	    __extends(CachedResourceLoader, _super);
	    function CachedResourceLoader() {
	        var _this = _super.call(this) || this;
	        _this._cache = _angular_core.ɵglobal.$templateCache;
	        if (_this._cache == null) {
	            throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');
	        }
	        return _this;
	    }
	    CachedResourceLoader.prototype.get = function (url) {
	        if (this._cache.hasOwnProperty(url)) {
	            return Promise.resolve(this._cache[url]);
	        }
	        else {
	            return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);
	        }
	    };
	    return CachedResourceLoader;
	}(_angular_compiler.ResourceLoader));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * Entry point for all public APIs of the common package.
	 */
	/**
	 * @stable
	 */
	var VERSION = new _angular_core.Version('4.0.0');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @experimental
	 */
	var RESOURCE_CACHE_PROVIDER = [{ provide: _angular_compiler.ResourceLoader, useClass: CachedResourceLoader }];
	/**
	 * @stable
	 */
	var platformBrowserDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);

	exports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER;
	exports.platformBrowserDynamic = platformBrowserDynamic;
	exports.VERSION = VERSION;
	exports.ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS;
	exports.ɵResourceLoaderImpl = ResourceLoaderImpl;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));
	//# sourceMappingURL=platform-browser-dynamic.umd.js.map


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(206)) :
		typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
		(factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}),global.ng.core));
	}(this, (function (exports,_angular_core) { 'use strict';

	var __extends = (undefined && undefined.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * Entry point for all public APIs of the common package.
	 */
	/**
	 * \@stable
	 */
	var VERSION = new _angular_core.Version('4.0.0');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A segment of text within the template.
	 */
	var TextAst = (function () {
	    /**
	     * @param {?} value
	     * @param {?} ngContentIndex
	     * @param {?} sourceSpan
	     */
	    function TextAst(value, ngContentIndex, sourceSpan) {
	        this.value = value;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    TextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	    return TextAst;
	}());
	/**
	 * A bound expression within the text of a template.
	 */
	var BoundTextAst = (function () {
	    /**
	     * @param {?} value
	     * @param {?} ngContentIndex
	     * @param {?} sourceSpan
	     */
	    function BoundTextAst(value, ngContentIndex, sourceSpan) {
	        this.value = value;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    BoundTextAst.prototype.visit = function (visitor, context) {
	        return visitor.visitBoundText(this, context);
	    };
	    return BoundTextAst;
	}());
	/**
	 * A plain attribute on an element.
	 */
	var AttrAst = (function () {
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function AttrAst(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    AttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
	    return AttrAst;
	}());
	/**
	 * A binding for an element property (e.g. `[property]="expression"`) or an animation trigger (e.g.
	 * `[\@trigger]="stateExp"`)
	 */
	var BoundElementPropertyAst = (function () {
	    /**
	     * @param {?} name
	     * @param {?} type
	     * @param {?} securityContext
	     * @param {?} value
	     * @param {?} unit
	     * @param {?} sourceSpan
	     */
	    function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {
	        this.name = name;
	        this.type = type;
	        this.securityContext = securityContext;
	        this.value = value;
	        this.unit = unit;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    BoundElementPropertyAst.prototype.visit = function (visitor, context) {
	        return visitor.visitElementProperty(this, context);
	    };
	    Object.defineProperty(BoundElementPropertyAst.prototype, "isAnimation", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.type === PropertyBindingType.Animation; },
	        enumerable: true,
	        configurable: true
	    });
	    return BoundElementPropertyAst;
	}());
	/**
	 * A binding for an element event (e.g. `(event)="handler()"`) or an animation trigger event (e.g.
	 * `(\@trigger.phase)="callback($event)"`).
	 */
	var BoundEventAst = (function () {
	    /**
	     * @param {?} name
	     * @param {?} target
	     * @param {?} phase
	     * @param {?} handler
	     * @param {?} sourceSpan
	     */
	    function BoundEventAst(name, target, phase, handler, sourceSpan) {
	        this.name = name;
	        this.target = target;
	        this.phase = phase;
	        this.handler = handler;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} name
	     * @param {?} target
	     * @param {?} phase
	     * @return {?}
	     */
	    BoundEventAst.calcFullName = function (name, target, phase) {
	        if (target) {
	            return target + ":" + name;
	        }
	        else if (phase) {
	            return "@" + name + "." + phase;
	        }
	        else {
	            return name;
	        }
	    };
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    BoundEventAst.prototype.visit = function (visitor, context) {
	        return visitor.visitEvent(this, context);
	    };
	    Object.defineProperty(BoundEventAst.prototype, "fullName", {
	        /**
	         * @return {?}
	         */
	        get: function () { return BoundEventAst.calcFullName(this.name, this.target, this.phase); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BoundEventAst.prototype, "isAnimation", {
	        /**
	         * @return {?}
	         */
	        get: function () { return !!this.phase; },
	        enumerable: true,
	        configurable: true
	    });
	    return BoundEventAst;
	}());
	/**
	 * A reference declaration on an element (e.g. `let someName="expression"`).
	 */
	var ReferenceAst = (function () {
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function ReferenceAst(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ReferenceAst.prototype.visit = function (visitor, context) {
	        return visitor.visitReference(this, context);
	    };
	    return ReferenceAst;
	}());
	/**
	 * A variable declaration on a <ng-template> (e.g. `var-someName="someLocalName"`).
	 */
	var VariableAst = (function () {
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function VariableAst(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    VariableAst.prototype.visit = function (visitor, context) {
	        return visitor.visitVariable(this, context);
	    };
	    return VariableAst;
	}());
	/**
	 * An element declaration in a template.
	 */
	var ElementAst = (function () {
	    /**
	     * @param {?} name
	     * @param {?} attrs
	     * @param {?} inputs
	     * @param {?} outputs
	     * @param {?} references
	     * @param {?} directives
	     * @param {?} providers
	     * @param {?} hasViewContainer
	     * @param {?} queryMatches
	     * @param {?} children
	     * @param {?} ngContentIndex
	     * @param {?} sourceSpan
	     * @param {?} endSourceSpan
	     */
	    function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan, endSourceSpan) {
	        this.name = name;
	        this.attrs = attrs;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.references = references;
	        this.directives = directives;
	        this.providers = providers;
	        this.hasViewContainer = hasViewContainer;
	        this.queryMatches = queryMatches;
	        this.children = children;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	        this.endSourceSpan = endSourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ElementAst.prototype.visit = function (visitor, context) {
	        return visitor.visitElement(this, context);
	    };
	    return ElementAst;
	}());
	/**
	 * A `<ng-template>` element included in an Angular template.
	 */
	var EmbeddedTemplateAst = (function () {
	    /**
	     * @param {?} attrs
	     * @param {?} outputs
	     * @param {?} references
	     * @param {?} variables
	     * @param {?} directives
	     * @param {?} providers
	     * @param {?} hasViewContainer
	     * @param {?} queryMatches
	     * @param {?} children
	     * @param {?} ngContentIndex
	     * @param {?} sourceSpan
	     */
	    function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan) {
	        this.attrs = attrs;
	        this.outputs = outputs;
	        this.references = references;
	        this.variables = variables;
	        this.directives = directives;
	        this.providers = providers;
	        this.hasViewContainer = hasViewContainer;
	        this.queryMatches = queryMatches;
	        this.children = children;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
	        return visitor.visitEmbeddedTemplate(this, context);
	    };
	    return EmbeddedTemplateAst;
	}());
	/**
	 * A directive property with a bound value (e.g. `*ngIf="condition").
	 */
	var BoundDirectivePropertyAst = (function () {
	    /**
	     * @param {?} directiveName
	     * @param {?} templateName
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
	        this.directiveName = directiveName;
	        this.templateName = templateName;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
	        return visitor.visitDirectiveProperty(this, context);
	    };
	    return BoundDirectivePropertyAst;
	}());
	/**
	 * A directive declared on an element.
	 */
	var DirectiveAst = (function () {
	    /**
	     * @param {?} directive
	     * @param {?} inputs
	     * @param {?} hostProperties
	     * @param {?} hostEvents
	     * @param {?} contentQueryStartId
	     * @param {?} sourceSpan
	     */
	    function DirectiveAst(directive, inputs, hostProperties, hostEvents, contentQueryStartId, sourceSpan) {
	        this.directive = directive;
	        this.inputs = inputs;
	        this.hostProperties = hostProperties;
	        this.hostEvents = hostEvents;
	        this.contentQueryStartId = contentQueryStartId;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    DirectiveAst.prototype.visit = function (visitor, context) {
	        return visitor.visitDirective(this, context);
	    };
	    return DirectiveAst;
	}());
	/**
	 * A provider declared on an element
	 */
	var ProviderAst = (function () {
	    /**
	     * @param {?} token
	     * @param {?} multiProvider
	     * @param {?} eager
	     * @param {?} providers
	     * @param {?} providerType
	     * @param {?} lifecycleHooks
	     * @param {?} sourceSpan
	     */
	    function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
	        this.token = token;
	        this.multiProvider = multiProvider;
	        this.eager = eager;
	        this.providers = providers;
	        this.providerType = providerType;
	        this.lifecycleHooks = lifecycleHooks;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ProviderAst.prototype.visit = function (visitor, context) {
	        // No visit method in the visitor for now...
	        return null;
	    };
	    return ProviderAst;
	}());
	var ProviderAstType = {};
	ProviderAstType.PublicService = 0;
	ProviderAstType.PrivateService = 1;
	ProviderAstType.Component = 2;
	ProviderAstType.Directive = 3;
	ProviderAstType.Builtin = 4;
	ProviderAstType[ProviderAstType.PublicService] = "PublicService";
	ProviderAstType[ProviderAstType.PrivateService] = "PrivateService";
	ProviderAstType[ProviderAstType.Component] = "Component";
	ProviderAstType[ProviderAstType.Directive] = "Directive";
	ProviderAstType[ProviderAstType.Builtin] = "Builtin";
	/**
	 * Position where content is to be projected (instance of `<ng-content>` in a template).
	 */
	var NgContentAst = (function () {
	    /**
	     * @param {?} index
	     * @param {?} ngContentIndex
	     * @param {?} sourceSpan
	     */
	    function NgContentAst(index, ngContentIndex, sourceSpan) {
	        this.index = index;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    NgContentAst.prototype.visit = function (visitor, context) {
	        return visitor.visitNgContent(this, context);
	    };
	    return NgContentAst;
	}());
	var PropertyBindingType = {};
	PropertyBindingType.Property = 0;
	PropertyBindingType.Attribute = 1;
	PropertyBindingType.Class = 2;
	PropertyBindingType.Style = 3;
	PropertyBindingType.Animation = 4;
	PropertyBindingType[PropertyBindingType.Property] = "Property";
	PropertyBindingType[PropertyBindingType.Attribute] = "Attribute";
	PropertyBindingType[PropertyBindingType.Class] = "Class";
	PropertyBindingType[PropertyBindingType.Style] = "Style";
	PropertyBindingType[PropertyBindingType.Animation] = "Animation";
	/**
	 * Visit every node in a list of {\@link TemplateAst}s with the given {\@link TemplateAstVisitor}.
	 * @param {?} visitor
	 * @param {?} asts
	 * @param {?=} context
	 * @return {?}
	 */
	function templateVisitAll(visitor, asts, context) {
	    if (context === void 0) { context = null; }
	    var /** @type {?} */ result = [];
	    var /** @type {?} */ visit = visitor.visit ?
	        function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context); } :
	        function (ast) { return ast.visit(visitor, context); };
	    asts.forEach(function (ast) {
	        var /** @type {?} */ astResult = visit(ast);
	        if (astResult) {
	            result.push(astResult);
	        }
	    });
	    return result;
	}
	/**
	 * A token representing the a reference to a static type.
	 *
	 * This token is unique for a filePath and name and can be used as a hash table key.
	 */
	var StaticSymbol = (function () {
	    /**
	     * @param {?} filePath
	     * @param {?} name
	     * @param {?} members
	     */
	    function StaticSymbol(filePath, name, members) {
	        this.filePath = filePath;
	        this.name = name;
	        this.members = members;
	    }
	    /**
	     * @return {?}
	     */
	    StaticSymbol.prototype.assertNoMembers = function () {
	        if (this.members.length) {
	            throw new Error("Illegal state: symbol without members expected, but got " + JSON.stringify(this) + ".");
	        }
	    };
	    return StaticSymbol;
	}());
	/**
	 * A cache of static symbol used by the StaticReflector to return the same symbol for the
	 * same symbol values.
	 */
	var StaticSymbolCache = (function () {
	    function StaticSymbolCache() {
	        this.cache = new Map();
	    }
	    /**
	     * @param {?} declarationFile
	     * @param {?} name
	     * @param {?=} members
	     * @return {?}
	     */
	    StaticSymbolCache.prototype.get = function (declarationFile, name, members) {
	        members = members || [];
	        var /** @type {?} */ memberSuffix = members.length ? "." + members.join('.') : '';
	        var /** @type {?} */ key = "\"" + declarationFile + "\"." + name + memberSuffix;
	        var /** @type {?} */ result = this.cache.get(key);
	        if (!result) {
	            result = new StaticSymbol(declarationFile, name, members);
	            this.cache.set(key, result);
	        }
	        return result;
	    };
	    return StaticSymbolCache;
	}());
	var TagContentType = {};
	TagContentType.RAW_TEXT = 0;
	TagContentType.ESCAPABLE_RAW_TEXT = 1;
	TagContentType.PARSABLE_DATA = 2;
	TagContentType[TagContentType.RAW_TEXT] = "RAW_TEXT";
	TagContentType[TagContentType.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
	TagContentType[TagContentType.PARSABLE_DATA] = "PARSABLE_DATA";
	/**
	 * @param {?} elementName
	 * @return {?}
	 */
	function splitNsName(elementName) {
	    if (elementName[0] != ':') {
	        return [null, elementName];
	    }
	    var /** @type {?} */ colonIndex = elementName.indexOf(':', 1);
	    if (colonIndex == -1) {
	        throw new Error("Unsupported format \"" + elementName + "\" expecting \":namespace:name\"");
	    }
	    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
	}
	/**
	 * @param {?} fullName
	 * @return {?}
	 */
	function getNsPrefix(fullName) {
	    return fullName === null ? null : splitNsName(fullName)[0];
	}
	/**
	 * @param {?} prefix
	 * @param {?} localName
	 * @return {?}
	 */
	function mergeNsAndName(prefix, localName) {
	    return prefix ? ":" + prefix + ":" + localName : localName;
	}
	// see http://www.w3.org/TR/html51/syntax.html#named-character-references
	// see https://html.spec.whatwg.org/multipage/entities.json
	// This list is not exhaustive to keep the compiler footprint low.
	// The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.
	var NAMED_ENTITIES = {
	    'Aacute': '\u00C1',
	    'aacute': '\u00E1',
	    'Acirc': '\u00C2',
	    'acirc': '\u00E2',
	    'acute': '\u00B4',
	    'AElig': '\u00C6',
	    'aelig': '\u00E6',
	    'Agrave': '\u00C0',
	    'agrave': '\u00E0',
	    'alefsym': '\u2135',
	    'Alpha': '\u0391',
	    'alpha': '\u03B1',
	    'amp': '&',
	    'and': '\u2227',
	    'ang': '\u2220',
	    'apos': '\u0027',
	    'Aring': '\u00C5',
	    'aring': '\u00E5',
	    'asymp': '\u2248',
	    'Atilde': '\u00C3',
	    'atilde': '\u00E3',
	    'Auml': '\u00C4',
	    'auml': '\u00E4',
	    'bdquo': '\u201E',
	    'Beta': '\u0392',
	    'beta': '\u03B2',
	    'brvbar': '\u00A6',
	    'bull': '\u2022',
	    'cap': '\u2229',
	    'Ccedil': '\u00C7',
	    'ccedil': '\u00E7',
	    'cedil': '\u00B8',
	    'cent': '\u00A2',
	    'Chi': '\u03A7',
	    'chi': '\u03C7',
	    'circ': '\u02C6',
	    'clubs': '\u2663',
	    'cong': '\u2245',
	    'copy': '\u00A9',
	    'crarr': '\u21B5',
	    'cup': '\u222A',
	    'curren': '\u00A4',
	    'dagger': '\u2020',
	    'Dagger': '\u2021',
	    'darr': '\u2193',
	    'dArr': '\u21D3',
	    'deg': '\u00B0',
	    'Delta': '\u0394',
	    'delta': '\u03B4',
	    'diams': '\u2666',
	    'divide': '\u00F7',
	    'Eacute': '\u00C9',
	    'eacute': '\u00E9',
	    'Ecirc': '\u00CA',
	    'ecirc': '\u00EA',
	    'Egrave': '\u00C8',
	    'egrave': '\u00E8',
	    'empty': '\u2205',
	    'emsp': '\u2003',
	    'ensp': '\u2002',
	    'Epsilon': '\u0395',
	    'epsilon': '\u03B5',
	    'equiv': '\u2261',
	    'Eta': '\u0397',
	    'eta': '\u03B7',
	    'ETH': '\u00D0',
	    'eth': '\u00F0',
	    'Euml': '\u00CB',
	    'euml': '\u00EB',
	    'euro': '\u20AC',
	    'exist': '\u2203',
	    'fnof': '\u0192',
	    'forall': '\u2200',
	    'frac12': '\u00BD',
	    'frac14': '\u00BC',
	    'frac34': '\u00BE',
	    'frasl': '\u2044',
	    'Gamma': '\u0393',
	    'gamma': '\u03B3',
	    'ge': '\u2265',
	    'gt': '>',
	    'harr': '\u2194',
	    'hArr': '\u21D4',
	    'hearts': '\u2665',
	    'hellip': '\u2026',
	    'Iacute': '\u00CD',
	    'iacute': '\u00ED',
	    'Icirc': '\u00CE',
	    'icirc': '\u00EE',
	    'iexcl': '\u00A1',
	    'Igrave': '\u00CC',
	    'igrave': '\u00EC',
	    'image': '\u2111',
	    'infin': '\u221E',
	    'int': '\u222B',
	    'Iota': '\u0399',
	    'iota': '\u03B9',
	    'iquest': '\u00BF',
	    'isin': '\u2208',
	    'Iuml': '\u00CF',
	    'iuml': '\u00EF',
	    'Kappa': '\u039A',
	    'kappa': '\u03BA',
	    'Lambda': '\u039B',
	    'lambda': '\u03BB',
	    'lang': '\u27E8',
	    'laquo': '\u00AB',
	    'larr': '\u2190',
	    'lArr': '\u21D0',
	    'lceil': '\u2308',
	    'ldquo': '\u201C',
	    'le': '\u2264',
	    'lfloor': '\u230A',
	    'lowast': '\u2217',
	    'loz': '\u25CA',
	    'lrm': '\u200E',
	    'lsaquo': '\u2039',
	    'lsquo': '\u2018',
	    'lt': '<',
	    'macr': '\u00AF',
	    'mdash': '\u2014',
	    'micro': '\u00B5',
	    'middot': '\u00B7',
	    'minus': '\u2212',
	    'Mu': '\u039C',
	    'mu': '\u03BC',
	    'nabla': '\u2207',
	    'nbsp': '\u00A0',
	    'ndash': '\u2013',
	    'ne': '\u2260',
	    'ni': '\u220B',
	    'not': '\u00AC',
	    'notin': '\u2209',
	    'nsub': '\u2284',
	    'Ntilde': '\u00D1',
	    'ntilde': '\u00F1',
	    'Nu': '\u039D',
	    'nu': '\u03BD',
	    'Oacute': '\u00D3',
	    'oacute': '\u00F3',
	    'Ocirc': '\u00D4',
	    'ocirc': '\u00F4',
	    'OElig': '\u0152',
	    'oelig': '\u0153',
	    'Ograve': '\u00D2',
	    'ograve': '\u00F2',
	    'oline': '\u203E',
	    'Omega': '\u03A9',
	    'omega': '\u03C9',
	    'Omicron': '\u039F',
	    'omicron': '\u03BF',
	    'oplus': '\u2295',
	    'or': '\u2228',
	    'ordf': '\u00AA',
	    'ordm': '\u00BA',
	    'Oslash': '\u00D8',
	    'oslash': '\u00F8',
	    'Otilde': '\u00D5',
	    'otilde': '\u00F5',
	    'otimes': '\u2297',
	    'Ouml': '\u00D6',
	    'ouml': '\u00F6',
	    'para': '\u00B6',
	    'permil': '\u2030',
	    'perp': '\u22A5',
	    'Phi': '\u03A6',
	    'phi': '\u03C6',
	    'Pi': '\u03A0',
	    'pi': '\u03C0',
	    'piv': '\u03D6',
	    'plusmn': '\u00B1',
	    'pound': '\u00A3',
	    'prime': '\u2032',
	    'Prime': '\u2033',
	    'prod': '\u220F',
	    'prop': '\u221D',
	    'Psi': '\u03A8',
	    'psi': '\u03C8',
	    'quot': '\u0022',
	    'radic': '\u221A',
	    'rang': '\u27E9',
	    'raquo': '\u00BB',
	    'rarr': '\u2192',
	    'rArr': '\u21D2',
	    'rceil': '\u2309',
	    'rdquo': '\u201D',
	    'real': '\u211C',
	    'reg': '\u00AE',
	    'rfloor': '\u230B',
	    'Rho': '\u03A1',
	    'rho': '\u03C1',
	    'rlm': '\u200F',
	    'rsaquo': '\u203A',
	    'rsquo': '\u2019',
	    'sbquo': '\u201A',
	    'Scaron': '\u0160',
	    'scaron': '\u0161',
	    'sdot': '\u22C5',
	    'sect': '\u00A7',
	    'shy': '\u00AD',
	    'Sigma': '\u03A3',
	    'sigma': '\u03C3',
	    'sigmaf': '\u03C2',
	    'sim': '\u223C',
	    'spades': '\u2660',
	    'sub': '\u2282',
	    'sube': '\u2286',
	    'sum': '\u2211',
	    'sup': '\u2283',
	    'sup1': '\u00B9',
	    'sup2': '\u00B2',
	    'sup3': '\u00B3',
	    'supe': '\u2287',
	    'szlig': '\u00DF',
	    'Tau': '\u03A4',
	    'tau': '\u03C4',
	    'there4': '\u2234',
	    'Theta': '\u0398',
	    'theta': '\u03B8',
	    'thetasym': '\u03D1',
	    'thinsp': '\u2009',
	    'THORN': '\u00DE',
	    'thorn': '\u00FE',
	    'tilde': '\u02DC',
	    'times': '\u00D7',
	    'trade': '\u2122',
	    'Uacute': '\u00DA',
	    'uacute': '\u00FA',
	    'uarr': '\u2191',
	    'uArr': '\u21D1',
	    'Ucirc': '\u00DB',
	    'ucirc': '\u00FB',
	    'Ugrave': '\u00D9',
	    'ugrave': '\u00F9',
	    'uml': '\u00A8',
	    'upsih': '\u03D2',
	    'Upsilon': '\u03A5',
	    'upsilon': '\u03C5',
	    'Uuml': '\u00DC',
	    'uuml': '\u00FC',
	    'weierp': '\u2118',
	    'Xi': '\u039E',
	    'xi': '\u03BE',
	    'Yacute': '\u00DD',
	    'yacute': '\u00FD',
	    'yen': '\u00A5',
	    'yuml': '\u00FF',
	    'Yuml': '\u0178',
	    'Zeta': '\u0396',
	    'zeta': '\u03B6',
	    'zwj': '\u200D',
	    'zwnj': '\u200C',
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var HtmlTagDefinition = (function () {
	    /**
	     * @param {?=} __0
	     */
	    function HtmlTagDefinition(_a) {
	        var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;
	        var _this = this;
	        this.closedByChildren = {};
	        this.closedByParent = false;
	        this.canSelfClose = false;
	        if (closedByChildren && closedByChildren.length > 0) {
	            closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });
	        }
	        this.isVoid = isVoid;
	        this.closedByParent = closedByParent || isVoid;
	        if (requiredParents && requiredParents.length > 0) {
	            this.requiredParents = {};
	            // The first parent is the list is automatically when none of the listed parents are present
	            this.parentToAdd = requiredParents[0];
	            requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });
	        }
	        this.implicitNamespacePrefix = implicitNamespacePrefix;
	        this.contentType = contentType;
	        this.ignoreFirstLf = ignoreFirstLf;
	    }
	    /**
	     * @param {?} currentParent
	     * @return {?}
	     */
	    HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
	        if (!this.requiredParents) {
	            return false;
	        }
	        if (!currentParent) {
	            return true;
	        }
	        var /** @type {?} */ lcParent = currentParent.toLowerCase();
	        var /** @type {?} */ isParentTemplate = lcParent === 'template' || currentParent === 'ng-template';
	        return !isParentTemplate && this.requiredParents[lcParent] != true;
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    HtmlTagDefinition.prototype.isClosedByChild = function (name) {
	        return this.isVoid || name.toLowerCase() in this.closedByChildren;
	    };
	    return HtmlTagDefinition;
	}());
	// see http://www.w3.org/TR/html51/syntax.html#optional-tags
	// This implementation does not fully conform to the HTML5 spec.
	var TAG_DEFINITIONS = {
	    'base': new HtmlTagDefinition({ isVoid: true }),
	    'meta': new HtmlTagDefinition({ isVoid: true }),
	    'area': new HtmlTagDefinition({ isVoid: true }),
	    'embed': new HtmlTagDefinition({ isVoid: true }),
	    'link': new HtmlTagDefinition({ isVoid: true }),
	    'img': new HtmlTagDefinition({ isVoid: true }),
	    'input': new HtmlTagDefinition({ isVoid: true }),
	    'param': new HtmlTagDefinition({ isVoid: true }),
	    'hr': new HtmlTagDefinition({ isVoid: true }),
	    'br': new HtmlTagDefinition({ isVoid: true }),
	    'source': new HtmlTagDefinition({ isVoid: true }),
	    'track': new HtmlTagDefinition({ isVoid: true }),
	    'wbr': new HtmlTagDefinition({ isVoid: true }),
	    'p': new HtmlTagDefinition({
	        closedByChildren: [
	            'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',
	            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',
	            'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'
	        ],
	        closedByParent: true
	    }),
	    'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
	    'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),
	    'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),
	    'tr': new HtmlTagDefinition({
	        closedByChildren: ['tr'],
	        requiredParents: ['tbody', 'tfoot', 'thead'],
	        closedByParent: true
	    }),
	    'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	    'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	    'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),
	    'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
	    'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
	    'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),
	    'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
	    'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),
	    'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	    'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	    'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),
	    'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	    'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),
	    'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),
	    'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
	    'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
	    'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	    'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	    'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),
	    'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),
	};
	var _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
	/**
	 * @param {?} tagName
	 * @return {?}
	 */
	function getHtmlTagDefinition(tagName) {
	    return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' +
	    '([-\\w]+)|' +
	    '(?:\\.([-\\w]+))|' +
	    // "-" should appear first in the regexp below as FF31 parses "[.-\w]" as a range
	    '(?:\\[([-.\\w*]+)(?:=([\"\']?)([^\\]\"\']*)\\5)?\\])|' +
	    // "[name="value"]",
	    // "[name='value']"
	    '(\\))|' +
	    '(\\s*,\\s*)', // ","
	'g');
	/**
	 * A css selector contains an element name,
	 * css classes and attribute/value pairs with the purpose
	 * of selecting subsets out of them.
	 */
	var CssSelector = (function () {
	    function CssSelector() {
	        this.element = null;
	        this.classNames = [];
	        this.attrs = [];
	        this.notSelectors = [];
	    }
	    /**
	     * @param {?} selector
	     * @return {?}
	     */
	    CssSelector.parse = function (selector) {
	        var /** @type {?} */ results = [];
	        var /** @type {?} */ _addResult = function (res, cssSel) {
	            if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&
	                cssSel.attrs.length == 0) {
	                cssSel.element = '*';
	            }
	            res.push(cssSel);
	        };
	        var /** @type {?} */ cssSelector = new CssSelector();
	        var /** @type {?} */ match;
	        var /** @type {?} */ current = cssSelector;
	        var /** @type {?} */ inNot = false;
	        _SELECTOR_REGEXP.lastIndex = 0;
	        while (match = _SELECTOR_REGEXP.exec(selector)) {
	            if (match[1]) {
	                if (inNot) {
	                    throw new Error('Nesting :not is not allowed in a selector');
	                }
	                inNot = true;
	                current = new CssSelector();
	                cssSelector.notSelectors.push(current);
	            }
	            if (match[2]) {
	                current.setElement(match[2]);
	            }
	            if (match[3]) {
	                current.addClassName(match[3]);
	            }
	            if (match[4]) {
	                current.addAttribute(match[4], match[6]);
	            }
	            if (match[7]) {
	                inNot = false;
	                current = cssSelector;
	            }
	            if (match[8]) {
	                if (inNot) {
	                    throw new Error('Multiple selectors in :not are not supported');
	                }
	                _addResult(results, cssSelector);
	                cssSelector = current = new CssSelector();
	            }
	        }
	        _addResult(results, cssSelector);
	        return results;
	    };
	    /**
	     * @return {?}
	     */
	    CssSelector.prototype.isElementSelector = function () {
	        return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&
	            this.notSelectors.length === 0;
	    };
	    /**
	     * @return {?}
	     */
	    CssSelector.prototype.hasElementSelector = function () { return !!this.element; };
	    /**
	     * @param {?=} element
	     * @return {?}
	     */
	    CssSelector.prototype.setElement = function (element) {
	        if (element === void 0) { element = null; }
	        this.element = element;
	    };
	    /**
	     * Gets a template string for an element that matches the selector.
	     * @return {?}
	     */
	    CssSelector.prototype.getMatchingElementTemplate = function () {
	        var /** @type {?} */ tagName = this.element || 'div';
	        var /** @type {?} */ classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
	        var /** @type {?} */ attrs = '';
	        for (var /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {
	            var /** @type {?} */ attrName = this.attrs[i];
	            var /** @type {?} */ attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
	            attrs += " " + attrName + attrValue;
	        }
	        return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" :
	            "<" + tagName + classAttr + attrs + "></" + tagName + ">";
	    };
	    /**
	     * @param {?} name
	     * @param {?=} value
	     * @return {?}
	     */
	    CssSelector.prototype.addAttribute = function (name, value) {
	        if (value === void 0) { value = ''; }
	        this.attrs.push(name, value && value.toLowerCase() || '');
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()); };
	    /**
	     * @return {?}
	     */
	    CssSelector.prototype.toString = function () {
	        var /** @type {?} */ res = this.element || '';
	        if (this.classNames) {
	            this.classNames.forEach(function (klass) { return res += "." + klass; });
	        }
	        if (this.attrs) {
	            for (var /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {
	                var /** @type {?} */ name = this.attrs[i];
	                var /** @type {?} */ value = this.attrs[i + 1];
	                res += "[" + name + (value ? '=' + value : '') + "]";
	            }
	        }
	        this.notSelectors.forEach(function (notSelector) { return res += ":not(" + notSelector + ")"; });
	        return res;
	    };
	    return CssSelector;
	}());
	/**
	 * Reads a list of CssSelectors and allows to calculate which ones
	 * are contained in a given CssSelector.
	 */
	var SelectorMatcher = (function () {
	    function SelectorMatcher() {
	        this._elementMap = new Map();
	        this._elementPartialMap = new Map();
	        this._classMap = new Map();
	        this._classPartialMap = new Map();
	        this._attrValueMap = new Map();
	        this._attrValuePartialMap = new Map();
	        this._listContexts = [];
	    }
	    /**
	     * @param {?} notSelectors
	     * @return {?}
	     */
	    SelectorMatcher.createNotMatcher = function (notSelectors) {
	        var /** @type {?} */ notMatcher = new SelectorMatcher();
	        notMatcher.addSelectables(notSelectors, null);
	        return notMatcher;
	    };
	    /**
	     * @param {?} cssSelectors
	     * @param {?=} callbackCtxt
	     * @return {?}
	     */
	    SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
	        var /** @type {?} */ listContext = null;
	        if (cssSelectors.length > 1) {
	            listContext = new SelectorListContext(cssSelectors);
	            this._listContexts.push(listContext);
	        }
	        for (var /** @type {?} */ i = 0; i < cssSelectors.length; i++) {
	            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
	        }
	    };
	    /**
	     * Add an object that can be found later on by calling `match`.
	     * @param {?} cssSelector A css selector
	     * @param {?} callbackCtxt An opaque object that will be given to the callback of the `match` function
	     * @param {?} listContext
	     * @return {?}
	     */
	    SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
	        var /** @type {?} */ matcher = this;
	        var /** @type {?} */ element = cssSelector.element;
	        var /** @type {?} */ classNames = cssSelector.classNames;
	        var /** @type {?} */ attrs = cssSelector.attrs;
	        var /** @type {?} */ selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	        if (element) {
	            var /** @type {?} */ isTerminal = attrs.length === 0 && classNames.length === 0;
	            if (isTerminal) {
	                this._addTerminal(matcher._elementMap, element, selectable);
	            }
	            else {
	                matcher = this._addPartial(matcher._elementPartialMap, element);
	            }
	        }
	        if (classNames) {
	            for (var /** @type {?} */ i = 0; i < classNames.length; i++) {
	                var /** @type {?} */ isTerminal = attrs.length === 0 && i === classNames.length - 1;
	                var /** @type {?} */ className = classNames[i];
	                if (isTerminal) {
	                    this._addTerminal(matcher._classMap, className, selectable);
	                }
	                else {
	                    matcher = this._addPartial(matcher._classPartialMap, className);
	                }
	            }
	        }
	        if (attrs) {
	            for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	                var /** @type {?} */ isTerminal = i === attrs.length - 2;
	                var /** @type {?} */ name = attrs[i];
	                var /** @type {?} */ value = attrs[i + 1];
	                if (isTerminal) {
	                    var /** @type {?} */ terminalMap = matcher._attrValueMap;
	                    var /** @type {?} */ terminalValuesMap = terminalMap.get(name);
	                    if (!terminalValuesMap) {
	                        terminalValuesMap = new Map();
	                        terminalMap.set(name, terminalValuesMap);
	                    }
	                    this._addTerminal(terminalValuesMap, value, selectable);
	                }
	                else {
	                    var /** @type {?} */ partialMap = matcher._attrValuePartialMap;
	                    var /** @type {?} */ partialValuesMap = partialMap.get(name);
	                    if (!partialValuesMap) {
	                        partialValuesMap = new Map();
	                        partialMap.set(name, partialValuesMap);
	                    }
	                    matcher = this._addPartial(partialValuesMap, value);
	                }
	            }
	        }
	    };
	    /**
	     * @param {?} map
	     * @param {?} name
	     * @param {?} selectable
	     * @return {?}
	     */
	    SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
	        var /** @type {?} */ terminalList = map.get(name);
	        if (!terminalList) {
	            terminalList = [];
	            map.set(name, terminalList);
	        }
	        terminalList.push(selectable);
	    };
	    /**
	     * @param {?} map
	     * @param {?} name
	     * @return {?}
	     */
	    SelectorMatcher.prototype._addPartial = function (map, name) {
	        var /** @type {?} */ matcher = map.get(name);
	        if (!matcher) {
	            matcher = new SelectorMatcher();
	            map.set(name, matcher);
	        }
	        return matcher;
	    };
	    /**
	     * Find the objects that have been added via `addSelectable`
	     * whose css selector is contained in the given css selector.
	     * @param {?} cssSelector A css selector
	     * @param {?} matchedCallback This callback will be called with the object handed into `addSelectable`
	     * @return {?} boolean true if a match was found
	     */
	    SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
	        var /** @type {?} */ result = false;
	        var /** @type {?} */ element = cssSelector.element;
	        var /** @type {?} */ classNames = cssSelector.classNames;
	        var /** @type {?} */ attrs = cssSelector.attrs;
	        for (var /** @type {?} */ i = 0; i < this._listContexts.length; i++) {
	            this._listContexts[i].alreadyMatched = false;
	        }
	        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
	            result;
	        if (classNames) {
	            for (var /** @type {?} */ i = 0; i < classNames.length; i++) {
	                var /** @type {?} */ className = classNames[i];
	                result =
	                    this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	                result =
	                    this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
	                        result;
	            }
	        }
	        if (attrs) {
	            for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	                var /** @type {?} */ name = attrs[i];
	                var /** @type {?} */ value = attrs[i + 1];
	                var /** @type {?} */ terminalValuesMap = this._attrValueMap.get(name);
	                if (value) {
	                    result =
	                        this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
	                }
	                result =
	                    this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
	                var /** @type {?} */ partialValuesMap = this._attrValuePartialMap.get(name);
	                if (value) {
	                    result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
	                }
	                result =
	                    this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
	            }
	        }
	        return result;
	    };
	    /**
	     * \@internal
	     * @param {?} map
	     * @param {?} name
	     * @param {?} cssSelector
	     * @param {?} matchedCallback
	     * @return {?}
	     */
	    SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
	        if (!map || typeof name !== 'string') {
	            return false;
	        }
	        var /** @type {?} */ selectables = map.get(name) || [];
	        var /** @type {?} */ starSelectables = map.get('*');
	        if (starSelectables) {
	            selectables = selectables.concat(starSelectables);
	        }
	        if (selectables.length === 0) {
	            return false;
	        }
	        var /** @type {?} */ selectable;
	        var /** @type {?} */ result = false;
	        for (var /** @type {?} */ i = 0; i < selectables.length; i++) {
	            selectable = selectables[i];
	            result = selectable.finalize(cssSelector, matchedCallback) || result;
	        }
	        return result;
	    };
	    /**
	     * \@internal
	     * @param {?} map
	     * @param {?} name
	     * @param {?} cssSelector
	     * @param {?} matchedCallback
	     * @return {?}
	     */
	    SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback) {
	        if (!map || typeof name !== 'string') {
	            return false;
	        }
	        var /** @type {?} */ nestedSelector = map.get(name);
	        if (!nestedSelector) {
	            return false;
	        }
	        // TODO(perf): get rid of recursion and measure again
	        // TODO(perf): don't pass the whole selector into the recursion,
	        // but only the not processed parts
	        return nestedSelector.match(cssSelector, matchedCallback);
	    };
	    return SelectorMatcher;
	}());
	var SelectorListContext = (function () {
	    /**
	     * @param {?} selectors
	     */
	    function SelectorListContext(selectors) {
	        this.selectors = selectors;
	        this.alreadyMatched = false;
	    }
	    return SelectorListContext;
	}());
	var SelectorContext = (function () {
	    /**
	     * @param {?} selector
	     * @param {?} cbContext
	     * @param {?} listContext
	     */
	    function SelectorContext(selector, cbContext, listContext) {
	        this.selector = selector;
	        this.cbContext = cbContext;
	        this.listContext = listContext;
	        this.notSelectors = selector.notSelectors;
	    }
	    /**
	     * @param {?} cssSelector
	     * @param {?} callback
	     * @return {?}
	     */
	    SelectorContext.prototype.finalize = function (cssSelector, callback) {
	        var /** @type {?} */ result = true;
	        if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
	            var /** @type {?} */ notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
	            result = !notMatcher.match(cssSelector, null);
	        }
	        if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
	            if (this.listContext) {
	                this.listContext.alreadyMatched = true;
	            }
	            callback(this.selector, this.cbContext);
	        }
	        return result;
	    };
	    return SelectorContext;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var MODULE_SUFFIX = '';
	var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
	/**
	 * @param {?} input
	 * @return {?}
	 */
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function dashCaseToCamelCase(input) {
	    return input.replace(DASH_CASE_REGEXP, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i] = arguments[_i];
	        }
	        return m[1].toUpperCase();
	    });
	}
	/**
	 * @param {?} input
	 * @param {?} defaultValues
	 * @return {?}
	 */
	function splitAtColon(input, defaultValues) {
	    return _splitAt(input, ':', defaultValues);
	}
	/**
	 * @param {?} input
	 * @param {?} defaultValues
	 * @return {?}
	 */
	function splitAtPeriod(input, defaultValues) {
	    return _splitAt(input, '.', defaultValues);
	}
	/**
	 * @param {?} input
	 * @param {?} character
	 * @param {?} defaultValues
	 * @return {?}
	 */
	function _splitAt(input, character, defaultValues) {
	    var /** @type {?} */ characterIndex = input.indexOf(character);
	    if (characterIndex == -1)
	        return defaultValues;
	    return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
	}
	/**
	 * @param {?} value
	 * @param {?} visitor
	 * @param {?} context
	 * @return {?}
	 */
	function visitValue(value, visitor, context) {
	    if (Array.isArray(value)) {
	        return visitor.visitArray(/** @type {?} */ (value), context);
	    }
	    if (isStrictStringMap(value)) {
	        return visitor.visitStringMap(/** @type {?} */ (value), context);
	    }
	    if (value == null || typeof value == 'string' || typeof value == 'number' ||
	        typeof value == 'boolean') {
	        return visitor.visitPrimitive(value, context);
	    }
	    return visitor.visitOther(value, context);
	}
	var ValueTransformer = (function () {
	    function ValueTransformer() {
	    }
	    /**
	     * @param {?} arr
	     * @param {?} context
	     * @return {?}
	     */
	    ValueTransformer.prototype.visitArray = function (arr, context) {
	        var _this = this;
	        return arr.map(function (value) { return visitValue(value, _this, context); });
	    };
	    /**
	     * @param {?} map
	     * @param {?} context
	     * @return {?}
	     */
	    ValueTransformer.prototype.visitStringMap = function (map, context) {
	        var _this = this;
	        var /** @type {?} */ result = {};
	        Object.keys(map).forEach(function (key) { result[key] = visitValue(map[key], _this, context); });
	        return result;
	    };
	    /**
	     * @param {?} value
	     * @param {?} context
	     * @return {?}
	     */
	    ValueTransformer.prototype.visitPrimitive = function (value, context) { return value; };
	    /**
	     * @param {?} value
	     * @param {?} context
	     * @return {?}
	     */
	    ValueTransformer.prototype.visitOther = function (value, context) { return value; };
	    return ValueTransformer;
	}());
	var SyncAsyncResult = (function () {
	    /**
	     * @param {?} syncResult
	     * @param {?=} asyncResult
	     */
	    function SyncAsyncResult(syncResult, asyncResult) {
	        if (asyncResult === void 0) { asyncResult = null; }
	        this.syncResult = syncResult;
	        this.asyncResult = asyncResult;
	        if (!asyncResult) {
	            this.asyncResult = Promise.resolve(syncResult);
	        }
	    }
	    return SyncAsyncResult;
	}());
	/**
	 * @param {?} msg
	 * @return {?}
	 */
	function syntaxError(msg) {
	    var /** @type {?} */ error = Error(msg);
	    ((error))[ERROR_SYNTAX_ERROR] = true;
	    return error;
	}
	var ERROR_SYNTAX_ERROR = 'ngSyntaxError';
	/**
	 * @param {?} error
	 * @return {?}
	 */
	function isSyntaxError(error) {
	    return ((error))[ERROR_SYNTAX_ERROR];
	}
	/**
	 * @param {?} s
	 * @return {?}
	 */
	function escapeRegExp(s) {
	    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
	}
	var STRING_MAP_PROTO = Object.getPrototypeOf({});
	/**
	 * @param {?} obj
	 * @return {?}
	 */
	function isStrictStringMap(obj) {
	    return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
	}
	/**
	 * @param {?} str
	 * @return {?}
	 */
	function utf8Encode(str) {
	    var /** @type {?} */ encoded = '';
	    for (var /** @type {?} */ index = 0; index < str.length; index++) {
	        var /** @type {?} */ codePoint = str.charCodeAt(index);
	        // decode surrogate
	        // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	        if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > (index + 1)) {
	            var /** @type {?} */ low = str.charCodeAt(index + 1);
	            if (low >= 0xdc00 && low <= 0xdfff) {
	                index++;
	                codePoint = ((codePoint - 0xd800) << 10) + low - 0xdc00 + 0x10000;
	            }
	        }
	        if (codePoint <= 0x7f) {
	            encoded += String.fromCharCode(codePoint);
	        }
	        else if (codePoint <= 0x7ff) {
	            encoded += String.fromCharCode(((codePoint >> 6) & 0x1F) | 0xc0, (codePoint & 0x3f) | 0x80);
	        }
	        else if (codePoint <= 0xffff) {
	            encoded += String.fromCharCode((codePoint >> 12) | 0xe0, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);
	        }
	        else if (codePoint <= 0x1fffff) {
	            encoded += String.fromCharCode(((codePoint >> 18) & 0x07) | 0xf0, ((codePoint >> 12) & 0x3f) | 0x80, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);
	        }
	    }
	    return encoded;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// group 0: "[prop] or (event) or @trigger"
	// group 1: "prop" from "[prop]"
	// group 2: "event" from "(event)"
	// group 3: "@trigger" from "@trigger"
	var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
	var CompileAnimationEntryMetadata = (function () {
	    /**
	     * @param {?=} name
	     * @param {?=} definitions
	     */
	    function CompileAnimationEntryMetadata(name, definitions) {
	        if (name === void 0) { name = null; }
	        if (definitions === void 0) { definitions = null; }
	        this.name = name;
	        this.definitions = definitions;
	    }
	    return CompileAnimationEntryMetadata;
	}());
	/**
	 * @abstract
	 */
	var CompileAnimationStateMetadata = (function () {
	    function CompileAnimationStateMetadata() {
	    }
	    return CompileAnimationStateMetadata;
	}());
	var CompileAnimationStateDeclarationMetadata = (function (_super) {
	    __extends(CompileAnimationStateDeclarationMetadata, _super);
	    /**
	     * @param {?} stateNameExpr
	     * @param {?} styles
	     */
	    function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
	        var _this = _super.call(this) || this;
	        _this.stateNameExpr = stateNameExpr;
	        _this.styles = styles;
	        return _this;
	    }
	    return CompileAnimationStateDeclarationMetadata;
	}(CompileAnimationStateMetadata));
	var CompileAnimationStateTransitionMetadata = (function (_super) {
	    __extends(CompileAnimationStateTransitionMetadata, _super);
	    /**
	     * @param {?} stateChangeExpr
	     * @param {?} steps
	     */
	    function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
	        var _this = _super.call(this) || this;
	        _this.stateChangeExpr = stateChangeExpr;
	        _this.steps = steps;
	        return _this;
	    }
	    return CompileAnimationStateTransitionMetadata;
	}(CompileAnimationStateMetadata));
	/**
	 * @abstract
	 */
	var CompileAnimationMetadata = (function () {
	    function CompileAnimationMetadata() {
	    }
	    return CompileAnimationMetadata;
	}());
	var CompileAnimationKeyframesSequenceMetadata = (function (_super) {
	    __extends(CompileAnimationKeyframesSequenceMetadata, _super);
	    /**
	     * @param {?=} steps
	     */
	    function CompileAnimationKeyframesSequenceMetadata(steps) {
	        if (steps === void 0) { steps = []; }
	        var _this = _super.call(this) || this;
	        _this.steps = steps;
	        return _this;
	    }
	    return CompileAnimationKeyframesSequenceMetadata;
	}(CompileAnimationMetadata));
	var CompileAnimationStyleMetadata = (function (_super) {
	    __extends(CompileAnimationStyleMetadata, _super);
	    /**
	     * @param {?} offset
	     * @param {?=} styles
	     */
	    function CompileAnimationStyleMetadata(offset, styles) {
	        if (styles === void 0) { styles = null; }
	        var _this = _super.call(this) || this;
	        _this.offset = offset;
	        _this.styles = styles;
	        return _this;
	    }
	    return CompileAnimationStyleMetadata;
	}(CompileAnimationMetadata));
	var CompileAnimationAnimateMetadata = (function (_super) {
	    __extends(CompileAnimationAnimateMetadata, _super);
	    /**
	     * @param {?=} timings
	     * @param {?=} styles
	     */
	    function CompileAnimationAnimateMetadata(timings, styles) {
	        if (timings === void 0) { timings = 0; }
	        if (styles === void 0) { styles = null; }
	        var _this = _super.call(this) || this;
	        _this.timings = timings;
	        _this.styles = styles;
	        return _this;
	    }
	    return CompileAnimationAnimateMetadata;
	}(CompileAnimationMetadata));
	/**
	 * @abstract
	 */
	var CompileAnimationWithStepsMetadata = (function (_super) {
	    __extends(CompileAnimationWithStepsMetadata, _super);
	    /**
	     * @param {?=} steps
	     */
	    function CompileAnimationWithStepsMetadata(steps) {
	        if (steps === void 0) { steps = null; }
	        var _this = _super.call(this) || this;
	        _this.steps = steps;
	        return _this;
	    }
	    return CompileAnimationWithStepsMetadata;
	}(CompileAnimationMetadata));
	var CompileAnimationSequenceMetadata = (function (_super) {
	    __extends(CompileAnimationSequenceMetadata, _super);
	    /**
	     * @param {?=} steps
	     */
	    function CompileAnimationSequenceMetadata(steps) {
	        if (steps === void 0) { steps = null; }
	        return _super.call(this, steps) || this;
	    }
	    return CompileAnimationSequenceMetadata;
	}(CompileAnimationWithStepsMetadata));
	var CompileAnimationGroupMetadata = (function (_super) {
	    __extends(CompileAnimationGroupMetadata, _super);
	    /**
	     * @param {?=} steps
	     */
	    function CompileAnimationGroupMetadata(steps) {
	        if (steps === void 0) { steps = null; }
	        return _super.call(this, steps) || this;
	    }
	    return CompileAnimationGroupMetadata;
	}(CompileAnimationWithStepsMetadata));
	/**
	 * @param {?} name
	 * @return {?}
	 */
	function _sanitizeIdentifier(name) {
	    return name.replace(/\W/g, '_');
	}
	var _anonymousTypeIndex = 0;
	/**
	 * @param {?} compileIdentifier
	 * @return {?}
	 */
	function identifierName(compileIdentifier) {
	    if (!compileIdentifier || !compileIdentifier.reference) {
	        return null;
	    }
	    var /** @type {?} */ ref = compileIdentifier.reference;
	    if (ref instanceof StaticSymbol) {
	        return ref.name;
	    }
	    if (ref['__anonymousType']) {
	        return ref['__anonymousType'];
	    }
	    var /** @type {?} */ identifier = _angular_core.ɵstringify(ref);
	    if (identifier.indexOf('(') >= 0) {
	        // case: anonymous functions!
	        identifier = "anonymous_" + _anonymousTypeIndex++;
	        ref['__anonymousType'] = identifier;
	    }
	    else {
	        identifier = _sanitizeIdentifier(identifier);
	    }
	    return identifier;
	}
	/**
	 * @param {?} compileIdentifier
	 * @return {?}
	 */
	function identifierModuleUrl(compileIdentifier) {
	    var /** @type {?} */ ref = compileIdentifier.reference;
	    if (ref instanceof StaticSymbol) {
	        return ref.filePath;
	    }
	    return _angular_core.ɵreflector.importUri(ref);
	}
	/**
	 * @param {?} compType
	 * @param {?} embeddedTemplateIndex
	 * @return {?}
	 */
	function viewClassName(compType, embeddedTemplateIndex) {
	    return "View_" + identifierName({ reference: compType }) + "_" + embeddedTemplateIndex;
	}
	/**
	 * @param {?} compType
	 * @return {?}
	 */
	function rendererTypeName(compType) {
	    return "RenderType_" + identifierName({ reference: compType });
	}
	/**
	 * @param {?} compType
	 * @return {?}
	 */
	function hostViewClassName(compType) {
	    return "HostView_" + identifierName({ reference: compType });
	}
	/**
	 * @param {?} dirType
	 * @return {?}
	 */
	function dirWrapperClassName(dirType) {
	    return "Wrapper_" + identifierName({ reference: dirType });
	}
	/**
	 * @param {?} compType
	 * @return {?}
	 */
	function componentFactoryName(compType) {
	    return identifierName({ reference: compType }) + "NgFactory";
	}
	var CompileSummaryKind = {};
	CompileSummaryKind.Pipe = 0;
	CompileSummaryKind.Directive = 1;
	CompileSummaryKind.NgModule = 2;
	CompileSummaryKind.Injectable = 3;
	CompileSummaryKind[CompileSummaryKind.Pipe] = "Pipe";
	CompileSummaryKind[CompileSummaryKind.Directive] = "Directive";
	CompileSummaryKind[CompileSummaryKind.NgModule] = "NgModule";
	CompileSummaryKind[CompileSummaryKind.Injectable] = "Injectable";
	/**
	 * @param {?} token
	 * @return {?}
	 */
	function tokenName(token) {
	    return token.value != null ? _sanitizeIdentifier(token.value) : identifierName(token.identifier);
	}
	/**
	 * @param {?} token
	 * @return {?}
	 */
	function tokenReference(token) {
	    if (token.identifier != null) {
	        return token.identifier.reference;
	    }
	    else {
	        return token.value;
	    }
	}
	/**
	 * Metadata about a stylesheet
	 */
	var CompileStylesheetMetadata = (function () {
	    /**
	     * @param {?=} __0
	     */
	    function CompileStylesheetMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, moduleUrl = _b.moduleUrl, styles = _b.styles, styleUrls = _b.styleUrls;
	        this.moduleUrl = moduleUrl;
	        this.styles = _normalizeArray(styles);
	        this.styleUrls = _normalizeArray(styleUrls);
	    }
	    return CompileStylesheetMetadata;
	}());
	/**
	 * Metadata regarding compilation of a template.
	 */
	var CompileTemplateMetadata = (function () {
	    /**
	     * @param {?=} __0
	     */
	    function CompileTemplateMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, externalStylesheets = _b.externalStylesheets, animations = _b.animations, ngContentSelectors = _b.ngContentSelectors, interpolation = _b.interpolation, isInline = _b.isInline;
	        this.encapsulation = encapsulation;
	        this.template = template;
	        this.templateUrl = templateUrl;
	        this.styles = _normalizeArray(styles);
	        this.styleUrls = _normalizeArray(styleUrls);
	        this.externalStylesheets = _normalizeArray(externalStylesheets);
	        this.animations = animations ? flatten(animations) : [];
	        this.ngContentSelectors = ngContentSelectors || [];
	        if (interpolation && interpolation.length != 2) {
	            throw new Error("'interpolation' should have a start and an end symbol.");
	        }
	        this.interpolation = interpolation;
	        this.isInline = isInline;
	    }
	    /**
	     * @return {?}
	     */
	    CompileTemplateMetadata.prototype.toSummary = function () {
	        return {
	            animations: this.animations.map(function (anim) { return anim.name; }),
	            ngContentSelectors: this.ngContentSelectors,
	            encapsulation: this.encapsulation,
	        };
	    };
	    return CompileTemplateMetadata;
	}());
	/**
	 * Metadata regarding compilation of a directive.
	 */
	var CompileDirectiveMetadata = (function () {
	    /**
	     * @param {?=} __0
	     */
	    function CompileDirectiveMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, isHost = _b.isHost, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template, componentViewType = _b.componentViewType, rendererType = _b.rendererType, componentFactory = _b.componentFactory;
	        this.isHost = !!isHost;
	        this.type = type;
	        this.isComponent = isComponent;
	        this.selector = selector;
	        this.exportAs = exportAs;
	        this.changeDetection = changeDetection;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.hostListeners = hostListeners;
	        this.hostProperties = hostProperties;
	        this.hostAttributes = hostAttributes;
	        this.providers = _normalizeArray(providers);
	        this.viewProviders = _normalizeArray(viewProviders);
	        this.queries = _normalizeArray(queries);
	        this.viewQueries = _normalizeArray(viewQueries);
	        this.entryComponents = _normalizeArray(entryComponents);
	        this.template = template;
	        this.componentViewType = componentViewType;
	        this.rendererType = rendererType;
	        this.componentFactory = componentFactory;
	    }
	    /**
	     * @param {?=} __0
	     * @return {?}
	     */
	    CompileDirectiveMetadata.create = function (_a) {
	        var _b = _a === void 0 ? {} : _a, isHost = _b.isHost, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template, componentViewType = _b.componentViewType, rendererType = _b.rendererType, componentFactory = _b.componentFactory;
	        var /** @type {?} */ hostListeners = {};
	        var /** @type {?} */ hostProperties = {};
	        var /** @type {?} */ hostAttributes = {};
	        if (host != null) {
	            Object.keys(host).forEach(function (key) {
	                var /** @type {?} */ value = host[key];
	                var /** @type {?} */ matches = key.match(HOST_REG_EXP);
	                if (matches === null) {
	                    hostAttributes[key] = value;
	                }
	                else if (matches[1] != null) {
	                    hostProperties[matches[1]] = value;
	                }
	                else if (matches[2] != null) {
	                    hostListeners[matches[2]] = value;
	                }
	            });
	        }
	        var /** @type {?} */ inputsMap = {};
	        if (inputs != null) {
	            inputs.forEach(function (bindConfig) {
	                // canonical syntax: `dirProp: elProp`
	                // if there is no `:`, use dirProp = elProp
	                var /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                inputsMap[parts[0]] = parts[1];
	            });
	        }
	        var /** @type {?} */ outputsMap = {};
	        if (outputs != null) {
	            outputs.forEach(function (bindConfig) {
	                // canonical syntax: `dirProp: elProp`
	                // if there is no `:`, use dirProp = elProp
	                var /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                outputsMap[parts[0]] = parts[1];
	            });
	        }
	        return new CompileDirectiveMetadata({
	            isHost: isHost,
	            type: type,
	            isComponent: !!isComponent, selector: selector, exportAs: exportAs, changeDetection: changeDetection,
	            inputs: inputsMap,
	            outputs: outputsMap,
	            hostListeners: hostListeners,
	            hostProperties: hostProperties,
	            hostAttributes: hostAttributes,
	            providers: providers,
	            viewProviders: viewProviders,
	            queries: queries,
	            viewQueries: viewQueries,
	            entryComponents: entryComponents,
	            template: template,
	            componentViewType: componentViewType,
	            rendererType: rendererType,
	            componentFactory: componentFactory,
	        });
	    };
	    /**
	     * @return {?}
	     */
	    CompileDirectiveMetadata.prototype.toSummary = function () {
	        return {
	            summaryKind: CompileSummaryKind.Directive,
	            type: this.type,
	            isComponent: this.isComponent,
	            selector: this.selector,
	            exportAs: this.exportAs,
	            inputs: this.inputs,
	            outputs: this.outputs,
	            hostListeners: this.hostListeners,
	            hostProperties: this.hostProperties,
	            hostAttributes: this.hostAttributes,
	            providers: this.providers,
	            viewProviders: this.viewProviders,
	            queries: this.queries,
	            viewQueries: this.viewQueries,
	            entryComponents: this.entryComponents,
	            changeDetection: this.changeDetection,
	            template: this.template && this.template.toSummary(),
	            componentViewType: this.componentViewType,
	            rendererType: this.rendererType,
	            componentFactory: this.componentFactory
	        };
	    };
	    return CompileDirectiveMetadata;
	}());
	/**
	 * Construct {\@link CompileDirectiveMetadata} from {\@link ComponentTypeMetadata} and a selector.
	 * @param {?} hostTypeReference
	 * @param {?} compMeta
	 * @param {?} hostViewType
	 * @return {?}
	 */
	function createHostComponentMeta(hostTypeReference, compMeta, hostViewType) {
	    var /** @type {?} */ template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
	    return CompileDirectiveMetadata.create({
	        isHost: true,
	        type: { reference: hostTypeReference, diDeps: [], lifecycleHooks: [] },
	        template: new CompileTemplateMetadata({
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            template: template,
	            templateUrl: '',
	            styles: [],
	            styleUrls: [],
	            ngContentSelectors: [],
	            animations: [],
	            isInline: true,
	        }),
	        changeDetection: _angular_core.ChangeDetectionStrategy.Default,
	        inputs: [],
	        outputs: [],
	        host: {},
	        isComponent: true,
	        selector: '*',
	        providers: [],
	        viewProviders: [],
	        queries: [],
	        viewQueries: [],
	        componentViewType: hostViewType,
	        rendererType: { id: '__Host__', encapsulation: _angular_core.ViewEncapsulation.None, styles: [], data: {} }
	    });
	}
	var CompilePipeMetadata = (function () {
	    /**
	     * @param {?=} __0
	     */
	    function CompilePipeMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, type = _b.type, name = _b.name, pure = _b.pure;
	        this.type = type;
	        this.name = name;
	        this.pure = !!pure;
	    }
	    /**
	     * @return {?}
	     */
	    CompilePipeMetadata.prototype.toSummary = function () {
	        return {
	            summaryKind: CompileSummaryKind.Pipe,
	            type: this.type,
	            name: this.name,
	            pure: this.pure
	        };
	    };
	    return CompilePipeMetadata;
	}());
	/**
	 * Metadata regarding compilation of a module.
	 */
	var CompileNgModuleMetadata = (function () {
	    /**
	     * @param {?=} __0
	     */
	    function CompileNgModuleMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, type = _b.type, providers = _b.providers, declaredDirectives = _b.declaredDirectives, exportedDirectives = _b.exportedDirectives, declaredPipes = _b.declaredPipes, exportedPipes = _b.exportedPipes, entryComponents = _b.entryComponents, bootstrapComponents = _b.bootstrapComponents, importedModules = _b.importedModules, exportedModules = _b.exportedModules, schemas = _b.schemas, transitiveModule = _b.transitiveModule, id = _b.id;
	        this.type = type;
	        this.declaredDirectives = _normalizeArray(declaredDirectives);
	        this.exportedDirectives = _normalizeArray(exportedDirectives);
	        this.declaredPipes = _normalizeArray(declaredPipes);
	        this.exportedPipes = _normalizeArray(exportedPipes);
	        this.providers = _normalizeArray(providers);
	        this.entryComponents = _normalizeArray(entryComponents);
	        this.bootstrapComponents = _normalizeArray(bootstrapComponents);
	        this.importedModules = _normalizeArray(importedModules);
	        this.exportedModules = _normalizeArray(exportedModules);
	        this.schemas = _normalizeArray(schemas);
	        this.id = id;
	        this.transitiveModule = transitiveModule;
	    }
	    /**
	     * @return {?}
	     */
	    CompileNgModuleMetadata.prototype.toSummary = function () {
	        return {
	            summaryKind: CompileSummaryKind.NgModule,
	            type: this.type,
	            entryComponents: this.transitiveModule.entryComponents,
	            providers: this.transitiveModule.providers,
	            modules: this.transitiveModule.modules,
	            exportedDirectives: this.transitiveModule.exportedDirectives,
	            exportedPipes: this.transitiveModule.exportedPipes
	        };
	    };
	    return CompileNgModuleMetadata;
	}());
	var TransitiveCompileNgModuleMetadata = (function () {
	    function TransitiveCompileNgModuleMetadata() {
	        this.directivesSet = new Set();
	        this.directives = [];
	        this.exportedDirectivesSet = new Set();
	        this.exportedDirectives = [];
	        this.pipesSet = new Set();
	        this.pipes = [];
	        this.exportedPipesSet = new Set();
	        this.exportedPipes = [];
	        this.modulesSet = new Set();
	        this.modules = [];
	        this.entryComponentsSet = new Set();
	        this.entryComponents = [];
	        this.providers = [];
	    }
	    /**
	     * @param {?} provider
	     * @param {?} module
	     * @return {?}
	     */
	    TransitiveCompileNgModuleMetadata.prototype.addProvider = function (provider, module) {
	        this.providers.push({ provider: provider, module: module });
	    };
	    /**
	     * @param {?} id
	     * @return {?}
	     */
	    TransitiveCompileNgModuleMetadata.prototype.addDirective = function (id) {
	        if (!this.directivesSet.has(id.reference)) {
	            this.directivesSet.add(id.reference);
	            this.directives.push(id);
	        }
	    };
	    /**
	     * @param {?} id
	     * @return {?}
	     */
	    TransitiveCompileNgModuleMetadata.prototype.addExportedDirective = function (id) {
	        if (!this.exportedDirectivesSet.has(id.reference)) {
	            this.exportedDirectivesSet.add(id.reference);
	            this.exportedDirectives.push(id);
	        }
	    };
	    /**
	     * @param {?} id
	     * @return {?}
	     */
	    TransitiveCompileNgModuleMetadata.prototype.addPipe = function (id) {
	        if (!this.pipesSet.has(id.reference)) {
	            this.pipesSet.add(id.reference);
	            this.pipes.push(id);
	        }
	    };
	    /**
	     * @param {?} id
	     * @return {?}
	     */
	    TransitiveCompileNgModuleMetadata.prototype.addExportedPipe = function (id) {
	        if (!this.exportedPipesSet.has(id.reference)) {
	            this.exportedPipesSet.add(id.reference);
	            this.exportedPipes.push(id);
	        }
	    };
	    /**
	     * @param {?} id
	     * @return {?}
	     */
	    TransitiveCompileNgModuleMetadata.prototype.addModule = function (id) {
	        if (!this.modulesSet.has(id.reference)) {
	            this.modulesSet.add(id.reference);
	            this.modules.push(id);
	        }
	    };
	    /**
	     * @param {?} ec
	     * @return {?}
	     */
	    TransitiveCompileNgModuleMetadata.prototype.addEntryComponent = function (ec) {
	        if (!this.entryComponentsSet.has(ec.componentType)) {
	            this.entryComponentsSet.add(ec.componentType);
	            this.entryComponents.push(ec);
	        }
	    };
	    return TransitiveCompileNgModuleMetadata;
	}());
	/**
	 * @param {?} obj
	 * @return {?}
	 */
	function _normalizeArray(obj) {
	    return obj || [];
	}
	var ProviderMeta = (function () {
	    /**
	     * @param {?} token
	     * @param {?} __1
	     */
	    function ProviderMeta(token, _a) {
	        var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
	        this.token = token;
	        this.useClass = useClass;
	        this.useValue = useValue;
	        this.useExisting = useExisting;
	        this.useFactory = useFactory;
	        this.dependencies = deps;
	        this.multi = !!multi;
	    }
	    return ProviderMeta;
	}());
	/**
	 * @template T
	 * @param {?} list
	 * @return {?}
	 */
	function flatten(list) {
	    return list.reduce(function (flat, item) {
	        var /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;
	        return ((flat)).concat(flatItem);
	    }, []);
	}
	/**
	 * @param {?} url
	 * @return {?}
	 */
	function sourceUrl(url) {
	    // Note: We need 3 "/" so that ng shows up as a separate domain
	    // in the chrome dev tools.
	    return url.replace(/(\w+:\/\/[\w:-]+)?(\/+)?/, 'ng:///');
	}
	/**
	 * @param {?} ngModuleType
	 * @param {?} compMeta
	 * @param {?} templateMeta
	 * @return {?}
	 */
	function templateSourceUrl(ngModuleType, compMeta, templateMeta) {
	    var /** @type {?} */ url;
	    if (templateMeta.isInline) {
	        if (compMeta.type.reference instanceof StaticSymbol) {
	            // Note: a .ts file might contain multiple components with inline templates,
	            // so we need to give them unique urls, as these will be used for sourcemaps.
	            url = compMeta.type.reference.filePath + "." + compMeta.type.reference.name + ".html";
	        }
	        else {
	            url = identifierName(ngModuleType) + "/" + identifierName(compMeta.type) + ".html";
	        }
	    }
	    else {
	        url = templateMeta.templateUrl;
	    }
	    // always prepend ng:// to make angular resources easy to find and not clobber
	    // user resources.
	    return sourceUrl(url);
	}
	/**
	 * @param {?} meta
	 * @param {?} id
	 * @return {?}
	 */
	function sharedStylesheetJitUrl(meta, id) {
	    var /** @type {?} */ pathParts = meta.moduleUrl.split(/\/\\/g);
	    var /** @type {?} */ baseName = pathParts[pathParts.length - 1];
	    return sourceUrl("css/" + id + baseName + ".ngstyle.js");
	}
	/**
	 * @param {?} moduleMeta
	 * @return {?}
	 */
	function ngModuleJitUrl(moduleMeta) {
	    return sourceUrl(identifierName(moduleMeta.type) + "/module.ngfactory.js");
	}
	/**
	 * @param {?} ngModuleType
	 * @param {?} compMeta
	 * @return {?}
	 */
	function templateJitUrl(ngModuleType, compMeta) {
	    return sourceUrl(identifierName(ngModuleType) + "/" + identifierName(compMeta.type) + ".ngfactory.js");
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CompilerConfig = (function () {
	    /**
	     * @param {?=} __0
	     */
	    function CompilerConfig(_a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.defaultEncapsulation, defaultEncapsulation = _c === void 0 ? _angular_core.ViewEncapsulation.Emulated : _c, _d = _b.useJit, useJit = _d === void 0 ? true : _d, missingTranslation = _b.missingTranslation, enableLegacyTemplate = _b.enableLegacyTemplate;
	        this.defaultEncapsulation = defaultEncapsulation;
	        this.useJit = useJit;
	        this.missingTranslation = missingTranslation;
	        this.enableLegacyTemplate = enableLegacyTemplate !== false;
	    }
	    return CompilerConfig;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ParserError = (function () {
	    /**
	     * @param {?} message
	     * @param {?} input
	     * @param {?} errLocation
	     * @param {?=} ctxLocation
	     */
	    function ParserError(message, input, errLocation, ctxLocation) {
	        this.input = input;
	        this.errLocation = errLocation;
	        this.ctxLocation = ctxLocation;
	        this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
	    }
	    return ParserError;
	}());
	var ParseSpan = (function () {
	    /**
	     * @param {?} start
	     * @param {?} end
	     */
	    function ParseSpan(start, end) {
	        this.start = start;
	        this.end = end;
	    }
	    return ParseSpan;
	}());
	var AST = (function () {
	    /**
	     * @param {?} span
	     */
	    function AST(span) {
	        this.span = span;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    AST.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return null;
	    };
	    /**
	     * @return {?}
	     */
	    AST.prototype.toString = function () { return 'AST'; };
	    return AST;
	}());
	/**
	 * Represents a quoted expression of the form:
	 *
	 * quote = prefix `:` uninterpretedExpression
	 * prefix = identifier
	 * uninterpretedExpression = arbitrary string
	 *
	 * A quoted expression is meant to be pre-processed by an AST transformer that
	 * converts it into another AST that no longer contains quoted expressions.
	 * It is meant to allow third-party developers to extend Angular template
	 * expression language. The `uninterpretedExpression` part of the quote is
	 * therefore not interpreted by the Angular's own expression parser.
	 */
	var Quote = (function (_super) {
	    __extends(Quote, _super);
	    /**
	     * @param {?} span
	     * @param {?} prefix
	     * @param {?} uninterpretedExpression
	     * @param {?} location
	     */
	    function Quote(span, prefix, uninterpretedExpression, location) {
	        var _this = _super.call(this, span) || this;
	        _this.prefix = prefix;
	        _this.uninterpretedExpression = uninterpretedExpression;
	        _this.location = location;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Quote.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitQuote(this, context);
	    };
	    /**
	     * @return {?}
	     */
	    Quote.prototype.toString = function () { return 'Quote'; };
	    return Quote;
	}(AST));
	var EmptyExpr = (function (_super) {
	    __extends(EmptyExpr, _super);
	    function EmptyExpr() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    EmptyExpr.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        // do nothing
	    };
	    return EmptyExpr;
	}(AST));
	var ImplicitReceiver = (function (_super) {
	    __extends(ImplicitReceiver, _super);
	    function ImplicitReceiver() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    ImplicitReceiver.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitImplicitReceiver(this, context);
	    };
	    return ImplicitReceiver;
	}(AST));
	/**
	 * Multiple expressions separated by a semicolon.
	 */
	var Chain = (function (_super) {
	    __extends(Chain, _super);
	    /**
	     * @param {?} span
	     * @param {?} expressions
	     */
	    function Chain(span, expressions) {
	        var _this = _super.call(this, span) || this;
	        _this.expressions = expressions;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Chain.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitChain(this, context);
	    };
	    return Chain;
	}(AST));
	var Conditional = (function (_super) {
	    __extends(Conditional, _super);
	    /**
	     * @param {?} span
	     * @param {?} condition
	     * @param {?} trueExp
	     * @param {?} falseExp
	     */
	    function Conditional(span, condition, trueExp, falseExp) {
	        var _this = _super.call(this, span) || this;
	        _this.condition = condition;
	        _this.trueExp = trueExp;
	        _this.falseExp = falseExp;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Conditional.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitConditional(this, context);
	    };
	    return Conditional;
	}(AST));
	var PropertyRead = (function (_super) {
	    __extends(PropertyRead, _super);
	    /**
	     * @param {?} span
	     * @param {?} receiver
	     * @param {?} name
	     */
	    function PropertyRead(span, receiver, name) {
	        var _this = _super.call(this, span) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    PropertyRead.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPropertyRead(this, context);
	    };
	    return PropertyRead;
	}(AST));
	var PropertyWrite = (function (_super) {
	    __extends(PropertyWrite, _super);
	    /**
	     * @param {?} span
	     * @param {?} receiver
	     * @param {?} name
	     * @param {?} value
	     */
	    function PropertyWrite(span, receiver, name, value) {
	        var _this = _super.call(this, span) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    PropertyWrite.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPropertyWrite(this, context);
	    };
	    return PropertyWrite;
	}(AST));
	var SafePropertyRead = (function (_super) {
	    __extends(SafePropertyRead, _super);
	    /**
	     * @param {?} span
	     * @param {?} receiver
	     * @param {?} name
	     */
	    function SafePropertyRead(span, receiver, name) {
	        var _this = _super.call(this, span) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    SafePropertyRead.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitSafePropertyRead(this, context);
	    };
	    return SafePropertyRead;
	}(AST));
	var KeyedRead = (function (_super) {
	    __extends(KeyedRead, _super);
	    /**
	     * @param {?} span
	     * @param {?} obj
	     * @param {?} key
	     */
	    function KeyedRead(span, obj, key) {
	        var _this = _super.call(this, span) || this;
	        _this.obj = obj;
	        _this.key = key;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    KeyedRead.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitKeyedRead(this, context);
	    };
	    return KeyedRead;
	}(AST));
	var KeyedWrite = (function (_super) {
	    __extends(KeyedWrite, _super);
	    /**
	     * @param {?} span
	     * @param {?} obj
	     * @param {?} key
	     * @param {?} value
	     */
	    function KeyedWrite(span, obj, key, value) {
	        var _this = _super.call(this, span) || this;
	        _this.obj = obj;
	        _this.key = key;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    KeyedWrite.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitKeyedWrite(this, context);
	    };
	    return KeyedWrite;
	}(AST));
	var BindingPipe = (function (_super) {
	    __extends(BindingPipe, _super);
	    /**
	     * @param {?} span
	     * @param {?} exp
	     * @param {?} name
	     * @param {?} args
	     */
	    function BindingPipe(span, exp, name, args) {
	        var _this = _super.call(this, span) || this;
	        _this.exp = exp;
	        _this.name = name;
	        _this.args = args;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    BindingPipe.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPipe(this, context);
	    };
	    return BindingPipe;
	}(AST));
	var LiteralPrimitive = (function (_super) {
	    __extends(LiteralPrimitive, _super);
	    /**
	     * @param {?} span
	     * @param {?} value
	     */
	    function LiteralPrimitive(span, value) {
	        var _this = _super.call(this, span) || this;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    LiteralPrimitive.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitLiteralPrimitive(this, context);
	    };
	    return LiteralPrimitive;
	}(AST));
	var LiteralArray = (function (_super) {
	    __extends(LiteralArray, _super);
	    /**
	     * @param {?} span
	     * @param {?} expressions
	     */
	    function LiteralArray(span, expressions) {
	        var _this = _super.call(this, span) || this;
	        _this.expressions = expressions;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    LiteralArray.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitLiteralArray(this, context);
	    };
	    return LiteralArray;
	}(AST));
	var LiteralMap = (function (_super) {
	    __extends(LiteralMap, _super);
	    /**
	     * @param {?} span
	     * @param {?} keys
	     * @param {?} values
	     */
	    function LiteralMap(span, keys, values) {
	        var _this = _super.call(this, span) || this;
	        _this.keys = keys;
	        _this.values = values;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    LiteralMap.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitLiteralMap(this, context);
	    };
	    return LiteralMap;
	}(AST));
	var Interpolation = (function (_super) {
	    __extends(Interpolation, _super);
	    /**
	     * @param {?} span
	     * @param {?} strings
	     * @param {?} expressions
	     */
	    function Interpolation(span, strings, expressions) {
	        var _this = _super.call(this, span) || this;
	        _this.strings = strings;
	        _this.expressions = expressions;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Interpolation.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitInterpolation(this, context);
	    };
	    return Interpolation;
	}(AST));
	var Binary = (function (_super) {
	    __extends(Binary, _super);
	    /**
	     * @param {?} span
	     * @param {?} operation
	     * @param {?} left
	     * @param {?} right
	     */
	    function Binary(span, operation, left, right) {
	        var _this = _super.call(this, span) || this;
	        _this.operation = operation;
	        _this.left = left;
	        _this.right = right;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Binary.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitBinary(this, context);
	    };
	    return Binary;
	}(AST));
	var PrefixNot = (function (_super) {
	    __extends(PrefixNot, _super);
	    /**
	     * @param {?} span
	     * @param {?} expression
	     */
	    function PrefixNot(span, expression) {
	        var _this = _super.call(this, span) || this;
	        _this.expression = expression;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    PrefixNot.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPrefixNot(this, context);
	    };
	    return PrefixNot;
	}(AST));
	var MethodCall = (function (_super) {
	    __extends(MethodCall, _super);
	    /**
	     * @param {?} span
	     * @param {?} receiver
	     * @param {?} name
	     * @param {?} args
	     */
	    function MethodCall(span, receiver, name, args) {
	        var _this = _super.call(this, span) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        _this.args = args;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    MethodCall.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitMethodCall(this, context);
	    };
	    return MethodCall;
	}(AST));
	var SafeMethodCall = (function (_super) {
	    __extends(SafeMethodCall, _super);
	    /**
	     * @param {?} span
	     * @param {?} receiver
	     * @param {?} name
	     * @param {?} args
	     */
	    function SafeMethodCall(span, receiver, name, args) {
	        var _this = _super.call(this, span) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        _this.args = args;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    SafeMethodCall.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitSafeMethodCall(this, context);
	    };
	    return SafeMethodCall;
	}(AST));
	var FunctionCall = (function (_super) {
	    __extends(FunctionCall, _super);
	    /**
	     * @param {?} span
	     * @param {?} target
	     * @param {?} args
	     */
	    function FunctionCall(span, target, args) {
	        var _this = _super.call(this, span) || this;
	        _this.target = target;
	        _this.args = args;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    FunctionCall.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitFunctionCall(this, context);
	    };
	    return FunctionCall;
	}(AST));
	var ASTWithSource = (function (_super) {
	    __extends(ASTWithSource, _super);
	    /**
	     * @param {?} ast
	     * @param {?} source
	     * @param {?} location
	     * @param {?} errors
	     */
	    function ASTWithSource(ast, source, location, errors) {
	        var _this = _super.call(this, new ParseSpan(0, source == null ? 0 : source.length)) || this;
	        _this.ast = ast;
	        _this.source = source;
	        _this.location = location;
	        _this.errors = errors;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    ASTWithSource.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return this.ast.visit(visitor, context);
	    };
	    /**
	     * @return {?}
	     */
	    ASTWithSource.prototype.toString = function () { return this.source + " in " + this.location; };
	    return ASTWithSource;
	}(AST));
	var TemplateBinding = (function () {
	    /**
	     * @param {?} span
	     * @param {?} key
	     * @param {?} keyIsVar
	     * @param {?} name
	     * @param {?} expression
	     */
	    function TemplateBinding(span, key, keyIsVar, name, expression) {
	        this.span = span;
	        this.key = key;
	        this.keyIsVar = keyIsVar;
	        this.name = name;
	        this.expression = expression;
	    }
	    return TemplateBinding;
	}());
	var RecursiveAstVisitor = (function () {
	    function RecursiveAstVisitor() {
	    }
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitBinary = function (ast, context) {
	        ast.left.visit(this);
	        ast.right.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitChain = function (ast, context) { return this.visitAll(ast.expressions, context); };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitConditional = function (ast, context) {
	        ast.condition.visit(this);
	        ast.trueExp.visit(this);
	        ast.falseExp.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitPipe = function (ast, context) {
	        ast.exp.visit(this);
	        this.visitAll(ast.args, context);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitFunctionCall = function (ast, context) {
	        ast.target.visit(this);
	        this.visitAll(ast.args, context);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast, context) { return null; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitInterpolation = function (ast, context) {
	        return this.visitAll(ast.expressions, context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitKeyedRead = function (ast, context) {
	        ast.obj.visit(this);
	        ast.key.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast, context) {
	        ast.obj.visit(this);
	        ast.key.visit(this);
	        ast.value.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitLiteralArray = function (ast, context) {
	        return this.visitAll(ast.expressions, context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitLiteralMap = function (ast, context) { return this.visitAll(ast.values, context); };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast, context) { return null; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitMethodCall = function (ast, context) {
	        ast.receiver.visit(this);
	        return this.visitAll(ast.args, context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitPrefixNot = function (ast, context) {
	        ast.expression.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitPropertyRead = function (ast, context) {
	        ast.receiver.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast, context) {
	        ast.receiver.visit(this);
	        ast.value.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast, context) {
	        ast.receiver.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast, context) {
	        ast.receiver.visit(this);
	        return this.visitAll(ast.args, context);
	    };
	    /**
	     * @param {?} asts
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitAll = function (asts, context) {
	        var _this = this;
	        asts.forEach(function (ast) { return ast.visit(_this, context); });
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitQuote = function (ast, context) { return null; };
	    return RecursiveAstVisitor;
	}());
	var AstTransformer = (function () {
	    function AstTransformer() {
	    }
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitImplicitReceiver = function (ast, context) { return ast; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitInterpolation = function (ast, context) {
	        return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitLiteralPrimitive = function (ast, context) {
	        return new LiteralPrimitive(ast.span, ast.value);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitPropertyRead = function (ast, context) {
	        return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitPropertyWrite = function (ast, context) {
	        return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value.visit(this));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitSafePropertyRead = function (ast, context) {
	        return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitMethodCall = function (ast, context) {
	        return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitSafeMethodCall = function (ast, context) {
	        return new SafeMethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitFunctionCall = function (ast, context) {
	        return new FunctionCall(ast.span, ast.target.visit(this), this.visitAll(ast.args));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitLiteralArray = function (ast, context) {
	        return new LiteralArray(ast.span, this.visitAll(ast.expressions));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitLiteralMap = function (ast, context) {
	        return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitBinary = function (ast, context) {
	        return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitPrefixNot = function (ast, context) {
	        return new PrefixNot(ast.span, ast.expression.visit(this));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitConditional = function (ast, context) {
	        return new Conditional(ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitPipe = function (ast, context) {
	        return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitKeyedRead = function (ast, context) {
	        return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitKeyedWrite = function (ast, context) {
	        return new KeyedWrite(ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
	    };
	    /**
	     * @param {?} asts
	     * @return {?}
	     */
	    AstTransformer.prototype.visitAll = function (asts) {
	        var /** @type {?} */ res = new Array(asts.length);
	        for (var /** @type {?} */ i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitChain = function (ast, context) {
	        return new Chain(ast.span, this.visitAll(ast.expressions));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitQuote = function (ast, context) {
	        return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);
	    };
	    return AstTransformer;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var $EOF = 0;
	var $TAB = 9;
	var $LF = 10;
	var $VTAB = 11;
	var $FF = 12;
	var $CR = 13;
	var $SPACE = 32;
	var $BANG = 33;
	var $DQ = 34;
	var $HASH = 35;
	var $$ = 36;
	var $PERCENT = 37;
	var $AMPERSAND = 38;
	var $SQ = 39;
	var $LPAREN = 40;
	var $RPAREN = 41;
	var $STAR = 42;
	var $PLUS = 43;
	var $COMMA = 44;
	var $MINUS = 45;
	var $PERIOD = 46;
	var $SLASH = 47;
	var $COLON = 58;
	var $SEMICOLON = 59;
	var $LT = 60;
	var $EQ = 61;
	var $GT = 62;
	var $QUESTION = 63;
	var $0 = 48;
	var $9 = 57;
	var $A = 65;
	var $E = 69;
	var $F = 70;
	var $X = 88;
	var $Z = 90;
	var $LBRACKET = 91;
	var $BACKSLASH = 92;
	var $RBRACKET = 93;
	var $CARET = 94;
	var $_ = 95;
	var $a = 97;
	var $e = 101;
	var $f = 102;
	var $n = 110;
	var $r = 114;
	var $t = 116;
	var $u = 117;
	var $v = 118;
	var $x = 120;
	var $z = 122;
	var $LBRACE = 123;
	var $BAR = 124;
	var $RBRACE = 125;
	var $NBSP = 160;
	var $BT = 96;
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isWhitespace(code) {
	    return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isDigit(code) {
	    return $0 <= code && code <= $9;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isAsciiLetter(code) {
	    return code >= $a && code <= $z || code >= $A && code <= $Z;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isAsciiHexDigit(code) {
	    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
	}
	/**
	 * A replacement for \@Injectable to be used in the compiler, so that
	 * we don't try to evaluate the metadata in the compiler during AoT.
	 * This decorator is enough to make the compiler work with the ReflectiveInjector though.
	 * \@Annotation
	 * @return {?}
	 */
	function CompilerInjectable() {
	    return function (x) { return x; };
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} identifier
	 * @param {?} value
	 * @return {?}
	 */
	function assertArrayOfStrings(identifier, value) {
	    if (!_angular_core.isDevMode() || value == null) {
	        return;
	    }
	    if (!Array.isArray(value)) {
	        throw new Error("Expected '" + identifier + "' to be an array of strings.");
	    }
	    for (var /** @type {?} */ i = 0; i < value.length; i += 1) {
	        if (typeof value[i] !== 'string') {
	            throw new Error("Expected '" + identifier + "' to be an array of strings.");
	        }
	    }
	}
	var INTERPOLATION_BLACKLIST_REGEXPS = [
	    /^\s*$/,
	    /[<>]/,
	    /^[{}]$/,
	    /&(#|[a-z])/i,
	    /^\/\//,
	];
	/**
	 * @param {?} identifier
	 * @param {?} value
	 * @return {?}
	 */
	function assertInterpolationSymbols(identifier, value) {
	    if (value != null && !(Array.isArray(value) && value.length == 2)) {
	        throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
	    }
	    else if (_angular_core.isDevMode() && value != null) {
	        var /** @type {?} */ start_1 = (value[0]);
	        var /** @type {?} */ end_1 = (value[1]);
	        // black list checking
	        INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {
	            if (regexp.test(start_1) || regexp.test(end_1)) {
	                throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
	            }
	        });
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var InterpolationConfig = (function () {
	    /**
	     * @param {?} start
	     * @param {?} end
	     */
	    function InterpolationConfig(start, end) {
	        this.start = start;
	        this.end = end;
	    }
	    /**
	     * @param {?} markers
	     * @return {?}
	     */
	    InterpolationConfig.fromArray = function (markers) {
	        if (!markers) {
	            return DEFAULT_INTERPOLATION_CONFIG;
	        }
	        assertInterpolationSymbols('interpolation', markers);
	        return new InterpolationConfig(markers[0], markers[1]);
	    };
	    
	    return InterpolationConfig;
	}());
	var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TokenType = {};
	TokenType.Character = 0;
	TokenType.Identifier = 1;
	TokenType.Keyword = 2;
	TokenType.String = 3;
	TokenType.Operator = 4;
	TokenType.Number = 5;
	TokenType.Error = 6;
	TokenType[TokenType.Character] = "Character";
	TokenType[TokenType.Identifier] = "Identifier";
	TokenType[TokenType.Keyword] = "Keyword";
	TokenType[TokenType.String] = "String";
	TokenType[TokenType.Operator] = "Operator";
	TokenType[TokenType.Number] = "Number";
	TokenType[TokenType.Error] = "Error";
	var KEYWORDS = ['var', 'let', 'as', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
	var Lexer = (function () {
	    function Lexer() {
	    }
	    /**
	     * @param {?} text
	     * @return {?}
	     */
	    Lexer.prototype.tokenize = function (text) {
	        var /** @type {?} */ scanner = new _Scanner(text);
	        var /** @type {?} */ tokens = [];
	        var /** @type {?} */ token = scanner.scanToken();
	        while (token != null) {
	            tokens.push(token);
	            token = scanner.scanToken();
	        }
	        return tokens;
	    };
	    return Lexer;
	}());
	Lexer.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	Lexer.ctorParameters = function () { return []; };
	var Token = (function () {
	    /**
	     * @param {?} index
	     * @param {?} type
	     * @param {?} numValue
	     * @param {?} strValue
	     */
	    function Token(index, type, numValue, strValue) {
	        this.index = index;
	        this.type = type;
	        this.numValue = numValue;
	        this.strValue = strValue;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    Token.prototype.isCharacter = function (code) {
	        return this.type == TokenType.Character && this.numValue == code;
	    };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isNumber = function () { return this.type == TokenType.Number; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isString = function () { return this.type == TokenType.String; };
	    /**
	     * @param {?} operater
	     * @return {?}
	     */
	    Token.prototype.isOperator = function (operater) {
	        return this.type == TokenType.Operator && this.strValue == operater;
	    };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isIdentifier = function () { return this.type == TokenType.Identifier; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeyword = function () { return this.type == TokenType.Keyword; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeywordLet = function () { return this.type == TokenType.Keyword && this.strValue == 'let'; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeywordAs = function () { return this.type == TokenType.Keyword && this.strValue == 'as'; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeywordNull = function () { return this.type == TokenType.Keyword && this.strValue == 'null'; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeywordUndefined = function () {
	        return this.type == TokenType.Keyword && this.strValue == 'undefined';
	    };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeywordTrue = function () { return this.type == TokenType.Keyword && this.strValue == 'true'; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeywordFalse = function () { return this.type == TokenType.Keyword && this.strValue == 'false'; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeywordThis = function () { return this.type == TokenType.Keyword && this.strValue == 'this'; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isError = function () { return this.type == TokenType.Error; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.toNumber = function () { return this.type == TokenType.Number ? this.numValue : -1; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.toString = function () {
	        switch (this.type) {
	            case TokenType.Character:
	            case TokenType.Identifier:
	            case TokenType.Keyword:
	            case TokenType.Operator:
	            case TokenType.String:
	            case TokenType.Error:
	                return this.strValue;
	            case TokenType.Number:
	                return this.numValue.toString();
	            default:
	                return null;
	        }
	    };
	    return Token;
	}());
	/**
	 * @param {?} index
	 * @param {?} code
	 * @return {?}
	 */
	function newCharacterToken(index, code) {
	    return new Token(index, TokenType.Character, code, String.fromCharCode(code));
	}
	/**
	 * @param {?} index
	 * @param {?} text
	 * @return {?}
	 */
	function newIdentifierToken(index, text) {
	    return new Token(index, TokenType.Identifier, 0, text);
	}
	/**
	 * @param {?} index
	 * @param {?} text
	 * @return {?}
	 */
	function newKeywordToken(index, text) {
	    return new Token(index, TokenType.Keyword, 0, text);
	}
	/**
	 * @param {?} index
	 * @param {?} text
	 * @return {?}
	 */
	function newOperatorToken(index, text) {
	    return new Token(index, TokenType.Operator, 0, text);
	}
	/**
	 * @param {?} index
	 * @param {?} text
	 * @return {?}
	 */
	function newStringToken(index, text) {
	    return new Token(index, TokenType.String, 0, text);
	}
	/**
	 * @param {?} index
	 * @param {?} n
	 * @return {?}
	 */
	function newNumberToken(index, n) {
	    return new Token(index, TokenType.Number, n, '');
	}
	/**
	 * @param {?} index
	 * @param {?} message
	 * @return {?}
	 */
	function newErrorToken(index, message) {
	    return new Token(index, TokenType.Error, 0, message);
	}
	var EOF = new Token(-1, TokenType.Character, 0, '');
	var _Scanner = (function () {
	    /**
	     * @param {?} input
	     */
	    function _Scanner(input) {
	        this.input = input;
	        this.peek = 0;
	        this.index = -1;
	        this.length = input.length;
	        this.advance();
	    }
	    /**
	     * @return {?}
	     */
	    _Scanner.prototype.advance = function () {
	        this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
	    };
	    /**
	     * @return {?}
	     */
	    _Scanner.prototype.scanToken = function () {
	        var /** @type {?} */ input = this.input, /** @type {?} */ length = this.length;
	        var /** @type {?} */ peek = this.peek, /** @type {?} */ index = this.index;
	        // Skip whitespace.
	        while (peek <= $SPACE) {
	            if (++index >= length) {
	                peek = $EOF;
	                break;
	            }
	            else {
	                peek = input.charCodeAt(index);
	            }
	        }
	        this.peek = peek;
	        this.index = index;
	        if (index >= length) {
	            return null;
	        }
	        // Handle identifiers and numbers.
	        if (isIdentifierStart(peek))
	            return this.scanIdentifier();
	        if (isDigit(peek))
	            return this.scanNumber(index);
	        var /** @type {?} */ start = index;
	        switch (peek) {
	            case $PERIOD:
	                this.advance();
	                return isDigit(this.peek) ? this.scanNumber(start) :
	                    newCharacterToken(start, $PERIOD);
	            case $LPAREN:
	            case $RPAREN:
	            case $LBRACE:
	            case $RBRACE:
	            case $LBRACKET:
	            case $RBRACKET:
	            case $COMMA:
	            case $COLON:
	            case $SEMICOLON:
	                return this.scanCharacter(start, peek);
	            case $SQ:
	            case $DQ:
	                return this.scanString();
	            case $HASH:
	            case $PLUS:
	            case $MINUS:
	            case $STAR:
	            case $SLASH:
	            case $PERCENT:
	            case $CARET:
	                return this.scanOperator(start, String.fromCharCode(peek));
	            case $QUESTION:
	                return this.scanComplexOperator(start, '?', $PERIOD, '.');
	            case $LT:
	            case $GT:
	                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');
	            case $BANG:
	            case $EQ:
	                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');
	            case $AMPERSAND:
	                return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
	            case $BAR:
	                return this.scanComplexOperator(start, '|', $BAR, '|');
	            case $NBSP:
	                while (isWhitespace(this.peek))
	                    this.advance();
	                return this.scanToken();
	        }
	        this.advance();
	        return this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0);
	    };
	    /**
	     * @param {?} start
	     * @param {?} code
	     * @return {?}
	     */
	    _Scanner.prototype.scanCharacter = function (start, code) {
	        this.advance();
	        return newCharacterToken(start, code);
	    };
	    /**
	     * @param {?} start
	     * @param {?} str
	     * @return {?}
	     */
	    _Scanner.prototype.scanOperator = function (start, str) {
	        this.advance();
	        return newOperatorToken(start, str);
	    };
	    /**
	     * Tokenize a 2/3 char long operator
	     *
	     * @param {?} start start index in the expression
	     * @param {?} one first symbol (always part of the operator)
	     * @param {?} twoCode code point for the second symbol
	     * @param {?} two second symbol (part of the operator when the second code point matches)
	     * @param {?=} threeCode code point for the third symbol
	     * @param {?=} three third symbol (part of the operator when provided and matches source expression)
	     * @return {?}
	     */
	    _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
	        this.advance();
	        var /** @type {?} */ str = one;
	        if (this.peek == twoCode) {
	            this.advance();
	            str += two;
	        }
	        if (threeCode != null && this.peek == threeCode) {
	            this.advance();
	            str += three;
	        }
	        return newOperatorToken(start, str);
	    };
	    /**
	     * @return {?}
	     */
	    _Scanner.prototype.scanIdentifier = function () {
	        var /** @type {?} */ start = this.index;
	        this.advance();
	        while (isIdentifierPart(this.peek))
	            this.advance();
	        var /** @type {?} */ str = this.input.substring(start, this.index);
	        return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :
	            newIdentifierToken(start, str);
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _Scanner.prototype.scanNumber = function (start) {
	        var /** @type {?} */ simple = (this.index === start);
	        this.advance(); // Skip initial digit.
	        while (true) {
	            if (isDigit(this.peek)) {
	            }
	            else if (this.peek == $PERIOD) {
	                simple = false;
	            }
	            else if (isExponentStart(this.peek)) {
	                this.advance();
	                if (isExponentSign(this.peek))
	                    this.advance();
	                if (!isDigit(this.peek))
	                    return this.error('Invalid exponent', -1);
	                simple = false;
	            }
	            else {
	                break;
	            }
	            this.advance();
	        }
	        var /** @type {?} */ str = this.input.substring(start, this.index);
	        var /** @type {?} */ value = simple ? parseIntAutoRadix(str) : parseFloat(str);
	        return newNumberToken(start, value);
	    };
	    /**
	     * @return {?}
	     */
	    _Scanner.prototype.scanString = function () {
	        var /** @type {?} */ start = this.index;
	        var /** @type {?} */ quote = this.peek;
	        this.advance(); // Skip initial quote.
	        var /** @type {?} */ buffer = '';
	        var /** @type {?} */ marker = this.index;
	        var /** @type {?} */ input = this.input;
	        while (this.peek != quote) {
	            if (this.peek == $BACKSLASH) {
	                buffer += input.substring(marker, this.index);
	                this.advance();
	                var /** @type {?} */ unescapedCode = void 0;
	                // Workaround for TS2.1-introduced type strictness
	                this.peek = this.peek;
	                if (this.peek == $u) {
	                    // 4 character hex code for unicode character.
	                    var /** @type {?} */ hex = input.substring(this.index + 1, this.index + 5);
	                    if (/^[0-9a-f]+$/i.test(hex)) {
	                        unescapedCode = parseInt(hex, 16);
	                    }
	                    else {
	                        return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	                    }
	                    for (var /** @type {?} */ i = 0; i < 5; i++) {
	                        this.advance();
	                    }
	                }
	                else {
	                    unescapedCode = unescape(this.peek);
	                    this.advance();
	                }
	                buffer += String.fromCharCode(unescapedCode);
	                marker = this.index;
	            }
	            else if (this.peek == $EOF) {
	                return this.error('Unterminated quote', 0);
	            }
	            else {
	                this.advance();
	            }
	        }
	        var /** @type {?} */ last = input.substring(marker, this.index);
	        this.advance(); // Skip terminating quote.
	        return newStringToken(start, buffer + last);
	    };
	    /**
	     * @param {?} message
	     * @param {?} offset
	     * @return {?}
	     */
	    _Scanner.prototype.error = function (message, offset) {
	        var /** @type {?} */ position = this.index + offset;
	        return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	    };
	    return _Scanner;
	}());
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isIdentifierStart(code) {
	    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) ||
	        (code == $_) || (code == $$);
	}
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function isIdentifier(input) {
	    if (input.length == 0)
	        return false;
	    var /** @type {?} */ scanner = new _Scanner(input);
	    if (!isIdentifierStart(scanner.peek))
	        return false;
	    scanner.advance();
	    while (scanner.peek !== $EOF) {
	        if (!isIdentifierPart(scanner.peek))
	            return false;
	        scanner.advance();
	    }
	    return true;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isIdentifierPart(code) {
	    return isAsciiLetter(code) || isDigit(code) || (code == $_) ||
	        (code == $$);
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isExponentStart(code) {
	    return code == $e || code == $E;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isExponentSign(code) {
	    return code == $MINUS || code == $PLUS;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isQuote(code) {
	    return code === $SQ || code === $DQ || code === $BT;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function unescape(code) {
	    switch (code) {
	        case $n:
	            return $LF;
	        case $f:
	            return $FF;
	        case $r:
	            return $CR;
	        case $t:
	            return $TAB;
	        case $v:
	            return $VTAB;
	        default:
	            return code;
	    }
	}
	/**
	 * @param {?} text
	 * @return {?}
	 */
	function parseIntAutoRadix(text) {
	    var /** @type {?} */ result = parseInt(text);
	    if (isNaN(result)) {
	        throw new Error('Invalid integer literal when parsing ' + text);
	    }
	    return result;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SplitInterpolation = (function () {
	    /**
	     * @param {?} strings
	     * @param {?} expressions
	     * @param {?} offsets
	     */
	    function SplitInterpolation(strings, expressions, offsets) {
	        this.strings = strings;
	        this.expressions = expressions;
	        this.offsets = offsets;
	    }
	    return SplitInterpolation;
	}());
	var TemplateBindingParseResult = (function () {
	    /**
	     * @param {?} templateBindings
	     * @param {?} warnings
	     * @param {?} errors
	     */
	    function TemplateBindingParseResult(templateBindings, warnings, errors) {
	        this.templateBindings = templateBindings;
	        this.warnings = warnings;
	        this.errors = errors;
	    }
	    return TemplateBindingParseResult;
	}());
	/**
	 * @param {?} config
	 * @return {?}
	 */
	function _createInterpolateRegExp(config) {
	    var /** @type {?} */ pattern = escapeRegExp(config.start) + '([\\s\\S]*?)' + escapeRegExp(config.end);
	    return new RegExp(pattern, 'g');
	}
	var Parser = (function () {
	    /**
	     * @param {?} _lexer
	     */
	    function Parser(_lexer) {
	        this._lexer = _lexer;
	        this.errors = [];
	    }
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype.parseAction = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        this._checkNoInterpolation(input, location, interpolationConfig);
	        var /** @type {?} */ sourceToLex = this._stripComments(input);
	        var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(input));
	        var /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length)
	            .parseChain();
	        return new ASTWithSource(ast, input, location, this.errors);
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype.parseBinding = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);
	        return new ASTWithSource(ast, input, location, this.errors);
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype.parseSimpleBinding = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);
	        var /** @type {?} */ errors = SimpleExpressionChecker.check(ast);
	        if (errors.length > 0) {
	            this._reportError("Host binding expression cannot contain " + errors.join(' '), input, location);
	        }
	        return new ASTWithSource(ast, input, location, this.errors);
	    };
	    /**
	     * @param {?} message
	     * @param {?} input
	     * @param {?} errLocation
	     * @param {?=} ctxLocation
	     * @return {?}
	     */
	    Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) {
	        this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype._parseBindingAst = function (input, location, interpolationConfig) {
	        // Quotes expressions use 3rd-party expression language. We don't want to use
	        // our lexer or parser for that, so we check for that ahead of time.
	        var /** @type {?} */ quote = this._parseQuote(input, location);
	        if (quote != null) {
	            return quote;
	        }
	        this._checkNoInterpolation(input, location, interpolationConfig);
	        var /** @type {?} */ sourceToLex = this._stripComments(input);
	        var /** @type {?} */ tokens = this._lexer.tokenize(sourceToLex);
	        return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length)
	            .parseChain();
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @return {?}
	     */
	    Parser.prototype._parseQuote = function (input, location) {
	        if (input == null)
	            return null;
	        var /** @type {?} */ prefixSeparatorIndex = input.indexOf(':');
	        if (prefixSeparatorIndex == -1)
	            return null;
	        var /** @type {?} */ prefix = input.substring(0, prefixSeparatorIndex).trim();
	        if (!isIdentifier(prefix))
	            return null;
	        var /** @type {?} */ uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
	        return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
	    };
	    /**
	     * @param {?} prefixToken
	     * @param {?} input
	     * @param {?} location
	     * @return {?}
	     */
	    Parser.prototype.parseTemplateBindings = function (prefixToken, input, location) {
	        var /** @type {?} */ tokens = this._lexer.tokenize(input);
	        if (prefixToken) {
	            // Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).
	            var /** @type {?} */ prefixTokens = this._lexer.tokenize(prefixToken).map(function (t) {
	                t.index = 0;
	                return t;
	            });
	            tokens.unshift.apply(tokens, prefixTokens);
	        }
	        return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0)
	            .parseTemplateBindings();
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype.parseInterpolation = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var /** @type {?} */ split = this.splitInterpolation(input, location, interpolationConfig);
	        if (split == null)
	            return null;
	        var /** @type {?} */ expressions = [];
	        for (var /** @type {?} */ i = 0; i < split.expressions.length; ++i) {
	            var /** @type {?} */ expressionText = split.expressions[i];
	            var /** @type {?} */ sourceToLex = this._stripComments(expressionText);
	            var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
	            var /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length))
	                .parseChain();
	            expressions.push(ast);
	        }
	        return new ASTWithSource(new Interpolation(new ParseSpan(0, input == null ? 0 : input.length), split.strings, expressions), input, location, this.errors);
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);
	        var /** @type {?} */ parts = input.split(regexp);
	        if (parts.length <= 1) {
	            return null;
	        }
	        var /** @type {?} */ strings = [];
	        var /** @type {?} */ expressions = [];
	        var /** @type {?} */ offsets = [];
	        var /** @type {?} */ offset = 0;
	        for (var /** @type {?} */ i = 0; i < parts.length; i++) {
	            var /** @type {?} */ part = parts[i];
	            if (i % 2 === 0) {
	                // fixed string
	                strings.push(part);
	                offset += part.length;
	            }
	            else if (part.trim().length > 0) {
	                offset += interpolationConfig.start.length;
	                expressions.push(part);
	                offsets.push(offset);
	                offset += part.length + interpolationConfig.end.length;
	            }
	            else {
	                this._reportError('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
	                expressions.push('$implict');
	                offsets.push(offset);
	            }
	        }
	        return new SplitInterpolation(strings, expressions, offsets);
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @return {?}
	     */
	    Parser.prototype.wrapLiteralPrimitive = function (input, location) {
	        return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, input == null ? 0 : input.length), input), input, location, this.errors);
	    };
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    Parser.prototype._stripComments = function (input) {
	        var /** @type {?} */ i = this._commentStart(input);
	        return i != null ? input.substring(0, i).trim() : input;
	    };
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    Parser.prototype._commentStart = function (input) {
	        var /** @type {?} */ outerQuote = null;
	        for (var /** @type {?} */ i = 0; i < input.length - 1; i++) {
	            var /** @type {?} */ char = input.charCodeAt(i);
	            var /** @type {?} */ nextChar = input.charCodeAt(i + 1);
	            if (char === $SLASH && nextChar == $SLASH && outerQuote == null)
	                return i;
	            if (outerQuote === char) {
	                outerQuote = null;
	            }
	            else if (outerQuote == null && isQuote(char)) {
	                outerQuote = char;
	            }
	        }
	        return null;
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype._checkNoInterpolation = function (input, location, interpolationConfig) {
	        var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);
	        var /** @type {?} */ parts = input.split(regexp);
	        if (parts.length > 1) {
	            this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
	        }
	    };
	    /**
	     * @param {?} parts
	     * @param {?} partInErrIdx
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx, interpolationConfig) {
	        var /** @type {?} */ errLocation = '';
	        for (var /** @type {?} */ j = 0; j < partInErrIdx; j++) {
	            errLocation += j % 2 === 0 ?
	                parts[j] :
	                "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
	        }
	        return errLocation.length;
	    };
	    return Parser;
	}());
	Parser.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	Parser.ctorParameters = function () { return [
	    { type: Lexer, },
	]; };
	var _ParseAST = (function () {
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?} tokens
	     * @param {?} inputLength
	     * @param {?} parseAction
	     * @param {?} errors
	     * @param {?} offset
	     */
	    function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {
	        this.input = input;
	        this.location = location;
	        this.tokens = tokens;
	        this.inputLength = inputLength;
	        this.parseAction = parseAction;
	        this.errors = errors;
	        this.offset = offset;
	        this.rparensExpected = 0;
	        this.rbracketsExpected = 0;
	        this.rbracesExpected = 0;
	        this.index = 0;
	    }
	    /**
	     * @param {?} offset
	     * @return {?}
	     */
	    _ParseAST.prototype.peek = function (offset) {
	        var /** @type {?} */ i = this.index + offset;
	        return i < this.tokens.length ? this.tokens[i] : EOF;
	    };
	    Object.defineProperty(_ParseAST.prototype, "next", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.peek(0); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(_ParseAST.prototype, "inputIndex", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return (this.index < this.tokens.length) ? this.next.index + this.offset :
	                this.inputLength + this.offset;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _ParseAST.prototype.span = function (start) { return new ParseSpan(start, this.inputIndex); };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.advance = function () { this.index++; };
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    _ParseAST.prototype.optionalCharacter = function (code) {
	        if (this.next.isCharacter(code)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.peekKeywordLet = function () { return this.next.isKeywordLet(); };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.peekKeywordAs = function () { return this.next.isKeywordAs(); };
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    _ParseAST.prototype.expectCharacter = function (code) {
	        if (this.optionalCharacter(code))
	            return;
	        this.error("Missing expected " + String.fromCharCode(code));
	    };
	    /**
	     * @param {?} op
	     * @return {?}
	     */
	    _ParseAST.prototype.optionalOperator = function (op) {
	        if (this.next.isOperator(op)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    /**
	     * @param {?} operator
	     * @return {?}
	     */
	    _ParseAST.prototype.expectOperator = function (operator) {
	        if (this.optionalOperator(operator))
	            return;
	        this.error("Missing expected operator " + operator);
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.expectIdentifierOrKeyword = function () {
	        var /** @type {?} */ n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword()) {
	            this.error("Unexpected token " + n + ", expected identifier or keyword");
	            return '';
	        }
	        this.advance();
	        return n.toString();
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
	        var /** @type {?} */ n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	            this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
	            return '';
	        }
	        this.advance();
	        return n.toString();
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseChain = function () {
	        var /** @type {?} */ exprs = [];
	        var /** @type {?} */ start = this.inputIndex;
	        while (this.index < this.tokens.length) {
	            var /** @type {?} */ expr = this.parsePipe();
	            exprs.push(expr);
	            if (this.optionalCharacter($SEMICOLON)) {
	                if (!this.parseAction) {
	                    this.error('Binding expression cannot contain chained expression');
	                }
	                while (this.optionalCharacter($SEMICOLON)) {
	                } // read all semicolons
	            }
	            else if (this.index < this.tokens.length) {
	                this.error("Unexpected token '" + this.next + "'");
	            }
	        }
	        if (exprs.length == 0)
	            return new EmptyExpr(this.span(start));
	        if (exprs.length == 1)
	            return exprs[0];
	        return new Chain(this.span(start), exprs);
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parsePipe = function () {
	        var /** @type {?} */ result = this.parseExpression();
	        if (this.optionalOperator('|')) {
	            if (this.parseAction) {
	                this.error('Cannot have a pipe in an action expression');
	            }
	            do {
	                var /** @type {?} */ name = this.expectIdentifierOrKeyword();
	                var /** @type {?} */ args = [];
	                while (this.optionalCharacter($COLON)) {
	                    args.push(this.parseExpression());
	                }
	                result = new BindingPipe(this.span(result.span.start), result, name, args);
	            } while (this.optionalOperator('|'));
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseExpression = function () { return this.parseConditional(); };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseConditional = function () {
	        var /** @type {?} */ start = this.inputIndex;
	        var /** @type {?} */ result = this.parseLogicalOr();
	        if (this.optionalOperator('?')) {
	            var /** @type {?} */ yes = this.parsePipe();
	            var /** @type {?} */ no = void 0;
	            if (!this.optionalCharacter($COLON)) {
	                var /** @type {?} */ end = this.inputIndex;
	                var /** @type {?} */ expression = this.input.substring(start, end);
	                this.error("Conditional expression " + expression + " requires all 3 expressions");
	                no = new EmptyExpr(this.span(start));
	            }
	            else {
	                no = this.parsePipe();
	            }
	            return new Conditional(this.span(start), result, yes, no);
	        }
	        else {
	            return result;
	        }
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseLogicalOr = function () {
	        // '||'
	        var /** @type {?} */ result = this.parseLogicalAnd();
	        while (this.optionalOperator('||')) {
	            var /** @type {?} */ right = this.parseLogicalAnd();
	            result = new Binary(this.span(result.span.start), '||', result, right);
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseLogicalAnd = function () {
	        // '&&'
	        var /** @type {?} */ result = this.parseEquality();
	        while (this.optionalOperator('&&')) {
	            var /** @type {?} */ right = this.parseEquality();
	            result = new Binary(this.span(result.span.start), '&&', result, right);
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseEquality = function () {
	        // '==','!=','===','!=='
	        var /** @type {?} */ result = this.parseRelational();
	        while (this.next.type == TokenType.Operator) {
	            var /** @type {?} */ operator = this.next.strValue;
	            switch (operator) {
	                case '==':
	                case '===':
	                case '!=':
	                case '!==':
	                    this.advance();
	                    var /** @type {?} */ right = this.parseRelational();
	                    result = new Binary(this.span(result.span.start), operator, result, right);
	                    continue;
	            }
	            break;
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseRelational = function () {
	        // '<', '>', '<=', '>='
	        var /** @type {?} */ result = this.parseAdditive();
	        while (this.next.type == TokenType.Operator) {
	            var /** @type {?} */ operator = this.next.strValue;
	            switch (operator) {
	                case '<':
	                case '>':
	                case '<=':
	                case '>=':
	                    this.advance();
	                    var /** @type {?} */ right = this.parseAdditive();
	                    result = new Binary(this.span(result.span.start), operator, result, right);
	                    continue;
	            }
	            break;
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseAdditive = function () {
	        // '+', '-'
	        var /** @type {?} */ result = this.parseMultiplicative();
	        while (this.next.type == TokenType.Operator) {
	            var /** @type {?} */ operator = this.next.strValue;
	            switch (operator) {
	                case '+':
	                case '-':
	                    this.advance();
	                    var /** @type {?} */ right = this.parseMultiplicative();
	                    result = new Binary(this.span(result.span.start), operator, result, right);
	                    continue;
	            }
	            break;
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseMultiplicative = function () {
	        // '*', '%', '/'
	        var /** @type {?} */ result = this.parsePrefix();
	        while (this.next.type == TokenType.Operator) {
	            var /** @type {?} */ operator = this.next.strValue;
	            switch (operator) {
	                case '*':
	                case '%':
	                case '/':
	                    this.advance();
	                    var /** @type {?} */ right = this.parsePrefix();
	                    result = new Binary(this.span(result.span.start), operator, result, right);
	                    continue;
	            }
	            break;
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parsePrefix = function () {
	        if (this.next.type == TokenType.Operator) {
	            var /** @type {?} */ start = this.inputIndex;
	            var /** @type {?} */ operator = this.next.strValue;
	            var /** @type {?} */ result = void 0;
	            switch (operator) {
	                case '+':
	                    this.advance();
	                    return this.parsePrefix();
	                case '-':
	                    this.advance();
	                    result = this.parsePrefix();
	                    return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
	                case '!':
	                    this.advance();
	                    result = this.parsePrefix();
	                    return new PrefixNot(this.span(start), result);
	            }
	        }
	        return this.parseCallChain();
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseCallChain = function () {
	        var /** @type {?} */ result = this.parsePrimary();
	        while (true) {
	            if (this.optionalCharacter($PERIOD)) {
	                result = this.parseAccessMemberOrMethodCall(result, false);
	            }
	            else if (this.optionalOperator('?.')) {
	                result = this.parseAccessMemberOrMethodCall(result, true);
	            }
	            else if (this.optionalCharacter($LBRACKET)) {
	                this.rbracketsExpected++;
	                var /** @type {?} */ key = this.parsePipe();
	                this.rbracketsExpected--;
	                this.expectCharacter($RBRACKET);
	                if (this.optionalOperator('=')) {
	                    var /** @type {?} */ value = this.parseConditional();
	                    result = new KeyedWrite(this.span(result.span.start), result, key, value);
	                }
	                else {
	                    result = new KeyedRead(this.span(result.span.start), result, key);
	                }
	            }
	            else if (this.optionalCharacter($LPAREN)) {
	                this.rparensExpected++;
	                var /** @type {?} */ args = this.parseCallArguments();
	                this.rparensExpected--;
	                this.expectCharacter($RPAREN);
	                result = new FunctionCall(this.span(result.span.start), result, args);
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parsePrimary = function () {
	        var /** @type {?} */ start = this.inputIndex;
	        if (this.optionalCharacter($LPAREN)) {
	            this.rparensExpected++;
	            var /** @type {?} */ result = this.parsePipe();
	            this.rparensExpected--;
	            this.expectCharacter($RPAREN);
	            return result;
	        }
	        else if (this.next.isKeywordNull()) {
	            this.advance();
	            return new LiteralPrimitive(this.span(start), null);
	        }
	        else if (this.next.isKeywordUndefined()) {
	            this.advance();
	            return new LiteralPrimitive(this.span(start), void 0);
	        }
	        else if (this.next.isKeywordTrue()) {
	            this.advance();
	            return new LiteralPrimitive(this.span(start), true);
	        }
	        else if (this.next.isKeywordFalse()) {
	            this.advance();
	            return new LiteralPrimitive(this.span(start), false);
	        }
	        else if (this.next.isKeywordThis()) {
	            this.advance();
	            return new ImplicitReceiver(this.span(start));
	        }
	        else if (this.optionalCharacter($LBRACKET)) {
	            this.rbracketsExpected++;
	            var /** @type {?} */ elements = this.parseExpressionList($RBRACKET);
	            this.rbracketsExpected--;
	            this.expectCharacter($RBRACKET);
	            return new LiteralArray(this.span(start), elements);
	        }
	        else if (this.next.isCharacter($LBRACE)) {
	            return this.parseLiteralMap();
	        }
	        else if (this.next.isIdentifier()) {
	            return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
	        }
	        else if (this.next.isNumber()) {
	            var /** @type {?} */ value = this.next.toNumber();
	            this.advance();
	            return new LiteralPrimitive(this.span(start), value);
	        }
	        else if (this.next.isString()) {
	            var /** @type {?} */ literalValue = this.next.toString();
	            this.advance();
	            return new LiteralPrimitive(this.span(start), literalValue);
	        }
	        else if (this.index >= this.tokens.length) {
	            this.error("Unexpected end of expression: " + this.input);
	            return new EmptyExpr(this.span(start));
	        }
	        else {
	            this.error("Unexpected token " + this.next);
	            return new EmptyExpr(this.span(start));
	        }
	    };
	    /**
	     * @param {?} terminator
	     * @return {?}
	     */
	    _ParseAST.prototype.parseExpressionList = function (terminator) {
	        var /** @type {?} */ result = [];
	        if (!this.next.isCharacter(terminator)) {
	            do {
	                result.push(this.parsePipe());
	            } while (this.optionalCharacter($COMMA));
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseLiteralMap = function () {
	        var /** @type {?} */ keys = [];
	        var /** @type {?} */ values = [];
	        var /** @type {?} */ start = this.inputIndex;
	        this.expectCharacter($LBRACE);
	        if (!this.optionalCharacter($RBRACE)) {
	            this.rbracesExpected++;
	            do {
	                var /** @type {?} */ key = this.expectIdentifierOrKeywordOrString();
	                keys.push(key);
	                this.expectCharacter($COLON);
	                values.push(this.parsePipe());
	            } while (this.optionalCharacter($COMMA));
	            this.rbracesExpected--;
	            this.expectCharacter($RBRACE);
	        }
	        return new LiteralMap(this.span(start), keys, values);
	    };
	    /**
	     * @param {?} receiver
	     * @param {?=} isSafe
	     * @return {?}
	     */
	    _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
	        if (isSafe === void 0) { isSafe = false; }
	        var /** @type {?} */ start = receiver.span.start;
	        var /** @type {?} */ id = this.expectIdentifierOrKeyword();
	        if (this.optionalCharacter($LPAREN)) {
	            this.rparensExpected++;
	            var /** @type {?} */ args = this.parseCallArguments();
	            this.expectCharacter($RPAREN);
	            this.rparensExpected--;
	            var /** @type {?} */ span = this.span(start);
	            return isSafe ? new SafeMethodCall(span, receiver, id, args) :
	                new MethodCall(span, receiver, id, args);
	        }
	        else {
	            if (isSafe) {
	                if (this.optionalOperator('=')) {
	                    this.error('The \'?.\' operator cannot be used in the assignment');
	                    return new EmptyExpr(this.span(start));
	                }
	                else {
	                    return new SafePropertyRead(this.span(start), receiver, id);
	                }
	            }
	            else {
	                if (this.optionalOperator('=')) {
	                    if (!this.parseAction) {
	                        this.error('Bindings cannot contain assignments');
	                        return new EmptyExpr(this.span(start));
	                    }
	                    var /** @type {?} */ value = this.parseConditional();
	                    return new PropertyWrite(this.span(start), receiver, id, value);
	                }
	                else {
	                    return new PropertyRead(this.span(start), receiver, id);
	                }
	            }
	        }
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseCallArguments = function () {
	        if (this.next.isCharacter($RPAREN))
	            return [];
	        var /** @type {?} */ positionals = [];
	        do {
	            positionals.push(this.parsePipe());
	        } while (this.optionalCharacter($COMMA));
	        return (positionals);
	    };
	    /**
	     * An identifier, a keyword, a string with an optional `-` inbetween.
	     * @return {?}
	     */
	    _ParseAST.prototype.expectTemplateBindingKey = function () {
	        var /** @type {?} */ result = '';
	        var /** @type {?} */ operatorFound = false;
	        do {
	            result += this.expectIdentifierOrKeywordOrString();
	            operatorFound = this.optionalOperator('-');
	            if (operatorFound) {
	                result += '-';
	            }
	        } while (operatorFound);
	        return result.toString();
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseTemplateBindings = function () {
	        var /** @type {?} */ bindings = [];
	        var /** @type {?} */ prefix = null;
	        var /** @type {?} */ warnings = [];
	        while (this.index < this.tokens.length) {
	            var /** @type {?} */ start = this.inputIndex;
	            var /** @type {?} */ keyIsVar = this.peekKeywordLet();
	            if (keyIsVar) {
	                this.advance();
	            }
	            var /** @type {?} */ rawKey = this.expectTemplateBindingKey();
	            var /** @type {?} */ key = rawKey;
	            if (!keyIsVar) {
	                if (prefix == null) {
	                    prefix = key;
	                }
	                else {
	                    key = prefix + key[0].toUpperCase() + key.substring(1);
	                }
	            }
	            this.optionalCharacter($COLON);
	            var /** @type {?} */ name = null;
	            var /** @type {?} */ expression = null;
	            if (keyIsVar) {
	                if (this.optionalOperator('=')) {
	                    name = this.expectTemplateBindingKey();
	                }
	                else {
	                    name = '\$implicit';
	                }
	            }
	            else if (this.peekKeywordAs()) {
	                var /** @type {?} */ letStart = this.inputIndex;
	                this.advance(); // consume `as`
	                name = rawKey;
	                key = this.expectTemplateBindingKey(); // read local var name
	                keyIsVar = true;
	            }
	            else if (this.next !== EOF && !this.peekKeywordLet()) {
	                var /** @type {?} */ start_2 = this.inputIndex;
	                var /** @type {?} */ ast = this.parsePipe();
	                var /** @type {?} */ source = this.input.substring(start_2 - this.offset, this.inputIndex - this.offset);
	                expression = new ASTWithSource(ast, source, this.location, this.errors);
	            }
	            bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name, expression));
	            if (this.peekKeywordAs() && !keyIsVar) {
	                var /** @type {?} */ letStart = this.inputIndex;
	                this.advance(); // consume `as`
	                var /** @type {?} */ letName = this.expectTemplateBindingKey(); // read local var name
	                bindings.push(new TemplateBinding(this.span(letStart), letName, true, key, null));
	            }
	            if (!this.optionalCharacter($SEMICOLON)) {
	                this.optionalCharacter($COMMA);
	            }
	        }
	        return new TemplateBindingParseResult(bindings, warnings, this.errors);
	    };
	    /**
	     * @param {?} message
	     * @param {?=} index
	     * @return {?}
	     */
	    _ParseAST.prototype.error = function (message, index) {
	        if (index === void 0) { index = null; }
	        this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
	        this.skip();
	    };
	    /**
	     * @param {?=} index
	     * @return {?}
	     */
	    _ParseAST.prototype.locationText = function (index) {
	        if (index === void 0) { index = null; }
	        if (index == null)
	            index = this.index;
	        return (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
	            "at the end of the expression";
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.skip = function () {
	        var /** @type {?} */ n = this.next;
	        while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) &&
	            (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&
	            (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&
	            (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
	            if (this.next.isError()) {
	                this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
	            }
	            this.advance();
	            n = this.next;
	        }
	    };
	    return _ParseAST;
	}());
	var SimpleExpressionChecker = (function () {
	    function SimpleExpressionChecker() {
	        this.errors = [];
	    }
	    /**
	     * @param {?} ast
	     * @return {?}
	     */
	    SimpleExpressionChecker.check = function (ast) {
	        var /** @type {?} */ s = new SimpleExpressionChecker();
	        ast.visit(s);
	        return s.errors;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) { this.visitAll(ast.expressions); };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) { this.visitAll(ast.values); };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitBinary = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitConditional = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitPipe = function (ast, context) { this.errors.push('pipes'); };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) { };
	    /**
	     * @param {?} asts
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitAll = function (asts) {
	        var _this = this;
	        return asts.map(function (node) { return node.visit(_this); });
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitChain = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitQuote = function (ast, context) { };
	    return SimpleExpressionChecker;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ParseLocation = (function () {
	    /**
	     * @param {?} file
	     * @param {?} offset
	     * @param {?} line
	     * @param {?} col
	     */
	    function ParseLocation(file, offset, line, col) {
	        this.file = file;
	        this.offset = offset;
	        this.line = line;
	        this.col = col;
	    }
	    /**
	     * @return {?}
	     */
	    ParseLocation.prototype.toString = function () {
	        return this.offset != null ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
	    };
	    /**
	     * @param {?} delta
	     * @return {?}
	     */
	    ParseLocation.prototype.moveBy = function (delta) {
	        var /** @type {?} */ source = this.file.content;
	        var /** @type {?} */ len = source.length;
	        var /** @type {?} */ offset = this.offset;
	        var /** @type {?} */ line = this.line;
	        var /** @type {?} */ col = this.col;
	        while (offset > 0 && delta < 0) {
	            offset--;
	            delta++;
	            var /** @type {?} */ ch = source.charCodeAt(offset);
	            if (ch == $LF) {
	                line--;
	                var /** @type {?} */ priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));
	                col = priorLine > 0 ? offset - priorLine : offset;
	            }
	            else {
	                col--;
	            }
	        }
	        while (offset < len && delta > 0) {
	            var /** @type {?} */ ch = source.charCodeAt(offset);
	            offset++;
	            delta--;
	            if (ch == $LF) {
	                line++;
	                col = 0;
	            }
	            else {
	                col++;
	            }
	        }
	        return new ParseLocation(this.file, offset, line, col);
	    };
	    /**
	     * @param {?} maxChars
	     * @param {?} maxLines
	     * @return {?}
	     */
	    ParseLocation.prototype.getContext = function (maxChars, maxLines) {
	        var /** @type {?} */ content = this.file.content;
	        var /** @type {?} */ startOffset = this.offset;
	        if (startOffset != null) {
	            if (startOffset > content.length - 1) {
	                startOffset = content.length - 1;
	            }
	            var /** @type {?} */ endOffset = startOffset;
	            var /** @type {?} */ ctxChars = 0;
	            var /** @type {?} */ ctxLines = 0;
	            while (ctxChars < maxChars && startOffset > 0) {
	                startOffset--;
	                ctxChars++;
	                if (content[startOffset] == '\n') {
	                    if (++ctxLines == maxLines) {
	                        break;
	                    }
	                }
	            }
	            ctxChars = 0;
	            ctxLines = 0;
	            while (ctxChars < maxChars && endOffset < content.length - 1) {
	                endOffset++;
	                ctxChars++;
	                if (content[endOffset] == '\n') {
	                    if (++ctxLines == maxLines) {
	                        break;
	                    }
	                }
	            }
	            return {
	                before: content.substring(startOffset, this.offset),
	                after: content.substring(this.offset, endOffset + 1),
	            };
	        }
	        return null;
	    };
	    return ParseLocation;
	}());
	var ParseSourceFile = (function () {
	    /**
	     * @param {?} content
	     * @param {?} url
	     */
	    function ParseSourceFile(content, url) {
	        this.content = content;
	        this.url = url;
	    }
	    return ParseSourceFile;
	}());
	var ParseSourceSpan = (function () {
	    /**
	     * @param {?} start
	     * @param {?} end
	     * @param {?=} details
	     */
	    function ParseSourceSpan(start, end, details) {
	        if (details === void 0) { details = null; }
	        this.start = start;
	        this.end = end;
	        this.details = details;
	    }
	    /**
	     * @return {?}
	     */
	    ParseSourceSpan.prototype.toString = function () {
	        return this.start.file.content.substring(this.start.offset, this.end.offset);
	    };
	    return ParseSourceSpan;
	}());
	var ParseErrorLevel = {};
	ParseErrorLevel.WARNING = 0;
	ParseErrorLevel.ERROR = 1;
	ParseErrorLevel[ParseErrorLevel.WARNING] = "WARNING";
	ParseErrorLevel[ParseErrorLevel.ERROR] = "ERROR";
	var ParseError = (function () {
	    /**
	     * @param {?} span
	     * @param {?} msg
	     * @param {?=} level
	     */
	    function ParseError(span, msg, level) {
	        if (level === void 0) { level = ParseErrorLevel.ERROR; }
	        this.span = span;
	        this.msg = msg;
	        this.level = level;
	    }
	    /**
	     * @return {?}
	     */
	    ParseError.prototype.toString = function () {
	        var /** @type {?} */ ctx = this.span.start.getContext(100, 3);
	        var /** @type {?} */ contextStr = ctx ? " (\"" + ctx.before + "[" + ParseErrorLevel[this.level] + " ->]" + ctx.after + "\")" : '';
	        var /** @type {?} */ details = this.span.details ? ", " + this.span.details : '';
	        return "" + this.msg + contextStr + ": " + this.span.start + details;
	    };
	    return ParseError;
	}());
	/**
	 * @param {?} kind
	 * @param {?} type
	 * @return {?}
	 */
	function typeSourceSpan(kind, type) {
	    var /** @type {?} */ moduleUrl = identifierModuleUrl(type);
	    var /** @type {?} */ sourceFileName = moduleUrl != null ? "in " + kind + " " + identifierName(type) + " in " + moduleUrl :
	        "in " + kind + " " + identifierName(type);
	    var /** @type {?} */ sourceFile = new ParseSourceFile('', sourceFileName);
	    return new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Text = (function () {
	    /**
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function Text(value, sourceSpan) {
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	    return Text;
	}());
	var Expansion = (function () {
	    /**
	     * @param {?} switchValue
	     * @param {?} type
	     * @param {?} cases
	     * @param {?} sourceSpan
	     * @param {?} switchValueSourceSpan
	     */
	    function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
	        this.switchValue = switchValue;
	        this.type = type;
	        this.cases = cases;
	        this.sourceSpan = sourceSpan;
	        this.switchValueSourceSpan = switchValueSourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Expansion.prototype.visit = function (visitor, context) { return visitor.visitExpansion(this, context); };
	    return Expansion;
	}());
	var ExpansionCase = (function () {
	    /**
	     * @param {?} value
	     * @param {?} expression
	     * @param {?} sourceSpan
	     * @param {?} valueSourceSpan
	     * @param {?} expSourceSpan
	     */
	    function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
	        this.value = value;
	        this.expression = expression;
	        this.sourceSpan = sourceSpan;
	        this.valueSourceSpan = valueSourceSpan;
	        this.expSourceSpan = expSourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ExpansionCase.prototype.visit = function (visitor, context) { return visitor.visitExpansionCase(this, context); };
	    return ExpansionCase;
	}());
	var Attribute$1 = (function () {
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @param {?=} valueSpan
	     */
	    function Attribute$1(name, value, sourceSpan, valueSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	        this.valueSpan = valueSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Attribute$1.prototype.visit = function (visitor, context) { return visitor.visitAttribute(this, context); };
	    return Attribute$1;
	}());
	var Element = (function () {
	    /**
	     * @param {?} name
	     * @param {?} attrs
	     * @param {?} children
	     * @param {?} sourceSpan
	     * @param {?} startSourceSpan
	     * @param {?} endSourceSpan
	     */
	    function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
	        this.name = name;
	        this.attrs = attrs;
	        this.children = children;
	        this.sourceSpan = sourceSpan;
	        this.startSourceSpan = startSourceSpan;
	        this.endSourceSpan = endSourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Element.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context); };
	    return Element;
	}());
	var Comment = (function () {
	    /**
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function Comment(value, sourceSpan) {
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Comment.prototype.visit = function (visitor, context) { return visitor.visitComment(this, context); };
	    return Comment;
	}());
	/**
	 * @param {?} visitor
	 * @param {?} nodes
	 * @param {?=} context
	 * @return {?}
	 */
	function visitAll(visitor, nodes, context) {
	    if (context === void 0) { context = null; }
	    var /** @type {?} */ result = [];
	    var /** @type {?} */ visit = visitor.visit ?
	        function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context); } :
	        function (ast) { return ast.visit(visitor, context); };
	    nodes.forEach(function (ast) {
	        var /** @type {?} */ astResult = visit(ast);
	        if (astResult) {
	            result.push(astResult);
	        }
	    });
	    return result;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TokenType$1 = {};
	TokenType$1.TAG_OPEN_START = 0;
	TokenType$1.TAG_OPEN_END = 1;
	TokenType$1.TAG_OPEN_END_VOID = 2;
	TokenType$1.TAG_CLOSE = 3;
	TokenType$1.TEXT = 4;
	TokenType$1.ESCAPABLE_RAW_TEXT = 5;
	TokenType$1.RAW_TEXT = 6;
	TokenType$1.COMMENT_START = 7;
	TokenType$1.COMMENT_END = 8;
	TokenType$1.CDATA_START = 9;
	TokenType$1.CDATA_END = 10;
	TokenType$1.ATTR_NAME = 11;
	TokenType$1.ATTR_VALUE = 12;
	TokenType$1.DOC_TYPE = 13;
	TokenType$1.EXPANSION_FORM_START = 14;
	TokenType$1.EXPANSION_CASE_VALUE = 15;
	TokenType$1.EXPANSION_CASE_EXP_START = 16;
	TokenType$1.EXPANSION_CASE_EXP_END = 17;
	TokenType$1.EXPANSION_FORM_END = 18;
	TokenType$1.EOF = 19;
	TokenType$1[TokenType$1.TAG_OPEN_START] = "TAG_OPEN_START";
	TokenType$1[TokenType$1.TAG_OPEN_END] = "TAG_OPEN_END";
	TokenType$1[TokenType$1.TAG_OPEN_END_VOID] = "TAG_OPEN_END_VOID";
	TokenType$1[TokenType$1.TAG_CLOSE] = "TAG_CLOSE";
	TokenType$1[TokenType$1.TEXT] = "TEXT";
	TokenType$1[TokenType$1.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
	TokenType$1[TokenType$1.RAW_TEXT] = "RAW_TEXT";
	TokenType$1[TokenType$1.COMMENT_START] = "COMMENT_START";
	TokenType$1[TokenType$1.COMMENT_END] = "COMMENT_END";
	TokenType$1[TokenType$1.CDATA_START] = "CDATA_START";
	TokenType$1[TokenType$1.CDATA_END] = "CDATA_END";
	TokenType$1[TokenType$1.ATTR_NAME] = "ATTR_NAME";
	TokenType$1[TokenType$1.ATTR_VALUE] = "ATTR_VALUE";
	TokenType$1[TokenType$1.DOC_TYPE] = "DOC_TYPE";
	TokenType$1[TokenType$1.EXPANSION_FORM_START] = "EXPANSION_FORM_START";
	TokenType$1[TokenType$1.EXPANSION_CASE_VALUE] = "EXPANSION_CASE_VALUE";
	TokenType$1[TokenType$1.EXPANSION_CASE_EXP_START] = "EXPANSION_CASE_EXP_START";
	TokenType$1[TokenType$1.EXPANSION_CASE_EXP_END] = "EXPANSION_CASE_EXP_END";
	TokenType$1[TokenType$1.EXPANSION_FORM_END] = "EXPANSION_FORM_END";
	TokenType$1[TokenType$1.EOF] = "EOF";
	var Token$1 = (function () {
	    /**
	     * @param {?} type
	     * @param {?} parts
	     * @param {?} sourceSpan
	     */
	    function Token$1(type, parts, sourceSpan) {
	        this.type = type;
	        this.parts = parts;
	        this.sourceSpan = sourceSpan;
	    }
	    return Token$1;
	}());
	var TokenError = (function (_super) {
	    __extends(TokenError, _super);
	    /**
	     * @param {?} errorMsg
	     * @param {?} tokenType
	     * @param {?} span
	     */
	    function TokenError(errorMsg, tokenType, span) {
	        var _this = _super.call(this, span, errorMsg) || this;
	        _this.tokenType = tokenType;
	        return _this;
	    }
	    return TokenError;
	}(ParseError));
	var TokenizeResult = (function () {
	    /**
	     * @param {?} tokens
	     * @param {?} errors
	     */
	    function TokenizeResult(tokens, errors) {
	        this.tokens = tokens;
	        this.errors = errors;
	    }
	    return TokenizeResult;
	}());
	/**
	 * @param {?} source
	 * @param {?} url
	 * @param {?} getTagDefinition
	 * @param {?=} tokenizeExpansionForms
	 * @param {?=} interpolationConfig
	 * @return {?}
	 */
	function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
	    if (tokenizeExpansionForms === void 0) { tokenizeExpansionForms = false; }
	    if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	    return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig)
	        .tokenize();
	}
	var _CR_OR_CRLF_REGEXP = /\r\n?/g;
	/**
	 * @param {?} charCode
	 * @return {?}
	 */
	function _unexpectedCharacterErrorMsg(charCode) {
	    var /** @type {?} */ char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);
	    return "Unexpected character \"" + char + "\"";
	}
	/**
	 * @param {?} entitySrc
	 * @return {?}
	 */
	function _unknownEntityErrorMsg(entitySrc) {
	    return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
	}
	var _ControlFlowError = (function () {
	    /**
	     * @param {?} error
	     */
	    function _ControlFlowError(error) {
	        this.error = error;
	    }
	    return _ControlFlowError;
	}());
	var _Tokenizer = (function () {
	    /**
	     * @param {?} _file The html source
	     * @param {?} _getTagDefinition
	     * @param {?} _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)
	     * @param {?=} _interpolationConfig
	     */
	    function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
	        if (_interpolationConfig === void 0) { _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        this._file = _file;
	        this._getTagDefinition = _getTagDefinition;
	        this._tokenizeIcu = _tokenizeIcu;
	        this._interpolationConfig = _interpolationConfig;
	        this._peek = -1;
	        this._nextPeek = -1;
	        this._index = -1;
	        this._line = 0;
	        this._column = -1;
	        this._expansionCaseStack = [];
	        this._inInterpolation = false;
	        this.tokens = [];
	        this.errors = [];
	        this._input = _file.content;
	        this._length = _file.content.length;
	        this._advance();
	    }
	    /**
	     * @param {?} content
	     * @return {?}
	     */
	    _Tokenizer.prototype._processCarriageReturns = function (content) {
	        // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
	        // In order to keep the original position in the source, we can not
	        // pre-process it.
	        // Instead CRs are processed right before instantiating the tokens.
	        return content.replace(_CR_OR_CRLF_REGEXP, '\n');
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype.tokenize = function () {
	        while (this._peek !== $EOF) {
	            var /** @type {?} */ start = this._getLocation();
	            try {
	                if (this._attemptCharCode($LT)) {
	                    if (this._attemptCharCode($BANG)) {
	                        if (this._attemptCharCode($LBRACKET)) {
	                            this._consumeCdata(start);
	                        }
	                        else if (this._attemptCharCode($MINUS)) {
	                            this._consumeComment(start);
	                        }
	                        else {
	                            this._consumeDocType(start);
	                        }
	                    }
	                    else if (this._attemptCharCode($SLASH)) {
	                        this._consumeTagClose(start);
	                    }
	                    else {
	                        this._consumeTagOpen(start);
	                    }
	                }
	                else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {
	                    this._consumeText();
	                }
	            }
	            catch (e) {
	                if (e instanceof _ControlFlowError) {
	                    this.errors.push(e.error);
	                }
	                else {
	                    throw e;
	                }
	            }
	        }
	        this._beginToken(TokenType$1.EOF);
	        this._endToken([]);
	        return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
	    };
	    /**
	     * \@internal
	     * @return {?}
	     */
	    _Tokenizer.prototype._tokenizeExpansionForm = function () {
	        if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
	            this._consumeExpansionFormStart();
	            return true;
	        }
	        if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
	            this._consumeExpansionCaseStart();
	            return true;
	        }
	        if (this._peek === $RBRACE) {
	            if (this._isInExpansionCase()) {
	                this._consumeExpansionCaseEnd();
	                return true;
	            }
	            if (this._isInExpansionForm()) {
	                this._consumeExpansionFormEnd();
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._getLocation = function () {
	        return new ParseLocation(this._file, this._index, this._line, this._column);
	    };
	    /**
	     * @param {?=} start
	     * @param {?=} end
	     * @return {?}
	     */
	    _Tokenizer.prototype._getSpan = function (start, end) {
	        if (start === void 0) { start = this._getLocation(); }
	        if (end === void 0) { end = this._getLocation(); }
	        return new ParseSourceSpan(start, end);
	    };
	    /**
	     * @param {?} type
	     * @param {?=} start
	     * @return {?}
	     */
	    _Tokenizer.prototype._beginToken = function (type, start) {
	        if (start === void 0) { start = this._getLocation(); }
	        this._currentTokenStart = start;
	        this._currentTokenType = type;
	    };
	    /**
	     * @param {?} parts
	     * @param {?=} end
	     * @return {?}
	     */
	    _Tokenizer.prototype._endToken = function (parts, end) {
	        if (end === void 0) { end = this._getLocation(); }
	        var /** @type {?} */ token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
	        this.tokens.push(token);
	        this._currentTokenStart = null;
	        this._currentTokenType = null;
	        return token;
	    };
	    /**
	     * @param {?} msg
	     * @param {?} span
	     * @return {?}
	     */
	    _Tokenizer.prototype._createError = function (msg, span) {
	        if (this._isInExpansionForm()) {
	            msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
	        }
	        var /** @type {?} */ error = new TokenError(msg, this._currentTokenType, span);
	        this._currentTokenStart = null;
	        this._currentTokenType = null;
	        return new _ControlFlowError(error);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._advance = function () {
	        if (this._index >= this._length) {
	            throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
	        }
	        if (this._peek === $LF) {
	            this._line++;
	            this._column = 0;
	        }
	        else if (this._peek !== $LF && this._peek !== $CR) {
	            this._column++;
	        }
	        this._index++;
	        this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
	        this._nextPeek =
	            this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
	    };
	    /**
	     * @param {?} charCode
	     * @return {?}
	     */
	    _Tokenizer.prototype._attemptCharCode = function (charCode) {
	        if (this._peek === charCode) {
	            this._advance();
	            return true;
	        }
	        return false;
	    };
	    /**
	     * @param {?} charCode
	     * @return {?}
	     */
	    _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {
	        if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
	            this._advance();
	            return true;
	        }
	        return false;
	    };
	    /**
	     * @param {?} charCode
	     * @return {?}
	     */
	    _Tokenizer.prototype._requireCharCode = function (charCode) {
	        var /** @type {?} */ location = this._getLocation();
	        if (!this._attemptCharCode(charCode)) {
	            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
	        }
	    };
	    /**
	     * @param {?} chars
	     * @return {?}
	     */
	    _Tokenizer.prototype._attemptStr = function (chars) {
	        var /** @type {?} */ len = chars.length;
	        if (this._index + len > this._length) {
	            return false;
	        }
	        var /** @type {?} */ initialPosition = this._savePosition();
	        for (var /** @type {?} */ i = 0; i < len; i++) {
	            if (!this._attemptCharCode(chars.charCodeAt(i))) {
	                // If attempting to parse the string fails, we want to reset the parser
	                // to where it was before the attempt
	                this._restorePosition(initialPosition);
	                return false;
	            }
	        }
	        return true;
	    };
	    /**
	     * @param {?} chars
	     * @return {?}
	     */
	    _Tokenizer.prototype._attemptStrCaseInsensitive = function (chars) {
	        for (var /** @type {?} */ i = 0; i < chars.length; i++) {
	            if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
	                return false;
	            }
	        }
	        return true;
	    };
	    /**
	     * @param {?} chars
	     * @return {?}
	     */
	    _Tokenizer.prototype._requireStr = function (chars) {
	        var /** @type {?} */ location = this._getLocation();
	        if (!this._attemptStr(chars)) {
	            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
	        }
	    };
	    /**
	     * @param {?} predicate
	     * @return {?}
	     */
	    _Tokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {
	        while (!predicate(this._peek)) {
	            this._advance();
	        }
	    };
	    /**
	     * @param {?} predicate
	     * @param {?} len
	     * @return {?}
	     */
	    _Tokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {
	        var /** @type {?} */ start = this._getLocation();
	        this._attemptCharCodeUntilFn(predicate);
	        if (this._index - start.offset < len) {
	            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
	        }
	    };
	    /**
	     * @param {?} char
	     * @return {?}
	     */
	    _Tokenizer.prototype._attemptUntilChar = function (char) {
	        while (this._peek !== char) {
	            this._advance();
	        }
	    };
	    /**
	     * @param {?} decodeEntities
	     * @return {?}
	     */
	    _Tokenizer.prototype._readChar = function (decodeEntities) {
	        if (decodeEntities && this._peek === $AMPERSAND) {
	            return this._decodeEntity();
	        }
	        else {
	            var /** @type {?} */ index = this._index;
	            this._advance();
	            return this._input[index];
	        }
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._decodeEntity = function () {
	        var /** @type {?} */ start = this._getLocation();
	        this._advance();
	        if (this._attemptCharCode($HASH)) {
	            var /** @type {?} */ isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
	            var /** @type {?} */ numberStart = this._getLocation().offset;
	            this._attemptCharCodeUntilFn(isDigitEntityEnd);
	            if (this._peek != $SEMICOLON) {
	                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	            }
	            this._advance();
	            var /** @type {?} */ strNum = this._input.substring(numberStart, this._index - 1);
	            try {
	                var /** @type {?} */ charCode = parseInt(strNum, isHex ? 16 : 10);
	                return String.fromCharCode(charCode);
	            }
	            catch (e) {
	                var /** @type {?} */ entity = this._input.substring(start.offset + 1, this._index - 1);
	                throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
	            }
	        }
	        else {
	            var /** @type {?} */ startPosition = this._savePosition();
	            this._attemptCharCodeUntilFn(isNamedEntityEnd);
	            if (this._peek != $SEMICOLON) {
	                this._restorePosition(startPosition);
	                return '&';
	            }
	            this._advance();
	            var /** @type {?} */ name = this._input.substring(start.offset + 1, this._index - 1);
	            var /** @type {?} */ char = NAMED_ENTITIES[name];
	            if (!char) {
	                throw this._createError(_unknownEntityErrorMsg(name), this._getSpan(start));
	            }
	            return char;
	        }
	    };
	    /**
	     * @param {?} decodeEntities
	     * @param {?} firstCharOfEnd
	     * @param {?} attemptEndRest
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) {
	        var /** @type {?} */ tagCloseStart;
	        var /** @type {?} */ textStart = this._getLocation();
	        this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
	        var /** @type {?} */ parts = [];
	        while (true) {
	            tagCloseStart = this._getLocation();
	            if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
	                break;
	            }
	            if (this._index > tagCloseStart.offset) {
	                // add the characters consumed by the previous if statement to the output
	                parts.push(this._input.substring(tagCloseStart.offset, this._index));
	            }
	            while (this._peek !== firstCharOfEnd) {
	                parts.push(this._readChar(decodeEntities));
	            }
	        }
	        return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeComment = function (start) {
	        var _this = this;
	        this._beginToken(TokenType$1.COMMENT_START, start);
	        this._requireCharCode($MINUS);
	        this._endToken([]);
	        var /** @type {?} */ textToken = this._consumeRawText(false, $MINUS, function () { return _this._attemptStr('->'); });
	        this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);
	        this._endToken([]);
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeCdata = function (start) {
	        var _this = this;
	        this._beginToken(TokenType$1.CDATA_START, start);
	        this._requireStr('CDATA[');
	        this._endToken([]);
	        var /** @type {?} */ textToken = this._consumeRawText(false, $RBRACKET, function () { return _this._attemptStr(']>'); });
	        this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);
	        this._endToken([]);
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeDocType = function (start) {
	        this._beginToken(TokenType$1.DOC_TYPE, start);
	        this._attemptUntilChar($GT);
	        this._advance();
	        this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumePrefixAndName = function () {
	        var /** @type {?} */ nameOrPrefixStart = this._index;
	        var /** @type {?} */ prefix = null;
	        while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
	            this._advance();
	        }
	        var /** @type {?} */ nameStart;
	        if (this._peek === $COLON) {
	            this._advance();
	            prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
	            nameStart = this._index;
	        }
	        else {
	            nameStart = nameOrPrefixStart;
	        }
	        this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
	        var /** @type {?} */ name = this._input.substring(nameStart, this._index);
	        return [prefix, name];
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeTagOpen = function (start) {
	        var /** @type {?} */ savedPos = this._savePosition();
	        var /** @type {?} */ tagName;
	        var /** @type {?} */ lowercaseTagName;
	        try {
	            if (!isAsciiLetter(this._peek)) {
	                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	            }
	            var /** @type {?} */ nameStart = this._index;
	            this._consumeTagOpenStart(start);
	            tagName = this._input.substring(nameStart, this._index);
	            lowercaseTagName = tagName.toLowerCase();
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            while (this._peek !== $SLASH && this._peek !== $GT) {
	                this._consumeAttributeName();
	                this._attemptCharCodeUntilFn(isNotWhitespace);
	                if (this._attemptCharCode($EQ)) {
	                    this._attemptCharCodeUntilFn(isNotWhitespace);
	                    this._consumeAttributeValue();
	                }
	                this._attemptCharCodeUntilFn(isNotWhitespace);
	            }
	            this._consumeTagOpenEnd();
	        }
	        catch (e) {
	            if (e instanceof _ControlFlowError) {
	                // When the start tag is invalid, assume we want a "<"
	                this._restorePosition(savedPos);
	                // Back to back text tokens are merged at the end
	                this._beginToken(TokenType$1.TEXT, start);
	                this._endToken(['<']);
	                return;
	            }
	            throw e;
	        }
	        var /** @type {?} */ contentTokenType = this._getTagDefinition(tagName).contentType;
	        if (contentTokenType === TagContentType.RAW_TEXT) {
	            this._consumeRawTextWithTagClose(lowercaseTagName, false);
	        }
	        else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
	            this._consumeRawTextWithTagClose(lowercaseTagName, true);
	        }
	    };
	    /**
	     * @param {?} lowercaseTagName
	     * @param {?} decodeEntities
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) {
	        var _this = this;
	        var /** @type {?} */ textToken = this._consumeRawText(decodeEntities, $LT, function () {
	            if (!_this._attemptCharCode($SLASH))
	                return false;
	            _this._attemptCharCodeUntilFn(isNotWhitespace);
	            if (!_this._attemptStrCaseInsensitive(lowercaseTagName))
	                return false;
	            _this._attemptCharCodeUntilFn(isNotWhitespace);
	            return _this._attemptCharCode($GT);
	        });
	        this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);
	        this._endToken([null, lowercaseTagName]);
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeTagOpenStart = function (start) {
	        this._beginToken(TokenType$1.TAG_OPEN_START, start);
	        var /** @type {?} */ parts = this._consumePrefixAndName();
	        this._endToken(parts);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeAttributeName = function () {
	        this._beginToken(TokenType$1.ATTR_NAME);
	        var /** @type {?} */ prefixAndName = this._consumePrefixAndName();
	        this._endToken(prefixAndName);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeAttributeValue = function () {
	        this._beginToken(TokenType$1.ATTR_VALUE);
	        var /** @type {?} */ value;
	        if (this._peek === $SQ || this._peek === $DQ) {
	            var /** @type {?} */ quoteChar = this._peek;
	            this._advance();
	            var /** @type {?} */ parts = [];
	            while (this._peek !== quoteChar) {
	                parts.push(this._readChar(true));
	            }
	            value = parts.join('');
	            this._advance();
	        }
	        else {
	            var /** @type {?} */ valueStart = this._index;
	            this._requireCharCodeUntilFn(isNameEnd, 1);
	            value = this._input.substring(valueStart, this._index);
	        }
	        this._endToken([this._processCarriageReturns(value)]);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeTagOpenEnd = function () {
	        var /** @type {?} */ tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
	        this._beginToken(tokenType);
	        this._requireCharCode($GT);
	        this._endToken([]);
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeTagClose = function (start) {
	        this._beginToken(TokenType$1.TAG_CLOSE, start);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        var /** @type {?} */ prefixAndName = this._consumePrefixAndName();
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._requireCharCode($GT);
	        this._endToken(prefixAndName);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeExpansionFormStart = function () {
	        this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());
	        this._requireCharCode($LBRACE);
	        this._endToken([]);
	        this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);
	        this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
	        var /** @type {?} */ condition = this._readUntil($COMMA);
	        this._endToken([condition], this._getLocation());
	        this._requireCharCode($COMMA);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
	        var /** @type {?} */ type = this._readUntil($COMMA);
	        this._endToken([type], this._getLocation());
	        this._requireCharCode($COMMA);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeExpansionCaseStart = function () {
	        this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
	        var /** @type {?} */ value = this._readUntil($LBRACE).trim();
	        this._endToken([value], this._getLocation());
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());
	        this._requireCharCode($LBRACE);
	        this._endToken([], this._getLocation());
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeExpansionCaseEnd = function () {
	        this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());
	        this._requireCharCode($RBRACE);
	        this._endToken([], this._getLocation());
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._expansionCaseStack.pop();
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeExpansionFormEnd = function () {
	        this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());
	        this._requireCharCode($RBRACE);
	        this._endToken([]);
	        this._expansionCaseStack.pop();
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeText = function () {
	        var /** @type {?} */ start = this._getLocation();
	        this._beginToken(TokenType$1.TEXT, start);
	        var /** @type {?} */ parts = [];
	        do {
	            if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
	                parts.push(this._interpolationConfig.start);
	                this._inInterpolation = true;
	            }
	            else if (this._interpolationConfig && this._inInterpolation &&
	                this._attemptStr(this._interpolationConfig.end)) {
	                parts.push(this._interpolationConfig.end);
	                this._inInterpolation = false;
	            }
	            else {
	                parts.push(this._readChar(true));
	            }
	        } while (!this._isTextEnd());
	        this._endToken([this._processCarriageReturns(parts.join(''))]);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._isTextEnd = function () {
	        if (this._peek === $LT || this._peek === $EOF) {
	            return true;
	        }
	        if (this._tokenizeIcu && !this._inInterpolation) {
	            if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
	                // start of an expansion form
	                return true;
	            }
	            if (this._peek === $RBRACE && this._isInExpansionCase()) {
	                // end of and expansion case
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._savePosition = function () {
	        return [this._peek, this._index, this._column, this._line, this.tokens.length];
	    };
	    /**
	     * @param {?} char
	     * @return {?}
	     */
	    _Tokenizer.prototype._readUntil = function (char) {
	        var /** @type {?} */ start = this._index;
	        this._attemptUntilChar(char);
	        return this._input.substring(start, this._index);
	    };
	    /**
	     * @param {?} position
	     * @return {?}
	     */
	    _Tokenizer.prototype._restorePosition = function (position) {
	        this._peek = position[0];
	        this._index = position[1];
	        this._column = position[2];
	        this._line = position[3];
	        var /** @type {?} */ nbTokens = position[4];
	        if (nbTokens < this.tokens.length) {
	            // remove any extra tokens
	            this.tokens = this.tokens.slice(0, nbTokens);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._isInExpansionCase = function () {
	        return this._expansionCaseStack.length > 0 &&
	            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                TokenType$1.EXPANSION_CASE_EXP_START;
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._isInExpansionForm = function () {
	        return this._expansionCaseStack.length > 0 &&
	            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                TokenType$1.EXPANSION_FORM_START;
	    };
	    return _Tokenizer;
	}());
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isNotWhitespace(code) {
	    return !isWhitespace(code) || code === $EOF;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isNameEnd(code) {
	    return isWhitespace(code) || code === $GT || code === $SLASH ||
	        code === $SQ || code === $DQ || code === $EQ;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isPrefixEnd(code) {
	    return (code < $a || $z < code) && (code < $A || $Z < code) &&
	        (code < $0 || code > $9);
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isDigitEntityEnd(code) {
	    return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isNamedEntityEnd(code) {
	    return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
	}
	/**
	 * @param {?} input
	 * @param {?} offset
	 * @param {?} interpolationConfig
	 * @return {?}
	 */
	function isExpansionFormStart(input, offset, interpolationConfig) {
	    var /** @type {?} */ isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
	    return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
	}
	/**
	 * @param {?} peek
	 * @return {?}
	 */
	function isExpansionCaseStart(peek) {
	    return peek === $EQ || isAsciiLetter(peek);
	}
	/**
	 * @param {?} code1
	 * @param {?} code2
	 * @return {?}
	 */
	function compareCharCodeCaseInsensitive(code1, code2) {
	    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function toUpperCaseCharCode(code) {
	    return code >= $a && code <= $z ? code - $a + $A : code;
	}
	/**
	 * @param {?} srcTokens
	 * @return {?}
	 */
	function mergeTextTokens(srcTokens) {
	    var /** @type {?} */ dstTokens = [];
	    var /** @type {?} */ lastDstToken;
	    for (var /** @type {?} */ i = 0; i < srcTokens.length; i++) {
	        var /** @type {?} */ token = srcTokens[i];
	        if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {
	            lastDstToken.parts[0] += token.parts[0];
	            lastDstToken.sourceSpan.end = token.sourceSpan.end;
	        }
	        else {
	            lastDstToken = token;
	            dstTokens.push(lastDstToken);
	        }
	    }
	    return dstTokens;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TreeError = (function (_super) {
	    __extends(TreeError, _super);
	    /**
	     * @param {?} elementName
	     * @param {?} span
	     * @param {?} msg
	     */
	    function TreeError(elementName, span, msg) {
	        var _this = _super.call(this, span, msg) || this;
	        _this.elementName = elementName;
	        return _this;
	    }
	    /**
	     * @param {?} elementName
	     * @param {?} span
	     * @param {?} msg
	     * @return {?}
	     */
	    TreeError.create = function (elementName, span, msg) {
	        return new TreeError(elementName, span, msg);
	    };
	    return TreeError;
	}(ParseError));
	var ParseTreeResult = (function () {
	    /**
	     * @param {?} rootNodes
	     * @param {?} errors
	     */
	    function ParseTreeResult(rootNodes, errors) {
	        this.rootNodes = rootNodes;
	        this.errors = errors;
	    }
	    return ParseTreeResult;
	}());
	var Parser$1 = (function () {
	    /**
	     * @param {?} getTagDefinition
	     */
	    function Parser$1(getTagDefinition) {
	        this.getTagDefinition = getTagDefinition;
	    }
	    /**
	     * @param {?} source
	     * @param {?} url
	     * @param {?=} parseExpansionForms
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    Parser$1.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	        if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var /** @type {?} */ tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
	        var /** @type {?} */ treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
	        return new ParseTreeResult(treeAndErrors.rootNodes, ((tokensAndErrors.errors)).concat(treeAndErrors.errors));
	    };
	    return Parser$1;
	}());
	var _TreeBuilder = (function () {
	    /**
	     * @param {?} tokens
	     * @param {?} getTagDefinition
	     */
	    function _TreeBuilder(tokens, getTagDefinition) {
	        this.tokens = tokens;
	        this.getTagDefinition = getTagDefinition;
	        this._index = -1;
	        this._rootNodes = [];
	        this._errors = [];
	        this._elementStack = [];
	        this._advance();
	    }
	    /**
	     * @return {?}
	     */
	    _TreeBuilder.prototype.build = function () {
	        while (this._peek.type !== TokenType$1.EOF) {
	            if (this._peek.type === TokenType$1.TAG_OPEN_START) {
	                this._consumeStartTag(this._advance());
	            }
	            else if (this._peek.type === TokenType$1.TAG_CLOSE) {
	                this._consumeEndTag(this._advance());
	            }
	            else if (this._peek.type === TokenType$1.CDATA_START) {
	                this._closeVoidElement();
	                this._consumeCdata(this._advance());
	            }
	            else if (this._peek.type === TokenType$1.COMMENT_START) {
	                this._closeVoidElement();
	                this._consumeComment(this._advance());
	            }
	            else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT ||
	                this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {
	                this._closeVoidElement();
	                this._consumeText(this._advance());
	            }
	            else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {
	                this._consumeExpansion(this._advance());
	            }
	            else {
	                // Skip all other tokens...
	                this._advance();
	            }
	        }
	        return new ParseTreeResult(this._rootNodes, this._errors);
	    };
	    /**
	     * @return {?}
	     */
	    _TreeBuilder.prototype._advance = function () {
	        var /** @type {?} */ prev = this._peek;
	        if (this._index < this.tokens.length - 1) {
	            // Note: there is always an EOF token at the end
	            this._index++;
	        }
	        this._peek = this.tokens[this._index];
	        return prev;
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    _TreeBuilder.prototype._advanceIf = function (type) {
	        if (this._peek.type === type) {
	            return this._advance();
	        }
	        return null;
	    };
	    /**
	     * @param {?} startToken
	     * @return {?}
	     */
	    _TreeBuilder.prototype._consumeCdata = function (startToken) {
	        this._consumeText(this._advance());
	        this._advanceIf(TokenType$1.CDATA_END);
	    };
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    _TreeBuilder.prototype._consumeComment = function (token) {
	        var /** @type {?} */ text = this._advanceIf(TokenType$1.RAW_TEXT);
	        this._advanceIf(TokenType$1.COMMENT_END);
	        var /** @type {?} */ value = text != null ? text.parts[0].trim() : null;
	        this._addToParent(new Comment(value, token.sourceSpan));
	    };
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    _TreeBuilder.prototype._consumeExpansion = function (token) {
	        var /** @type {?} */ switchValue = this._advance();
	        var /** @type {?} */ type = this._advance();
	        var /** @type {?} */ cases = [];
	        // read =
	        while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {
	            var /** @type {?} */ expCase = this._parseExpansionCase();
	            if (!expCase)
	                return; // error
	            cases.push(expCase);
	        }
	        // read the final }
	        if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {
	            this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
	            return;
	        }
	        var /** @type {?} */ sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
	        this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
	        this._advance();
	    };
	    /**
	     * @return {?}
	     */
	    _TreeBuilder.prototype._parseExpansionCase = function () {
	        var /** @type {?} */ value = this._advance();
	        // read {
	        if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {
	            this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
	            return null;
	        }
	        // read until }
	        var /** @type {?} */ start = this._advance();
	        var /** @type {?} */ exp = this._collectExpansionExpTokens(start);
	        if (!exp)
	            return null;
	        var /** @type {?} */ end = this._advance();
	        exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
	        // parse everything in between { and }
	        var /** @type {?} */ parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
	        if (parsedExp.errors.length > 0) {
	            this._errors = this._errors.concat(/** @type {?} */ (parsedExp.errors));
	            return null;
	        }
	        var /** @type {?} */ sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
	        var /** @type {?} */ expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
	        return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _TreeBuilder.prototype._collectExpansionExpTokens = function (start) {
	        var /** @type {?} */ exp = [];
	        var /** @type {?} */ expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];
	        while (true) {
	            if (this._peek.type === TokenType$1.EXPANSION_FORM_START ||
	                this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {
	                expansionFormStack.push(this._peek.type);
	            }
	            if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
	                if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {
	                    expansionFormStack.pop();
	                    if (expansionFormStack.length == 0)
	                        return exp;
	                }
	                else {
	                    this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                    return null;
	                }
	            }
	            if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
	                if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {
	                    expansionFormStack.pop();
	                }
	                else {
	                    this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                    return null;
	                }
	            }
	            if (this._peek.type === TokenType$1.EOF) {
	                this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                return null;
	            }
	            exp.push(this._advance());
	        }
	    };
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    _TreeBuilder.prototype._consumeText = function (token) {
	        var /** @type {?} */ text = token.parts[0];
	        if (text.length > 0 && text[0] == '\n') {
	            var /** @type {?} */ parent = this._getParentElement();
	            if (parent != null && parent.children.length == 0 &&
	                this.getTagDefinition(parent.name).ignoreFirstLf) {
	                text = text.substring(1);
	            }
	        }
	        if (text.length > 0) {
	            this._addToParent(new Text(text, token.sourceSpan));
	        }
	    };
	    /**
	     * @return {?}
	     */
	    _TreeBuilder.prototype._closeVoidElement = function () {
	        if (this._elementStack.length > 0) {
	            var /** @type {?} */ el = this._elementStack[this._elementStack.length - 1];
	            if (this.getTagDefinition(el.name).isVoid) {
	                this._elementStack.pop();
	            }
	        }
	    };
	    /**
	     * @param {?} startTagToken
	     * @return {?}
	     */
	    _TreeBuilder.prototype._consumeStartTag = function (startTagToken) {
	        var /** @type {?} */ prefix = startTagToken.parts[0];
	        var /** @type {?} */ name = startTagToken.parts[1];
	        var /** @type {?} */ attrs = [];
	        while (this._peek.type === TokenType$1.ATTR_NAME) {
	            attrs.push(this._consumeAttr(this._advance()));
	        }
	        var /** @type {?} */ fullName = this._getElementFullName(prefix, name, this._getParentElement());
	        var /** @type {?} */ selfClosing = false;
	        // Note: There could have been a tokenizer error
	        // so that we don't get a token for the end tag...
	        if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
	            this._advance();
	            selfClosing = true;
	            var /** @type {?} */ tagDef = this.getTagDefinition(fullName);
	            if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
	                this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
	            }
	        }
	        else if (this._peek.type === TokenType$1.TAG_OPEN_END) {
	            this._advance();
	            selfClosing = false;
	        }
	        var /** @type {?} */ end = this._peek.sourceSpan.start;
	        var /** @type {?} */ span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
	        var /** @type {?} */ el = new Element(fullName, attrs, [], span, span, null);
	        this._pushElement(el);
	        if (selfClosing) {
	            this._popElement(fullName);
	            el.endSourceSpan = span;
	        }
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    _TreeBuilder.prototype._pushElement = function (el) {
	        if (this._elementStack.length > 0) {
	            var /** @type {?} */ parentEl = this._elementStack[this._elementStack.length - 1];
	            if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
	                this._elementStack.pop();
	            }
	        }
	        var /** @type {?} */ tagDef = this.getTagDefinition(el.name);
	        var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;
	        if (parent && tagDef.requireExtraParent(parent.name)) {
	            var /** @type {?} */ newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	            this._insertBeforeContainer(parent, container, newParent);
	        }
	        this._addToParent(el);
	        this._elementStack.push(el);
	    };
	    /**
	     * @param {?} endTagToken
	     * @return {?}
	     */
	    _TreeBuilder.prototype._consumeEndTag = function (endTagToken) {
	        var /** @type {?} */ fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
	        if (this._getParentElement()) {
	            this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
	        }
	        if (this.getTagDefinition(fullName).isVoid) {
	            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
	        }
	        else if (!this._popElement(fullName)) {
	            var /** @type {?} */ errMsg = "Unexpected closing tag \"" + fullName + "\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags";
	            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));
	        }
	    };
	    /**
	     * @param {?} fullName
	     * @return {?}
	     */
	    _TreeBuilder.prototype._popElement = function (fullName) {
	        for (var /** @type {?} */ stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
	            var /** @type {?} */ el = this._elementStack[stackIndex];
	            if (el.name == fullName) {
	                this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
	                return true;
	            }
	            if (!this.getTagDefinition(el.name).closedByParent) {
	                return false;
	            }
	        }
	        return false;
	    };
	    /**
	     * @param {?} attrName
	     * @return {?}
	     */
	    _TreeBuilder.prototype._consumeAttr = function (attrName) {
	        var /** @type {?} */ fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
	        var /** @type {?} */ end = attrName.sourceSpan.end;
	        var /** @type {?} */ value = '';
	        var /** @type {?} */ valueSpan;
	        if (this._peek.type === TokenType$1.ATTR_VALUE) {
	            var /** @type {?} */ valueToken = this._advance();
	            value = valueToken.parts[0];
	            end = valueToken.sourceSpan.end;
	            valueSpan = valueToken.sourceSpan;
	        }
	        return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
	    };
	    /**
	     * @return {?}
	     */
	    _TreeBuilder.prototype._getParentElement = function () {
	        return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
	    };
	    /**
	     * Returns the parent in the DOM and the container.
	     *
	     * `<ng-container>` elements are skipped as they are not rendered as DOM element.
	     * @return {?}
	     */
	    _TreeBuilder.prototype._getParentElementSkippingContainers = function () {
	        var /** @type {?} */ container = null;
	        for (var /** @type {?} */ i = this._elementStack.length - 1; i >= 0; i--) {
	            if (this._elementStack[i].name !== 'ng-container') {
	                return { parent: this._elementStack[i], container: container };
	            }
	            container = this._elementStack[i];
	        }
	        return { parent: this._elementStack[this._elementStack.length - 1], container: container };
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    _TreeBuilder.prototype._addToParent = function (node) {
	        var /** @type {?} */ parent = this._getParentElement();
	        if (parent != null) {
	            parent.children.push(node);
	        }
	        else {
	            this._rootNodes.push(node);
	        }
	    };
	    /**
	     * Insert a node between the parent and the container.
	     * When no container is given, the node is appended as a child of the parent.
	     * Also updates the element stack accordingly.
	     *
	     * \@internal
	     * @param {?} parent
	     * @param {?} container
	     * @param {?} node
	     * @return {?}
	     */
	    _TreeBuilder.prototype._insertBeforeContainer = function (parent, container, node) {
	        if (!container) {
	            this._addToParent(node);
	            this._elementStack.push(node);
	        }
	        else {
	            if (parent) {
	                // replace the container with the new node in the children
	                var /** @type {?} */ index = parent.children.indexOf(container);
	                parent.children[index] = node;
	            }
	            else {
	                this._rootNodes.push(node);
	            }
	            node.children.push(container);
	            this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
	        }
	    };
	    /**
	     * @param {?} prefix
	     * @param {?} localName
	     * @param {?} parentElement
	     * @return {?}
	     */
	    _TreeBuilder.prototype._getElementFullName = function (prefix, localName, parentElement) {
	        if (prefix == null) {
	            prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
	            if (prefix == null && parentElement != null) {
	                prefix = getNsPrefix(parentElement.name);
	            }
	        }
	        return mergeNsAndName(prefix, localName);
	    };
	    return _TreeBuilder;
	}());
	/**
	 * @param {?} stack
	 * @param {?} element
	 * @return {?}
	 */
	function lastOnStack(stack, element) {
	    return stack.length > 0 && stack[stack.length - 1] === element;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Message = (function () {
	    /**
	     * @param {?} nodes message AST
	     * @param {?} placeholders maps placeholder names to static content
	     * @param {?} placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
	     * @param {?} meaning
	     * @param {?} description
	     * @param {?} id
	     */
	    function Message(nodes, placeholders, placeholderToMessage, meaning, description, id) {
	        this.nodes = nodes;
	        this.placeholders = placeholders;
	        this.placeholderToMessage = placeholderToMessage;
	        this.meaning = meaning;
	        this.description = description;
	        this.id = id;
	    }
	    return Message;
	}());
	var Text$1 = (function () {
	    /**
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function Text$1(value, sourceSpan) {
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Text$1.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	    return Text$1;
	}());
	var Container = (function () {
	    /**
	     * @param {?} children
	     * @param {?} sourceSpan
	     */
	    function Container(children, sourceSpan) {
	        this.children = children;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Container.prototype.visit = function (visitor, context) { return visitor.visitContainer(this, context); };
	    return Container;
	}());
	var Icu = (function () {
	    /**
	     * @param {?} expression
	     * @param {?} type
	     * @param {?} cases
	     * @param {?} sourceSpan
	     */
	    function Icu(expression, type, cases, sourceSpan) {
	        this.expression = expression;
	        this.type = type;
	        this.cases = cases;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Icu.prototype.visit = function (visitor, context) { return visitor.visitIcu(this, context); };
	    return Icu;
	}());
	var TagPlaceholder = (function () {
	    /**
	     * @param {?} tag
	     * @param {?} attrs
	     * @param {?} startName
	     * @param {?} closeName
	     * @param {?} children
	     * @param {?} isVoid
	     * @param {?} sourceSpan
	     */
	    function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
	        this.tag = tag;
	        this.attrs = attrs;
	        this.startName = startName;
	        this.closeName = closeName;
	        this.children = children;
	        this.isVoid = isVoid;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    TagPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitTagPlaceholder(this, context); };
	    return TagPlaceholder;
	}());
	var Placeholder = (function () {
	    /**
	     * @param {?} value
	     * @param {?} name
	     * @param {?} sourceSpan
	     */
	    function Placeholder(value, name, sourceSpan) {
	        this.value = value;
	        this.name = name;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Placeholder.prototype.visit = function (visitor, context) { return visitor.visitPlaceholder(this, context); };
	    return Placeholder;
	}());
	var IcuPlaceholder = (function () {
	    /**
	     * @param {?} value
	     * @param {?} name
	     * @param {?} sourceSpan
	     */
	    function IcuPlaceholder(value, name, sourceSpan) {
	        this.value = value;
	        this.name = name;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    IcuPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitIcuPlaceholder(this, context); };
	    return IcuPlaceholder;
	}());
	var CloneVisitor = (function () {
	    function CloneVisitor() {
	    }
	    /**
	     * @param {?} text
	     * @param {?=} context
	     * @return {?}
	     */
	    CloneVisitor.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan); };
	    /**
	     * @param {?} container
	     * @param {?=} context
	     * @return {?}
	     */
	    CloneVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        var /** @type {?} */ children = container.children.map(function (n) { return n.visit(_this, context); });
	        return new Container(children, container.sourceSpan);
	    };
	    /**
	     * @param {?} icu
	     * @param {?=} context
	     * @return {?}
	     */
	    CloneVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var /** @type {?} */ cases = {};
	        Object.keys(icu.cases).forEach(function (key) { return cases[key] = icu.cases[key].visit(_this, context); });
	        var /** @type {?} */ msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan);
	        msg.expressionPlaceholder = icu.expressionPlaceholder;
	        return msg;
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    CloneVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var _this = this;
	        var /** @type {?} */ children = ph.children.map(function (n) { return n.visit(_this, context); });
	        return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan);
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    CloneVisitor.prototype.visitPlaceholder = function (ph, context) {
	        return new Placeholder(ph.value, ph.name, ph.sourceSpan);
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    CloneVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);
	    };
	    return CloneVisitor;
	}());
	var RecurseVisitor = (function () {
	    function RecurseVisitor() {
	    }
	    /**
	     * @param {?} text
	     * @param {?=} context
	     * @return {?}
	     */
	    RecurseVisitor.prototype.visitText = function (text, context) { };
	    
	    /**
	     * @param {?} container
	     * @param {?=} context
	     * @return {?}
	     */
	    RecurseVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        container.children.forEach(function (child) { return child.visit(_this); });
	    };
	    /**
	     * @param {?} icu
	     * @param {?=} context
	     * @return {?}
	     */
	    RecurseVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        Object.keys(icu.cases).forEach(function (k) { icu.cases[k].visit(_this); });
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    RecurseVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var _this = this;
	        ph.children.forEach(function (child) { return child.visit(_this); });
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    RecurseVisitor.prototype.visitPlaceholder = function (ph, context) { };
	    
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    RecurseVisitor.prototype.visitIcuPlaceholder = function (ph, context) { };
	    
	    return RecurseVisitor;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TAG_TO_PLACEHOLDER_NAMES = {
	    'A': 'LINK',
	    'B': 'BOLD_TEXT',
	    'BR': 'LINE_BREAK',
	    'EM': 'EMPHASISED_TEXT',
	    'H1': 'HEADING_LEVEL1',
	    'H2': 'HEADING_LEVEL2',
	    'H3': 'HEADING_LEVEL3',
	    'H4': 'HEADING_LEVEL4',
	    'H5': 'HEADING_LEVEL5',
	    'H6': 'HEADING_LEVEL6',
	    'HR': 'HORIZONTAL_RULE',
	    'I': 'ITALIC_TEXT',
	    'LI': 'LIST_ITEM',
	    'LINK': 'MEDIA_LINK',
	    'OL': 'ORDERED_LIST',
	    'P': 'PARAGRAPH',
	    'Q': 'QUOTATION',
	    'S': 'STRIKETHROUGH_TEXT',
	    'SMALL': 'SMALL_TEXT',
	    'SUB': 'SUBSTRIPT',
	    'SUP': 'SUPERSCRIPT',
	    'TBODY': 'TABLE_BODY',
	    'TD': 'TABLE_CELL',
	    'TFOOT': 'TABLE_FOOTER',
	    'TH': 'TABLE_HEADER_CELL',
	    'THEAD': 'TABLE_HEADER',
	    'TR': 'TABLE_ROW',
	    'TT': 'MONOSPACED_TEXT',
	    'U': 'UNDERLINED_TEXT',
	    'UL': 'UNORDERED_LIST',
	};
	/**
	 * Creates unique names for placeholder with different content.
	 *
	 * Returns the same placeholder name when the content is identical.
	 *
	 * \@internal
	 */
	var PlaceholderRegistry = (function () {
	    function PlaceholderRegistry() {
	        this._placeHolderNameCounts = {};
	        this._signatureToName = {};
	    }
	    /**
	     * @param {?} tag
	     * @param {?} attrs
	     * @param {?} isVoid
	     * @return {?}
	     */
	    PlaceholderRegistry.prototype.getStartTagPlaceholderName = function (tag, attrs, isVoid) {
	        var /** @type {?} */ signature = this._hashTag(tag, attrs, isVoid);
	        if (this._signatureToName[signature]) {
	            return this._signatureToName[signature];
	        }
	        var /** @type {?} */ upperTag = tag.toUpperCase();
	        var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	        var /** @type {?} */ name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
	        this._signatureToName[signature] = name;
	        return name;
	    };
	    /**
	     * @param {?} tag
	     * @return {?}
	     */
	    PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function (tag) {
	        var /** @type {?} */ signature = this._hashClosingTag(tag);
	        if (this._signatureToName[signature]) {
	            return this._signatureToName[signature];
	        }
	        var /** @type {?} */ upperTag = tag.toUpperCase();
	        var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	        var /** @type {?} */ name = this._generateUniqueName("CLOSE_" + baseName);
	        this._signatureToName[signature] = name;
	        return name;
	    };
	    /**
	     * @param {?} name
	     * @param {?} content
	     * @return {?}
	     */
	    PlaceholderRegistry.prototype.getPlaceholderName = function (name, content) {
	        var /** @type {?} */ upperName = name.toUpperCase();
	        var /** @type {?} */ signature = "PH: " + upperName + "=" + content;
	        if (this._signatureToName[signature]) {
	            return this._signatureToName[signature];
	        }
	        var /** @type {?} */ uniqueName = this._generateUniqueName(upperName);
	        this._signatureToName[signature] = uniqueName;
	        return uniqueName;
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    PlaceholderRegistry.prototype.getUniquePlaceholder = function (name) {
	        return this._generateUniqueName(name.toUpperCase());
	    };
	    /**
	     * @param {?} tag
	     * @param {?} attrs
	     * @param {?} isVoid
	     * @return {?}
	     */
	    PlaceholderRegistry.prototype._hashTag = function (tag, attrs, isVoid) {
	        var /** @type {?} */ start = "<" + tag;
	        var /** @type {?} */ strAttrs = Object.keys(attrs).sort().map(function (name) { return " " + name + "=" + attrs[name]; }).join('');
	        var /** @type {?} */ end = isVoid ? '/>' : "></" + tag + ">";
	        return start + strAttrs + end;
	    };
	    /**
	     * @param {?} tag
	     * @return {?}
	     */
	    PlaceholderRegistry.prototype._hashClosingTag = function (tag) { return this._hashTag("/" + tag, {}, false); };
	    /**
	     * @param {?} base
	     * @return {?}
	     */
	    PlaceholderRegistry.prototype._generateUniqueName = function (base) {
	        var /** @type {?} */ seen = this._placeHolderNameCounts.hasOwnProperty(base);
	        if (!seen) {
	            this._placeHolderNameCounts[base] = 1;
	            return base;
	        }
	        var /** @type {?} */ id = this._placeHolderNameCounts[base];
	        this._placeHolderNameCounts[base] = id + 1;
	        return base + "_" + id;
	    };
	    return PlaceholderRegistry;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _expParser = new Parser(new Lexer());
	/**
	 * Returns a function converting html nodes to an i18n Message given an interpolationConfig
	 * @param {?} interpolationConfig
	 * @return {?}
	 */
	function createI18nMessageFactory(interpolationConfig) {
	    var /** @type {?} */ visitor = new _I18nVisitor(_expParser, interpolationConfig);
	    return function (nodes, meaning, description, id) { return visitor.toI18nMessage(nodes, meaning, description, id); };
	}
	var _I18nVisitor = (function () {
	    /**
	     * @param {?} _expressionParser
	     * @param {?} _interpolationConfig
	     */
	    function _I18nVisitor(_expressionParser, _interpolationConfig) {
	        this._expressionParser = _expressionParser;
	        this._interpolationConfig = _interpolationConfig;
	    }
	    /**
	     * @param {?} nodes
	     * @param {?} meaning
	     * @param {?} description
	     * @param {?} id
	     * @return {?}
	     */
	    _I18nVisitor.prototype.toI18nMessage = function (nodes, meaning, description, id) {
	        this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;
	        this._icuDepth = 0;
	        this._placeholderRegistry = new PlaceholderRegistry();
	        this._placeholderToContent = {};
	        this._placeholderToMessage = {};
	        var /** @type {?} */ i18nodes = visitAll(this, nodes, {});
	        return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);
	    };
	    /**
	     * @param {?} el
	     * @param {?} context
	     * @return {?}
	     */
	    _I18nVisitor.prototype.visitElement = function (el, context) {
	        var /** @type {?} */ children = visitAll(this, el.children);
	        var /** @type {?} */ attrs = {};
	        el.attrs.forEach(function (attr) {
	            // Do not visit the attributes, translatable ones are top-level ASTs
	            attrs[attr.name] = attr.value;
	        });
	        var /** @type {?} */ isVoid = getHtmlTagDefinition(el.name).isVoid;
	        var /** @type {?} */ startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
	        this._placeholderToContent[startPhName] = el.sourceSpan.toString();
	        var /** @type {?} */ closePhName = '';
	        if (!isVoid) {
	            closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
	            this._placeholderToContent[closePhName] = "</" + el.name + ">";
	        }
	        return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
	    };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    _I18nVisitor.prototype.visitAttribute = function (attribute, context) {
	        return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
	    };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    _I18nVisitor.prototype.visitText = function (text, context) {
	        return this._visitTextWithInterpolation(text.value, text.sourceSpan);
	    };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    _I18nVisitor.prototype.visitComment = function (comment, context) { return null; };
	    /**
	     * @param {?} icu
	     * @param {?} context
	     * @return {?}
	     */
	    _I18nVisitor.prototype.visitExpansion = function (icu, context) {
	        var _this = this;
	        this._icuDepth++;
	        var /** @type {?} */ i18nIcuCases = {};
	        var /** @type {?} */ i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
	        icu.cases.forEach(function (caze) {
	            i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) { return node.visit(_this, {}); }), caze.expSourceSpan);
	        });
	        this._icuDepth--;
	        if (this._isIcu || this._icuDepth > 0) {
	            // Returns an ICU node when:
	            // - the message (vs a part of the message) is an ICU message, or
	            // - the ICU message is nested.
	            var /** @type {?} */ expPh = this._placeholderRegistry.getUniquePlaceholder("VAR_" + icu.type);
	            i18nIcu.expressionPlaceholder = expPh;
	            this._placeholderToContent[expPh] = icu.switchValue;
	            return i18nIcu;
	        }
	        // Else returns a placeholder
	        // ICU placeholders should not be replaced with their original content but with the their
	        // translations. We need to create a new visitor (they are not re-entrant) to compute the
	        // message id.
	        // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg
	        var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
	        var /** @type {?} */ visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
	        this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '', '');
	        return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
	    };
	    /**
	     * @param {?} icuCase
	     * @param {?} context
	     * @return {?}
	     */
	    _I18nVisitor.prototype.visitExpansionCase = function (icuCase, context) {
	        throw new Error('Unreachable code');
	    };
	    /**
	     * @param {?} text
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    _I18nVisitor.prototype._visitTextWithInterpolation = function (text, sourceSpan) {
	        var /** @type {?} */ splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
	        if (!splitInterpolation) {
	            // No expression, return a single text
	            return new Text$1(text, sourceSpan);
	        }
	        // Return a group of text + expressions
	        var /** @type {?} */ nodes = [];
	        var /** @type {?} */ container = new Container(nodes, sourceSpan);
	        var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;
	        for (var /** @type {?} */ i = 0; i < splitInterpolation.strings.length - 1; i++) {
	            var /** @type {?} */ expression = splitInterpolation.expressions[i];
	            var /** @type {?} */ baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
	            var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
	            if (splitInterpolation.strings[i].length) {
	                // No need to add empty strings
	                nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
	            }
	            nodes.push(new Placeholder(expression, phName, sourceSpan));
	            this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
	        }
	        // The last index contains no expression
	        var /** @type {?} */ lastStringIdx = splitInterpolation.strings.length - 1;
	        if (splitInterpolation.strings[lastStringIdx].length) {
	            nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
	        }
	        return container;
	    };
	    return _I18nVisitor;
	}());
	var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function _extractPlaceholderName(input) {
	    return input.split(_CUSTOM_PH_EXP)[1];
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An i18n error.
	 */
	var I18nError = (function (_super) {
	    __extends(I18nError, _super);
	    /**
	     * @param {?} span
	     * @param {?} msg
	     */
	    function I18nError(span, msg) {
	        return _super.call(this, span, msg) || this;
	    }
	    return I18nError;
	}(ParseError));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _I18N_ATTR = 'i18n';
	var _I18N_ATTR_PREFIX = 'i18n-';
	var _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
	var MEANING_SEPARATOR = '|';
	var ID_SEPARATOR = '@@';
	/**
	 * Extract translatable messages from an html AST
	 * @param {?} nodes
	 * @param {?} interpolationConfig
	 * @param {?} implicitTags
	 * @param {?} implicitAttrs
	 * @return {?}
	 */
	function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
	    var /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);
	    return visitor.extract(nodes, interpolationConfig);
	}
	/**
	 * @param {?} nodes
	 * @param {?} translations
	 * @param {?} interpolationConfig
	 * @param {?} implicitTags
	 * @param {?} implicitAttrs
	 * @return {?}
	 */
	function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
	    var /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);
	    return visitor.merge(nodes, translations, interpolationConfig);
	}
	var ExtractionResult = (function () {
	    /**
	     * @param {?} messages
	     * @param {?} errors
	     */
	    function ExtractionResult(messages, errors) {
	        this.messages = messages;
	        this.errors = errors;
	    }
	    return ExtractionResult;
	}());
	var _VisitorMode = {};
	_VisitorMode.Extract = 0;
	_VisitorMode.Merge = 1;
	_VisitorMode[_VisitorMode.Extract] = "Extract";
	_VisitorMode[_VisitorMode.Merge] = "Merge";
	/**
	 * This Visitor is used:
	 * 1. to extract all the translatable strings from an html AST (see `extract()`),
	 * 2. to replace the translatable strings with the actual translations (see `merge()`)
	 *
	 * \@internal
	 */
	var _Visitor = (function () {
	    /**
	     * @param {?} _implicitTags
	     * @param {?} _implicitAttrs
	     */
	    function _Visitor(_implicitTags, _implicitAttrs) {
	        this._implicitTags = _implicitTags;
	        this._implicitAttrs = _implicitAttrs;
	    }
	    /**
	     * Extracts the messages from the tree
	     * @param {?} nodes
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    _Visitor.prototype.extract = function (nodes, interpolationConfig) {
	        var _this = this;
	        this._init(_VisitorMode.Extract, interpolationConfig);
	        nodes.forEach(function (node) { return node.visit(_this, null); });
	        if (this._inI18nBlock) {
	            this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	        }
	        return new ExtractionResult(this._messages, this._errors);
	    };
	    /**
	     * Returns a tree where all translatable nodes are translated
	     * @param {?} nodes
	     * @param {?} translations
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    _Visitor.prototype.merge = function (nodes, translations, interpolationConfig) {
	        this._init(_VisitorMode.Merge, interpolationConfig);
	        this._translations = translations;
	        // Construct a single fake root element
	        var /** @type {?} */ wrapper = new Element('wrapper', [], nodes, null, null, null);
	        var /** @type {?} */ translatedNode = wrapper.visit(this, null);
	        if (this._inI18nBlock) {
	            this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	        }
	        return new ParseTreeResult(translatedNode.children, this._errors);
	    };
	    /**
	     * @param {?} icuCase
	     * @param {?} context
	     * @return {?}
	     */
	    _Visitor.prototype.visitExpansionCase = function (icuCase, context) {
	        // Parse cases for translatable html attributes
	        var /** @type {?} */ expression = visitAll(this, icuCase.expression, context);
	        if (this._mode === _VisitorMode.Merge) {
	            return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
	        }
	    };
	    /**
	     * @param {?} icu
	     * @param {?} context
	     * @return {?}
	     */
	    _Visitor.prototype.visitExpansion = function (icu, context) {
	        this._mayBeAddBlockChildren(icu);
	        var /** @type {?} */ wasInIcu = this._inIcu;
	        if (!this._inIcu) {
	            // nested ICU messages should not be extracted but top-level translated as a whole
	            if (this._isInTranslatableSection) {
	                this._addMessage([icu]);
	            }
	            this._inIcu = true;
	        }
	        var /** @type {?} */ cases = visitAll(this, icu.cases, context);
	        if (this._mode === _VisitorMode.Merge) {
	            icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
	        }
	        this._inIcu = wasInIcu;
	        return icu;
	    };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    _Visitor.prototype.visitComment = function (comment, context) {
	        var /** @type {?} */ isOpening = _isOpeningComment(comment);
	        if (isOpening && this._isInTranslatableSection) {
	            this._reportError(comment, 'Could not start a block inside a translatable section');
	            return;
	        }
	        var /** @type {?} */ isClosing = _isClosingComment(comment);
	        if (isClosing && !this._inI18nBlock) {
	            this._reportError(comment, 'Trying to close an unopened block');
	            return;
	        }
	        if (!this._inI18nNode && !this._inIcu) {
	            if (!this._inI18nBlock) {
	                if (isOpening) {
	                    this._inI18nBlock = true;
	                    this._blockStartDepth = this._depth;
	                    this._blockChildren = [];
	                    this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
	                    this._openTranslatableSection(comment);
	                }
	            }
	            else {
	                if (isClosing) {
	                    if (this._depth == this._blockStartDepth) {
	                        this._closeTranslatableSection(comment, this._blockChildren);
	                        this._inI18nBlock = false;
	                        var /** @type {?} */ message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
	                        // merge attributes in sections
	                        var /** @type {?} */ nodes = this._translateMessage(comment, message);
	                        return visitAll(this, nodes);
	                    }
	                    else {
	                        this._reportError(comment, 'I18N blocks should not cross element boundaries');
	                        return;
	                    }
	                }
	            }
	        }
	    };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    _Visitor.prototype.visitText = function (text, context) {
	        if (this._isInTranslatableSection) {
	            this._mayBeAddBlockChildren(text);
	        }
	        return text;
	    };
	    /**
	     * @param {?} el
	     * @param {?} context
	     * @return {?}
	     */
	    _Visitor.prototype.visitElement = function (el, context) {
	        var _this = this;
	        this._mayBeAddBlockChildren(el);
	        this._depth++;
	        var /** @type {?} */ wasInI18nNode = this._inI18nNode;
	        var /** @type {?} */ wasInImplicitNode = this._inImplicitNode;
	        var /** @type {?} */ childNodes = [];
	        var /** @type {?} */ translatedChildNodes;
	        // Extract:
	        // - top level nodes with the (implicit) "i18n" attribute if not already in a section
	        // - ICU messages
	        var /** @type {?} */ i18nAttr = _getI18nAttr(el);
	        var /** @type {?} */ i18nMeta = i18nAttr ? i18nAttr.value : '';
	        var /** @type {?} */ isImplicit = this._implicitTags.some(function (tag) { return el.name === tag; }) && !this._inIcu &&
	            !this._isInTranslatableSection;
	        var /** @type {?} */ isTopLevelImplicit = !wasInImplicitNode && isImplicit;
	        this._inImplicitNode = wasInImplicitNode || isImplicit;
	        if (!this._isInTranslatableSection && !this._inIcu) {
	            if (i18nAttr || isTopLevelImplicit) {
	                this._inI18nNode = true;
	                var /** @type {?} */ message = this._addMessage(el.children, i18nMeta);
	                translatedChildNodes = this._translateMessage(el, message);
	            }
	            if (this._mode == _VisitorMode.Extract) {
	                var /** @type {?} */ isTranslatable = i18nAttr || isTopLevelImplicit;
	                if (isTranslatable)
	                    this._openTranslatableSection(el);
	                visitAll(this, el.children);
	                if (isTranslatable)
	                    this._closeTranslatableSection(el, el.children);
	            }
	        }
	        else {
	            if (i18nAttr || isTopLevelImplicit) {
	                this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
	            }
	            if (this._mode == _VisitorMode.Extract) {
	                // Descend into child nodes for extraction
	                visitAll(this, el.children);
	            }
	        }
	        if (this._mode === _VisitorMode.Merge) {
	            var /** @type {?} */ visitNodes = translatedChildNodes || el.children;
	            visitNodes.forEach(function (child) {
	                var /** @type {?} */ visited = child.visit(_this, context);
	                if (visited && !_this._isInTranslatableSection) {
	                    // Do not add the children from translatable sections (= i18n blocks here)
	                    // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)
	                    childNodes = childNodes.concat(visited);
	                }
	            });
	        }
	        this._visitAttributesOf(el);
	        this._depth--;
	        this._inI18nNode = wasInI18nNode;
	        this._inImplicitNode = wasInImplicitNode;
	        if (this._mode === _VisitorMode.Merge) {
	            var /** @type {?} */ translatedAttrs = this._translateAttributes(el);
	            return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	        }
	    };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    _Visitor.prototype.visitAttribute = function (attribute, context) {
	        throw new Error('unreachable code');
	    };
	    /**
	     * @param {?} mode
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    _Visitor.prototype._init = function (mode, interpolationConfig) {
	        this._mode = mode;
	        this._inI18nBlock = false;
	        this._inI18nNode = false;
	        this._depth = 0;
	        this._inIcu = false;
	        this._msgCountAtSectionStart = void 0;
	        this._errors = [];
	        this._messages = [];
	        this._inImplicitNode = false;
	        this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    _Visitor.prototype._visitAttributesOf = function (el) {
	        var _this = this;
	        var /** @type {?} */ explicitAttrNameToValue = {};
	        var /** @type {?} */ implicitAttrNames = this._implicitAttrs[el.name] || [];
	        el.attrs.filter(function (attr) { return attr.name.startsWith(_I18N_ATTR_PREFIX); })
	            .forEach(function (attr) { return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	            attr.value; });
	        el.attrs.forEach(function (attr) {
	            if (attr.name in explicitAttrNameToValue) {
	                _this._addMessage([attr], explicitAttrNameToValue[attr.name]);
	            }
	            else if (implicitAttrNames.some(function (name) { return attr.name === name; })) {
	                _this._addMessage([attr]);
	            }
	        });
	    };
	    /**
	     * @param {?} ast
	     * @param {?=} msgMeta
	     * @return {?}
	     */
	    _Visitor.prototype._addMessage = function (ast, msgMeta) {
	        if (ast.length == 0 ||
	            ast.length == 1 && ast[0] instanceof Attribute$1 && !((ast[0])).value) {
	            // Do not create empty messages
	            return;
	        }
	        var _a = _parseMessageMeta(msgMeta), meaning = _a.meaning, description = _a.description, id = _a.id;
	        var /** @type {?} */ message = this._createI18nMessage(ast, meaning, description, id);
	        this._messages.push(message);
	        return message;
	    };
	    /**
	     * @param {?} el
	     * @param {?} message
	     * @return {?}
	     */
	    _Visitor.prototype._translateMessage = function (el, message) {
	        if (message && this._mode === _VisitorMode.Merge) {
	            var /** @type {?} */ nodes = this._translations.get(message);
	            if (nodes) {
	                return nodes;
	            }
	            this._reportError(el, "Translation unavailable for message id=\"" + this._translations.digest(message) + "\"");
	        }
	        return [];
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    _Visitor.prototype._translateAttributes = function (el) {
	        var _this = this;
	        var /** @type {?} */ attributes = el.attrs;
	        var /** @type {?} */ i18nParsedMessageMeta = {};
	        attributes.forEach(function (attr) {
	            if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	                    _parseMessageMeta(attr.value);
	            }
	        });
	        var /** @type {?} */ translatedAttributes = [];
	        attributes.forEach(function (attr) {
	            if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                // strip i18n specific attributes
	                return;
	            }
	            if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {
	                var _a = i18nParsedMessageMeta[attr.name], meaning = _a.meaning, description = _a.description, id = _a.id;
	                var /** @type {?} */ message = _this._createI18nMessage([attr], meaning, description, id);
	                var /** @type {?} */ nodes = _this._translations.get(message);
	                if (nodes) {
	                    if (nodes.length == 0) {
	                        translatedAttributes.push(new Attribute$1(attr.name, '', attr.sourceSpan));
	                    }
	                    else if (nodes[0] instanceof Text) {
	                        var /** @type {?} */ value = ((nodes[0])).value;
	                        translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));
	                    }
	                    else {
	                        _this._reportError(el, "Unexpected translation for attribute \"" + attr.name + "\" (id=\"" + (id || _this._translations.digest(message)) + "\")");
	                    }
	                }
	                else {
	                    _this._reportError(el, "Translation unavailable for attribute \"" + attr.name + "\" (id=\"" + (id || _this._translations.digest(message)) + "\")");
	                }
	            }
	            else {
	                translatedAttributes.push(attr);
	            }
	        });
	        return translatedAttributes;
	    };
	    /**
	     * Add the node as a child of the block when:
	     * - we are in a block,
	     * - we are not inside a ICU message (those are handled separately),
	     * - the node is a "direct child" of the block
	     * @param {?} node
	     * @return {?}
	     */
	    _Visitor.prototype._mayBeAddBlockChildren = function (node) {
	        if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
	            this._blockChildren.push(node);
	        }
	    };
	    /**
	     * Marks the start of a section, see `_closeTranslatableSection`
	     * @param {?} node
	     * @return {?}
	     */
	    _Visitor.prototype._openTranslatableSection = function (node) {
	        if (this._isInTranslatableSection) {
	            this._reportError(node, 'Unexpected section start');
	        }
	        else {
	            this._msgCountAtSectionStart = this._messages.length;
	        }
	    };
	    Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
	        /**
	         * A translatable section could be:
	         * - the content of translatable element,
	         * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments
	         * @return {?}
	         */
	        get: function () {
	            return this._msgCountAtSectionStart !== void 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Terminates a section.
	     *
	     * If a section has only one significant children (comments not significant) then we should not
	     * keep the message from this children:
	     *
	     * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
	     * - one for the <p> content with meaning and description,
	     * - another one for the ICU message.
	     *
	     * In this case the last message is discarded as it contains less information (the AST is
	     * otherwise identical).
	     *
	     * Note that we should still keep messages extracted from attributes inside the section (ie in the
	     * ICU message here)
	     * @param {?} node
	     * @param {?} directChildren
	     * @return {?}
	     */
	    _Visitor.prototype._closeTranslatableSection = function (node, directChildren) {
	        if (!this._isInTranslatableSection) {
	            this._reportError(node, 'Unexpected section end');
	            return;
	        }
	        var /** @type {?} */ startIndex = this._msgCountAtSectionStart;
	        var /** @type {?} */ significantChildren = directChildren.reduce(function (count, node) { return count + (node instanceof Comment ? 0 : 1); }, 0);
	        if (significantChildren == 1) {
	            for (var /** @type {?} */ i = this._messages.length - 1; i >= startIndex; i--) {
	                var /** @type {?} */ ast = this._messages[i].nodes;
	                if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
	                    this._messages.splice(i, 1);
	                    break;
	                }
	            }
	        }
	        this._msgCountAtSectionStart = void 0;
	    };
	    /**
	     * @param {?} node
	     * @param {?} msg
	     * @return {?}
	     */
	    _Visitor.prototype._reportError = function (node, msg) {
	        this._errors.push(new I18nError(node.sourceSpan, msg));
	    };
	    return _Visitor;
	}());
	/**
	 * @param {?} n
	 * @return {?}
	 */
	function _isOpeningComment(n) {
	    return n instanceof Comment && n.value && n.value.startsWith('i18n');
	}
	/**
	 * @param {?} n
	 * @return {?}
	 */
	function _isClosingComment(n) {
	    return n instanceof Comment && n.value && n.value === '/i18n';
	}
	/**
	 * @param {?} p
	 * @return {?}
	 */
	function _getI18nAttr(p) {
	    return p.attrs.find(function (attr) { return attr.name === _I18N_ATTR; }) || null;
	}
	/**
	 * @param {?} i18n
	 * @return {?}
	 */
	function _parseMessageMeta(i18n) {
	    if (!i18n)
	        return { meaning: '', description: '', id: '' };
	    var /** @type {?} */ idIndex = i18n.indexOf(ID_SEPARATOR);
	    var /** @type {?} */ descIndex = i18n.indexOf(MEANING_SEPARATOR);
	    var _a = (idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''], meaningAndDesc = _a[0], id = _a[1];
	    var _b = (descIndex > -1) ?
	        [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :
	        ['', meaningAndDesc], meaning = _b[0], description = _b[1];
	    return { meaning: meaning, description: description, id: id };
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var XmlTagDefinition = (function () {
	    function XmlTagDefinition() {
	        this.closedByParent = false;
	        this.contentType = TagContentType.PARSABLE_DATA;
	        this.isVoid = false;
	        this.ignoreFirstLf = false;
	        this.canSelfClose = true;
	    }
	    /**
	     * @param {?} currentParent
	     * @return {?}
	     */
	    XmlTagDefinition.prototype.requireExtraParent = function (currentParent) { return false; };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    XmlTagDefinition.prototype.isClosedByChild = function (name) { return false; };
	    return XmlTagDefinition;
	}());
	var _TAG_DEFINITION = new XmlTagDefinition();
	/**
	 * @param {?} tagName
	 * @return {?}
	 */
	function getXmlTagDefinition(tagName) {
	    return _TAG_DEFINITION;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var XmlParser = (function (_super) {
	    __extends(XmlParser, _super);
	    function XmlParser() {
	        return _super.call(this, getXmlTagDefinition) || this;
	    }
	    /**
	     * @param {?} source
	     * @param {?} url
	     * @param {?=} parseExpansionForms
	     * @return {?}
	     */
	    XmlParser.prototype.parse = function (source, url, parseExpansionForms) {
	        if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	        return _super.prototype.parse.call(this, source, url, parseExpansionForms, null);
	    };
	    return XmlParser;
	}(Parser$1));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} message
	 * @return {?}
	 */
	function digest(message) {
	    return message.id || sha1(serializeNodes(message.nodes).join('') + ("[" + message.meaning + "]"));
	}
	/**
	 * @param {?} message
	 * @return {?}
	 */
	function decimalDigest(message) {
	    if (message.id) {
	        return message.id;
	    }
	    var /** @type {?} */ visitor = new _SerializerIgnoreIcuExpVisitor();
	    var /** @type {?} */ parts = message.nodes.map(function (a) { return a.visit(visitor, null); });
	    return computeMsgId(parts.join(''), message.meaning);
	}
	/**
	 * Serialize the i18n ast to something xml-like in order to generate an UID.
	 *
	 * The visitor is also used in the i18n parser tests
	 *
	 * \@internal
	 */
	var _SerializerVisitor = (function () {
	    function _SerializerVisitor() {
	    }
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    _SerializerVisitor.prototype.visitText = function (text, context) { return text.value; };
	    /**
	     * @param {?} container
	     * @param {?} context
	     * @return {?}
	     */
	    _SerializerVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        return "[" + container.children.map(function (child) { return child.visit(_this); }).join(', ') + "]";
	    };
	    /**
	     * @param {?} icu
	     * @param {?} context
	     * @return {?}
	     */
	    _SerializerVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}"; });
	        return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(', ') + "}";
	    };
	    /**
	     * @param {?} ph
	     * @param {?} context
	     * @return {?}
	     */
	    _SerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var _this = this;
	        return ph.isVoid ?
	            "<ph tag name=\"" + ph.startName + "\"/>" :
	            "<ph tag name=\"" + ph.startName + "\">" + ph.children.map(function (child) { return child.visit(_this); }).join(', ') + "</ph name=\"" + ph.closeName + "\">";
	    };
	    /**
	     * @param {?} ph
	     * @param {?} context
	     * @return {?}
	     */
	    _SerializerVisitor.prototype.visitPlaceholder = function (ph, context) {
	        return ph.value ? "<ph name=\"" + ph.name + "\">" + ph.value + "</ph>" : "<ph name=\"" + ph.name + "\"/>";
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _SerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        return "<ph icu name=\"" + ph.name + "\">" + ph.value.visit(this) + "</ph>";
	    };
	    return _SerializerVisitor;
	}());
	var serializerVisitor = new _SerializerVisitor();
	/**
	 * @param {?} nodes
	 * @return {?}
	 */
	function serializeNodes(nodes) {
	    return nodes.map(function (a) { return a.visit(serializerVisitor, null); });
	}
	/**
	 * Serialize the i18n ast to something xml-like in order to generate an UID.
	 *
	 * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.
	 *
	 * \@internal
	 */
	var _SerializerIgnoreIcuExpVisitor = (function (_super) {
	    __extends(_SerializerIgnoreIcuExpVisitor, _super);
	    function _SerializerIgnoreIcuExpVisitor() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} icu
	     * @param {?} context
	     * @return {?}
	     */
	    _SerializerIgnoreIcuExpVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}"; });
	        // Do not take the expression into account
	        return "{" + icu.type + ", " + strCases.join(', ') + "}";
	    };
	    return _SerializerIgnoreIcuExpVisitor;
	}(_SerializerVisitor));
	/**
	 * Compute the SHA1 of the given string
	 *
	 * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
	 *
	 * WARNING: this function has not been designed not tested with security in mind.
	 *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.
	 * @param {?} str
	 * @return {?}
	 */
	function sha1(str) {
	    var /** @type {?} */ utf8 = utf8Encode(str);
	    var /** @type {?} */ words32 = stringToWords32(utf8, Endian.Big);
	    var /** @type {?} */ len = utf8.length * 8;
	    var /** @type {?} */ w = new Array(80);
	    var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0], a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4];
	    words32[len >> 5] |= 0x80 << (24 - len % 32);
	    words32[((len + 64 >> 9) << 4) + 15] = len;
	    for (var /** @type {?} */ i = 0; i < words32.length; i += 16) {
	        var _b = [a, b, c, d, e], h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4];
	        for (var /** @type {?} */ j = 0; j < 80; j++) {
	            if (j < 16) {
	                w[j] = words32[i + j];
	            }
	            else {
	                w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
	            }
	            var _c = fk(j, b, c, d), f = _c[0], k = _c[1];
	            var /** @type {?} */ temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
	            _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];
	        }
	        _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];
	    }
	    return byteStringToHexString(words32ToByteString([a, b, c, d, e]));
	    var _d, _e;
	}
	/**
	 * @param {?} index
	 * @param {?} b
	 * @param {?} c
	 * @param {?} d
	 * @return {?}
	 */
	function fk(index, b, c, d) {
	    if (index < 20) {
	        return [(b & c) | (~b & d), 0x5a827999];
	    }
	    if (index < 40) {
	        return [b ^ c ^ d, 0x6ed9eba1];
	    }
	    if (index < 60) {
	        return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];
	    }
	    return [b ^ c ^ d, 0xca62c1d6];
	}
	/**
	 * Compute the fingerprint of the given string
	 *
	 * The output is 64 bit number encoded as a decimal string
	 *
	 * based on:
	 * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java
	 * @param {?} str
	 * @return {?}
	 */
	function fingerprint(str) {
	    var /** @type {?} */ utf8 = utf8Encode(str);
	    var _a = [hash32(utf8, 0), hash32(utf8, 102072)], hi = _a[0], lo = _a[1];
	    if (hi == 0 && (lo == 0 || lo == 1)) {
	        hi = hi ^ 0x130f9bef;
	        lo = lo ^ -0x6b5f56d8;
	    }
	    return [hi, lo];
	}
	/**
	 * @param {?} msg
	 * @param {?} meaning
	 * @return {?}
	 */
	function computeMsgId(msg, meaning) {
	    var _a = fingerprint(msg), hi = _a[0], lo = _a[1];
	    if (meaning) {
	        var _b = fingerprint(meaning), him = _b[0], lom = _b[1];
	        _c = add64(rol64([hi, lo], 1), [him, lom]), hi = _c[0], lo = _c[1];
	    }
	    return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));
	    var _c;
	}
	/**
	 * @param {?} str
	 * @param {?} c
	 * @return {?}
	 */
	function hash32(str, c) {
	    var _a = [0x9e3779b9, 0x9e3779b9], a = _a[0], b = _a[1];
	    var /** @type {?} */ i;
	    var /** @type {?} */ len = str.length;
	    for (i = 0; i + 12 <= len; i += 12) {
	        a = add32(a, wordAt(str, i, Endian.Little));
	        b = add32(b, wordAt(str, i + 4, Endian.Little));
	        c = add32(c, wordAt(str, i + 8, Endian.Little));
	        _b = mix([a, b, c]), a = _b[0], b = _b[1], c = _b[2];
	    }
	    a = add32(a, wordAt(str, i, Endian.Little));
	    b = add32(b, wordAt(str, i + 4, Endian.Little));
	    // the first byte of c is reserved for the length
	    c = add32(c, len);
	    c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);
	    return mix([a, b, c])[2];
	    var _b;
	}
	/**
	 * @param {?} __0
	 * @return {?}
	 */
	function mix(_a) {
	    var a = _a[0], b = _a[1], c = _a[2];
	    a = sub32(a, b);
	    a = sub32(a, c);
	    a ^= c >>> 13;
	    b = sub32(b, c);
	    b = sub32(b, a);
	    b ^= a << 8;
	    c = sub32(c, a);
	    c = sub32(c, b);
	    c ^= b >>> 13;
	    a = sub32(a, b);
	    a = sub32(a, c);
	    a ^= c >>> 12;
	    b = sub32(b, c);
	    b = sub32(b, a);
	    b ^= a << 16;
	    c = sub32(c, a);
	    c = sub32(c, b);
	    c ^= b >>> 5;
	    a = sub32(a, b);
	    a = sub32(a, c);
	    a ^= c >>> 3;
	    b = sub32(b, c);
	    b = sub32(b, a);
	    b ^= a << 10;
	    c = sub32(c, a);
	    c = sub32(c, b);
	    c ^= b >>> 15;
	    return [a, b, c];
	}
	var Endian = {};
	Endian.Little = 0;
	Endian.Big = 1;
	Endian[Endian.Little] = "Little";
	Endian[Endian.Big] = "Big";
	/**
	 * @param {?} a
	 * @param {?} b
	 * @return {?}
	 */
	function add32(a, b) {
	    return add32to64(a, b)[1];
	}
	/**
	 * @param {?} a
	 * @param {?} b
	 * @return {?}
	 */
	function add32to64(a, b) {
	    var /** @type {?} */ low = (a & 0xffff) + (b & 0xffff);
	    var /** @type {?} */ high = (a >>> 16) + (b >>> 16) + (low >>> 16);
	    return [high >>> 16, (high << 16) | (low & 0xffff)];
	}
	/**
	 * @param {?} __0
	 * @param {?} __1
	 * @return {?}
	 */
	function add64(_a, _b) {
	    var ah = _a[0], al = _a[1];
	    var bh = _b[0], bl = _b[1];
	    var _c = add32to64(al, bl), carry = _c[0], l = _c[1];
	    var /** @type {?} */ h = add32(add32(ah, bh), carry);
	    return [h, l];
	}
	/**
	 * @param {?} a
	 * @param {?} b
	 * @return {?}
	 */
	function sub32(a, b) {
	    var /** @type {?} */ low = (a & 0xffff) - (b & 0xffff);
	    var /** @type {?} */ high = (a >> 16) - (b >> 16) + (low >> 16);
	    return (high << 16) | (low & 0xffff);
	}
	/**
	 * @param {?} a
	 * @param {?} count
	 * @return {?}
	 */
	function rol32(a, count) {
	    return (a << count) | (a >>> (32 - count));
	}
	/**
	 * @param {?} __0
	 * @param {?} count
	 * @return {?}
	 */
	function rol64(_a, count) {
	    var hi = _a[0], lo = _a[1];
	    var /** @type {?} */ h = (hi << count) | (lo >>> (32 - count));
	    var /** @type {?} */ l = (lo << count) | (hi >>> (32 - count));
	    return [h, l];
	}
	/**
	 * @param {?} str
	 * @param {?} endian
	 * @return {?}
	 */
	function stringToWords32(str, endian) {
	    var /** @type {?} */ words32 = Array((str.length + 3) >>> 2);
	    for (var /** @type {?} */ i = 0; i < words32.length; i++) {
	        words32[i] = wordAt(str, i * 4, endian);
	    }
	    return words32;
	}
	/**
	 * @param {?} str
	 * @param {?} index
	 * @return {?}
	 */
	function byteAt(str, index) {
	    return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;
	}
	/**
	 * @param {?} str
	 * @param {?} index
	 * @param {?} endian
	 * @return {?}
	 */
	function wordAt(str, index, endian) {
	    var /** @type {?} */ word = 0;
	    if (endian === Endian.Big) {
	        for (var /** @type {?} */ i = 0; i < 4; i++) {
	            word += byteAt(str, index + i) << (24 - 8 * i);
	        }
	    }
	    else {
	        for (var /** @type {?} */ i = 0; i < 4; i++) {
	            word += byteAt(str, index + i) << 8 * i;
	        }
	    }
	    return word;
	}
	/**
	 * @param {?} words32
	 * @return {?}
	 */
	function words32ToByteString(words32) {
	    return words32.reduce(function (str, word) { return str + word32ToByteString(word); }, '');
	}
	/**
	 * @param {?} word
	 * @return {?}
	 */
	function word32ToByteString(word) {
	    var /** @type {?} */ str = '';
	    for (var /** @type {?} */ i = 0; i < 4; i++) {
	        str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);
	    }
	    return str;
	}
	/**
	 * @param {?} str
	 * @return {?}
	 */
	function byteStringToHexString(str) {
	    var /** @type {?} */ hex = '';
	    for (var /** @type {?} */ i = 0; i < str.length; i++) {
	        var /** @type {?} */ b = byteAt(str, i);
	        hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);
	    }
	    return hex.toLowerCase();
	}
	/**
	 * @param {?} str
	 * @return {?}
	 */
	function byteStringToDecString(str) {
	    var /** @type {?} */ decimal = '';
	    var /** @type {?} */ toThePower = '1';
	    for (var /** @type {?} */ i = str.length - 1; i >= 0; i--) {
	        decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));
	        toThePower = numberTimesBigInt(256, toThePower);
	    }
	    return decimal.split('').reverse().join('');
	}
	/**
	 * @param {?} x
	 * @param {?} y
	 * @return {?}
	 */
	function addBigInt(x, y) {
	    var /** @type {?} */ sum = '';
	    var /** @type {?} */ len = Math.max(x.length, y.length);
	    for (var /** @type {?} */ i = 0, /** @type {?} */ carry = 0; i < len || carry; i++) {
	        var /** @type {?} */ tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);
	        if (tmpSum >= 10) {
	            carry = 1;
	            sum += tmpSum - 10;
	        }
	        else {
	            carry = 0;
	            sum += tmpSum;
	        }
	    }
	    return sum;
	}
	/**
	 * @param {?} num
	 * @param {?} b
	 * @return {?}
	 */
	function numberTimesBigInt(num, b) {
	    var /** @type {?} */ product = '';
	    var /** @type {?} */ bToThePower = b;
	    for (; num !== 0; num = num >>> 1) {
	        if (num & 1)
	            product = addBigInt(product, bToThePower);
	        bToThePower = addBigInt(bToThePower, bToThePower);
	    }
	    return product;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @abstract
	 */
	var Serializer = (function () {
	    function Serializer() {
	    }
	    /**
	     * @abstract
	     * @param {?} messages
	     * @param {?} locale
	     * @return {?}
	     */
	    Serializer.prototype.write = function (messages, locale) { };
	    /**
	     * @abstract
	     * @param {?} content
	     * @param {?} url
	     * @return {?}
	     */
	    Serializer.prototype.load = function (content, url) { };
	    /**
	     * @abstract
	     * @param {?} message
	     * @return {?}
	     */
	    Serializer.prototype.digest = function (message) { };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Serializer.prototype.createNameMapper = function (message) { return null; };
	    return Serializer;
	}());
	/**
	 * A simple mapper that take a function to transform an internal name to a public name
	 */
	var SimplePlaceholderMapper = (function (_super) {
	    __extends(SimplePlaceholderMapper, _super);
	    /**
	     * @param {?} message
	     * @param {?} mapName
	     */
	    function SimplePlaceholderMapper(message, mapName) {
	        var _this = _super.call(this) || this;
	        _this.mapName = mapName;
	        _this.internalToPublic = {};
	        _this.publicToNextId = {};
	        _this.publicToInternal = {};
	        message.nodes.forEach(function (node) { return node.visit(_this); });
	        return _this;
	    }
	    /**
	     * @param {?} internalName
	     * @return {?}
	     */
	    SimplePlaceholderMapper.prototype.toPublicName = function (internalName) {
	        return this.internalToPublic.hasOwnProperty(internalName) ?
	            this.internalToPublic[internalName] :
	            null;
	    };
	    /**
	     * @param {?} publicName
	     * @return {?}
	     */
	    SimplePlaceholderMapper.prototype.toInternalName = function (publicName) {
	        return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] :
	            null;
	    };
	    /**
	     * @param {?} text
	     * @param {?=} context
	     * @return {?}
	     */
	    SimplePlaceholderMapper.prototype.visitText = function (text, context) { return null; };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    SimplePlaceholderMapper.prototype.visitTagPlaceholder = function (ph, context) {
	        this.visitPlaceholderName(ph.startName);
	        _super.prototype.visitTagPlaceholder.call(this, ph, context);
	        this.visitPlaceholderName(ph.closeName);
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    SimplePlaceholderMapper.prototype.visitPlaceholder = function (ph, context) { this.visitPlaceholderName(ph.name); };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    SimplePlaceholderMapper.prototype.visitIcuPlaceholder = function (ph, context) {
	        this.visitPlaceholderName(ph.name);
	    };
	    /**
	     * @param {?} internalName
	     * @return {?}
	     */
	    SimplePlaceholderMapper.prototype.visitPlaceholderName = function (internalName) {
	        if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {
	            return;
	        }
	        var /** @type {?} */ publicName = this.mapName(internalName);
	        if (this.publicToInternal.hasOwnProperty(publicName)) {
	            // Create a new XMB when it has already been used
	            var /** @type {?} */ nextId = this.publicToNextId[publicName];
	            this.publicToNextId[publicName] = nextId + 1;
	            publicName = publicName + "_" + nextId;
	        }
	        else {
	            this.publicToNextId[publicName] = 1;
	        }
	        this.internalToPublic[internalName] = publicName;
	        this.publicToInternal[publicName] = internalName;
	    };
	    return SimplePlaceholderMapper;
	}(RecurseVisitor));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _Visitor$1 = (function () {
	    function _Visitor$1() {
	    }
	    /**
	     * @param {?} tag
	     * @return {?}
	     */
	    _Visitor$1.prototype.visitTag = function (tag) {
	        var _this = this;
	        var /** @type {?} */ strAttrs = this._serializeAttributes(tag.attrs);
	        if (tag.children.length == 0) {
	            return "<" + tag.name + strAttrs + "/>";
	        }
	        var /** @type {?} */ strChildren = tag.children.map(function (node) { return node.visit(_this); });
	        return "<" + tag.name + strAttrs + ">" + strChildren.join('') + "</" + tag.name + ">";
	    };
	    /**
	     * @param {?} text
	     * @return {?}
	     */
	    _Visitor$1.prototype.visitText = function (text) { return text.value; };
	    /**
	     * @param {?} decl
	     * @return {?}
	     */
	    _Visitor$1.prototype.visitDeclaration = function (decl) {
	        return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
	    };
	    /**
	     * @param {?} attrs
	     * @return {?}
	     */
	    _Visitor$1.prototype._serializeAttributes = function (attrs) {
	        var /** @type {?} */ strAttrs = Object.keys(attrs).map(function (name) { return name + "=\"" + attrs[name] + "\""; }).join(' ');
	        return strAttrs.length > 0 ? ' ' + strAttrs : '';
	    };
	    /**
	     * @param {?} doctype
	     * @return {?}
	     */
	    _Visitor$1.prototype.visitDoctype = function (doctype) {
	        return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
	    };
	    return _Visitor$1;
	}());
	var _visitor = new _Visitor$1();
	/**
	 * @param {?} nodes
	 * @return {?}
	 */
	function serialize(nodes) {
	    return nodes.map(function (node) { return node.visit(_visitor); }).join('');
	}
	var Declaration = (function () {
	    /**
	     * @param {?} unescapedAttrs
	     */
	    function Declaration(unescapedAttrs) {
	        var _this = this;
	        this.attrs = {};
	        Object.keys(unescapedAttrs).forEach(function (k) {
	            _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
	        });
	    }
	    /**
	     * @param {?} visitor
	     * @return {?}
	     */
	    Declaration.prototype.visit = function (visitor) { return visitor.visitDeclaration(this); };
	    return Declaration;
	}());
	var Doctype = (function () {
	    /**
	     * @param {?} rootTag
	     * @param {?} dtd
	     */
	    function Doctype(rootTag, dtd) {
	        this.rootTag = rootTag;
	        this.dtd = dtd;
	    }
	    
	    /**
	     * @param {?} visitor
	     * @return {?}
	     */
	    Doctype.prototype.visit = function (visitor) { return visitor.visitDoctype(this); };
	    return Doctype;
	}());
	var Tag = (function () {
	    /**
	     * @param {?} name
	     * @param {?=} unescapedAttrs
	     * @param {?=} children
	     */
	    function Tag(name, unescapedAttrs, children) {
	        if (unescapedAttrs === void 0) { unescapedAttrs = {}; }
	        if (children === void 0) { children = []; }
	        var _this = this;
	        this.name = name;
	        this.children = children;
	        this.attrs = {};
	        Object.keys(unescapedAttrs).forEach(function (k) {
	            _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
	        });
	    }
	    /**
	     * @param {?} visitor
	     * @return {?}
	     */
	    Tag.prototype.visit = function (visitor) { return visitor.visitTag(this); };
	    return Tag;
	}());
	var Text$2 = (function () {
	    /**
	     * @param {?} unescapedValue
	     */
	    function Text$2(unescapedValue) {
	        this.value = _escapeXml(unescapedValue);
	    }
	    
	    /**
	     * @param {?} visitor
	     * @return {?}
	     */
	    Text$2.prototype.visit = function (visitor) { return visitor.visitText(this); };
	    return Text$2;
	}());
	var CR = (function (_super) {
	    __extends(CR, _super);
	    /**
	     * @param {?=} ws
	     */
	    function CR(ws) {
	        if (ws === void 0) { ws = 0; }
	        return _super.call(this, "\n" + new Array(ws + 1).join(' ')) || this;
	    }
	    return CR;
	}(Text$2));
	var _ESCAPED_CHARS = [
	    [/&/g, '&amp;'],
	    [/"/g, '&quot;'],
	    [/'/g, '&apos;'],
	    [/</g, '&lt;'],
	    [/>/g, '&gt;'],
	];
	/**
	 * @param {?} text
	 * @return {?}
	 */
	function _escapeXml(text) {
	    return _ESCAPED_CHARS.reduce(function (text, entry) { return text.replace(entry[0], entry[1]); }, text);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _VERSION = '1.2';
	var _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';
	// TODO(vicb): make this a param (s/_/-/)
	var _DEFAULT_SOURCE_LANG = 'en';
	var _PLACEHOLDER_TAG = 'x';
	var _FILE_TAG = 'file';
	var _SOURCE_TAG = 'source';
	var _TARGET_TAG = 'target';
	var _UNIT_TAG = 'trans-unit';
	var Xliff = (function (_super) {
	    __extends(Xliff, _super);
	    function Xliff() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} messages
	     * @param {?} locale
	     * @return {?}
	     */
	    Xliff.prototype.write = function (messages, locale) {
	        var /** @type {?} */ visitor = new _WriteVisitor();
	        var /** @type {?} */ transUnits = [];
	        messages.forEach(function (message) {
	            var /** @type {?} */ transUnit = new Tag(_UNIT_TAG, { id: message.id, datatype: 'html' });
	            transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG));
	            if (message.description) {
	                transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$2(message.description)]));
	            }
	            if (message.meaning) {
	                transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$2(message.meaning)]));
	            }
	            transUnit.children.push(new CR(6));
	            transUnits.push(new CR(6), transUnit);
	        });
	        var /** @type {?} */ body = new Tag('body', {}, transUnits.concat([new CR(4)]));
	        var /** @type {?} */ file = new Tag('file', {
	            'source-language': locale || _DEFAULT_SOURCE_LANG,
	            datatype: 'plaintext',
	            original: 'ng2.template',
	        }, [new CR(4), body, new CR(2)]);
	        var /** @type {?} */ xliff = new Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [new CR(2), file, new CR()]);
	        return serialize([
	            new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()
	        ]);
	    };
	    /**
	     * @param {?} content
	     * @param {?} url
	     * @return {?}
	     */
	    Xliff.prototype.load = function (content, url) {
	        // xliff to xml nodes
	        var /** @type {?} */ xliffParser = new XliffParser();
	        var _a = xliffParser.parse(content, url), locale = _a.locale, mlNodesByMsgId = _a.mlNodesByMsgId, errors = _a.errors;
	        // xml nodes to i18n nodes
	        var /** @type {?} */ i18nNodesByMsgId = {};
	        var /** @type {?} */ converter = new XmlToI18n();
	        Object.keys(mlNodesByMsgId).forEach(function (msgId) {
	            var _a = converter.convert(mlNodesByMsgId[msgId]), i18nNodes = _a.i18nNodes, e = _a.errors;
	            errors.push.apply(errors, e);
	            i18nNodesByMsgId[msgId] = i18nNodes;
	        });
	        if (errors.length) {
	            throw new Error("xliff parse errors:\n" + errors.join('\n'));
	        }
	        return { locale: locale, i18nNodesByMsgId: i18nNodesByMsgId };
	    };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Xliff.prototype.digest = function (message) { return digest(message); };
	    return Xliff;
	}(Serializer));
	var _WriteVisitor = (function () {
	    function _WriteVisitor() {
	    }
	    /**
	     * @param {?} text
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };
	    /**
	     * @param {?} container
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        var /** @type {?} */ nodes = [];
	        container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });
	        return nodes;
	    };
	    /**
	     * @param {?} icu
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor.prototype.visitIcu = function (icu, context) {
	        if (this._isInIcu) {
	            // nested ICU is not supported
	            throw new Error('xliff does not support nested ICU messages');
	        }
	        this._isInIcu = true;
	        // TODO(vicb): support ICU messages
	        // https://lists.oasis-open.org/archives/xliff/201201/msg00028.html
	        // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-po/xliff-profile-po-1.2-cd02.html
	        var /** @type {?} */ nodes = [];
	        this._isInIcu = false;
	        return nodes;
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var /** @type {?} */ ctype = getCtypeForTag(ph.tag);
	        var /** @type {?} */ startTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ctype });
	        if (ph.isVoid) {
	            // void tags have no children nor closing tags
	            return [startTagPh];
	        }
	        var /** @type {?} */ closeTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype: ctype });
	        return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor.prototype.visitPlaceholder = function (ph, context) {
	        return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
	    };
	    /**
	     * @param {?} nodes
	     * @return {?}
	     */
	    _WriteVisitor.prototype.serialize = function (nodes) {
	        var _this = this;
	        this._isInIcu = false;
	        return [].concat.apply([], nodes.map(function (node) { return node.visit(_this); }));
	    };
	    return _WriteVisitor;
	}());
	var XliffParser = (function () {
	    function XliffParser() {
	        this._locale = null;
	    }
	    /**
	     * @param {?} xliff
	     * @param {?} url
	     * @return {?}
	     */
	    XliffParser.prototype.parse = function (xliff, url) {
	        this._unitMlNodes = [];
	        this._mlNodesByMsgId = {};
	        var /** @type {?} */ xml = new XmlParser().parse(xliff, url, false);
	        this._errors = xml.errors;
	        visitAll(this, xml.rootNodes, null);
	        return {
	            mlNodesByMsgId: this._mlNodesByMsgId,
	            errors: this._errors,
	            locale: this._locale,
	        };
	    };
	    /**
	     * @param {?} element
	     * @param {?} context
	     * @return {?}
	     */
	    XliffParser.prototype.visitElement = function (element, context) {
	        switch (element.name) {
	            case _UNIT_TAG:
	                this._unitMlNodes = null;
	                var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                if (!idAttr) {
	                    this._addError(element, "<" + _UNIT_TAG + "> misses the \"id\" attribute");
	                }
	                else {
	                    var /** @type {?} */ id = idAttr.value;
	                    if (this._mlNodesByMsgId.hasOwnProperty(id)) {
	                        this._addError(element, "Duplicated translations for msg " + id);
	                    }
	                    else {
	                        visitAll(this, element.children, null);
	                        if (this._unitMlNodes) {
	                            this._mlNodesByMsgId[id] = this._unitMlNodes;
	                        }
	                        else {
	                            this._addError(element, "Message " + id + " misses a translation");
	                        }
	                    }
	                }
	                break;
	            case _SOURCE_TAG:
	                // ignore source message
	                break;
	            case _TARGET_TAG:
	                this._unitMlNodes = element.children;
	                break;
	            case _FILE_TAG:
	                var /** @type {?} */ localeAttr = element.attrs.find(function (attr) { return attr.name === 'target-language'; });
	                if (localeAttr) {
	                    this._locale = localeAttr.value;
	                }
	                visitAll(this, element.children, null);
	                break;
	            default:
	                // TODO(vicb): assert file structure, xliff version
	                // For now only recurse on unhandled nodes
	                visitAll(this, element.children, null);
	        }
	    };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    XliffParser.prototype.visitAttribute = function (attribute, context) { };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    XliffParser.prototype.visitText = function (text, context) { };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    XliffParser.prototype.visitComment = function (comment, context) { };
	    /**
	     * @param {?} expansion
	     * @param {?} context
	     * @return {?}
	     */
	    XliffParser.prototype.visitExpansion = function (expansion, context) { };
	    /**
	     * @param {?} expansionCase
	     * @param {?} context
	     * @return {?}
	     */
	    XliffParser.prototype.visitExpansionCase = function (expansionCase, context) { };
	    /**
	     * @param {?} node
	     * @param {?} message
	     * @return {?}
	     */
	    XliffParser.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(node.sourceSpan, message));
	    };
	    return XliffParser;
	}());
	var XmlToI18n = (function () {
	    function XmlToI18n() {
	    }
	    /**
	     * @param {?} nodes
	     * @return {?}
	     */
	    XmlToI18n.prototype.convert = function (nodes) {
	        this._errors = [];
	        return {
	            i18nNodes: visitAll(this, nodes),
	            errors: this._errors,
	        };
	    };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan); };
	    /**
	     * @param {?} el
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n.prototype.visitElement = function (el, context) {
	        if (el.name === _PLACEHOLDER_TAG) {
	            var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'id'; });
	            if (nameAttr) {
	                return new Placeholder('', nameAttr.value, el.sourceSpan);
	            }
	            this._addError(el, "<" + _PLACEHOLDER_TAG + "> misses the \"id\" attribute");
	        }
	        else {
	            this._addError(el, "Unexpected tag");
	        }
	    };
	    /**
	     * @param {?} icu
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n.prototype.visitExpansion = function (icu, context) { };
	    /**
	     * @param {?} icuCase
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) { };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n.prototype.visitComment = function (comment, context) { };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n.prototype.visitAttribute = function (attribute, context) { };
	    /**
	     * @param {?} node
	     * @param {?} message
	     * @return {?}
	     */
	    XmlToI18n.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(node.sourceSpan, message));
	    };
	    return XmlToI18n;
	}());
	/**
	 * @param {?} tag
	 * @return {?}
	 */
	function getCtypeForTag(tag) {
	    switch (tag.toLowerCase()) {
	        case 'br':
	            return 'lb';
	        case 'img':
	            return 'image';
	        default:
	            return "x-" + tag;
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _MESSAGES_TAG = 'messagebundle';
	var _MESSAGE_TAG = 'msg';
	var _PLACEHOLDER_TAG$1 = 'ph';
	var _EXEMPLE_TAG = 'ex';
	var _DOCTYPE = "<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>";
	var Xmb = (function (_super) {
	    __extends(Xmb, _super);
	    function Xmb() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} messages
	     * @param {?} locale
	     * @return {?}
	     */
	    Xmb.prototype.write = function (messages, locale) {
	        var /** @type {?} */ exampleVisitor = new ExampleVisitor();
	        var /** @type {?} */ visitor = new _Visitor$2();
	        var /** @type {?} */ rootNode = new Tag(_MESSAGES_TAG);
	        messages.forEach(function (message) {
	            var /** @type {?} */ attrs = { id: message.id };
	            if (message.description) {
	                attrs['desc'] = message.description;
	            }
	            if (message.meaning) {
	                attrs['meaning'] = message.meaning;
	            }
	            rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)));
	        });
	        rootNode.children.push(new CR());
	        return serialize([
	            new Declaration({ version: '1.0', encoding: 'UTF-8' }),
	            new CR(),
	            new Doctype(_MESSAGES_TAG, _DOCTYPE),
	            new CR(),
	            exampleVisitor.addDefaultExamples(rootNode),
	            new CR(),
	        ]);
	    };
	    /**
	     * @param {?} content
	     * @param {?} url
	     * @return {?}
	     */
	    Xmb.prototype.load = function (content, url) {
	        throw new Error('Unsupported');
	    };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Xmb.prototype.digest = function (message) { return digest$1(message); };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Xmb.prototype.createNameMapper = function (message) {
	        return new SimplePlaceholderMapper(message, toPublicName);
	    };
	    return Xmb;
	}(Serializer));
	var _Visitor$2 = (function () {
	    function _Visitor$2() {
	    }
	    /**
	     * @param {?} text
	     * @param {?=} context
	     * @return {?}
	     */
	    _Visitor$2.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };
	    /**
	     * @param {?} container
	     * @param {?} context
	     * @return {?}
	     */
	    _Visitor$2.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        var /** @type {?} */ nodes = [];
	        container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });
	        return nodes;
	    };
	    /**
	     * @param {?} icu
	     * @param {?=} context
	     * @return {?}
	     */
	    _Visitor$2.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var /** @type {?} */ nodes = [new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ")];
	        Object.keys(icu.cases).forEach(function (c) {
	            nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("} ")]));
	        });
	        nodes.push(new Text$2("}"));
	        return nodes;
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _Visitor$2.prototype.visitTagPlaceholder = function (ph, context) {
	        var /** @type {?} */ startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("<" + ph.tag + ">")]);
	        var /** @type {?} */ startTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.startName }, [startEx]);
	        if (ph.isVoid) {
	            // void tags have no children nor closing tags
	            return [startTagPh];
	        }
	        var /** @type {?} */ closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("</" + ph.tag + ">")]);
	        var /** @type {?} */ closeTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.closeName }, [closeEx]);
	        return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _Visitor$2.prototype.visitPlaceholder = function (ph, context) {
	        return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _Visitor$2.prototype.visitIcuPlaceholder = function (ph, context) {
	        return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];
	    };
	    /**
	     * @param {?} nodes
	     * @return {?}
	     */
	    _Visitor$2.prototype.serialize = function (nodes) {
	        var _this = this;
	        return [].concat.apply([], nodes.map(function (node) { return node.visit(_this); }));
	    };
	    return _Visitor$2;
	}());
	/**
	 * @param {?} message
	 * @return {?}
	 */
	function digest$1(message) {
	    return decimalDigest(message);
	}
	var ExampleVisitor = (function () {
	    function ExampleVisitor() {
	    }
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    ExampleVisitor.prototype.addDefaultExamples = function (node) {
	        node.visit(this);
	        return node;
	    };
	    /**
	     * @param {?} tag
	     * @return {?}
	     */
	    ExampleVisitor.prototype.visitTag = function (tag) {
	        var _this = this;
	        if (tag.name === _PLACEHOLDER_TAG$1) {
	            if (!tag.children || tag.children.length == 0) {
	                var /** @type {?} */ exText = new Text$2(tag.attrs['name'] || '...');
	                tag.children = [new Tag(_EXEMPLE_TAG, {}, [exText])];
	            }
	        }
	        else if (tag.children) {
	            tag.children.forEach(function (node) { return node.visit(_this); });
	        }
	    };
	    /**
	     * @param {?} text
	     * @return {?}
	     */
	    ExampleVisitor.prototype.visitText = function (text) { };
	    /**
	     * @param {?} decl
	     * @return {?}
	     */
	    ExampleVisitor.prototype.visitDeclaration = function (decl) { };
	    /**
	     * @param {?} doctype
	     * @return {?}
	     */
	    ExampleVisitor.prototype.visitDoctype = function (doctype) { };
	    return ExampleVisitor;
	}());
	/**
	 * @param {?} internalName
	 * @return {?}
	 */
	function toPublicName(internalName) {
	    return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _TRANSLATIONS_TAG = 'translationbundle';
	var _TRANSLATION_TAG = 'translation';
	var _PLACEHOLDER_TAG$2 = 'ph';
	var Xtb = (function (_super) {
	    __extends(Xtb, _super);
	    function Xtb() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} messages
	     * @param {?} locale
	     * @return {?}
	     */
	    Xtb.prototype.write = function (messages, locale) { throw new Error('Unsupported'); };
	    /**
	     * @param {?} content
	     * @param {?} url
	     * @return {?}
	     */
	    Xtb.prototype.load = function (content, url) {
	        // xtb to xml nodes
	        var /** @type {?} */ xtbParser = new XtbParser();
	        var _a = xtbParser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;
	        // xml nodes to i18n nodes
	        var /** @type {?} */ i18nNodesByMsgId = {};
	        var /** @type {?} */ converter = new XmlToI18n$1();
	        // Because we should be able to load xtb files that rely on features not supported by angular,
	        // we need to delay the conversion of html to i18n nodes so that non angular messages are not
	        // converted
	        Object.keys(msgIdToHtml).forEach(function (msgId) {
	            var /** @type {?} */ valueFn = function () {
	                var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, errors = _a.errors;
	                if (errors.length) {
	                    throw new Error("xtb parse errors:\n" + errors.join('\n'));
	                }
	                return i18nNodes;
	            };
	            createLazyProperty(i18nNodesByMsgId, msgId, valueFn);
	        });
	        if (errors.length) {
	            throw new Error("xtb parse errors:\n" + errors.join('\n'));
	        }
	        return { locale: locale, i18nNodesByMsgId: i18nNodesByMsgId };
	    };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Xtb.prototype.digest = function (message) { return digest$1(message); };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Xtb.prototype.createNameMapper = function (message) {
	        return new SimplePlaceholderMapper(message, toPublicName);
	    };
	    return Xtb;
	}(Serializer));
	/**
	 * @param {?} messages
	 * @param {?} id
	 * @param {?} valueFn
	 * @return {?}
	 */
	function createLazyProperty(messages, id, valueFn) {
	    Object.defineProperty(messages, id, {
	        configurable: true,
	        enumerable: true,
	        get: function () {
	            var /** @type {?} */ value = valueFn();
	            Object.defineProperty(messages, id, { enumerable: true, value: value });
	            return value;
	        },
	        set: function (_) { throw new Error('Could not overwrite an XTB translation'); },
	    });
	}
	var XtbParser = (function () {
	    function XtbParser() {
	        this._locale = null;
	    }
	    /**
	     * @param {?} xtb
	     * @param {?} url
	     * @return {?}
	     */
	    XtbParser.prototype.parse = function (xtb, url) {
	        this._bundleDepth = 0;
	        this._msgIdToHtml = {};
	        // We can not parse the ICU messages at this point as some messages might not originate
	        // from Angular that could not be lex'd.
	        var /** @type {?} */ xml = new XmlParser().parse(xtb, url, false);
	        this._errors = xml.errors;
	        visitAll(this, xml.rootNodes);
	        return {
	            msgIdToHtml: this._msgIdToHtml,
	            errors: this._errors,
	            locale: this._locale,
	        };
	    };
	    /**
	     * @param {?} element
	     * @param {?} context
	     * @return {?}
	     */
	    XtbParser.prototype.visitElement = function (element, context) {
	        switch (element.name) {
	            case _TRANSLATIONS_TAG:
	                this._bundleDepth++;
	                if (this._bundleDepth > 1) {
	                    this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
	                }
	                var /** @type {?} */ langAttr = element.attrs.find(function (attr) { return attr.name === 'lang'; });
	                if (langAttr) {
	                    this._locale = langAttr.value;
	                }
	                visitAll(this, element.children, null);
	                this._bundleDepth--;
	                break;
	            case _TRANSLATION_TAG:
	                var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                if (!idAttr) {
	                    this._addError(element, "<" + _TRANSLATION_TAG + "> misses the \"id\" attribute");
	                }
	                else {
	                    var /** @type {?} */ id = idAttr.value;
	                    if (this._msgIdToHtml.hasOwnProperty(id)) {
	                        this._addError(element, "Duplicated translations for msg " + id);
	                    }
	                    else {
	                        var /** @type {?} */ innerTextStart = element.startSourceSpan.end.offset;
	                        var /** @type {?} */ innerTextEnd = element.endSourceSpan.start.offset;
	                        var /** @type {?} */ content = element.startSourceSpan.start.file.content;
	                        var /** @type {?} */ innerText = content.slice(innerTextStart, innerTextEnd);
	                        this._msgIdToHtml[id] = innerText;
	                    }
	                }
	                break;
	            default:
	                this._addError(element, 'Unexpected tag');
	        }
	    };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    XtbParser.prototype.visitAttribute = function (attribute, context) { };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    XtbParser.prototype.visitText = function (text, context) { };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    XtbParser.prototype.visitComment = function (comment, context) { };
	    /**
	     * @param {?} expansion
	     * @param {?} context
	     * @return {?}
	     */
	    XtbParser.prototype.visitExpansion = function (expansion, context) { };
	    /**
	     * @param {?} expansionCase
	     * @param {?} context
	     * @return {?}
	     */
	    XtbParser.prototype.visitExpansionCase = function (expansionCase, context) { };
	    /**
	     * @param {?} node
	     * @param {?} message
	     * @return {?}
	     */
	    XtbParser.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(node.sourceSpan, message));
	    };
	    return XtbParser;
	}());
	var XmlToI18n$1 = (function () {
	    function XmlToI18n$1() {
	    }
	    /**
	     * @param {?} message
	     * @param {?} url
	     * @return {?}
	     */
	    XmlToI18n$1.prototype.convert = function (message, url) {
	        var /** @type {?} */ xmlIcu = new XmlParser().parse(message, url, true);
	        this._errors = xmlIcu.errors;
	        var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?
	            [] :
	            visitAll(this, xmlIcu.rootNodes);
	        return {
	            i18nNodes: i18nNodes,
	            errors: this._errors,
	        };
	    };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$1.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan); };
	    /**
	     * @param {?} icu
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$1.prototype.visitExpansion = function (icu, context) {
	        var /** @type {?} */ caseMap = {};
	        visitAll(this, icu.cases).forEach(function (c) {
	            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
	        });
	        return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
	    };
	    /**
	     * @param {?} icuCase
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$1.prototype.visitExpansionCase = function (icuCase, context) {
	        return {
	            value: icuCase.value,
	            nodes: visitAll(this, icuCase.expression),
	        };
	    };
	    /**
	     * @param {?} el
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$1.prototype.visitElement = function (el, context) {
	        if (el.name === _PLACEHOLDER_TAG$2) {
	            var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'name'; });
	            if (nameAttr) {
	                return new Placeholder('', nameAttr.value, el.sourceSpan);
	            }
	            this._addError(el, "<" + _PLACEHOLDER_TAG$2 + "> misses the \"name\" attribute");
	        }
	        else {
	            this._addError(el, "Unexpected tag");
	        }
	    };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$1.prototype.visitComment = function (comment, context) { };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$1.prototype.visitAttribute = function (attribute, context) { };
	    /**
	     * @param {?} node
	     * @param {?} message
	     * @return {?}
	     */
	    XmlToI18n$1.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(node.sourceSpan, message));
	    };
	    return XmlToI18n$1;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var HtmlParser = (function (_super) {
	    __extends(HtmlParser, _super);
	    function HtmlParser() {
	        return _super.call(this, getHtmlTagDefinition) || this;
	    }
	    /**
	     * @param {?} source
	     * @param {?} url
	     * @param {?=} parseExpansionForms
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    HtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	        if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
	    };
	    return HtmlParser;
	}(Parser$1));
	HtmlParser.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	HtmlParser.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A container for translated messages
	 */
	var TranslationBundle = (function () {
	    /**
	     * @param {?=} _i18nNodesByMsgId
	     * @param {?=} locale
	     * @param {?=} digest
	     * @param {?=} mapperFactory
	     * @param {?=} missingTranslationStrategy
	     * @param {?=} console
	     */
	    function TranslationBundle(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console) {
	        if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }
	        if (missingTranslationStrategy === void 0) { missingTranslationStrategy = _angular_core.MissingTranslationStrategy.Warning; }
	        this._i18nNodesByMsgId = _i18nNodesByMsgId;
	        this.digest = digest;
	        this.mapperFactory = mapperFactory;
	        this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);
	    }
	    /**
	     * @param {?} content
	     * @param {?} url
	     * @param {?} serializer
	     * @param {?} missingTranslationStrategy
	     * @param {?=} console
	     * @return {?}
	     */
	    TranslationBundle.load = function (content, url, serializer, missingTranslationStrategy, console) {
	        var _a = serializer.load(content, url), locale = _a.locale, i18nNodesByMsgId = _a.i18nNodesByMsgId;
	        var /** @type {?} */ digestFn = function (m) { return serializer.digest(m); };
	        var /** @type {?} */ mapperFactory = function (m) { return serializer.createNameMapper(m); };
	        return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);
	    };
	    /**
	     * @param {?} srcMsg
	     * @return {?}
	     */
	    TranslationBundle.prototype.get = function (srcMsg) {
	        var /** @type {?} */ html = this._i18nToHtml.convert(srcMsg);
	        if (html.errors.length) {
	            throw new Error(html.errors.join('\n'));
	        }
	        return html.nodes;
	    };
	    /**
	     * @param {?} srcMsg
	     * @return {?}
	     */
	    TranslationBundle.prototype.has = function (srcMsg) { return this.digest(srcMsg) in this._i18nNodesByMsgId; };
	    return TranslationBundle;
	}());
	var I18nToHtmlVisitor = (function () {
	    /**
	     * @param {?=} _i18nNodesByMsgId
	     * @param {?=} _locale
	     * @param {?=} _digest
	     * @param {?=} _mapperFactory
	     * @param {?=} _missingTranslationStrategy
	     * @param {?=} _console
	     */
	    function I18nToHtmlVisitor(_i18nNodesByMsgId, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {
	        if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }
	        this._i18nNodesByMsgId = _i18nNodesByMsgId;
	        this._locale = _locale;
	        this._digest = _digest;
	        this._mapperFactory = _mapperFactory;
	        this._missingTranslationStrategy = _missingTranslationStrategy;
	        this._console = _console;
	        this._contextStack = [];
	        this._errors = [];
	    }
	    /**
	     * @param {?} srcMsg
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype.convert = function (srcMsg) {
	        this._contextStack.length = 0;
	        this._errors.length = 0;
	        // i18n to text
	        var /** @type {?} */ text = this._convertToText(srcMsg);
	        // text to html
	        var /** @type {?} */ url = srcMsg.nodes[0].sourceSpan.start.file.url;
	        var /** @type {?} */ html = new HtmlParser().parse(text, url, true);
	        return {
	            nodes: html.rootNodes,
	            errors: this._errors.concat(html.errors),
	        };
	    };
	    /**
	     * @param {?} text
	     * @param {?=} context
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype.visitText = function (text, context) { return text.value; };
	    /**
	     * @param {?} container
	     * @param {?=} context
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        return container.children.map(function (n) { return n.visit(_this); }).join('');
	    };
	    /**
	     * @param {?} icu
	     * @param {?=} context
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var /** @type {?} */ cases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}"; });
	        // TODO(vicb): Once all format switch to using expression placeholders
	        // we should throw when the placeholder is not in the source message
	        var /** @type {?} */ exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?
	            this._srcMsg.placeholders[icu.expression] :
	            icu.expression;
	        return "{" + exp + ", " + icu.type + ", " + cases.join(' ') + "}";
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype.visitPlaceholder = function (ph, context) {
	        var /** @type {?} */ phName = this._mapper(ph.name);
	        if (this._srcMsg.placeholders.hasOwnProperty(phName)) {
	            return this._srcMsg.placeholders[phName];
	        }
	        if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {
	            return this._convertToText(this._srcMsg.placeholderToMessage[phName]);
	        }
	        this._addError(ph, "Unknown placeholder \"" + ph.name + "\"");
	        return '';
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var _this = this;
	        var /** @type {?} */ tag = "" + ph.tag;
	        var /** @type {?} */ attrs = Object.keys(ph.attrs).map(function (name) { return name + "=\"" + ph.attrs[name] + "\""; }).join(' ');
	        if (ph.isVoid) {
	            return "<" + tag + " " + attrs + "/>";
	        }
	        var /** @type {?} */ children = ph.children.map(function (c) { return c.visit(_this); }).join('');
	        return "<" + tag + " " + attrs + ">" + children + "</" + tag + ">";
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        // An ICU placeholder references the source message to be serialized
	        return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);
	    };
	    /**
	     * Convert a source message to a translated text string:
	     * - text nodes are replaced with their translation,
	     * - placeholders are replaced with their content,
	     * - ICU nodes are converted to ICU expressions.
	     * @param {?} srcMsg
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype._convertToText = function (srcMsg) {
	        var _this = this;
	        var /** @type {?} */ id = this._digest(srcMsg);
	        var /** @type {?} */ mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;
	        var /** @type {?} */ nodes;
	        this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });
	        this._srcMsg = srcMsg;
	        if (this._i18nNodesByMsgId.hasOwnProperty(id)) {
	            // When there is a translation use its nodes as the source
	            // And create a mapper to convert serialized placeholder names to internal names
	            nodes = this._i18nNodesByMsgId[id];
	            this._mapper = function (name) { return mapper ? mapper.toInternalName(name) : name; };
	        }
	        else {
	            // When no translation has been found
	            // - report an error / a warning / nothing,
	            // - use the nodes from the original message
	            // - placeholders are already internal and need no mapper
	            if (this._missingTranslationStrategy === _angular_core.MissingTranslationStrategy.Error) {
	                var /** @type {?} */ ctx = this._locale ? " for locale \"" + this._locale + "\"" : '';
	                this._addError(srcMsg.nodes[0], "Missing translation for message \"" + id + "\"" + ctx);
	            }
	            else if (this._console &&
	                this._missingTranslationStrategy === _angular_core.MissingTranslationStrategy.Warning) {
	                var /** @type {?} */ ctx = this._locale ? " for locale \"" + this._locale + "\"" : '';
	                this._console.warn("Missing translation for message \"" + id + "\"" + ctx);
	            }
	            nodes = srcMsg.nodes;
	            this._mapper = function (name) { return name; };
	        }
	        var /** @type {?} */ text = nodes.map(function (node) { return node.visit(_this); }).join('');
	        var /** @type {?} */ context = this._contextStack.pop();
	        this._srcMsg = context.msg;
	        this._mapper = context.mapper;
	        return text;
	    };
	    /**
	     * @param {?} el
	     * @param {?} msg
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype._addError = function (el, msg) {
	        this._errors.push(new I18nError(el.sourceSpan, msg));
	    };
	    return I18nToHtmlVisitor;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var I18NHtmlParser = (function () {
	    /**
	     * @param {?} _htmlParser
	     * @param {?=} translations
	     * @param {?=} translationsFormat
	     * @param {?=} missingTranslation
	     * @param {?=} console
	     */
	    function I18NHtmlParser(_htmlParser, translations, translationsFormat, missingTranslation, console) {
	        if (missingTranslation === void 0) { missingTranslation = _angular_core.MissingTranslationStrategy.Warning; }
	        this._htmlParser = _htmlParser;
	        if (translations) {
	            var serializer = createSerializer(translationsFormat);
	            this._translationBundle =
	                TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);
	        }
	    }
	    /**
	     * @param {?} source
	     * @param {?} url
	     * @param {?=} parseExpansionForms
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    I18NHtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	        if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var /** @type {?} */ parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
	        if (!this._translationBundle) {
	            // Do not enable i18n when no translation bundle is provided
	            return parseResult;
	        }
	        if (parseResult.errors.length) {
	            return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);
	        }
	        return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});
	    };
	    return I18NHtmlParser;
	}());
	/**
	 * @param {?=} format
	 * @return {?}
	 */
	function createSerializer(format) {
	    format = (format || 'xlf').toLowerCase();
	    switch (format) {
	        case 'xmb':
	            return new Xmb();
	        case 'xtb':
	            return new Xtb();
	        case 'xliff':
	        case 'xlf':
	        default:
	            return new Xliff();
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CORE = assetUrl('core');
	var Identifiers = (function () {
	    function Identifiers() {
	    }
	    return Identifiers;
	}());
	Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
	    name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
	    moduleUrl: CORE,
	    runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS
	};
	Identifiers.ElementRef = { name: 'ElementRef', moduleUrl: CORE, runtime: _angular_core.ElementRef };
	Identifiers.NgModuleRef = { name: 'NgModuleRef', moduleUrl: CORE, runtime: _angular_core.NgModuleRef };
	Identifiers.ViewContainerRef = { name: 'ViewContainerRef', moduleUrl: CORE, runtime: _angular_core.ViewContainerRef };
	Identifiers.ChangeDetectorRef = { name: 'ChangeDetectorRef', moduleUrl: CORE, runtime: _angular_core.ChangeDetectorRef };
	Identifiers.QueryList = { name: 'QueryList', moduleUrl: CORE, runtime: _angular_core.QueryList };
	Identifiers.TemplateRef = { name: 'TemplateRef', moduleUrl: CORE, runtime: _angular_core.TemplateRef };
	Identifiers.CodegenComponentFactoryResolver = {
	    name: 'ɵCodegenComponentFactoryResolver',
	    moduleUrl: CORE,
	    runtime: _angular_core.ɵCodegenComponentFactoryResolver
	};
	Identifiers.ComponentFactoryResolver = {
	    name: 'ComponentFactoryResolver',
	    moduleUrl: CORE,
	    runtime: _angular_core.ComponentFactoryResolver
	};
	Identifiers.ComponentFactory = { name: 'ComponentFactory', moduleUrl: CORE, runtime: _angular_core.ComponentFactory };
	Identifiers.ComponentRef = { name: 'ComponentRef', moduleUrl: CORE, runtime: _angular_core.ComponentRef };
	Identifiers.NgModuleFactory = { name: 'NgModuleFactory', moduleUrl: CORE, runtime: _angular_core.NgModuleFactory };
	Identifiers.NgModuleInjector = {
	    name: 'ɵNgModuleInjector',
	    moduleUrl: CORE,
	    runtime: _angular_core.ɵNgModuleInjector,
	};
	Identifiers.RegisterModuleFactoryFn = {
	    name: 'ɵregisterModuleFactory',
	    moduleUrl: CORE,
	    runtime: _angular_core.ɵregisterModuleFactory,
	};
	Identifiers.Injector = { name: 'Injector', moduleUrl: CORE, runtime: _angular_core.Injector };
	Identifiers.ViewEncapsulation = { name: 'ViewEncapsulation', moduleUrl: CORE, runtime: _angular_core.ViewEncapsulation };
	Identifiers.ChangeDetectionStrategy = {
	    name: 'ChangeDetectionStrategy',
	    moduleUrl: CORE,
	    runtime: _angular_core.ChangeDetectionStrategy
	};
	Identifiers.SecurityContext = {
	    name: 'SecurityContext',
	    moduleUrl: CORE,
	    runtime: _angular_core.SecurityContext,
	};
	Identifiers.LOCALE_ID = { name: 'LOCALE_ID', moduleUrl: CORE, runtime: _angular_core.LOCALE_ID };
	Identifiers.TRANSLATIONS_FORMAT = { name: 'TRANSLATIONS_FORMAT', moduleUrl: CORE, runtime: _angular_core.TRANSLATIONS_FORMAT };
	Identifiers.inlineInterpolate = { name: 'ɵinlineInterpolate', moduleUrl: CORE, runtime: _angular_core.ɵinlineInterpolate };
	Identifiers.interpolate = { name: 'ɵinterpolate', moduleUrl: CORE, runtime: _angular_core.ɵinterpolate };
	Identifiers.EMPTY_ARRAY = { name: 'ɵEMPTY_ARRAY', moduleUrl: CORE, runtime: _angular_core.ɵEMPTY_ARRAY };
	Identifiers.EMPTY_MAP = { name: 'ɵEMPTY_MAP', moduleUrl: CORE, runtime: _angular_core.ɵEMPTY_MAP };
	Identifiers.Renderer = { name: 'Renderer', moduleUrl: CORE, runtime: _angular_core.Renderer };
	Identifiers.viewDef = { name: 'ɵvid', moduleUrl: CORE, runtime: _angular_core.ɵvid };
	Identifiers.elementDef = { name: 'ɵeld', moduleUrl: CORE, runtime: _angular_core.ɵeld };
	Identifiers.anchorDef = { name: 'ɵand', moduleUrl: CORE, runtime: _angular_core.ɵand };
	Identifiers.textDef = { name: 'ɵted', moduleUrl: CORE, runtime: _angular_core.ɵted };
	Identifiers.directiveDef = { name: 'ɵdid', moduleUrl: CORE, runtime: _angular_core.ɵdid };
	Identifiers.providerDef = { name: 'ɵprd', moduleUrl: CORE, runtime: _angular_core.ɵprd };
	Identifiers.queryDef = { name: 'ɵqud', moduleUrl: CORE, runtime: _angular_core.ɵqud };
	Identifiers.pureArrayDef = { name: 'ɵpad', moduleUrl: CORE, runtime: _angular_core.ɵpad };
	Identifiers.pureObjectDef = { name: 'ɵpod', moduleUrl: CORE, runtime: _angular_core.ɵpod };
	Identifiers.purePipeDef = { name: 'ɵppd', moduleUrl: CORE, runtime: _angular_core.ɵppd };
	Identifiers.pipeDef = { name: 'ɵpid', moduleUrl: CORE, runtime: _angular_core.ɵpid };
	Identifiers.nodeValue = { name: 'ɵnov', moduleUrl: CORE, runtime: _angular_core.ɵnov };
	Identifiers.ngContentDef = { name: 'ɵncd', moduleUrl: CORE, runtime: _angular_core.ɵncd };
	Identifiers.unwrapValue = { name: 'ɵunv', moduleUrl: CORE, runtime: _angular_core.ɵunv };
	Identifiers.createRendererType2 = { name: 'ɵcrt', moduleUrl: CORE, runtime: _angular_core.ɵcrt };
	Identifiers.RendererType2 = {
	    name: 'RendererType2',
	    moduleUrl: CORE,
	    // type only
	    runtime: null
	};
	Identifiers.ViewDefinition = {
	    name: 'ɵViewDefinition',
	    moduleUrl: CORE,
	    // type only
	    runtime: null
	};
	Identifiers.createComponentFactory = { name: 'ɵccf', moduleUrl: CORE, runtime: _angular_core.ɵccf };
	/**
	 * @param {?} pkg
	 * @param {?=} path
	 * @param {?=} type
	 * @return {?}
	 */
	function assetUrl(pkg, path, type) {
	    if (path === void 0) { path = null; }
	    if (type === void 0) { type = 'src'; }
	    if (path == null) {
	        return "@angular/" + pkg;
	    }
	    else {
	        return "@angular/" + pkg + "/" + type + "/" + path;
	    }
	}
	/**
	 * @param {?} identifier
	 * @return {?}
	 */
	function resolveIdentifier(identifier) {
	    var /** @type {?} */ name = identifier.name;
	    return _angular_core.ɵreflector.resolveIdentifier(name, identifier.moduleUrl, null, identifier.runtime);
	}
	/**
	 * @param {?} identifier
	 * @return {?}
	 */
	function createIdentifier(identifier) {
	    return { reference: resolveIdentifier(identifier) };
	}
	/**
	 * @param {?} identifier
	 * @return {?}
	 */
	function identifierToken(identifier) {
	    return { identifier: identifier };
	}
	/**
	 * @param {?} identifier
	 * @return {?}
	 */
	function createIdentifierToken(identifier) {
	    return identifierToken(createIdentifier(identifier));
	}
	/**
	 * @param {?} enumType
	 * @param {?} name
	 * @return {?}
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// http://cldr.unicode.org/index/cldr-spec/plural-rules
	var PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
	/**
	 * Expands special forms into elements.
	 *
	 * For example,
	 *
	 * ```
	 * { messages.length, plural,
	 *   =0 {zero}
	 *   =1 {one}
	 *   other {more than one}
	 * }
	 * ```
	 *
	 * will be expanded into
	 *
	 * ```
	 * <ng-container [ngPlural]="messages.length">
	 *   <ng-template ngPluralCase="=0">zero</ng-template>
	 *   <ng-template ngPluralCase="=1">one</ng-template>
	 *   <ng-template ngPluralCase="other">more than one</ng-template>
	 * </ng-container>
	 * ```
	 * @param {?} nodes
	 * @return {?}
	 */
	function expandNodes(nodes) {
	    var /** @type {?} */ expander = new _Expander();
	    return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
	}
	var ExpansionResult = (function () {
	    /**
	     * @param {?} nodes
	     * @param {?} expanded
	     * @param {?} errors
	     */
	    function ExpansionResult(nodes, expanded, errors) {
	        this.nodes = nodes;
	        this.expanded = expanded;
	        this.errors = errors;
	    }
	    return ExpansionResult;
	}());
	var ExpansionError = (function (_super) {
	    __extends(ExpansionError, _super);
	    /**
	     * @param {?} span
	     * @param {?} errorMsg
	     */
	    function ExpansionError(span, errorMsg) {
	        return _super.call(this, span, errorMsg) || this;
	    }
	    return ExpansionError;
	}(ParseError));
	/**
	 * Expand expansion forms (plural, select) to directives
	 *
	 * \@internal
	 */
	var _Expander = (function () {
	    function _Expander() {
	        this.isExpanded = false;
	        this.errors = [];
	    }
	    /**
	     * @param {?} element
	     * @param {?} context
	     * @return {?}
	     */
	    _Expander.prototype.visitElement = function (element, context) {
	        return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
	    };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    _Expander.prototype.visitAttribute = function (attribute, context) { return attribute; };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    _Expander.prototype.visitText = function (text, context) { return text; };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    _Expander.prototype.visitComment = function (comment, context) { return comment; };
	    /**
	     * @param {?} icu
	     * @param {?} context
	     * @return {?}
	     */
	    _Expander.prototype.visitExpansion = function (icu, context) {
	        this.isExpanded = true;
	        return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :
	            _expandDefaultForm(icu, this.errors);
	    };
	    /**
	     * @param {?} icuCase
	     * @param {?} context
	     * @return {?}
	     */
	    _Expander.prototype.visitExpansionCase = function (icuCase, context) {
	        throw new Error('Should not be reached');
	    };
	    return _Expander;
	}());
	/**
	 * @param {?} ast
	 * @param {?} errors
	 * @return {?}
	 */
	function _expandPluralForm(ast, errors) {
	    var /** @type {?} */ children = ast.cases.map(function (c) {
	        if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
	            errors.push(new ExpansionError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of " + PLURAL_CASES.join(", ")));
	        }
	        var /** @type {?} */ expansionResult = expandNodes(c.expression);
	        errors.push.apply(errors, expansionResult.errors);
	        return new Element("ng-template", [new Attribute$1('ngPluralCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	    });
	    var /** @type {?} */ switchAttr = new Attribute$1('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
	    return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	}
	/**
	 * @param {?} ast
	 * @param {?} errors
	 * @return {?}
	 */
	function _expandDefaultForm(ast, errors) {
	    var /** @type {?} */ children = ast.cases.map(function (c) {
	        var /** @type {?} */ expansionResult = expandNodes(c.expression);
	        errors.push.apply(errors, expansionResult.errors);
	        if (c.value === 'other') {
	            // other is the default case when no values match
	            return new Element("ng-template", [new Attribute$1('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	        }
	        return new Element("ng-template", [new Attribute$1('ngSwitchCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	    });
	    var /** @type {?} */ switchAttr = new Attribute$1('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
	    return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ProviderError = (function (_super) {
	    __extends(ProviderError, _super);
	    /**
	     * @param {?} message
	     * @param {?} span
	     */
	    function ProviderError(message, span) {
	        return _super.call(this, span, message) || this;
	    }
	    return ProviderError;
	}(ParseError));
	var ProviderViewContext = (function () {
	    /**
	     * @param {?} component
	     */
	    function ProviderViewContext(component) {
	        var _this = this;
	        this.component = component;
	        this.errors = [];
	        this.viewQueries = _getViewQueries(component);
	        this.viewProviders = new Map();
	        component.viewProviders.forEach(function (provider) {
	            if (_this.viewProviders.get(tokenReference(provider.token)) == null) {
	                _this.viewProviders.set(tokenReference(provider.token), true);
	            }
	        });
	    }
	    return ProviderViewContext;
	}());
	var ProviderElementContext = (function () {
	    /**
	     * @param {?} viewContext
	     * @param {?} _parent
	     * @param {?} _isViewRoot
	     * @param {?} _directiveAsts
	     * @param {?} attrs
	     * @param {?} refs
	     * @param {?} isTemplate
	     * @param {?} contentQueryStartId
	     * @param {?} _sourceSpan
	     */
	    function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, isTemplate, contentQueryStartId, _sourceSpan) {
	        var _this = this;
	        this.viewContext = viewContext;
	        this._parent = _parent;
	        this._isViewRoot = _isViewRoot;
	        this._directiveAsts = _directiveAsts;
	        this._sourceSpan = _sourceSpan;
	        this._transformedProviders = new Map();
	        this._seenProviders = new Map();
	        this._hasViewContainer = false;
	        this._queriedTokens = new Map();
	        this._attrs = {};
	        attrs.forEach(function (attrAst) { return _this._attrs[attrAst.name] = attrAst.value; });
	        var directivesMeta = _directiveAsts.map(function (directiveAst) { return directiveAst.directive; });
	        this._allProviders =
	            _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
	        this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta);
	        Array.from(this._allProviders.values()).forEach(function (provider) {
	            _this._addQueryReadsTo(provider.token, provider.token, _this._queriedTokens);
	        });
	        if (isTemplate) {
	            var templateRefId = createIdentifierToken(Identifiers.TemplateRef);
	            this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);
	        }
	        refs.forEach(function (refAst) {
	            var defaultQueryValue = refAst.value || createIdentifierToken(Identifiers.ElementRef);
	            _this._addQueryReadsTo({ value: refAst.name }, defaultQueryValue, _this._queriedTokens);
	        });
	        if (this._queriedTokens.get(resolveIdentifier(Identifiers.ViewContainerRef))) {
	            this._hasViewContainer = true;
	        }
	        // create the providers that we know are eager first
	        Array.from(this._allProviders.values()).forEach(function (provider) {
	            var eager = provider.eager || _this._queriedTokens.get(tokenReference(provider.token));
	            if (eager) {
	                _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
	            }
	        });
	    }
	    /**
	     * @return {?}
	     */
	    ProviderElementContext.prototype.afterElement = function () {
	        var _this = this;
	        // collect lazy providers
	        Array.from(this._allProviders.values()).forEach(function (provider) {
	            _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
	        });
	    };
	    Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return Array.from(this._transformedProviders.values());
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ sortedProviderTypes = this.transformProviders.map(function (provider) { return provider.token.identifier; });
	            var /** @type {?} */ sortedDirectives = this._directiveAsts.slice();
	            sortedDirectives.sort(function (dir1, dir2) { return sortedProviderTypes.indexOf(dir1.directive.type) -
	                sortedProviderTypes.indexOf(dir2.directive.type); });
	            return sortedDirectives;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._hasViewContainer; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProviderElementContext.prototype, "queryMatches", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ allMatches = [];
	            this._queriedTokens.forEach(function (matches) { allMatches.push.apply(allMatches, matches); });
	            return allMatches;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} token
	     * @param {?} defaultValue
	     * @param {?} queryReadTokens
	     * @return {?}
	     */
	    ProviderElementContext.prototype._addQueryReadsTo = function (token, defaultValue, queryReadTokens) {
	        this._getQueriesFor(token).forEach(function (query) {
	            var /** @type {?} */ queryValue = query.meta.read || defaultValue;
	            var /** @type {?} */ tokenRef = tokenReference(queryValue);
	            var /** @type {?} */ queryMatches = queryReadTokens.get(tokenRef);
	            if (!queryMatches) {
	                queryMatches = [];
	                queryReadTokens.set(tokenRef, queryMatches);
	            }
	            queryMatches.push({ queryId: query.queryId, value: queryValue });
	        });
	    };
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    ProviderElementContext.prototype._getQueriesFor = function (token) {
	        var /** @type {?} */ result = [];
	        var /** @type {?} */ currentEl = this;
	        var /** @type {?} */ distance = 0;
	        var /** @type {?} */ queries;
	        while (currentEl !== null) {
	            queries = currentEl._contentQueries.get(tokenReference(token));
	            if (queries) {
	                result.push.apply(result, queries.filter(function (query) { return query.meta.descendants || distance <= 1; }));
	            }
	            if (currentEl._directiveAsts.length > 0) {
	                distance++;
	            }
	            currentEl = currentEl._parent;
	        }
	        queries = this.viewContext.viewQueries.get(tokenReference(token));
	        if (queries) {
	            result.push.apply(result, queries);
	        }
	        return result;
	    };
	    /**
	     * @param {?} requestingProviderType
	     * @param {?} token
	     * @param {?} eager
	     * @return {?}
	     */
	    ProviderElementContext.prototype._getOrCreateLocalProvider = function (requestingProviderType, token, eager) {
	        var _this = this;
	        var /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));
	        if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive ||
	            requestingProviderType === ProviderAstType.PublicService) &&
	            resolvedProvider.providerType === ProviderAstType.PrivateService) ||
	            ((requestingProviderType === ProviderAstType.PrivateService ||
	                requestingProviderType === ProviderAstType.PublicService) &&
	                resolvedProvider.providerType === ProviderAstType.Builtin)) {
	            return null;
	        }
	        var /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));
	        if (transformedProviderAst) {
	            return transformedProviderAst;
	        }
	        if (this._seenProviders.get(tokenReference(token)) != null) {
	            this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), this._sourceSpan));
	            return null;
	        }
	        this._seenProviders.set(tokenReference(token), true);
	        var /** @type {?} */ transformedProviders = resolvedProvider.providers.map(function (provider) {
	            var /** @type {?} */ transformedUseValue = provider.useValue;
	            var /** @type {?} */ transformedUseExisting = provider.useExisting;
	            var /** @type {?} */ transformedDeps;
	            if (provider.useExisting != null) {
	                var /** @type {?} */ existingDiDep = _this._getDependency(resolvedProvider.providerType, { token: provider.useExisting }, eager);
	                if (existingDiDep.token != null) {
	                    transformedUseExisting = existingDiDep.token;
	                }
	                else {
	                    transformedUseExisting = null;
	                    transformedUseValue = existingDiDep.value;
	                }
	            }
	            else if (provider.useFactory) {
	                var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	                transformedDeps =
	                    deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	            }
	            else if (provider.useClass) {
	                var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	                transformedDeps =
	                    deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	            }
	            return _transformProvider(provider, {
	                useExisting: transformedUseExisting,
	                useValue: transformedUseValue,
	                deps: transformedDeps
	            });
	        });
	        transformedProviderAst =
	            _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	        this._transformedProviders.set(tokenReference(token), transformedProviderAst);
	        return transformedProviderAst;
	    };
	    /**
	     * @param {?} requestingProviderType
	     * @param {?} dep
	     * @param {?=} eager
	     * @return {?}
	     */
	    ProviderElementContext.prototype._getLocalDependency = function (requestingProviderType, dep, eager) {
	        if (eager === void 0) { eager = null; }
	        if (dep.isAttribute) {
	            var /** @type {?} */ attrValue = this._attrs[dep.token.value];
	            return { isValue: true, value: attrValue == null ? null : attrValue };
	        }
	        if (dep.token != null) {
	            // access builtints
	            if ((requestingProviderType === ProviderAstType.Directive ||
	                requestingProviderType === ProviderAstType.Component)) {
	                if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Renderer) ||
	                    tokenReference(dep.token) === resolveIdentifier(Identifiers.ElementRef) ||
	                    tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef) ||
	                    tokenReference(dep.token) === resolveIdentifier(Identifiers.TemplateRef)) {
	                    return dep;
	                }
	                if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ViewContainerRef)) {
	                    this._hasViewContainer = true;
	                }
	            }
	            // access the injector
	            if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) {
	                return dep;
	            }
	            // access providers
	            if (this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager) != null) {
	                return dep;
	            }
	        }
	        return null;
	    };
	    /**
	     * @param {?} requestingProviderType
	     * @param {?} dep
	     * @param {?=} eager
	     * @return {?}
	     */
	    ProviderElementContext.prototype._getDependency = function (requestingProviderType, dep, eager) {
	        if (eager === void 0) { eager = null; }
	        var /** @type {?} */ currElement = this;
	        var /** @type {?} */ currEager = eager;
	        var /** @type {?} */ result = null;
	        if (!dep.isSkipSelf) {
	            result = this._getLocalDependency(requestingProviderType, dep, eager);
	        }
	        if (dep.isSelf) {
	            if (!result && dep.isOptional) {
	                result = { isValue: true, value: null };
	            }
	        }
	        else {
	            // check parent elements
	            while (!result && currElement._parent) {
	                var /** @type {?} */ prevElement = currElement;
	                currElement = currElement._parent;
	                if (prevElement._isViewRoot) {
	                    currEager = false;
	                }
	                result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);
	            }
	            // check @Host restriction
	            if (!result) {
	                if (!dep.isHost || this.viewContext.component.isHost ||
	                    this.viewContext.component.type.reference === tokenReference(dep.token) ||
	                    this.viewContext.viewProviders.get(tokenReference(dep.token)) != null) {
	                    result = dep;
	                }
	                else {
	                    result = dep.isOptional ? result = { isValue: true, value: null } : null;
	                }
	            }
	        }
	        if (!result) {
	            this.viewContext.errors.push(new ProviderError("No provider for " + tokenName(dep.token), this._sourceSpan));
	        }
	        return result;
	    };
	    return ProviderElementContext;
	}());
	var NgModuleProviderAnalyzer = (function () {
	    /**
	     * @param {?} ngModule
	     * @param {?} extraProviders
	     * @param {?} sourceSpan
	     */
	    function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
	        var _this = this;
	        this._transformedProviders = new Map();
	        this._seenProviders = new Map();
	        this._errors = [];
	        this._allProviders = new Map();
	        ngModule.transitiveModule.modules.forEach(function (ngModuleType) {
	            var ngModuleProvider = { token: { identifier: ngModuleType }, useClass: ngModuleType };
	            _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);
	        });
	        _resolveProviders(ngModule.transitiveModule.providers.map(function (entry) { return entry.provider; }).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
	    }
	    /**
	     * @return {?}
	     */
	    NgModuleProviderAnalyzer.prototype.parse = function () {
	        var _this = this;
	        Array.from(this._allProviders.values()).forEach(function (provider) {
	            _this._getOrCreateLocalProvider(provider.token, provider.eager);
	        });
	        if (this._errors.length > 0) {
	            var /** @type {?} */ errorString = this._errors.join('\n');
	            throw new Error("Provider parse errors:\n" + errorString);
	        }
	        return Array.from(this._transformedProviders.values());
	    };
	    /**
	     * @param {?} token
	     * @param {?} eager
	     * @return {?}
	     */
	    NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function (token, eager) {
	        var _this = this;
	        var /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));
	        if (!resolvedProvider) {
	            return null;
	        }
	        var /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));
	        if (transformedProviderAst) {
	            return transformedProviderAst;
	        }
	        if (this._seenProviders.get(tokenReference(token)) != null) {
	            this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), resolvedProvider.sourceSpan));
	            return null;
	        }
	        this._seenProviders.set(tokenReference(token), true);
	        var /** @type {?} */ transformedProviders = resolvedProvider.providers.map(function (provider) {
	            var /** @type {?} */ transformedUseValue = provider.useValue;
	            var /** @type {?} */ transformedUseExisting = provider.useExisting;
	            var /** @type {?} */ transformedDeps;
	            if (provider.useExisting != null) {
	                var /** @type {?} */ existingDiDep = _this._getDependency({ token: provider.useExisting }, eager, resolvedProvider.sourceSpan);
	                if (existingDiDep.token != null) {
	                    transformedUseExisting = existingDiDep.token;
	                }
	                else {
	                    transformedUseExisting = null;
	                    transformedUseValue = existingDiDep.value;
	                }
	            }
	            else if (provider.useFactory) {
	                var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	                transformedDeps =
	                    deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	            }
	            else if (provider.useClass) {
	                var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	                transformedDeps =
	                    deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	            }
	            return _transformProvider(provider, {
	                useExisting: transformedUseExisting,
	                useValue: transformedUseValue,
	                deps: transformedDeps
	            });
	        });
	        transformedProviderAst =
	            _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	        this._transformedProviders.set(tokenReference(token), transformedProviderAst);
	        return transformedProviderAst;
	    };
	    /**
	     * @param {?} dep
	     * @param {?=} eager
	     * @param {?=} requestorSourceSpan
	     * @return {?}
	     */
	    NgModuleProviderAnalyzer.prototype._getDependency = function (dep, eager, requestorSourceSpan) {
	        if (eager === void 0) { eager = null; }
	        var /** @type {?} */ foundLocal = false;
	        if (!dep.isSkipSelf && dep.token != null) {
	            // access the injector
	            if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) ||
	                tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver)) {
	                foundLocal = true;
	            }
	            else if (this._getOrCreateLocalProvider(dep.token, eager) != null) {
	                foundLocal = true;
	            }
	        }
	        var /** @type {?} */ result = dep;
	        if (dep.isSelf && !foundLocal) {
	            if (dep.isOptional) {
	                result = { isValue: true, value: null };
	            }
	            else {
	                this._errors.push(new ProviderError("No provider for " + tokenName(dep.token), requestorSourceSpan));
	            }
	        }
	        return result;
	    };
	    return NgModuleProviderAnalyzer;
	}());
	/**
	 * @param {?} provider
	 * @param {?} __1
	 * @return {?}
	 */
	function _transformProvider(provider, _a) {
	    var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;
	    return {
	        token: provider.token,
	        useClass: provider.useClass,
	        useExisting: useExisting,
	        useFactory: provider.useFactory,
	        useValue: useValue,
	        deps: deps,
	        multi: provider.multi
	    };
	}
	/**
	 * @param {?} provider
	 * @param {?} __1
	 * @return {?}
	 */
	function _transformProviderAst(provider, _a) {
	    var eager = _a.eager, providers = _a.providers;
	    return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
	}
	/**
	 * @param {?} directives
	 * @param {?} sourceSpan
	 * @param {?} targetErrors
	 * @return {?}
	 */
	function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
	    var /** @type {?} */ providersByToken = new Map();
	    directives.forEach(function (directive) {
	        var /** @type {?} */ dirProvider = { token: { identifier: directive.type }, useClass: directive.type };
	        _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
	    });
	    // Note: directives need to be able to overwrite providers of a component!
	    var /** @type {?} */ directivesWithComponentFirst = directives.filter(function (dir) { return dir.isComponent; }).concat(directives.filter(function (dir) { return !dir.isComponent; }));
	    directivesWithComponentFirst.forEach(function (directive) {
	        _resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
	        _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
	    });
	    return providersByToken;
	}
	/**
	 * @param {?} providers
	 * @param {?} providerType
	 * @param {?} eager
	 * @param {?} sourceSpan
	 * @param {?} targetErrors
	 * @param {?} targetProvidersByToken
	 * @return {?}
	 */
	function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
	    providers.forEach(function (provider) {
	        var /** @type {?} */ resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));
	        if (resolvedProvider != null && !!resolvedProvider.multiProvider !== !!provider.multi) {
	            targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + tokenName(resolvedProvider.token), sourceSpan));
	        }
	        if (!resolvedProvider) {
	            var /** @type {?} */ lifecycleHooks = provider.token.identifier &&
	                ((provider.token.identifier)).lifecycleHooks ?
	                ((provider.token.identifier)).lifecycleHooks :
	                [];
	            var /** @type {?} */ isUseValue = !(provider.useClass || provider.useExisting || provider.useFactory);
	            resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || isUseValue, [provider], providerType, lifecycleHooks, sourceSpan);
	            targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);
	        }
	        else {
	            if (!provider.multi) {
	                resolvedProvider.providers.length = 0;
	            }
	            resolvedProvider.providers.push(provider);
	        }
	    });
	}
	/**
	 * @param {?} component
	 * @return {?}
	 */
	function _getViewQueries(component) {
	    // Note: queries start with id 1 so we can use the number in a Bloom filter!
	    var /** @type {?} */ viewQueryId = 1;
	    var /** @type {?} */ viewQueries = new Map();
	    if (component.viewQueries) {
	        component.viewQueries.forEach(function (query) { return _addQueryToTokenMap(viewQueries, { meta: query, queryId: viewQueryId++ }); });
	    }
	    return viewQueries;
	}
	/**
	 * @param {?} contentQueryStartId
	 * @param {?} directives
	 * @return {?}
	 */
	function _getContentQueries(contentQueryStartId, directives) {
	    var /** @type {?} */ contentQueryId = contentQueryStartId;
	    var /** @type {?} */ contentQueries = new Map();
	    directives.forEach(function (directive, directiveIndex) {
	        if (directive.queries) {
	            directive.queries.forEach(function (query) { return _addQueryToTokenMap(contentQueries, { meta: query, queryId: contentQueryId++ }); });
	        }
	    });
	    return contentQueries;
	}
	/**
	 * @param {?} map
	 * @param {?} query
	 * @return {?}
	 */
	function _addQueryToTokenMap(map, query) {
	    query.meta.selectors.forEach(function (token) {
	        var /** @type {?} */ entry = map.get(tokenReference(token));
	        if (!entry) {
	            entry = [];
	            map.set(tokenReference(token), entry);
	        }
	        entry.push(query);
	    });
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @abstract
	 */
	var ElementSchemaRegistry = (function () {
	    function ElementSchemaRegistry() {
	    }
	    /**
	     * @abstract
	     * @param {?} tagName
	     * @param {?} propName
	     * @param {?} schemaMetas
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) { };
	    /**
	     * @abstract
	     * @param {?} tagName
	     * @param {?} schemaMetas
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) { };
	    /**
	     * @abstract
	     * @param {?} elementName
	     * @param {?} propName
	     * @param {?} isAttribute
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.securityContext = function (elementName, propName, isAttribute) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.allKnownElementNames = function () { };
	    /**
	     * @abstract
	     * @param {?} propName
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.getMappedPropName = function (propName) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.validateProperty = function (name) { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.validateAttribute = function (name) { };
	    /**
	     * @abstract
	     * @param {?} propName
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) { };
	    /**
	     * @abstract
	     * @param {?} camelCaseProp
	     * @param {?} userProvidedProp
	     * @param {?} val
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) { };
	    return ElementSchemaRegistry;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var StyleWithImports = (function () {
	    /**
	     * @param {?} style
	     * @param {?} styleUrls
	     */
	    function StyleWithImports(style$$1, styleUrls) {
	        this.style = style$$1;
	        this.styleUrls = styleUrls;
	    }
	    return StyleWithImports;
	}());
	/**
	 * @param {?} url
	 * @return {?}
	 */
	function isStyleUrlResolvable(url) {
	    if (url == null || url.length === 0 || url[0] == '/')
	        return false;
	    var /** @type {?} */ schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);
	    return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
	}
	/**
	 * Rewrites stylesheets by resolving and removing the \@import urls that
	 * are either relative or don't have a `package:` scheme
	 * @param {?} resolver
	 * @param {?} baseUrl
	 * @param {?} cssText
	 * @return {?}
	 */
	function extractStyleUrls(resolver, baseUrl, cssText) {
	    var /** @type {?} */ foundUrls = [];
	    var /** @type {?} */ modifiedCssText = cssText.replace(CSS_COMMENT_REGEXP, '').replace(CSS_IMPORT_REGEXP, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i] = arguments[_i];
	        }
	        var /** @type {?} */ url = m[1] || m[2];
	        if (!isStyleUrlResolvable(url)) {
	            // Do not attempt to resolve non-package absolute URLs with URI scheme
	            return m[0];
	        }
	        foundUrls.push(resolver.resolve(baseUrl, url));
	        return '';
	    });
	    return new StyleWithImports(modifiedCssText, foundUrls);
	}
	var CSS_IMPORT_REGEXP = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
	var CSS_COMMENT_REGEXP = /\/\*.+?\*\//g;
	var URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var PROPERTY_PARTS_SEPARATOR = '.';
	var ATTRIBUTE_PREFIX = 'attr';
	var CLASS_PREFIX = 'class';
	var STYLE_PREFIX = 'style';
	var ANIMATE_PROP_PREFIX = 'animate-';
	var BoundPropertyType = {};
	BoundPropertyType.DEFAULT = 0;
	BoundPropertyType.LITERAL_ATTR = 1;
	BoundPropertyType.ANIMATION = 2;
	BoundPropertyType[BoundPropertyType.DEFAULT] = "DEFAULT";
	BoundPropertyType[BoundPropertyType.LITERAL_ATTR] = "LITERAL_ATTR";
	BoundPropertyType[BoundPropertyType.ANIMATION] = "ANIMATION";
	/**
	 * Represents a parsed property.
	 */
	var BoundProperty = (function () {
	    /**
	     * @param {?} name
	     * @param {?} expression
	     * @param {?} type
	     * @param {?} sourceSpan
	     */
	    function BoundProperty(name, expression, type, sourceSpan) {
	        this.name = name;
	        this.expression = expression;
	        this.type = type;
	        this.sourceSpan = sourceSpan;
	    }
	    Object.defineProperty(BoundProperty.prototype, "isLiteral", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.type === BoundPropertyType.LITERAL_ATTR; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BoundProperty.prototype, "isAnimation", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.type === BoundPropertyType.ANIMATION; },
	        enumerable: true,
	        configurable: true
	    });
	    return BoundProperty;
	}());
	/**
	 * Parses bindings in templates and in the directive host area.
	 */
	var BindingParser = (function () {
	    /**
	     * @param {?} _exprParser
	     * @param {?} _interpolationConfig
	     * @param {?} _schemaRegistry
	     * @param {?} pipes
	     * @param {?} _targetErrors
	     */
	    function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {
	        var _this = this;
	        this._exprParser = _exprParser;
	        this._interpolationConfig = _interpolationConfig;
	        this._schemaRegistry = _schemaRegistry;
	        this._targetErrors = _targetErrors;
	        this.pipesByName = new Map();
	        this._usedPipes = new Map();
	        pipes.forEach(function (pipe) { return _this.pipesByName.set(pipe.name, pipe); });
	    }
	    /**
	     * @return {?}
	     */
	    BindingParser.prototype.getUsedPipes = function () { return Array.from(this._usedPipes.values()); };
	    /**
	     * @param {?} dirMeta
	     * @param {?} elementSelector
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype.createDirectiveHostPropertyAsts = function (dirMeta, elementSelector, sourceSpan) {
	        var _this = this;
	        if (dirMeta.hostProperties) {
	            var /** @type {?} */ boundProps_1 = [];
	            Object.keys(dirMeta.hostProperties).forEach(function (propName) {
	                var /** @type {?} */ expression = dirMeta.hostProperties[propName];
	                if (typeof expression === 'string') {
	                    _this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps_1);
	                }
	                else {
	                    _this._reportError("Value of the host property binding \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                }
	            });
	            return boundProps_1.map(function (prop) { return _this.createElementPropertyAst(elementSelector, prop); });
	        }
	    };
	    /**
	     * @param {?} dirMeta
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype.createDirectiveHostEventAsts = function (dirMeta, sourceSpan) {
	        var _this = this;
	        if (dirMeta.hostListeners) {
	            var /** @type {?} */ targetEventAsts_1 = [];
	            Object.keys(dirMeta.hostListeners).forEach(function (propName) {
	                var /** @type {?} */ expression = dirMeta.hostListeners[propName];
	                if (typeof expression === 'string') {
	                    _this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1);
	                }
	                else {
	                    _this._reportError("Value of the host listener \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                }
	            });
	            return targetEventAsts_1;
	        }
	    };
	    /**
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype.parseInterpolation = function (value, sourceSpan) {
	        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	        try {
	            var /** @type {?} */ ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
	            if (ast)
	                this._reportExpressionParserErrors(ast.errors, sourceSpan);
	            this._checkPipes(ast, sourceSpan);
	            return ast;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	        }
	    };
	    /**
	     * @param {?} prefixToken
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetProps
	     * @param {?} targetVars
	     * @return {?}
	     */
	    BindingParser.prototype.parseInlineTemplateBinding = function (prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {
	        var /** @type {?} */ bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);
	        for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
	            var /** @type {?} */ binding = bindings[i];
	            if (binding.keyIsVar) {
	                targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));
	            }
	            else if (binding.expression) {
	                this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);
	            }
	            else {
	                targetMatchableAttrs.push([binding.key, '']);
	                this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);
	            }
	        }
	    };
	    /**
	     * @param {?} prefixToken
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype._parseTemplateBindings = function (prefixToken, value, sourceSpan) {
	        var _this = this;
	        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	        try {
	            var /** @type {?} */ bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);
	            this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
	            bindingsResult.templateBindings.forEach(function (binding) {
	                if (binding.expression) {
	                    _this._checkPipes(binding.expression, sourceSpan);
	                }
	            });
	            bindingsResult.warnings.forEach(function (warning) { _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING); });
	            return bindingsResult.templateBindings;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return [];
	        }
	    };
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetProps
	     * @return {?}
	     */
	    BindingParser.prototype.parseLiteralAttr = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
	        if (_isAnimationLabel(name)) {
	            name = name.substring(1);
	            if (value) {
	                this._reportError("Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid." +
	                    " Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.", sourceSpan, ParseErrorLevel.ERROR);
	            }
	            this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);
	        }
	        else {
	            targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR, sourceSpan));
	        }
	    };
	    /**
	     * @param {?} name
	     * @param {?} expression
	     * @param {?} isHost
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetProps
	     * @return {?}
	     */
	    BindingParser.prototype.parsePropertyBinding = function (name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {
	        var /** @type {?} */ isAnimationProp = false;
	        if (name.startsWith(ANIMATE_PROP_PREFIX)) {
	            isAnimationProp = true;
	            name = name.substring(ANIMATE_PROP_PREFIX.length);
	        }
	        else if (_isAnimationLabel(name)) {
	            isAnimationProp = true;
	            name = name.substring(1);
	        }
	        if (isAnimationProp) {
	            this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);
	        }
	        else {
	            this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
	        }
	    };
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetProps
	     * @return {?}
	     */
	    BindingParser.prototype.parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
	        var /** @type {?} */ expr = this.parseInterpolation(value, sourceSpan);
	        if (expr) {
	            this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
	            return true;
	        }
	        return false;
	    };
	    /**
	     * @param {?} name
	     * @param {?} ast
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetProps
	     * @return {?}
	     */
	    BindingParser.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
	        targetMatchableAttrs.push([name, ast.source]);
	        targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));
	    };
	    /**
	     * @param {?} name
	     * @param {?} expression
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetProps
	     * @return {?}
	     */
	    BindingParser.prototype._parseAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
	        // This will occur when a @trigger is not paired with an expression.
	        // For animations it is valid to not have an expression since */void
	        // states will be applied by angular when the element is attached/detached
	        var /** @type {?} */ ast = this._parseBinding(expression || 'null', false, sourceSpan);
	        targetMatchableAttrs.push([name, ast.source]);
	        targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));
	    };
	    /**
	     * @param {?} value
	     * @param {?} isHostBinding
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype._parseBinding = function (value, isHostBinding, sourceSpan) {
	        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	        try {
	            var /** @type {?} */ ast = isHostBinding ?
	                this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) :
	                this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
	            if (ast)
	                this._reportExpressionParserErrors(ast.errors, sourceSpan);
	            this._checkPipes(ast, sourceSpan);
	            return ast;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	        }
	    };
	    /**
	     * @param {?} elementSelector
	     * @param {?} boundProp
	     * @return {?}
	     */
	    BindingParser.prototype.createElementPropertyAst = function (elementSelector, boundProp) {
	        if (boundProp.isAnimation) {
	            return new BoundElementPropertyAst(boundProp.name, PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan);
	        }
	        var /** @type {?} */ unit = null;
	        var /** @type {?} */ bindingType;
	        var /** @type {?} */ boundPropertyName = null;
	        var /** @type {?} */ parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
	        var /** @type {?} */ securityContexts;
	        // Check check for special cases (prefix style, attr, class)
	        if (parts.length > 1) {
	            if (parts[0] == ATTRIBUTE_PREFIX) {
	                boundPropertyName = parts[1];
	                this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
	                securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
	                var /** @type {?} */ nsSeparatorIdx = boundPropertyName.indexOf(':');
	                if (nsSeparatorIdx > -1) {
	                    var /** @type {?} */ ns = boundPropertyName.substring(0, nsSeparatorIdx);
	                    var /** @type {?} */ name = boundPropertyName.substring(nsSeparatorIdx + 1);
	                    boundPropertyName = mergeNsAndName(ns, name);
	                }
	                bindingType = PropertyBindingType.Attribute;
	            }
	            else if (parts[0] == CLASS_PREFIX) {
	                boundPropertyName = parts[1];
	                bindingType = PropertyBindingType.Class;
	                securityContexts = [_angular_core.SecurityContext.NONE];
	            }
	            else if (parts[0] == STYLE_PREFIX) {
	                unit = parts.length > 2 ? parts[2] : null;
	                boundPropertyName = parts[1];
	                bindingType = PropertyBindingType.Style;
	                securityContexts = [_angular_core.SecurityContext.STYLE];
	            }
	        }
	        // If not a special case, use the full property name
	        if (boundPropertyName === null) {
	            boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);
	            securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);
	            bindingType = PropertyBindingType.Property;
	            this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);
	        }
	        return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan);
	    };
	    /**
	     * @param {?} name
	     * @param {?} expression
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetEvents
	     * @return {?}
	     */
	    BindingParser.prototype.parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	        if (_isAnimationLabel(name)) {
	            name = name.substr(1);
	            this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);
	        }
	        else {
	            this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);
	        }
	    };
	    /**
	     * @param {?} name
	     * @param {?} expression
	     * @param {?} sourceSpan
	     * @param {?} targetEvents
	     * @return {?}
	     */
	    BindingParser.prototype._parseAnimationEvent = function (name, expression, sourceSpan, targetEvents) {
	        var /** @type {?} */ matches = splitAtPeriod(name, [name, '']);
	        var /** @type {?} */ eventName = matches[0];
	        var /** @type {?} */ phase = matches[1].toLowerCase();
	        if (phase) {
	            switch (phase) {
	                case 'start':
	                case 'done':
	                    var /** @type {?} */ ast = this._parseAction(expression, sourceSpan);
	                    targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));
	                    break;
	                default:
	                    this._reportError("The provided animation output phase value \"" + phase + "\" for \"@" + eventName + "\" is not supported (use start or done)", sourceSpan);
	                    break;
	            }
	        }
	        else {
	            this._reportError("The animation trigger output event (@" + eventName + ") is missing its phase value name (start or done are currently supported)", sourceSpan);
	        }
	    };
	    /**
	     * @param {?} name
	     * @param {?} expression
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetEvents
	     * @return {?}
	     */
	    BindingParser.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	        // long format: 'target: eventName'
	        var _a = splitAtColon(name, [null, name]), target = _a[0], eventName = _a[1];
	        var /** @type {?} */ ast = this._parseAction(expression, sourceSpan);
	        targetMatchableAttrs.push([name, ast.source]);
	        targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));
	        // Don't detect directives for event names for now,
	        // so don't add the event name to the matchableAttrs
	    };
	    /**
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype._parseAction = function (value, sourceSpan) {
	        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	        try {
	            var /** @type {?} */ ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
	            if (ast) {
	                this._reportExpressionParserErrors(ast.errors, sourceSpan);
	            }
	            if (!ast || ast.ast instanceof EmptyExpr) {
	                this._reportError("Empty expressions are not allowed", sourceSpan);
	                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	            }
	            this._checkPipes(ast, sourceSpan);
	            return ast;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	        }
	    };
	    /**
	     * @param {?} message
	     * @param {?} sourceSpan
	     * @param {?=} level
	     * @return {?}
	     */
	    BindingParser.prototype._reportError = function (message, sourceSpan, level) {
	        if (level === void 0) { level = ParseErrorLevel.ERROR; }
	        this._targetErrors.push(new ParseError(sourceSpan, message, level));
	    };
	    /**
	     * @param {?} errors
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype._reportExpressionParserErrors = function (errors, sourceSpan) {
	        for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
	            var error = errors_1[_i];
	            this._reportError(error.message, sourceSpan);
	        }
	    };
	    /**
	     * @param {?} ast
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype._checkPipes = function (ast, sourceSpan) {
	        var _this = this;
	        if (ast) {
	            var /** @type {?} */ collector = new PipeCollector();
	            ast.visit(collector);
	            collector.pipes.forEach(function (ast, pipeName) {
	                var /** @type {?} */ pipeMeta = _this.pipesByName.get(pipeName);
	                if (!pipeMeta) {
	                    _this._reportError("The pipe '" + pipeName + "' could not be found", new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));
	                }
	                else {
	                    _this._usedPipes.set(pipeName, pipeMeta);
	                }
	            });
	        }
	    };
	    /**
	     * @param {?} propName the name of the property / attribute
	     * @param {?} sourceSpan
	     * @param {?} isAttr true when binding to an attribute
	     * @return {?}
	     */
	    BindingParser.prototype._validatePropertyOrAttributeName = function (propName, sourceSpan, isAttr) {
	        var /** @type {?} */ report = isAttr ? this._schemaRegistry.validateAttribute(propName) :
	            this._schemaRegistry.validateProperty(propName);
	        if (report.error) {
	            this._reportError(report.msg, sourceSpan, ParseErrorLevel.ERROR);
	        }
	    };
	    return BindingParser;
	}());
	var PipeCollector = (function (_super) {
	    __extends(PipeCollector, _super);
	    function PipeCollector() {
	        var _this = _super.apply(this, arguments) || this;
	        _this.pipes = new Map();
	        return _this;
	    }
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    PipeCollector.prototype.visitPipe = function (ast, context) {
	        this.pipes.set(ast.name, ast);
	        ast.exp.visit(this);
	        this.visitAll(ast.args, context);
	        return null;
	    };
	    return PipeCollector;
	}(RecursiveAstVisitor));
	/**
	 * @param {?} name
	 * @return {?}
	 */
	function _isAnimationLabel(name) {
	    return name[0] == '@';
	}
	/**
	 * @param {?} registry
	 * @param {?} selector
	 * @param {?} propName
	 * @param {?} isAttribute
	 * @return {?}
	 */
	function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
	    var /** @type {?} */ ctxs = [];
	    CssSelector.parse(selector).forEach(function (selector) {
	        var /** @type {?} */ elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();
	        var /** @type {?} */ notElementNames = new Set(selector.notSelectors.filter(function (selector) { return selector.isElementSelector(); })
	            .map(function (selector) { return selector.element; }));
	        var /** @type {?} */ possibleElementNames = elementNames.filter(function (elementName) { return !notElementNames.has(elementName); });
	        ctxs.push.apply(ctxs, possibleElementNames.map(function (elementName) { return registry.securityContext(elementName, propName, isAttribute); }));
	    });
	    return ctxs.length === 0 ? [_angular_core.SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NG_CONTENT_SELECT_ATTR = 'select';
	var NG_CONTENT_ELEMENT = 'ng-content';
	var LINK_ELEMENT = 'link';
	var LINK_STYLE_REL_ATTR = 'rel';
	var LINK_STYLE_HREF_ATTR = 'href';
	var LINK_STYLE_REL_VALUE = 'stylesheet';
	var STYLE_ELEMENT = 'style';
	var SCRIPT_ELEMENT = 'script';
	var NG_NON_BINDABLE_ATTR = 'ngNonBindable';
	var NG_PROJECT_AS = 'ngProjectAs';
	/**
	 * @param {?} ast
	 * @return {?}
	 */
	function preparseElement(ast) {
	    var /** @type {?} */ selectAttr = null;
	    var /** @type {?} */ hrefAttr = null;
	    var /** @type {?} */ relAttr = null;
	    var /** @type {?} */ nonBindable = false;
	    var /** @type {?} */ projectAs = null;
	    ast.attrs.forEach(function (attr) {
	        var /** @type {?} */ lcAttrName = attr.name.toLowerCase();
	        if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
	            selectAttr = attr.value;
	        }
	        else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
	            hrefAttr = attr.value;
	        }
	        else if (lcAttrName == LINK_STYLE_REL_ATTR) {
	            relAttr = attr.value;
	        }
	        else if (attr.name == NG_NON_BINDABLE_ATTR) {
	            nonBindable = true;
	        }
	        else if (attr.name == NG_PROJECT_AS) {
	            if (attr.value.length > 0) {
	                projectAs = attr.value;
	            }
	        }
	    });
	    selectAttr = normalizeNgContentSelect(selectAttr);
	    var /** @type {?} */ nodeName = ast.name.toLowerCase();
	    var /** @type {?} */ type = PreparsedElementType.OTHER;
	    if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
	        type = PreparsedElementType.NG_CONTENT;
	    }
	    else if (nodeName == STYLE_ELEMENT) {
	        type = PreparsedElementType.STYLE;
	    }
	    else if (nodeName == SCRIPT_ELEMENT) {
	        type = PreparsedElementType.SCRIPT;
	    }
	    else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
	        type = PreparsedElementType.STYLESHEET;
	    }
	    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
	}
	var PreparsedElementType = {};
	PreparsedElementType.NG_CONTENT = 0;
	PreparsedElementType.STYLE = 1;
	PreparsedElementType.STYLESHEET = 2;
	PreparsedElementType.SCRIPT = 3;
	PreparsedElementType.OTHER = 4;
	PreparsedElementType[PreparsedElementType.NG_CONTENT] = "NG_CONTENT";
	PreparsedElementType[PreparsedElementType.STYLE] = "STYLE";
	PreparsedElementType[PreparsedElementType.STYLESHEET] = "STYLESHEET";
	PreparsedElementType[PreparsedElementType.SCRIPT] = "SCRIPT";
	PreparsedElementType[PreparsedElementType.OTHER] = "OTHER";
	var PreparsedElement = (function () {
	    /**
	     * @param {?} type
	     * @param {?} selectAttr
	     * @param {?} hrefAttr
	     * @param {?} nonBindable
	     * @param {?} projectAs
	     */
	    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
	        this.type = type;
	        this.selectAttr = selectAttr;
	        this.hrefAttr = hrefAttr;
	        this.nonBindable = nonBindable;
	        this.projectAs = projectAs;
	    }
	    return PreparsedElement;
	}());
	/**
	 * @param {?} selectAttr
	 * @return {?}
	 */
	function normalizeNgContentSelect(selectAttr) {
	    if (selectAttr === null || selectAttr.length === 0) {
	        return '*';
	    }
	    return selectAttr;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
	// Group 1 = "bind-"
	var KW_BIND_IDX = 1;
	// Group 2 = "let-"
	var KW_LET_IDX = 2;
	// Group 3 = "ref-/#"
	var KW_REF_IDX = 3;
	// Group 4 = "on-"
	var KW_ON_IDX = 4;
	// Group 5 = "bindon-"
	var KW_BINDON_IDX = 5;
	// Group 6 = "@"
	var KW_AT_IDX = 6;
	// Group 7 = the identifier after "bind-", "let-", "ref-/#", "on-", "bindon-" or "@"
	var IDENT_KW_IDX = 7;
	// Group 8 = identifier inside [()]
	var IDENT_BANANA_BOX_IDX = 8;
	// Group 9 = identifier inside []
	var IDENT_PROPERTY_IDX = 9;
	// Group 10 = identifier inside ()
	var IDENT_EVENT_IDX = 10;
	var NG_TEMPLATE_ELEMENT = 'ng-template';
	// deprecated in 4.x
	var TEMPLATE_ELEMENT = 'template';
	// deprecated in 4.x
	var TEMPLATE_ATTR = 'template';
	var TEMPLATE_ATTR_PREFIX = '*';
	var CLASS_ATTR = 'class';
	var TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
	var TEMPLATE_ELEMENT_DEPRECATION_WARNING = 'The <template> element is deprecated. Use <ng-template> instead';
	var TEMPLATE_ATTR_DEPRECATION_WARNING = 'The template attribute is deprecated. Use an ng-template element instead.';
	var warningCounts = {};
	/**
	 * @param {?} warnings
	 * @return {?}
	 */
	function warnOnlyOnce(warnings) {
	    return function (error) {
	        if (warnings.indexOf(error.msg) !== -1) {
	            warningCounts[error.msg] = (warningCounts[error.msg] || 0) + 1;
	            return warningCounts[error.msg] <= 1;
	        }
	        return true;
	    };
	}
	/**
	 * Provides an array of {@link TemplateAstVisitor}s which will be used to transform
	 * parsed templates before compilation is invoked, allowing custom expression syntax
	 * and other advanced transformations.
	 *
	 * This is currently an internal-only feature and not meant for general use.
	 */
	var TEMPLATE_TRANSFORMS = new _angular_core.InjectionToken('TemplateTransforms');
	var TemplateParseError = (function (_super) {
	    __extends(TemplateParseError, _super);
	    /**
	     * @param {?} message
	     * @param {?} span
	     * @param {?} level
	     */
	    function TemplateParseError(message, span, level) {
	        return _super.call(this, span, message, level) || this;
	    }
	    return TemplateParseError;
	}(ParseError));
	var TemplateParseResult = (function () {
	    /**
	     * @param {?=} templateAst
	     * @param {?=} usedPipes
	     * @param {?=} errors
	     */
	    function TemplateParseResult(templateAst, usedPipes, errors) {
	        this.templateAst = templateAst;
	        this.usedPipes = usedPipes;
	        this.errors = errors;
	    }
	    return TemplateParseResult;
	}());
	var TemplateParser = (function () {
	    /**
	     * @param {?} _config
	     * @param {?} _exprParser
	     * @param {?} _schemaRegistry
	     * @param {?} _htmlParser
	     * @param {?} _console
	     * @param {?} transforms
	     */
	    function TemplateParser(_config, _exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
	        this._config = _config;
	        this._exprParser = _exprParser;
	        this._schemaRegistry = _schemaRegistry;
	        this._htmlParser = _htmlParser;
	        this._console = _console;
	        this.transforms = transforms;
	    }
	    /**
	     * @param {?} component
	     * @param {?} template
	     * @param {?} directives
	     * @param {?} pipes
	     * @param {?} schemas
	     * @param {?} templateUrl
	     * @return {?}
	     */
	    TemplateParser.prototype.parse = function (component, template, directives, pipes, schemas, templateUrl) {
	        var /** @type {?} */ result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
	        var /** @type {?} */ warnings = result.errors.filter(function (error) { return error.level === ParseErrorLevel.WARNING; }).filter(warnOnlyOnce([
	            TEMPLATE_ATTR_DEPRECATION_WARNING, TEMPLATE_ELEMENT_DEPRECATION_WARNING
	        ]));
	        var /** @type {?} */ errors = result.errors.filter(function (error) { return error.level === ParseErrorLevel.ERROR; });
	        if (warnings.length > 0) {
	            this._console.warn("Template parse warnings:\n" + warnings.join('\n'));
	        }
	        if (errors.length > 0) {
	            var /** @type {?} */ errorString = errors.join('\n');
	            throw syntaxError("Template parse errors:\n" + errorString);
	        }
	        return { template: result.templateAst, pipes: result.usedPipes };
	    };
	    /**
	     * @param {?} component
	     * @param {?} template
	     * @param {?} directives
	     * @param {?} pipes
	     * @param {?} schemas
	     * @param {?} templateUrl
	     * @return {?}
	     */
	    TemplateParser.prototype.tryParse = function (component, template, directives, pipes, schemas, templateUrl) {
	        return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, true, this.getInterpolationConfig(component))), component, template, directives, pipes, schemas, templateUrl);
	    };
	    /**
	     * @param {?} htmlAstWithErrors
	     * @param {?} component
	     * @param {?} template
	     * @param {?} directives
	     * @param {?} pipes
	     * @param {?} schemas
	     * @param {?} templateUrl
	     * @return {?}
	     */
	    TemplateParser.prototype.tryParseHtml = function (htmlAstWithErrors, component, template, directives, pipes, schemas, templateUrl) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ errors = htmlAstWithErrors.errors;
	        var /** @type {?} */ usedPipes = [];
	        if (htmlAstWithErrors.rootNodes.length > 0) {
	            var /** @type {?} */ uniqDirectives = removeSummaryDuplicates(directives);
	            var /** @type {?} */ uniqPipes = removeSummaryDuplicates(pipes);
	            var /** @type {?} */ providerViewContext = new ProviderViewContext(component);
	            var /** @type {?} */ interpolationConfig = void 0;
	            if (component.template && component.template.interpolation) {
	                interpolationConfig = {
	                    start: component.template.interpolation[0],
	                    end: component.template.interpolation[1]
	                };
	            }
	            var /** @type {?} */ bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);
	            var /** @type {?} */ parseVisitor = new TemplateParseVisitor(this._config, providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
	            result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
	            errors.push.apply(errors, providerViewContext.errors);
	            usedPipes.push.apply(usedPipes, bindingParser.getUsedPipes());
	        }
	        else {
	            result = [];
	        }
	        this._assertNoReferenceDuplicationOnTemplate(result, errors);
	        if (errors.length > 0) {
	            return new TemplateParseResult(result, usedPipes, errors);
	        }
	        if (this.transforms) {
	            this.transforms.forEach(function (transform) { result = templateVisitAll(transform, result); });
	        }
	        return new TemplateParseResult(result, usedPipes, errors);
	    };
	    /**
	     * @param {?} htmlAstWithErrors
	     * @param {?=} forced
	     * @return {?}
	     */
	    TemplateParser.prototype.expandHtml = function (htmlAstWithErrors, forced) {
	        if (forced === void 0) { forced = false; }
	        var /** @type {?} */ errors = htmlAstWithErrors.errors;
	        if (errors.length == 0 || forced) {
	            // Transform ICU messages to angular directives
	            var /** @type {?} */ expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
	            errors.push.apply(errors, expandedHtmlAst.errors);
	            htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
	        }
	        return htmlAstWithErrors;
	    };
	    /**
	     * @param {?} component
	     * @return {?}
	     */
	    TemplateParser.prototype.getInterpolationConfig = function (component) {
	        if (component.template) {
	            return InterpolationConfig.fromArray(component.template.interpolation);
	        }
	    };
	    /**
	     * \@internal
	     * @param {?} result
	     * @param {?} errors
	     * @return {?}
	     */
	    TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function (result, errors) {
	        var /** @type {?} */ existingReferences = [];
	        result.filter(function (element) { return !!((element)).references; })
	            .forEach(function (element) { return ((element)).references.forEach(function (reference) {
	            var /** @type {?} */ name = reference.name;
	            if (existingReferences.indexOf(name) < 0) {
	                existingReferences.push(name);
	            }
	            else {
	                var /** @type {?} */ error = new TemplateParseError("Reference \"#" + name + "\" is defined several times", reference.sourceSpan, ParseErrorLevel.ERROR);
	                errors.push(error);
	            }
	        }); });
	    };
	    return TemplateParser;
	}());
	TemplateParser.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	TemplateParser.ctorParameters = function () { return [
	    { type: CompilerConfig, },
	    { type: Parser, },
	    { type: ElementSchemaRegistry, },
	    { type: I18NHtmlParser, },
	    { type: _angular_core.ɵConsole, },
	    { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [TEMPLATE_TRANSFORMS,] },] },
	]; };
	var TemplateParseVisitor = (function () {
	    /**
	     * @param {?} config
	     * @param {?} providerViewContext
	     * @param {?} directives
	     * @param {?} _bindingParser
	     * @param {?} _schemaRegistry
	     * @param {?} _schemas
	     * @param {?} _targetErrors
	     */
	    function TemplateParseVisitor(config, providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
	        var _this = this;
	        this.config = config;
	        this.providerViewContext = providerViewContext;
	        this._bindingParser = _bindingParser;
	        this._schemaRegistry = _schemaRegistry;
	        this._schemas = _schemas;
	        this._targetErrors = _targetErrors;
	        this.selectorMatcher = new SelectorMatcher();
	        this.directivesIndex = new Map();
	        this.ngContentCount = 0;
	        // Note: queries start with id 1 so we can use the number in a Bloom filter!
	        this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1;
	        directives.forEach(function (directive, index) {
	            var selector = CssSelector.parse(directive.selector);
	            _this.selectorMatcher.addSelectables(selector, directive);
	            _this.directivesIndex.set(directive, index);
	        });
	    }
	    /**
	     * @param {?} expansion
	     * @param {?} context
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype.visitExpansion = function (expansion, context) { return null; };
	    /**
	     * @param {?} expansionCase
	     * @param {?} context
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return null; };
	    /**
	     * @param {?} text
	     * @param {?} parent
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype.visitText = function (text, parent) {
	        var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
	        var /** @type {?} */ expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);
	        return expr ? new BoundTextAst(expr, ngContentIndex, text.sourceSpan) :
	            new TextAst(text.value, ngContentIndex, text.sourceSpan);
	    };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype.visitAttribute = function (attribute, context) {
	        return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	    };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype.visitComment = function (comment, context) { return null; };
	    /**
	     * @param {?} element
	     * @param {?} parent
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype.visitElement = function (element, parent) {
	        var _this = this;
	        var /** @type {?} */ queryStartIndex = this.contentQueryStartId;
	        var /** @type {?} */ nodeName = element.name;
	        var /** @type {?} */ preparsedElement = preparseElement(element);
	        if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	            preparsedElement.type === PreparsedElementType.STYLE) {
	            // Skipping <script> for security reasons
	            // Skipping <style> as we already processed them
	            // in the StyleCompiler
	            return null;
	        }
	        if (preparsedElement.type === PreparsedElementType.STYLESHEET &&
	            isStyleUrlResolvable(preparsedElement.hrefAttr)) {
	            // Skipping stylesheets with either relative urls or package scheme as we already processed
	            // them in the StyleCompiler
	            return null;
	        }
	        var /** @type {?} */ matchableAttrs = [];
	        var /** @type {?} */ elementOrDirectiveProps = [];
	        var /** @type {?} */ elementOrDirectiveRefs = [];
	        var /** @type {?} */ elementVars = [];
	        var /** @type {?} */ events = [];
	        var /** @type {?} */ templateElementOrDirectiveProps = [];
	        var /** @type {?} */ templateMatchableAttrs = [];
	        var /** @type {?} */ templateElementVars = [];
	        var /** @type {?} */ hasInlineTemplates = false;
	        var /** @type {?} */ attrs = [];
	        var /** @type {?} */ isTemplateElement = isTemplate(element, this.config.enableLegacyTemplate, function (m, span) { return _this._reportError(m, span, ParseErrorLevel.WARNING); });
	        element.attrs.forEach(function (attr) {
	            var /** @type {?} */ hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
	            var /** @type {?} */ templateBindingsSource;
	            var /** @type {?} */ prefixToken;
	            var /** @type {?} */ normalizedName = _this._normalizeAttributeName(attr.name);
	            if (_this.config.enableLegacyTemplate && normalizedName == TEMPLATE_ATTR) {
	                _this._reportError(TEMPLATE_ATTR_DEPRECATION_WARNING, attr.sourceSpan, ParseErrorLevel.WARNING);
	                templateBindingsSource = attr.value;
	            }
	            else if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {
	                templateBindingsSource = attr.value;
	                prefixToken = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length) + ':';
	            }
	            var /** @type {?} */ hasTemplateBinding = templateBindingsSource != null;
	            if (hasTemplateBinding) {
	                if (hasInlineTemplates) {
	                    _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan);
	                }
	                hasInlineTemplates = true;
	                _this._bindingParser.parseInlineTemplateBinding(prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
	            }
	            if (!hasBinding && !hasTemplateBinding) {
	                // don't include the bindings as attributes as well in the AST
	                attrs.push(_this.visitAttribute(attr, null));
	                matchableAttrs.push([attr.name, attr.value]);
	            }
	        });
	        var /** @type {?} */ elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
	        var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector), directiveMetas = _a.directives, matchElement = _a.matchElement;
	        var /** @type {?} */ references = [];
	        var /** @type {?} */ boundDirectivePropNames = new Set();
	        var /** @type {?} */ directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references, boundDirectivePropNames);
	        var /** @type {?} */ elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, boundDirectivePropNames);
	        var /** @type {?} */ isViewRoot = parent.isTemplateElement || hasInlineTemplates;
	        var /** @type {?} */ providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, isTemplateElement, queryStartIndex, element.sourceSpan);
	        var /** @type {?} */ children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
	        providerContext.afterElement();
	        // Override the actual selector when the `ngProjectAs` attribute is provided
	        var /** @type {?} */ projectionSelector = preparsedElement.projectAs != null ?
	            CssSelector.parse(preparsedElement.projectAs)[0] :
	            elementCssSelector;
	        var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(projectionSelector);
	        var /** @type {?} */ parsedElement;
	        if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
	            if (element.children && !element.children.every(_isEmptyTextNode)) {
	                this._reportError("<ng-content> element cannot have content.", element.sourceSpan);
	            }
	            parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	        }
	        else if (isTemplateElement) {
	            this._assertAllEventsPublishedByDirectives(directiveAsts, events);
	            this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
	            parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	        }
	        else {
	            this._assertElementExists(matchElement, element);
	            this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
	            var /** @type {?} */ ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
	            parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan);
	        }
	        if (hasInlineTemplates) {
	            var /** @type {?} */ templateQueryStartIndex = this.contentQueryStartId;
	            var /** @type {?} */ templateSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
	            var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateSelector).directives;
	            var /** @type {?} */ templateBoundDirectivePropNames = new Set();
	            var /** @type {?} */ templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, [], templateBoundDirectivePropNames);
	            var /** @type {?} */ templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateBoundDirectivePropNames);
	            this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
	            var /** @type {?} */ templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], true, templateQueryStartIndex, element.sourceSpan);
	            templateProviderContext.afterElement();
	            parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches, [parsedElement], ngContentIndex, element.sourceSpan);
	        }
	        return parsedElement;
	    };
	    /**
	     * @param {?} isTemplateElement
	     * @param {?} attr
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetProps
	     * @param {?} targetEvents
	     * @param {?} targetRefs
	     * @param {?} targetVars
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._parseAttr = function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
	        var /** @type {?} */ name = this._normalizeAttributeName(attr.name);
	        var /** @type {?} */ value = attr.value;
	        var /** @type {?} */ srcSpan = attr.sourceSpan;
	        var /** @type {?} */ bindParts = name.match(BIND_NAME_REGEXP);
	        var /** @type {?} */ hasBinding = false;
	        if (bindParts !== null) {
	            hasBinding = true;
	            if (bindParts[KW_BIND_IDX] != null) {
	                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	            }
	            else if (bindParts[KW_LET_IDX]) {
	                if (isTemplateElement) {
	                    var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];
	                    this._parseVariable(identifier, value, srcSpan, targetVars);
	                }
	                else {
	                    this._reportError("\"let-\" is only supported on template elements.", srcSpan);
	                }
	            }
	            else if (bindParts[KW_REF_IDX]) {
	                var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];
	                this._parseReference(identifier, value, srcSpan, targetRefs);
	            }
	            else if (bindParts[KW_ON_IDX]) {
	                this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	            }
	            else if (bindParts[KW_BINDON_IDX]) {
	                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	            }
	            else if (bindParts[KW_AT_IDX]) {
	                this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
	            }
	            else if (bindParts[IDENT_BANANA_BOX_IDX]) {
	                this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	            }
	            else if (bindParts[IDENT_PROPERTY_IDX]) {
	                this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	            }
	            else if (bindParts[IDENT_EVENT_IDX]) {
	                this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	            }
	        }
	        else {
	            hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
	        }
	        if (!hasBinding) {
	            this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
	        }
	        return hasBinding;
	    };
	    /**
	     * @param {?} attrName
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
	        return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
	    };
	    /**
	     * @param {?} identifier
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @param {?} targetVars
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {
	        if (identifier.indexOf('-') > -1) {
	            this._reportError("\"-\" is not allowed in variable names", sourceSpan);
	        }
	        targetVars.push(new VariableAst(identifier, value, sourceSpan));
	    };
	    /**
	     * @param {?} identifier
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @param {?} targetRefs
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._parseReference = function (identifier, value, sourceSpan, targetRefs) {
	        if (identifier.indexOf('-') > -1) {
	            this._reportError("\"-\" is not allowed in reference names", sourceSpan);
	        }
	        targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
	    };
	    /**
	     * @param {?} name
	     * @param {?} expression
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetEvents
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	        this._bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
	    };
	    /**
	     * @param {?} selectorMatcher
	     * @param {?} elementCssSelector
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
	        var _this = this;
	        // Need to sort the directives so that we get consistent results throughout,
	        // as selectorMatcher uses Maps inside.
	        // Also deduplicate directives as they might match more than one time!
	        var /** @type {?} */ directives = new Array(this.directivesIndex.size);
	        // Whether any directive selector matches on the element name
	        var /** @type {?} */ matchElement = false;
	        selectorMatcher.match(elementCssSelector, function (selector, directive) {
	            directives[_this.directivesIndex.get(directive)] = directive;
	            matchElement = matchElement || selector.hasElementSelector();
	        });
	        return {
	            directives: directives.filter(function (dir) { return !!dir; }),
	            matchElement: matchElement,
	        };
	    };
	    /**
	     * @param {?} isTemplateElement
	     * @param {?} elementName
	     * @param {?} directives
	     * @param {?} props
	     * @param {?} elementOrDirectiveRefs
	     * @param {?} elementSourceSpan
	     * @param {?} targetReferences
	     * @param {?} targetBoundDirectivePropNames
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._createDirectiveAsts = function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences, targetBoundDirectivePropNames) {
	        var _this = this;
	        var /** @type {?} */ matchedReferences = new Set();
	        var /** @type {?} */ component = null;
	        var /** @type {?} */ directiveAsts = directives.map(function (directive) {
	            var /** @type {?} */ sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + identifierName(directive.type));
	            if (directive.isComponent) {
	                component = directive;
	            }
	            var /** @type {?} */ directiveProperties = [];
	            var /** @type {?} */ hostProperties = _this._bindingParser.createDirectiveHostPropertyAsts(directive, elementName, sourceSpan);
	            // Note: We need to check the host properties here as well,
	            // as we don't know the element name in the DirectiveWrapperCompiler yet.
	            hostProperties = _this._checkPropertiesInSchema(elementName, hostProperties);
	            var /** @type {?} */ hostEvents = _this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);
	            _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties, targetBoundDirectivePropNames);
	            elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	                if ((elOrDirRef.value.length === 0 && directive.isComponent) ||
	                    (directive.exportAs == elOrDirRef.value)) {
	                    targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
	                    matchedReferences.add(elOrDirRef.name);
	                }
	            });
	            var /** @type {?} */ contentQueryStartId = _this.contentQueryStartId;
	            _this.contentQueryStartId += directive.queries.length;
	            return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId, sourceSpan);
	        });
	        elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	            if (elOrDirRef.value.length > 0) {
	                if (!matchedReferences.has(elOrDirRef.name)) {
	                    _this._reportError("There is no directive with \"exportAs\" set to \"" + elOrDirRef.value + "\"", elOrDirRef.sourceSpan);
	                }
	            }
	            else if (!component) {
	                var /** @type {?} */ refToken = null;
	                if (isTemplateElement) {
	                    refToken = createIdentifierToken(Identifiers.TemplateRef);
	                }
	                targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
	            }
	        });
	        return directiveAsts;
	    };
	    /**
	     * @param {?} directiveProperties
	     * @param {?} boundProps
	     * @param {?} targetBoundDirectiveProps
	     * @param {?} targetBoundDirectivePropNames
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps, targetBoundDirectivePropNames) {
	        if (directiveProperties) {
	            var /** @type {?} */ boundPropsByName_1 = new Map();
	            boundProps.forEach(function (boundProp) {
	                var /** @type {?} */ prevValue = boundPropsByName_1.get(boundProp.name);
	                if (!prevValue || prevValue.isLiteral) {
	                    // give [a]="b" a higher precedence than a="b" on the same element
	                    boundPropsByName_1.set(boundProp.name, boundProp);
	                }
	            });
	            Object.keys(directiveProperties).forEach(function (dirProp) {
	                var /** @type {?} */ elProp = directiveProperties[dirProp];
	                var /** @type {?} */ boundProp = boundPropsByName_1.get(elProp);
	                // Bindings are optional, so this binding only needs to be set up if an expression is given.
	                if (boundProp) {
	                    targetBoundDirectivePropNames.add(boundProp.name);
	                    if (!isEmptyExpression(boundProp.expression)) {
	                        targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
	                    }
	                }
	            });
	        }
	    };
	    /**
	     * @param {?} elementName
	     * @param {?} props
	     * @param {?} boundDirectivePropNames
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, boundDirectivePropNames) {
	        var _this = this;
	        var /** @type {?} */ boundElementProps = [];
	        props.forEach(function (prop) {
	            if (!prop.isLiteral && !boundDirectivePropNames.has(prop.name)) {
	                boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop));
	            }
	        });
	        return this._checkPropertiesInSchema(elementName, boundElementProps);
	    };
	    /**
	     * @param {?} directives
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._findComponentDirectives = function (directives) {
	        return directives.filter(function (directive) { return directive.directive.isComponent; });
	    };
	    /**
	     * @param {?} directives
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
	        return this._findComponentDirectives(directives)
	            .map(function (directive) { return identifierName(directive.directive.type); });
	    };
	    /**
	     * @param {?} directives
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {
	        var /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);
	        if (componentTypeNames.length > 1) {
	            this._reportError("More than one component matched on this element.\n" +
	                "Make sure that only one component's selector can match a given element.\n" +
	                ("Conflicting components: " + componentTypeNames.join(',')), sourceSpan);
	        }
	    };
	    /**
	     * Make sure that non-angular tags conform to the schemas.
	     *
	     * Note: An element is considered an angular tag when at least one directive selector matches the
	     * tag name.
	     *
	     * @param {?} matchElement Whether any directive has matched on the tag name
	     * @param {?} element the html element
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._assertElementExists = function (matchElement, element) {
	        var /** @type {?} */ elName = element.name.replace(/^:xhtml:/, '');
	        if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
	            var /** @type {?} */ errorMsg = "'" + elName + "' is not a known element:\n";
	            errorMsg +=
	                "1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n";
	            if (elName.indexOf('-') > -1) {
	                errorMsg +=
	                    "2. If '" + elName + "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.";
	            }
	            else {
	                errorMsg +=
	                    "2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
	            }
	            this._reportError(errorMsg, element.sourceSpan);
	        }
	    };
	    /**
	     * @param {?} directives
	     * @param {?} elementProps
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {
	        var _this = this;
	        var /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);
	        if (componentTypeNames.length > 0) {
	            this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
	        }
	        elementProps.forEach(function (prop) {
	            _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".", sourceSpan);
	        });
	    };
	    /**
	     * @param {?} directives
	     * @param {?} events
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {
	        var _this = this;
	        var /** @type {?} */ allDirectiveEvents = new Set();
	        directives.forEach(function (directive) {
	            Object.keys(directive.directive.outputs).forEach(function (k) {
	                var /** @type {?} */ eventName = directive.directive.outputs[k];
	                allDirectiveEvents.add(eventName);
	            });
	        });
	        events.forEach(function (event) {
	            if (event.target != null || !allDirectiveEvents.has(event.name)) {
	                _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".", event.sourceSpan);
	            }
	        });
	    };
	    /**
	     * @param {?} elementName
	     * @param {?} boundProps
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._checkPropertiesInSchema = function (elementName, boundProps) {
	        var _this = this;
	        // Note: We can't filter out empty expressions before this method,
	        // as we still want to validate them!
	        return boundProps.filter(function (boundProp) {
	            if (boundProp.type === PropertyBindingType.Property &&
	                !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {
	                var /** @type {?} */ errorMsg = "Can't bind to '" + boundProp.name + "' since it isn't a known property of '" + elementName + "'.";
	                if (elementName.startsWith('ng-')) {
	                    errorMsg +=
	                        "\n1. If '" + boundProp.name + "' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component." +
	                            "\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
	                }
	                else if (elementName.indexOf('-') > -1) {
	                    errorMsg +=
	                        "\n1. If '" + elementName + "' is an Angular component and it has '" + boundProp.name + "' input, then verify that it is part of this module." +
	                            ("\n2. If '" + elementName + "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.") +
	                            "\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
	                }
	                _this._reportError(errorMsg, boundProp.sourceSpan);
	            }
	            return !isEmptyExpression(boundProp.value);
	        });
	    };
	    /**
	     * @param {?} message
	     * @param {?} sourceSpan
	     * @param {?=} level
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._reportError = function (message, sourceSpan, level) {
	        if (level === void 0) { level = ParseErrorLevel.ERROR; }
	        this._targetErrors.push(new ParseError(sourceSpan, message, level));
	    };
	    return TemplateParseVisitor;
	}());
	var NonBindableVisitor = (function () {
	    function NonBindableVisitor() {
	    }
	    /**
	     * @param {?} ast
	     * @param {?} parent
	     * @return {?}
	     */
	    NonBindableVisitor.prototype.visitElement = function (ast, parent) {
	        var /** @type {?} */ preparsedElement = preparseElement(ast);
	        if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	            preparsedElement.type === PreparsedElementType.STYLE ||
	            preparsedElement.type === PreparsedElementType.STYLESHEET) {
	            // Skipping <script> for security reasons
	            // Skipping <style> and stylesheets as we already processed them
	            // in the StyleCompiler
	            return null;
	        }
	        var /** @type {?} */ attrNameAndValues = ast.attrs.map(function (attr) { return [attr.name, attr.value]; });
	        var /** @type {?} */ selector = createElementCssSelector(ast.name, attrNameAndValues);
	        var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(selector);
	        var /** @type {?} */ children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
	        return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, [], children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
	    };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    NonBindableVisitor.prototype.visitComment = function (comment, context) { return null; };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    NonBindableVisitor.prototype.visitAttribute = function (attribute, context) {
	        return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	    };
	    /**
	     * @param {?} text
	     * @param {?} parent
	     * @return {?}
	     */
	    NonBindableVisitor.prototype.visitText = function (text, parent) {
	        var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
	        return new TextAst(text.value, ngContentIndex, text.sourceSpan);
	    };
	    /**
	     * @param {?} expansion
	     * @param {?} context
	     * @return {?}
	     */
	    NonBindableVisitor.prototype.visitExpansion = function (expansion, context) { return expansion; };
	    /**
	     * @param {?} expansionCase
	     * @param {?} context
	     * @return {?}
	     */
	    NonBindableVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return expansionCase; };
	    return NonBindableVisitor;
	}());
	var ElementOrDirectiveRef = (function () {
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function ElementOrDirectiveRef(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    return ElementOrDirectiveRef;
	}());
	/**
	 * @param {?} classAttrValue
	 * @return {?}
	 */
	function splitClasses(classAttrValue) {
	    return classAttrValue.trim().split(/\s+/g);
	}
	var ElementContext = (function () {
	    /**
	     * @param {?} isTemplateElement
	     * @param {?} _ngContentIndexMatcher
	     * @param {?} _wildcardNgContentIndex
	     * @param {?} providerContext
	     */
	    function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
	        this.isTemplateElement = isTemplateElement;
	        this._ngContentIndexMatcher = _ngContentIndexMatcher;
	        this._wildcardNgContentIndex = _wildcardNgContentIndex;
	        this.providerContext = providerContext;
	    }
	    /**
	     * @param {?} isTemplateElement
	     * @param {?} directives
	     * @param {?} providerContext
	     * @return {?}
	     */
	    ElementContext.create = function (isTemplateElement, directives, providerContext) {
	        var /** @type {?} */ matcher = new SelectorMatcher();
	        var /** @type {?} */ wildcardNgContentIndex = null;
	        var /** @type {?} */ component = directives.find(function (directive) { return directive.directive.isComponent; });
	        if (component) {
	            var /** @type {?} */ ngContentSelectors = component.directive.template.ngContentSelectors;
	            for (var /** @type {?} */ i = 0; i < ngContentSelectors.length; i++) {
	                var /** @type {?} */ selector = ngContentSelectors[i];
	                if (selector === '*') {
	                    wildcardNgContentIndex = i;
	                }
	                else {
	                    matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
	                }
	            }
	        }
	        return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
	    };
	    /**
	     * @param {?} selector
	     * @return {?}
	     */
	    ElementContext.prototype.findNgContentIndex = function (selector) {
	        var /** @type {?} */ ngContentIndices = [];
	        this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });
	        ngContentIndices.sort();
	        if (this._wildcardNgContentIndex != null) {
	            ngContentIndices.push(this._wildcardNgContentIndex);
	        }
	        return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
	    };
	    return ElementContext;
	}());
	/**
	 * @param {?} elementName
	 * @param {?} attributes
	 * @return {?}
	 */
	function createElementCssSelector(elementName, attributes) {
	    var /** @type {?} */ cssSelector = new CssSelector();
	    var /** @type {?} */ elNameNoNs = splitNsName(elementName)[1];
	    cssSelector.setElement(elNameNoNs);
	    for (var /** @type {?} */ i = 0; i < attributes.length; i++) {
	        var /** @type {?} */ attrName = attributes[i][0];
	        var /** @type {?} */ attrNameNoNs = splitNsName(attrName)[1];
	        var /** @type {?} */ attrValue = attributes[i][1];
	        cssSelector.addAttribute(attrNameNoNs, attrValue);
	        if (attrName.toLowerCase() == CLASS_ATTR) {
	            var /** @type {?} */ classes = splitClasses(attrValue);
	            classes.forEach(function (className) { return cssSelector.addClassName(className); });
	        }
	    }
	    return cssSelector;
	}
	var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
	var NON_BINDABLE_VISITOR = new NonBindableVisitor();
	/**
	 * @param {?} node
	 * @return {?}
	 */
	function _isEmptyTextNode(node) {
	    return node instanceof Text && node.value.trim().length == 0;
	}
	/**
	 * @template T
	 * @param {?} items
	 * @return {?}
	 */
	function removeSummaryDuplicates(items) {
	    var /** @type {?} */ map = new Map();
	    items.forEach(function (item) {
	        if (!map.get(item.type.reference)) {
	            map.set(item.type.reference, item);
	        }
	    });
	    return Array.from(map.values());
	}
	/**
	 * @param {?} ast
	 * @return {?}
	 */
	function isEmptyExpression(ast) {
	    if (ast instanceof ASTWithSource) {
	        ast = ast.ast;
	    }
	    return ast instanceof EmptyExpr;
	}
	/**
	 * @param {?} el
	 * @param {?} enableLegacyTemplate
	 * @param {?} reportDeprecation
	 * @return {?}
	 */
	function isTemplate(el, enableLegacyTemplate, reportDeprecation) {
	    var /** @type {?} */ tagNoNs = splitNsName(el.name)[1];
	    // `<ng-template>` is an angular construct and is lower case
	    if (tagNoNs === NG_TEMPLATE_ELEMENT)
	        return true;
	    // `<template>` is HTML and case insensitive
	    if (tagNoNs.toLowerCase() === TEMPLATE_ELEMENT) {
	        if (enableLegacyTemplate && tagNoNs.toLowerCase() === TEMPLATE_ELEMENT) {
	            reportDeprecation(TEMPLATE_ELEMENT_DEPRECATION_WARNING, el.sourceSpan);
	            return true;
	        }
	        return false;
	    }
	}
	/**
	 * An interface for retrieving documents by URL that the compiler uses
	 * to load templates.
	 */
	var ResourceLoader = (function () {
	    function ResourceLoader() {
	    }
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    ResourceLoader.prototype.get = function (url) { return null; };
	    return ResourceLoader;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Create a {\@link UrlResolver} with no package prefix.
	 * @return {?}
	 */
	function createUrlResolverWithoutPackagePrefix() {
	    return new UrlResolver();
	}
	/**
	 * @return {?}
	 */
	function createOfflineCompileUrlResolver() {
	    return new UrlResolver('.');
	}
	/**
	 * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
	 */
	var DEFAULT_PACKAGE_URL_PROVIDER = {
	    provide: _angular_core.PACKAGE_ROOT_URL,
	    useValue: '/'
	};
	/**
	 * Used by the {\@link Compiler} when resolving HTML and CSS template URLs.
	 *
	 * This class can be overridden by the application developer to create custom behavior.
	 *
	 * See {\@link Compiler}
	 *
	 * ## Example
	 *
	 * {\@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}
	 *
	 * \@security When compiling templates at runtime, you must
	 * ensure that the entire template comes from a trusted source.
	 * Attacker-controlled data introduced by a template could expose your
	 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	 */
	var UrlResolver = (function () {
	    /**
	     * @param {?=} _packagePrefix
	     */
	    function UrlResolver(_packagePrefix) {
	        if (_packagePrefix === void 0) { _packagePrefix = null; }
	        this._packagePrefix = _packagePrefix;
	    }
	    /**
	     * Resolves the `url` given the `baseUrl`:
	     * - when the `url` is null, the `baseUrl` is returned,
	     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
	     * `baseUrl` and `url`,
	     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
	     * returned as is (ignoring the `baseUrl`)
	     * @param {?} baseUrl
	     * @param {?} url
	     * @return {?}
	     */
	    UrlResolver.prototype.resolve = function (baseUrl, url) {
	        var /** @type {?} */ resolvedUrl = url;
	        if (baseUrl != null && baseUrl.length > 0) {
	            resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
	        }
	        var /** @type {?} */ resolvedParts = _split(resolvedUrl);
	        var /** @type {?} */ prefix = this._packagePrefix;
	        if (prefix != null && resolvedParts != null &&
	            resolvedParts[_ComponentIndex.Scheme] == 'package') {
	            var /** @type {?} */ path = resolvedParts[_ComponentIndex.Path];
	            prefix = prefix.replace(/\/+$/, '');
	            path = path.replace(/^\/+/, '');
	            return prefix + "/" + path;
	        }
	        return resolvedUrl;
	    };
	    return UrlResolver;
	}());
	UrlResolver.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	UrlResolver.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.PACKAGE_ROOT_URL,] },] },
	]; };
	/**
	 * Extract the scheme of a URL.
	 * @param {?} url
	 * @return {?}
	 */
	function getUrlScheme(url) {
	    var /** @type {?} */ match = _split(url);
	    return (match && match[_ComponentIndex.Scheme]) || '';
	}
	/**
	 * Builds a URI string from already-encoded parts.
	 *
	 * No encoding is performed.  Any component may be omitted as either null or
	 * undefined.
	 *
	 * @param {?=} opt_scheme The scheme such as 'http'.
	 * @param {?=} opt_userInfo The user name before the '\@'.
	 * @param {?=} opt_domain The domain such as 'www.google.com', already
	 *     URI-encoded.
	 * @param {?=} opt_port The port number.
	 * @param {?=} opt_path The path, already URI-encoded.  If it is not
	 *     empty, it must begin with a slash.
	 * @param {?=} opt_queryData The URI-encoded query data.
	 * @param {?=} opt_fragment The URI-encoded fragment identifier.
	 * @return {?} The fully combined URI.
	 */
	function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
	    var /** @type {?} */ out = [];
	    if (opt_scheme != null) {
	        out.push(opt_scheme + ':');
	    }
	    if (opt_domain != null) {
	        out.push('//');
	        if (opt_userInfo != null) {
	            out.push(opt_userInfo + '@');
	        }
	        out.push(opt_domain);
	        if (opt_port != null) {
	            out.push(':' + opt_port);
	        }
	    }
	    if (opt_path != null) {
	        out.push(opt_path);
	    }
	    if (opt_queryData != null) {
	        out.push('?' + opt_queryData);
	    }
	    if (opt_fragment != null) {
	        out.push('#' + opt_fragment);
	    }
	    return out.join('');
	}
	/**
	 * A regular expression for breaking a URI into its component parts.
	 *
	 * {\@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
	 * As the "first-match-wins" algorithm is identical to the "greedy"
	 * disambiguation method used by POSIX regular expressions, it is natural and
	 * commonplace to use a regular expression for parsing the potential five
	 * components of a URI reference.
	 *
	 * The following line is the regular expression for breaking-down a
	 * well-formed URI reference into its components.
	 *
	 * <pre>
	 * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
	 *  12            3  4          5       6  7        8 9
	 * </pre>
	 *
	 * The numbers in the second line above are only to assist readability; they
	 * indicate the reference points for each subexpression (i.e., each paired
	 * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
	 * For example, matching the above expression to
	 * <pre>
	 *     http://www.ics.uci.edu/pub/ietf/uri/#Related
	 * </pre>
	 * results in the following subexpression matches:
	 * <pre>
	 *    $1 = http:
	 *    $2 = http
	 *    $3 = //www.ics.uci.edu
	 *    $4 = www.ics.uci.edu
	 *    $5 = /pub/ietf/uri/
	 *    $6 = <undefined>
	 *    $7 = <undefined>
	 *    $8 = #Related
	 *    $9 = Related
	 * </pre>
	 * where <undefined> indicates that the component is not present, as is the
	 * case for the query component in the above example. Therefore, we can
	 * determine the value of the five components as
	 * <pre>
	 *    scheme    = $2
	 *    authority = $4
	 *    path      = $5
	 *    query     = $7
	 *    fragment  = $9
	 * </pre>
	 *
	 * The regular expression has been modified slightly to expose the
	 * userInfo, domain, and port separately from the authority.
	 * The modified version yields
	 * <pre>
	 *    $1 = http              scheme
	 *    $2 = <undefined>       userInfo -\
	 *    $3 = www.ics.uci.edu   domain     | authority
	 *    $4 = <undefined>       port     -/
	 *    $5 = /pub/ietf/uri/    path
	 *    $6 = <undefined>       query without ?
	 *    $7 = Related           fragment without #
	 * </pre>
	 * \@internal
	 */
	var _splitRe = new RegExp('^' +
	    '(?:' +
	    '([^:/?#.]+)' +
	    // used by other URL parts such as :,
	    // ?, /, #, and .
	    ':)?' +
	    '(?://' +
	    '(?:([^/?#]*)@)?' +
	    '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
	    // digits, dashes, dots, percent
	    // escapes, and unicode characters.
	    '(?::([0-9]+))?' +
	    ')?' +
	    '([^?#]+)?' +
	    '(?:\\?([^#]*))?' +
	    '(?:#(.*))?' +
	    '$');
	var _ComponentIndex = {};
	_ComponentIndex.Scheme = 1;
	_ComponentIndex.UserInfo = 2;
	_ComponentIndex.Domain = 3;
	_ComponentIndex.Port = 4;
	_ComponentIndex.Path = 5;
	_ComponentIndex.QueryData = 6;
	_ComponentIndex.Fragment = 7;
	_ComponentIndex[_ComponentIndex.Scheme] = "Scheme";
	_ComponentIndex[_ComponentIndex.UserInfo] = "UserInfo";
	_ComponentIndex[_ComponentIndex.Domain] = "Domain";
	_ComponentIndex[_ComponentIndex.Port] = "Port";
	_ComponentIndex[_ComponentIndex.Path] = "Path";
	_ComponentIndex[_ComponentIndex.QueryData] = "QueryData";
	_ComponentIndex[_ComponentIndex.Fragment] = "Fragment";
	/**
	 * Splits a URI into its component parts.
	 *
	 * Each component can be accessed via the component indices; for example:
	 * <pre>
	 * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
	 * </pre>
	 *
	 * @param {?} uri The URI string to examine.
	 * @return {?} Each component still URI-encoded.
	 *     Each component that is present will contain the encoded value, whereas
	 *     components that are not present will be undefined or empty, depending
	 *     on the browser's regular expression implementation.  Never null, since
	 *     arbitrary strings may still look like path names.
	 */
	function _split(uri) {
	    return uri.match(_splitRe);
	}
	/**
	 * Removes dot segments in given path component, as described in
	 * RFC 3986, section 5.2.4.
	 *
	 * @param {?} path A non-empty path component.
	 * @return {?} Path component with removed dot segments.
	 */
	function _removeDotSegments(path) {
	    if (path == '/')
	        return '/';
	    var /** @type {?} */ leadingSlash = path[0] == '/' ? '/' : '';
	    var /** @type {?} */ trailingSlash = path[path.length - 1] === '/' ? '/' : '';
	    var /** @type {?} */ segments = path.split('/');
	    var /** @type {?} */ out = [];
	    var /** @type {?} */ up = 0;
	    for (var /** @type {?} */ pos = 0; pos < segments.length; pos++) {
	        var /** @type {?} */ segment = segments[pos];
	        switch (segment) {
	            case '':
	            case '.':
	                break;
	            case '..':
	                if (out.length > 0) {
	                    out.pop();
	                }
	                else {
	                    up++;
	                }
	                break;
	            default:
	                out.push(segment);
	        }
	    }
	    if (leadingSlash == '') {
	        while (up-- > 0) {
	            out.unshift('..');
	        }
	        if (out.length === 0)
	            out.push('.');
	    }
	    return leadingSlash + out.join('/') + trailingSlash;
	}
	/**
	 * Takes an array of the parts from split and canonicalizes the path part
	 * and then joins all the parts.
	 * @param {?} parts
	 * @return {?}
	 */
	function _joinAndCanonicalizePath(parts) {
	    var /** @type {?} */ path = parts[_ComponentIndex.Path];
	    path = path == null ? '' : _removeDotSegments(path);
	    parts[_ComponentIndex.Path] = path;
	    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
	}
	/**
	 * Resolves a URL.
	 * @param {?} base The URL acting as the base URL.
	 * @param {?} url
	 * @return {?}
	 */
	function _resolveUrl(base, url) {
	    var /** @type {?} */ parts = _split(encodeURI(url));
	    var /** @type {?} */ baseParts = _split(base);
	    if (parts[_ComponentIndex.Scheme] != null) {
	        return _joinAndCanonicalizePath(parts);
	    }
	    else {
	        parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
	    }
	    for (var /** @type {?} */ i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
	        if (parts[i] == null) {
	            parts[i] = baseParts[i];
	        }
	    }
	    if (parts[_ComponentIndex.Path][0] == '/') {
	        return _joinAndCanonicalizePath(parts);
	    }
	    var /** @type {?} */ path = baseParts[_ComponentIndex.Path];
	    if (path == null)
	        path = '/';
	    var /** @type {?} */ index = path.lastIndexOf('/');
	    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
	    parts[_ComponentIndex.Path] = path;
	    return _joinAndCanonicalizePath(parts);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DirectiveNormalizer = (function () {
	    /**
	     * @param {?} _resourceLoader
	     * @param {?} _urlResolver
	     * @param {?} _htmlParser
	     * @param {?} _config
	     */
	    function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
	        this._resourceLoader = _resourceLoader;
	        this._urlResolver = _urlResolver;
	        this._htmlParser = _htmlParser;
	        this._config = _config;
	        this._resourceLoaderCache = new Map();
	    }
	    /**
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.clearCache = function () { this._resourceLoaderCache.clear(); };
	    /**
	     * @param {?} normalizedDirective
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {
	        var _this = this;
	        if (!normalizedDirective.isComponent) {
	            return;
	        }
	        this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);
	        normalizedDirective.template.externalStylesheets.forEach(function (stylesheet) { _this._resourceLoaderCache.delete(stylesheet.moduleUrl); });
	    };
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype._fetch = function (url) {
	        var /** @type {?} */ result = this._resourceLoaderCache.get(url);
	        if (!result) {
	            result = this._resourceLoader.get(url);
	            this._resourceLoaderCache.set(url, result);
	        }
	        return result;
	    };
	    /**
	     * @param {?} prenormData
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.normalizeTemplate = function (prenormData) {
	        var _this = this;
	        var /** @type {?} */ normalizedTemplateSync = null;
	        var /** @type {?} */ normalizedTemplateAsync;
	        if (prenormData.template != null) {
	            if (typeof prenormData.template !== 'string') {
	                throw syntaxError("The template specified for component " + _angular_core.ɵstringify(prenormData.componentType) + " is not a string");
	            }
	            normalizedTemplateSync = this.normalizeTemplateSync(prenormData);
	            normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
	        }
	        else if (prenormData.templateUrl) {
	            if (typeof prenormData.templateUrl !== 'string') {
	                throw syntaxError("The templateUrl specified for component " + _angular_core.ɵstringify(prenormData.componentType) + " is not a string");
	            }
	            normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData);
	        }
	        else {
	            throw syntaxError("No template specified for component " + _angular_core.ɵstringify(prenormData.componentType));
	        }
	        if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
	            // sync case
	            return new SyncAsyncResult(normalizedTemplateSync);
	        }
	        else {
	            // async case
	            return new SyncAsyncResult(null, normalizedTemplateAsync.then(function (normalizedTemplate) { return _this.normalizeExternalStylesheets(normalizedTemplate); }));
	        }
	    };
	    /**
	     * @param {?} prenomData
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.normalizeTemplateSync = function (prenomData) {
	        return this.normalizeLoadedTemplate(prenomData, prenomData.template, prenomData.moduleUrl);
	    };
	    /**
	     * @param {?} prenomData
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.normalizeTemplateAsync = function (prenomData) {
	        var _this = this;
	        var /** @type {?} */ templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);
	        return this._fetch(templateUrl)
	            .then(function (value) { return _this.normalizeLoadedTemplate(prenomData, value, templateUrl); });
	    };
	    /**
	     * @param {?} prenormData
	     * @param {?} template
	     * @param {?} templateAbsUrl
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.normalizeLoadedTemplate = function (prenormData, template, templateAbsUrl) {
	        var /** @type {?} */ isInline = !!prenormData.template;
	        var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(prenormData.interpolation);
	        var /** @type {?} */ rootNodesAndErrors = this._htmlParser.parse(template, templateSourceUrl({ reference: prenormData.ngModuleType }, { type: { reference: prenormData.componentType } }, { isInline: isInline, templateUrl: templateAbsUrl }), true, interpolationConfig);
	        if (rootNodesAndErrors.errors.length > 0) {
	            var /** @type {?} */ errorString = rootNodesAndErrors.errors.join('\n');
	            throw syntaxError("Template parse errors:\n" + errorString);
	        }
	        var /** @type {?} */ templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
	            styles: prenormData.styles,
	            styleUrls: prenormData.styleUrls,
	            moduleUrl: prenormData.moduleUrl
	        }));
	        var /** @type {?} */ visitor = new TemplatePreparseVisitor();
	        visitAll(visitor, rootNodesAndErrors.rootNodes);
	        var /** @type {?} */ templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));
	        var /** @type {?} */ encapsulation = prenormData.encapsulation;
	        if (encapsulation == null) {
	            encapsulation = this._config.defaultEncapsulation;
	        }
	        var /** @type {?} */ styles = templateMetadataStyles.styles.concat(templateStyles.styles);
	        var /** @type {?} */ styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
	        if (encapsulation === _angular_core.ViewEncapsulation.Emulated && styles.length === 0 &&
	            styleUrls.length === 0) {
	            encapsulation = _angular_core.ViewEncapsulation.None;
	        }
	        return new CompileTemplateMetadata({
	            encapsulation: encapsulation,
	            template: template,
	            templateUrl: templateAbsUrl, styles: styles, styleUrls: styleUrls,
	            ngContentSelectors: visitor.ngContentSelectors,
	            animations: prenormData.animations,
	            interpolation: prenormData.interpolation, isInline: isInline
	        });
	    };
	    /**
	     * @param {?} templateMeta
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.normalizeExternalStylesheets = function (templateMeta) {
	        return this._loadMissingExternalStylesheets(templateMeta.styleUrls)
	            .then(function (externalStylesheets) { return new CompileTemplateMetadata({
	            encapsulation: templateMeta.encapsulation,
	            template: templateMeta.template,
	            templateUrl: templateMeta.templateUrl,
	            styles: templateMeta.styles,
	            styleUrls: templateMeta.styleUrls,
	            externalStylesheets: externalStylesheets,
	            ngContentSelectors: templateMeta.ngContentSelectors,
	            animations: templateMeta.animations,
	            interpolation: templateMeta.interpolation,
	            isInline: templateMeta.isInline,
	        }); });
	    };
	    /**
	     * @param {?} styleUrls
	     * @param {?=} loadedStylesheets
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {
	        var _this = this;
	        if (loadedStylesheets === void 0) { loadedStylesheets = new Map(); }
	        return Promise
	            .all(styleUrls.filter(function (styleUrl) { return !loadedStylesheets.has(styleUrl); })
	            .map(function (styleUrl) { return _this._fetch(styleUrl).then(function (loadedStyle) {
	            var /** @type {?} */ stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));
	            loadedStylesheets.set(styleUrl, stylesheet);
	            return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
	        }); }))
	            .then(function (_) { return Array.from(loadedStylesheets.values()); });
	    };
	    /**
	     * @param {?} stylesheet
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.normalizeStylesheet = function (stylesheet) {
	        var _this = this;
	        var /** @type {?} */ allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)
	            .map(function (url) { return _this._urlResolver.resolve(stylesheet.moduleUrl, url); });
	        var /** @type {?} */ allStyles = stylesheet.styles.map(function (style$$1) {
	            var /** @type {?} */ styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style$$1);
	            allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);
	            return styleWithImports.style;
	        });
	        return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: stylesheet.moduleUrl });
	    };
	    return DirectiveNormalizer;
	}());
	DirectiveNormalizer.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	DirectiveNormalizer.ctorParameters = function () { return [
	    { type: ResourceLoader, },
	    { type: UrlResolver, },
	    { type: HtmlParser, },
	    { type: CompilerConfig, },
	]; };
	var TemplatePreparseVisitor = (function () {
	    function TemplatePreparseVisitor() {
	        this.ngContentSelectors = [];
	        this.styles = [];
	        this.styleUrls = [];
	        this.ngNonBindableStackCount = 0;
	    }
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
	        var /** @type {?} */ preparsedElement = preparseElement(ast);
	        switch (preparsedElement.type) {
	            case PreparsedElementType.NG_CONTENT:
	                if (this.ngNonBindableStackCount === 0) {
	                    this.ngContentSelectors.push(preparsedElement.selectAttr);
	                }
	                break;
	            case PreparsedElementType.STYLE:
	                var /** @type {?} */ textContent_1 = '';
	                ast.children.forEach(function (child) {
	                    if (child instanceof Text) {
	                        textContent_1 += child.value;
	                    }
	                });
	                this.styles.push(textContent_1);
	                break;
	            case PreparsedElementType.STYLESHEET:
	                this.styleUrls.push(preparsedElement.hrefAttr);
	                break;
	            default:
	                break;
	        }
	        if (preparsedElement.nonBindable) {
	            this.ngNonBindableStackCount++;
	        }
	        visitAll(this, ast.children);
	        if (preparsedElement.nonBindable) {
	            this.ngNonBindableStackCount--;
	        }
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) { visitAll(this, ast.cases); };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) {
	        visitAll(this, ast.expression);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    TemplatePreparseVisitor.prototype.visitComment = function (ast, context) { return null; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) { return null; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    TemplatePreparseVisitor.prototype.visitText = function (ast, context) { return null; };
	    return TemplatePreparseVisitor;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DirectiveResolver = (function () {
	    /**
	     * @param {?=} _reflector
	     */
	    function DirectiveResolver(_reflector) {
	        if (_reflector === void 0) { _reflector = _angular_core.ɵreflector; }
	        this._reflector = _reflector;
	    }
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    DirectiveResolver.prototype.isDirective = function (type) {
	        var /** @type {?} */ typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	        return typeMetadata && typeMetadata.some(isDirectiveMetadata);
	    };
	    /**
	     * Return {\@link Directive} for a given `Type`.
	     * @param {?} type
	     * @param {?=} throwIfNotFound
	     * @return {?}
	     */
	    DirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        var /** @type {?} */ typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	        if (typeMetadata) {
	            var /** @type {?} */ metadata = findLast(typeMetadata, isDirectiveMetadata);
	            if (metadata) {
	                var /** @type {?} */ propertyMetadata = this._reflector.propMetadata(type);
	                return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
	            }
	        }
	        if (throwIfNotFound) {
	            throw new Error("No Directive annotation found on " + _angular_core.ɵstringify(type));
	        }
	        return null;
	    };
	    /**
	     * @param {?} dm
	     * @param {?} propertyMetadata
	     * @param {?} directiveType
	     * @return {?}
	     */
	    DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) {
	        var /** @type {?} */ inputs = [];
	        var /** @type {?} */ outputs = [];
	        var /** @type {?} */ host = {};
	        var /** @type {?} */ queries = {};
	        Object.keys(propertyMetadata).forEach(function (propName) {
	            var /** @type {?} */ input = findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Input; });
	            if (input) {
	                if (input.bindingPropertyName) {
	                    inputs.push(propName + ": " + input.bindingPropertyName);
	                }
	                else {
	                    inputs.push(propName);
	                }
	            }
	            var /** @type {?} */ output = findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Output; });
	            if (output) {
	                if (output.bindingPropertyName) {
	                    outputs.push(propName + ": " + output.bindingPropertyName);
	                }
	                else {
	                    outputs.push(propName);
	                }
	            }
	            var /** @type {?} */ hostBindings = propertyMetadata[propName].filter(function (a) { return a && a instanceof _angular_core.HostBinding; });
	            hostBindings.forEach(function (hostBinding) {
	                if (hostBinding.hostPropertyName) {
	                    var /** @type {?} */ startWith = hostBinding.hostPropertyName[0];
	                    if (startWith === '(') {
	                        throw new Error("@HostBinding can not bind to events. Use @HostListener instead.");
	                    }
	                    else if (startWith === '[') {
	                        throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.");
	                    }
	                    host["[" + hostBinding.hostPropertyName + "]"] = propName;
	                }
	                else {
	                    host["[" + propName + "]"] = propName;
	                }
	            });
	            var /** @type {?} */ hostListeners = propertyMetadata[propName].filter(function (a) { return a && a instanceof _angular_core.HostListener; });
	            hostListeners.forEach(function (hostListener) {
	                var /** @type {?} */ args = hostListener.args || [];
	                host["(" + hostListener.eventName + ")"] = propName + "(" + args.join(',') + ")";
	            });
	            var /** @type {?} */ query = findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Query; });
	            if (query) {
	                queries[propName] = query;
	            }
	        });
	        return this._merge(dm, inputs, outputs, host, queries, directiveType);
	    };
	    /**
	     * @param {?} def
	     * @return {?}
	     */
	    DirectiveResolver.prototype._extractPublicName = function (def) { return splitAtColon(def, [null, def])[1].trim(); };
	    /**
	     * @param {?} bindings
	     * @return {?}
	     */
	    DirectiveResolver.prototype._dedupeBindings = function (bindings) {
	        var /** @type {?} */ names = new Set();
	        var /** @type {?} */ reversedResult = [];
	        // go last to first to allow later entries to overwrite previous entries
	        for (var /** @type {?} */ i = bindings.length - 1; i >= 0; i--) {
	            var /** @type {?} */ binding = bindings[i];
	            var /** @type {?} */ name = this._extractPublicName(binding);
	            if (!names.has(name)) {
	                names.add(name);
	                reversedResult.push(binding);
	            }
	        }
	        return reversedResult.reverse();
	    };
	    /**
	     * @param {?} directive
	     * @param {?} inputs
	     * @param {?} outputs
	     * @param {?} host
	     * @param {?} queries
	     * @param {?} directiveType
	     * @return {?}
	     */
	    DirectiveResolver.prototype._merge = function (directive, inputs, outputs, host, queries, directiveType) {
	        var /** @type {?} */ mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);
	        var /** @type {?} */ mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);
	        var /** @type {?} */ mergedHost = directive.host ? _angular_core.ɵmerge(directive.host, host) : host;
	        var /** @type {?} */ mergedQueries = directive.queries ? _angular_core.ɵmerge(directive.queries, queries) : queries;
	        if (directive instanceof _angular_core.Component) {
	            return new _angular_core.Component({
	                selector: directive.selector,
	                inputs: mergedInputs,
	                outputs: mergedOutputs,
	                host: mergedHost,
	                exportAs: directive.exportAs,
	                moduleId: directive.moduleId,
	                queries: mergedQueries,
	                changeDetection: directive.changeDetection,
	                providers: directive.providers,
	                viewProviders: directive.viewProviders,
	                entryComponents: directive.entryComponents,
	                template: directive.template,
	                templateUrl: directive.templateUrl,
	                styles: directive.styles,
	                styleUrls: directive.styleUrls,
	                encapsulation: directive.encapsulation,
	                animations: directive.animations,
	                interpolation: directive.interpolation
	            });
	        }
	        else {
	            return new _angular_core.Directive({
	                selector: directive.selector,
	                inputs: mergedInputs,
	                outputs: mergedOutputs,
	                host: mergedHost,
	                exportAs: directive.exportAs,
	                queries: mergedQueries,
	                providers: directive.providers
	            });
	        }
	    };
	    return DirectiveResolver;
	}());
	DirectiveResolver.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	DirectiveResolver.ctorParameters = function () { return [
	    { type: _angular_core.ɵReflectorReader, },
	]; };
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function isDirectiveMetadata(type) {
	    return type instanceof _angular_core.Directive;
	}
	/**
	 * @template T
	 * @param {?} arr
	 * @param {?} condition
	 * @return {?}
	 */
	function findLast(arr, condition) {
	    for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {
	        if (condition(arr[i])) {
	            return arr[i];
	        }
	    }
	    return null;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var STRIP_SRC_FILE_SUFFIXES = /(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/;
	var NG_FACTORY = /\.ngfactory\./;
	/**
	 * @param {?} filePath
	 * @return {?}
	 */
	function ngfactoryFilePath(filePath) {
	    var /** @type {?} */ urlWithSuffix = splitTypescriptSuffix(filePath);
	    return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
	}
	/**
	 * @param {?} filePath
	 * @return {?}
	 */
	function stripNgFactory(filePath) {
	    return filePath.replace(NG_FACTORY, '.');
	}
	/**
	 * @param {?} filePath
	 * @return {?}
	 */
	function isNgFactoryFile(filePath) {
	    return NG_FACTORY.test(filePath);
	}
	/**
	 * @param {?} path
	 * @return {?}
	 */
	function splitTypescriptSuffix(path) {
	    if (path.endsWith('.d.ts')) {
	        return [path.slice(0, -5), '.ts'];
	    }
	    var /** @type {?} */ lastDot = path.lastIndexOf('.');
	    if (lastDot !== -1) {
	        return [path.substring(0, lastDot), path.substring(lastDot)];
	    }
	    return [path, ''];
	}
	/**
	 * @param {?} fileName
	 * @return {?}
	 */
	function summaryFileName(fileName) {
	    var /** @type {?} */ fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');
	    return fileNameWithoutSuffix + ".ngsummary.json";
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} hook
	 * @param {?} token
	 * @return {?}
	 */
	function hasLifecycleHook(hook, token) {
	    return _angular_core.ɵreflector.hasLifecycleHook(token, getHookName(hook));
	}
	/**
	 * @param {?} hook
	 * @return {?}
	 */
	function getHookName(hook) {
	    switch (hook) {
	        case _angular_core.ɵLifecycleHooks.OnInit:
	            return 'ngOnInit';
	        case _angular_core.ɵLifecycleHooks.OnDestroy:
	            return 'ngOnDestroy';
	        case _angular_core.ɵLifecycleHooks.DoCheck:
	            return 'ngDoCheck';
	        case _angular_core.ɵLifecycleHooks.OnChanges:
	            return 'ngOnChanges';
	        case _angular_core.ɵLifecycleHooks.AfterContentInit:
	            return 'ngAfterContentInit';
	        case _angular_core.ɵLifecycleHooks.AfterContentChecked:
	            return 'ngAfterContentChecked';
	        case _angular_core.ɵLifecycleHooks.AfterViewInit:
	            return 'ngAfterViewInit';
	        case _angular_core.ɵLifecycleHooks.AfterViewChecked:
	            return 'ngAfterViewChecked';
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} obj
	 * @return {?}
	 */
	function _isNgModuleMetadata(obj) {
	    return obj instanceof _angular_core.NgModule;
	}
	/**
	 * Resolves types to {\@link NgModule}.
	 */
	var NgModuleResolver = (function () {
	    /**
	     * @param {?=} _reflector
	     */
	    function NgModuleResolver(_reflector) {
	        if (_reflector === void 0) { _reflector = _angular_core.ɵreflector; }
	        this._reflector = _reflector;
	    }
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    NgModuleResolver.prototype.isNgModule = function (type) { return this._reflector.annotations(type).some(_isNgModuleMetadata); };
	    /**
	     * @param {?} type
	     * @param {?=} throwIfNotFound
	     * @return {?}
	     */
	    NgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        var /** @type {?} */ ngModuleMeta = findLast(this._reflector.annotations(type), _isNgModuleMetadata);
	        if (ngModuleMeta) {
	            return ngModuleMeta;
	        }
	        else {
	            if (throwIfNotFound) {
	                throw new Error("No NgModule metadata found for '" + _angular_core.ɵstringify(type) + "'.");
	            }
	            return null;
	        }
	    };
	    return NgModuleResolver;
	}());
	NgModuleResolver.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	NgModuleResolver.ctorParameters = function () { return [
	    { type: _angular_core.ɵReflectorReader, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function _isPipeMetadata(type) {
	    return type instanceof _angular_core.Pipe;
	}
	/**
	 * Resolve a `Type` for {\@link Pipe}.
	 *
	 * This interface can be overridden by the application developer to create custom behavior.
	 *
	 * See {\@link Compiler}
	 */
	var PipeResolver = (function () {
	    /**
	     * @param {?=} _reflector
	     */
	    function PipeResolver(_reflector) {
	        if (_reflector === void 0) { _reflector = _angular_core.ɵreflector; }
	        this._reflector = _reflector;
	    }
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    PipeResolver.prototype.isPipe = function (type) {
	        var /** @type {?} */ typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	        return typeMetadata && typeMetadata.some(_isPipeMetadata);
	    };
	    /**
	     * Return {\@link Pipe} for a given `Type`.
	     * @param {?} type
	     * @param {?=} throwIfNotFound
	     * @return {?}
	     */
	    PipeResolver.prototype.resolve = function (type, throwIfNotFound) {
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        var /** @type {?} */ metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	        if (metas) {
	            var /** @type {?} */ annotation = findLast(metas, _isPipeMetadata);
	            if (annotation) {
	                return annotation;
	            }
	        }
	        if (throwIfNotFound) {
	            throw new Error("No Pipe decorator found on " + _angular_core.ɵstringify(type));
	        }
	        return null;
	    };
	    return PipeResolver;
	}());
	PipeResolver.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	PipeResolver.ctorParameters = function () { return [
	    { type: _angular_core.ɵReflectorReader, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SummaryResolver = (function () {
	    function SummaryResolver() {
	    }
	    /**
	     * @param {?} fileName
	     * @return {?}
	     */
	    SummaryResolver.prototype.isLibraryFile = function (fileName) { return false; };
	    
	    /**
	     * @param {?} fileName
	     * @return {?}
	     */
	    SummaryResolver.prototype.getLibraryFileName = function (fileName) { return null; };
	    /**
	     * @param {?} reference
	     * @return {?}
	     */
	    SummaryResolver.prototype.resolveSummary = function (reference) { return null; };
	    
	    /**
	     * @param {?} filePath
	     * @return {?}
	     */
	    SummaryResolver.prototype.getSymbolsOf = function (filePath) { return []; };
	    /**
	     * @param {?} reference
	     * @return {?}
	     */
	    SummaryResolver.prototype.getImportAs = function (reference) { return reference; };
	    return SummaryResolver;
	}());
	SummaryResolver.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	SummaryResolver.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ERROR_COLLECTOR_TOKEN = new _angular_core.InjectionToken('ErrorCollector');
	var CompileMetadataResolver = (function () {
	    /**
	     * @param {?} _config
	     * @param {?} _ngModuleResolver
	     * @param {?} _directiveResolver
	     * @param {?} _pipeResolver
	     * @param {?} _summaryResolver
	     * @param {?} _schemaRegistry
	     * @param {?} _directiveNormalizer
	     * @param {?} _console
	     * @param {?} _staticSymbolCache
	     * @param {?=} _reflector
	     * @param {?=} _errorCollector
	     */
	    function CompileMetadataResolver(_config, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _console, _staticSymbolCache, _reflector, _errorCollector) {
	        if (_reflector === void 0) { _reflector = _angular_core.ɵreflector; }
	        this._config = _config;
	        this._ngModuleResolver = _ngModuleResolver;
	        this._directiveResolver = _directiveResolver;
	        this._pipeResolver = _pipeResolver;
	        this._summaryResolver = _summaryResolver;
	        this._schemaRegistry = _schemaRegistry;
	        this._directiveNormalizer = _directiveNormalizer;
	        this._console = _console;
	        this._staticSymbolCache = _staticSymbolCache;
	        this._reflector = _reflector;
	        this._errorCollector = _errorCollector;
	        this._nonNormalizedDirectiveCache = new Map();
	        this._directiveCache = new Map();
	        this._summaryCache = new Map();
	        this._pipeCache = new Map();
	        this._ngModuleCache = new Map();
	        this._ngModuleOfTypes = new Map();
	    }
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.clearCacheFor = function (type) {
	        var /** @type {?} */ dirMeta = this._directiveCache.get(type);
	        this._directiveCache.delete(type);
	        this._nonNormalizedDirectiveCache.delete(type);
	        this._summaryCache.delete(type);
	        this._pipeCache.delete(type);
	        this._ngModuleOfTypes.delete(type);
	        // Clear all of the NgModule as they contain transitive information!
	        this._ngModuleCache.clear();
	        if (dirMeta) {
	            this._directiveNormalizer.clearCacheFor(dirMeta);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.clearCache = function () {
	        this._directiveCache.clear();
	        this._nonNormalizedDirectiveCache.clear();
	        this._summaryCache.clear();
	        this._pipeCache.clear();
	        this._ngModuleCache.clear();
	        this._ngModuleOfTypes.clear();
	        this._directiveNormalizer.clearCache();
	    };
	    /**
	     * @param {?} baseType
	     * @param {?} name
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._createProxyClass = function (baseType, name) {
	        var /** @type {?} */ delegate = null;
	        var /** @type {?} */ proxyClass = (function () {
	            if (!delegate) {
	                throw new Error("Illegal state: Class " + name + " for type " + _angular_core.ɵstringify(baseType) + " is not compiled yet!");
	            }
	            return delegate.apply(this, arguments);
	        });
	        proxyClass.setDelegate = function (d) {
	            delegate = d;
	            ((proxyClass)).prototype = d.prototype;
	        };
	        // Make stringify work correctly
	        ((proxyClass)).overriddenName = name;
	        return proxyClass;
	    };
	    /**
	     * @param {?} dirType
	     * @param {?} name
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getGeneratedClass = function (dirType, name) {
	        if (dirType instanceof StaticSymbol) {
	            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name);
	        }
	        else {
	            return this._createProxyClass(dirType, name);
	        }
	    };
	    /**
	     * @param {?} dirType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getComponentViewClass = function (dirType) {
	        return this.getGeneratedClass(dirType, viewClassName(dirType, 0));
	    };
	    /**
	     * @param {?} dirType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getHostComponentViewClass = function (dirType) {
	        return this.getGeneratedClass(dirType, hostViewClassName(dirType));
	    };
	    /**
	     * @param {?} dirType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getHostComponentType = function (dirType) {
	        var /** @type {?} */ name = identifierName({ reference: dirType }) + "_Host";
	        if (dirType instanceof StaticSymbol) {
	            return this._staticSymbolCache.get(dirType.filePath, name);
	        }
	        else {
	            var /** @type {?} */ HostClass = (function HostClass() { });
	            HostClass.overriddenName = name;
	            return HostClass;
	        }
	    };
	    /**
	     * @param {?} dirType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getRendererType = function (dirType) {
	        if (dirType instanceof StaticSymbol) {
	            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), rendererTypeName(dirType));
	        }
	        else {
	            // returning an object as proxy,
	            // that we fill later during runtime compilation.
	            return ({});
	        }
	    };
	    /**
	     * @param {?} selector
	     * @param {?} dirType
	     * @param {?} inputs
	     * @param {?} outputs
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getComponentFactory = function (selector, dirType, inputs, outputs) {
	        if (dirType instanceof StaticSymbol) {
	            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), componentFactoryName(dirType));
	        }
	        else {
	            var /** @type {?} */ hostView = this.getHostComponentViewClass(dirType);
	            // Note: ngContentSelectors will be filled later once the template is
	            // loaded.
	            return _angular_core.ɵccf(selector, dirType, /** @type {?} */ (hostView), inputs, outputs, []);
	        }
	    };
	    /**
	     * @param {?} factory
	     * @param {?} ngContentSelectors
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.initComponentFactory = function (factory, ngContentSelectors) {
	        if (!(factory instanceof StaticSymbol)) {
	            (_a = factory.ngContentSelectors).push.apply(_a, ngContentSelectors);
	        }
	        var _a;
	    };
	    /**
	     * @param {?} type
	     * @param {?} kind
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._loadSummary = function (type, kind) {
	        var /** @type {?} */ typeSummary = this._summaryCache.get(type);
	        if (!typeSummary) {
	            var /** @type {?} */ summary = this._summaryResolver.resolveSummary(type);
	            typeSummary = summary ? summary.type : null;
	            this._summaryCache.set(type, typeSummary);
	        }
	        return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;
	    };
	    /**
	     * @param {?} ngModuleType
	     * @param {?} directiveType
	     * @param {?} isSync
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._loadDirectiveMetadata = function (ngModuleType, directiveType, isSync) {
	        var _this = this;
	        if (this._directiveCache.has(directiveType)) {
	            return;
	        }
	        directiveType = _angular_core.resolveForwardRef(directiveType);
	        var _a = this.getNonNormalizedDirectiveMetadata(directiveType), annotation = _a.annotation, metadata = _a.metadata;
	        var /** @type {?} */ createDirectiveMetadata = function (templateMetadata) {
	            var /** @type {?} */ normalizedDirMeta = new CompileDirectiveMetadata({
	                type: metadata.type,
	                isComponent: metadata.isComponent,
	                selector: metadata.selector,
	                exportAs: metadata.exportAs,
	                changeDetection: metadata.changeDetection,
	                inputs: metadata.inputs,
	                outputs: metadata.outputs,
	                hostListeners: metadata.hostListeners,
	                hostProperties: metadata.hostProperties,
	                hostAttributes: metadata.hostAttributes,
	                providers: metadata.providers,
	                viewProviders: metadata.viewProviders,
	                queries: metadata.queries,
	                viewQueries: metadata.viewQueries,
	                entryComponents: metadata.entryComponents,
	                componentViewType: metadata.componentViewType,
	                rendererType: metadata.rendererType,
	                componentFactory: metadata.componentFactory,
	                template: templateMetadata
	            });
	            if (templateMetadata) {
	                _this.initComponentFactory(metadata.componentFactory, templateMetadata.ngContentSelectors);
	            }
	            _this._directiveCache.set(directiveType, normalizedDirMeta);
	            _this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());
	            return normalizedDirMeta;
	        };
	        if (metadata.isComponent) {
	            var /** @type {?} */ templateMeta = this._directiveNormalizer.normalizeTemplate({
	                ngModuleType: ngModuleType,
	                componentType: directiveType,
	                moduleUrl: componentModuleUrl(this._reflector, directiveType, annotation),
	                encapsulation: metadata.template.encapsulation,
	                template: metadata.template.template,
	                templateUrl: metadata.template.templateUrl,
	                styles: metadata.template.styles,
	                styleUrls: metadata.template.styleUrls,
	                animations: metadata.template.animations,
	                interpolation: metadata.template.interpolation
	            });
	            if (templateMeta.syncResult) {
	                createDirectiveMetadata(templateMeta.syncResult);
	                return null;
	            }
	            else {
	                if (isSync) {
	                    this._reportError(componentStillLoadingError(directiveType), directiveType);
	                    return null;
	                }
	                return templateMeta.asyncResult.then(createDirectiveMetadata);
	            }
	        }
	        else {
	            // directive
	            createDirectiveMetadata(null);
	            return null;
	        }
	    };
	    /**
	     * @param {?} directiveType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function (directiveType) {
	        var _this = this;
	        directiveType = _angular_core.resolveForwardRef(directiveType);
	        if (!directiveType) {
	            return null;
	        }
	        var /** @type {?} */ cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);
	        if (cacheEntry) {
	            return cacheEntry;
	        }
	        var /** @type {?} */ dirMeta = this._directiveResolver.resolve(directiveType, false);
	        if (!dirMeta) {
	            return null;
	        }
	        var /** @type {?} */ nonNormalizedTemplateMetadata;
	        if (dirMeta instanceof _angular_core.Component) {
	            // component
	            assertArrayOfStrings('styles', dirMeta.styles);
	            assertArrayOfStrings('styleUrls', dirMeta.styleUrls);
	            assertInterpolationSymbols('interpolation', dirMeta.interpolation);
	            var /** @type {?} */ animations = dirMeta.animations;
	            nonNormalizedTemplateMetadata = new CompileTemplateMetadata({
	                encapsulation: dirMeta.encapsulation,
	                template: dirMeta.template,
	                templateUrl: dirMeta.templateUrl,
	                styles: dirMeta.styles,
	                styleUrls: dirMeta.styleUrls,
	                animations: animations,
	                interpolation: dirMeta.interpolation,
	                isInline: !!dirMeta.template
	            });
	        }
	        var /** @type {?} */ changeDetectionStrategy = null;
	        var /** @type {?} */ viewProviders = [];
	        var /** @type {?} */ entryComponentMetadata = [];
	        var /** @type {?} */ selector = dirMeta.selector;
	        if (dirMeta instanceof _angular_core.Component) {
	            // Component
	            changeDetectionStrategy = dirMeta.changeDetection;
	            if (dirMeta.viewProviders) {
	                viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, "viewProviders for \"" + stringifyType(directiveType) + "\"", [], directiveType);
	            }
	            if (dirMeta.entryComponents) {
	                entryComponentMetadata = flattenAndDedupeArray(dirMeta.entryComponents)
	                    .map(function (type) { return _this._getEntryComponentMetadata(type); })
	                    .concat(entryComponentMetadata);
	            }
	            if (!selector) {
	                selector = this._schemaRegistry.getDefaultComponentElementName();
	            }
	        }
	        else {
	            // Directive
	            if (!selector) {
	                this._reportError(syntaxError("Directive " + stringifyType(directiveType) + " has no selector, please add it!"), directiveType);
	                selector = 'error';
	            }
	        }
	        var /** @type {?} */ providers = [];
	        if (dirMeta.providers != null) {
	            providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, "providers for \"" + stringifyType(directiveType) + "\"", [], directiveType);
	        }
	        var /** @type {?} */ queries = [];
	        var /** @type {?} */ viewQueries = [];
	        if (dirMeta.queries != null) {
	            queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);
	            viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);
	        }
	        var /** @type {?} */ metadata = CompileDirectiveMetadata.create({
	            selector: selector,
	            exportAs: dirMeta.exportAs,
	            isComponent: !!nonNormalizedTemplateMetadata,
	            type: this._getTypeMetadata(directiveType),
	            template: nonNormalizedTemplateMetadata,
	            changeDetection: changeDetectionStrategy,
	            inputs: dirMeta.inputs,
	            outputs: dirMeta.outputs,
	            host: dirMeta.host,
	            providers: providers,
	            viewProviders: viewProviders,
	            queries: queries,
	            viewQueries: viewQueries,
	            entryComponents: entryComponentMetadata,
	            componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) :
	                undefined,
	            rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : undefined,
	            componentFactory: undefined
	        });
	        if (nonNormalizedTemplateMetadata) {
	            metadata.componentFactory =
	                this.getComponentFactory(selector, directiveType, metadata.inputs, metadata.outputs);
	        }
	        cacheEntry = { metadata: metadata, annotation: dirMeta };
	        this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);
	        return cacheEntry;
	    };
	    /**
	     * Gets the metadata for the given directive.
	     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
	     * @param {?} directiveType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) {
	        var /** @type {?} */ dirMeta = this._directiveCache.get(directiveType);
	        if (!dirMeta) {
	            this._reportError(syntaxError("Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive " + stringifyType(directiveType) + "."), directiveType);
	        }
	        return dirMeta;
	    };
	    /**
	     * @param {?} dirType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getDirectiveSummary = function (dirType) {
	        var /** @type {?} */ dirSummary = (this._loadSummary(dirType, CompileSummaryKind.Directive));
	        if (!dirSummary) {
	            this._reportError(syntaxError("Illegal state: Could not load the summary for directive " + stringifyType(dirType) + "."), dirType);
	        }
	        return dirSummary;
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.isDirective = function (type) { return this._directiveResolver.isDirective(type); };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.isPipe = function (type) { return this._pipeResolver.isPipe(type); };
	    /**
	     * @param {?} moduleType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getNgModuleSummary = function (moduleType) {
	        var /** @type {?} */ moduleSummary = (this._loadSummary(moduleType, CompileSummaryKind.NgModule));
	        if (!moduleSummary) {
	            var /** @type {?} */ moduleMeta = this.getNgModuleMetadata(moduleType, false);
	            moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;
	            if (moduleSummary) {
	                this._summaryCache.set(moduleType, moduleSummary);
	            }
	        }
	        return moduleSummary;
	    };
	    /**
	     * Loads the declared directives and pipes of an NgModule.
	     * @param {?} moduleType
	     * @param {?} isSync
	     * @param {?=} throwIfNotFound
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.loadNgModuleDirectiveAndPipeMetadata = function (moduleType, isSync, throwIfNotFound) {
	        var _this = this;
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        var /** @type {?} */ ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);
	        var /** @type {?} */ loading = [];
	        if (ngModule) {
	            ngModule.declaredDirectives.forEach(function (id) {
	                var /** @type {?} */ promise = _this._loadDirectiveMetadata(moduleType, id.reference, isSync);
	                if (promise) {
	                    loading.push(promise);
	                }
	            });
	            ngModule.declaredPipes.forEach(function (id) { return _this._loadPipeMetadata(id.reference); });
	        }
	        return Promise.all(loading);
	    };
	    /**
	     * @param {?} moduleType
	     * @param {?=} throwIfNotFound
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType, throwIfNotFound) {
	        var _this = this;
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        moduleType = _angular_core.resolveForwardRef(moduleType);
	        var /** @type {?} */ compileMeta = this._ngModuleCache.get(moduleType);
	        if (compileMeta) {
	            return compileMeta;
	        }
	        var /** @type {?} */ meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
	        if (!meta) {
	            return null;
	        }
	        var /** @type {?} */ declaredDirectives = [];
	        var /** @type {?} */ exportedNonModuleIdentifiers = [];
	        var /** @type {?} */ declaredPipes = [];
	        var /** @type {?} */ importedModules = [];
	        var /** @type {?} */ exportedModules = [];
	        var /** @type {?} */ providers = [];
	        var /** @type {?} */ entryComponents = [];
	        var /** @type {?} */ bootstrapComponents = [];
	        var /** @type {?} */ schemas = [];
	        if (meta.imports) {
	            flattenAndDedupeArray(meta.imports).forEach(function (importedType) {
	                var /** @type {?} */ importedModuleType;
	                if (isValidType(importedType)) {
	                    importedModuleType = importedType;
	                }
	                else if (importedType && importedType.ngModule) {
	                    var /** @type {?} */ moduleWithProviders = importedType;
	                    importedModuleType = moduleWithProviders.ngModule;
	                    if (moduleWithProviders.providers) {
	                        providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, "provider for the NgModule '" + stringifyType(importedModuleType) + "'", [], importedType));
	                    }
	                }
	                if (importedModuleType) {
	                    if (_this._checkSelfImport(moduleType, importedModuleType))
	                        return;
	                    var /** @type {?} */ importedModuleSummary = _this.getNgModuleSummary(importedModuleType);
	                    if (!importedModuleSummary) {
	                        _this._reportError(syntaxError("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'. Please add a @NgModule annotation."), moduleType);
	                        return;
	                    }
	                    importedModules.push(importedModuleSummary);
	                }
	                else {
	                    _this._reportError(syntaxError("Unexpected value '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                    return;
	                }
	            });
	        }
	        if (meta.exports) {
	            flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {
	                if (!isValidType(exportedType)) {
	                    _this._reportError(syntaxError("Unexpected value '" + stringifyType(exportedType) + "' exported by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                    return;
	                }
	                var /** @type {?} */ exportedModuleSummary = _this.getNgModuleSummary(exportedType);
	                if (exportedModuleSummary) {
	                    exportedModules.push(exportedModuleSummary);
	                }
	                else {
	                    exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType));
	                }
	            });
	        }
	        // Note: This will be modified later, so we rely on
	        // getting a new instance every time!
	        var /** @type {?} */ transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);
	        if (meta.declarations) {
	            flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {
	                if (!isValidType(declaredType)) {
	                    _this._reportError(syntaxError("Unexpected value '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                    return;
	                }
	                var /** @type {?} */ declaredIdentifier = _this._getIdentifierMetadata(declaredType);
	                if (_this._directiveResolver.isDirective(declaredType)) {
	                    transitiveModule.addDirective(declaredIdentifier);
	                    declaredDirectives.push(declaredIdentifier);
	                    _this._addTypeToModule(declaredType, moduleType);
	                }
	                else if (_this._pipeResolver.isPipe(declaredType)) {
	                    transitiveModule.addPipe(declaredIdentifier);
	                    transitiveModule.pipes.push(declaredIdentifier);
	                    declaredPipes.push(declaredIdentifier);
	                    _this._addTypeToModule(declaredType, moduleType);
	                }
	                else {
	                    _this._reportError(syntaxError("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'. Please add a @Pipe/@Directive/@Component annotation."), moduleType);
	                    return;
	                }
	            });
	        }
	        var /** @type {?} */ exportedDirectives = [];
	        var /** @type {?} */ exportedPipes = [];
	        exportedNonModuleIdentifiers.forEach(function (exportedId) {
	            if (transitiveModule.directivesSet.has(exportedId.reference)) {
	                exportedDirectives.push(exportedId);
	                transitiveModule.addExportedDirective(exportedId);
	            }
	            else if (transitiveModule.pipesSet.has(exportedId.reference)) {
	                exportedPipes.push(exportedId);
	                transitiveModule.addExportedPipe(exportedId);
	            }
	            else {
	                _this._reportError(syntaxError("Can't export " + _this._getTypeDescriptor(exportedId.reference) + " " + stringifyType(exportedId.reference) + " from " + stringifyType(moduleType) + " as it was neither declared nor imported!"), moduleType);
	            }
	        });
	        // The providers of the module have to go last
	        // so that they overwrite any other provider we already added.
	        if (meta.providers) {
	            providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, "provider for the NgModule '" + stringifyType(moduleType) + "'", [], moduleType));
	        }
	        if (meta.entryComponents) {
	            entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents)
	                .map(function (type) { return _this._getEntryComponentMetadata(type); }));
	        }
	        if (meta.bootstrap) {
	            flattenAndDedupeArray(meta.bootstrap).forEach(function (type) {
	                if (!isValidType(type)) {
	                    _this._reportError(syntaxError("Unexpected value '" + stringifyType(type) + "' used in the bootstrap property of module '" + stringifyType(moduleType) + "'"), moduleType);
	                    return;
	                }
	                bootstrapComponents.push(_this._getIdentifierMetadata(type));
	            });
	        }
	        entryComponents.push.apply(entryComponents, bootstrapComponents.map(function (type) { return _this._getEntryComponentMetadata(type.reference); }));
	        if (meta.schemas) {
	            schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas));
	        }
	        compileMeta = new CompileNgModuleMetadata({
	            type: this._getTypeMetadata(moduleType),
	            providers: providers,
	            entryComponents: entryComponents,
	            bootstrapComponents: bootstrapComponents,
	            schemas: schemas,
	            declaredDirectives: declaredDirectives,
	            exportedDirectives: exportedDirectives,
	            declaredPipes: declaredPipes,
	            exportedPipes: exportedPipes,
	            importedModules: importedModules,
	            exportedModules: exportedModules,
	            transitiveModule: transitiveModule,
	            id: meta.id,
	        });
	        entryComponents.forEach(function (id) { return transitiveModule.addEntryComponent(id); });
	        providers.forEach(function (provider) { return transitiveModule.addProvider(provider, compileMeta.type); });
	        transitiveModule.addModule(compileMeta.type);
	        this._ngModuleCache.set(moduleType, compileMeta);
	        return compileMeta;
	    };
	    /**
	     * @param {?} moduleType
	     * @param {?} importedModuleType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._checkSelfImport = function (moduleType, importedModuleType) {
	        if (moduleType === importedModuleType) {
	            this._reportError(syntaxError("'" + stringifyType(moduleType) + "' module can't import itself"), moduleType);
	            return true;
	        }
	        return false;
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getTypeDescriptor = function (type) {
	        if (this._directiveResolver.isDirective(type)) {
	            return 'directive';
	        }
	        if (this._pipeResolver.isPipe(type)) {
	            return 'pipe';
	        }
	        if (this._ngModuleResolver.isNgModule(type)) {
	            return 'module';
	        }
	        if (((type)).provide) {
	            return 'provider';
	        }
	        return 'value';
	    };
	    /**
	     * @param {?} type
	     * @param {?} moduleType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) {
	        var /** @type {?} */ oldModule = this._ngModuleOfTypes.get(type);
	        if (oldModule && oldModule !== moduleType) {
	            this._reportError(syntaxError("Type " + stringifyType(type) + " is part of the declarations of 2 modules: " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + "! " +
	                ("Please consider moving " + stringifyType(type) + " to a higher module that imports " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ". ") +
	                ("You can also create a new NgModule that exports and includes " + stringifyType(type) + " then import that NgModule in " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ".")), moduleType);
	        }
	        this._ngModuleOfTypes.set(type, moduleType);
	    };
	    /**
	     * @param {?} importedModules
	     * @param {?} exportedModules
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) {
	        // collect `providers` / `entryComponents` from all imported and all exported modules
	        var /** @type {?} */ result = new TransitiveCompileNgModuleMetadata();
	        var /** @type {?} */ modulesByToken = new Map();
	        importedModules.concat(exportedModules).forEach(function (modSummary) {
	            modSummary.modules.forEach(function (mod) { return result.addModule(mod); });
	            modSummary.entryComponents.forEach(function (comp) { return result.addEntryComponent(comp); });
	            var /** @type {?} */ addedTokens = new Set();
	            modSummary.providers.forEach(function (entry) {
	                var /** @type {?} */ tokenRef = tokenReference(entry.provider.token);
	                var /** @type {?} */ prevModules = modulesByToken.get(tokenRef);
	                if (!prevModules) {
	                    prevModules = new Set();
	                    modulesByToken.set(tokenRef, prevModules);
	                }
	                var /** @type {?} */ moduleRef = entry.module.reference;
	                // Note: the providers of one module may still contain multiple providers
	                // per token (e.g. for multi providers), and we need to preserve these.
	                if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {
	                    prevModules.add(moduleRef);
	                    addedTokens.add(tokenRef);
	                    result.addProvider(entry.provider, entry.module);
	                }
	            });
	        });
	        exportedModules.forEach(function (modSummary) {
	            modSummary.exportedDirectives.forEach(function (id) { return result.addExportedDirective(id); });
	            modSummary.exportedPipes.forEach(function (id) { return result.addExportedPipe(id); });
	        });
	        importedModules.forEach(function (modSummary) {
	            modSummary.exportedDirectives.forEach(function (id) { return result.addDirective(id); });
	            modSummary.exportedPipes.forEach(function (id) { return result.addPipe(id); });
	        });
	        return result;
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getIdentifierMetadata = function (type) {
	        type = _angular_core.resolveForwardRef(type);
	        return { reference: type };
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.isInjectable = function (type) {
	        var /** @type {?} */ annotations = this._reflector.annotations(type);
	        // Note: We need an exact check here as @Component / @Directive / ... inherit
	        // from @CompilerInjectable!
	        return annotations.some(function (ann) { return ann.constructor === _angular_core.Injectable; });
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getInjectableSummary = function (type) {
	        return {
	            summaryKind: CompileSummaryKind.Injectable,
	            type: this._getTypeMetadata(type, null, false)
	        };
	    };
	    /**
	     * @param {?} type
	     * @param {?=} dependencies
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getInjectableMetadata = function (type, dependencies) {
	        if (dependencies === void 0) { dependencies = null; }
	        var /** @type {?} */ typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);
	        if (typeSummary) {
	            return typeSummary.type;
	        }
	        return this._getTypeMetadata(type, dependencies);
	    };
	    /**
	     * @param {?} type
	     * @param {?=} dependencies
	     * @param {?=} throwOnUnknownDeps
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getTypeMetadata = function (type, dependencies, throwOnUnknownDeps) {
	        if (dependencies === void 0) { dependencies = null; }
	        if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }
	        var /** @type {?} */ identifier = this._getIdentifierMetadata(type);
	        return {
	            reference: identifier.reference,
	            diDeps: this._getDependenciesMetadata(identifier.reference, dependencies, throwOnUnknownDeps),
	            lifecycleHooks: _angular_core.ɵLIFECYCLE_HOOKS_VALUES.filter(function (hook) { return hasLifecycleHook(hook, identifier.reference); }),
	        };
	    };
	    /**
	     * @param {?} factory
	     * @param {?=} dependencies
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getFactoryMetadata = function (factory, dependencies) {
	        if (dependencies === void 0) { dependencies = null; }
	        factory = _angular_core.resolveForwardRef(factory);
	        return { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) };
	    };
	    /**
	     * Gets the metadata for the given pipe.
	     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
	     * @param {?} pipeType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType) {
	        var /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);
	        if (!pipeMeta) {
	            this._reportError(syntaxError("Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe " + stringifyType(pipeType) + "."), pipeType);
	        }
	        return pipeMeta;
	    };
	    /**
	     * @param {?} pipeType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getPipeSummary = function (pipeType) {
	        var /** @type {?} */ pipeSummary = (this._loadSummary(pipeType, CompileSummaryKind.Pipe));
	        if (!pipeSummary) {
	            this._reportError(syntaxError("Illegal state: Could not load the summary for pipe " + stringifyType(pipeType) + "."), pipeType);
	        }
	        return pipeSummary;
	    };
	    /**
	     * @param {?} pipeType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function (pipeType) {
	        var /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);
	        if (!pipeMeta) {
	            pipeMeta = this._loadPipeMetadata(pipeType);
	        }
	        return pipeMeta;
	    };
	    /**
	     * @param {?} pipeType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._loadPipeMetadata = function (pipeType) {
	        pipeType = _angular_core.resolveForwardRef(pipeType);
	        var /** @type {?} */ pipeAnnotation = this._pipeResolver.resolve(pipeType);
	        var /** @type {?} */ pipeMeta = new CompilePipeMetadata({
	            type: this._getTypeMetadata(pipeType),
	            name: pipeAnnotation.name,
	            pure: pipeAnnotation.pure
	        });
	        this._pipeCache.set(pipeType, pipeMeta);
	        this._summaryCache.set(pipeType, pipeMeta.toSummary());
	        return pipeMeta;
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @param {?} dependencies
	     * @param {?=} throwOnUnknownDeps
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getDependenciesMetadata = function (typeOrFunc, dependencies, throwOnUnknownDeps) {
	        var _this = this;
	        if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }
	        var /** @type {?} */ hasUnknownDeps = false;
	        var /** @type {?} */ params = dependencies || this._reflector.parameters(typeOrFunc) || [];
	        var /** @type {?} */ dependenciesMetadata = params.map(function (param) {
	            var /** @type {?} */ isAttribute = false;
	            var /** @type {?} */ isHost = false;
	            var /** @type {?} */ isSelf = false;
	            var /** @type {?} */ isSkipSelf = false;
	            var /** @type {?} */ isOptional = false;
	            var /** @type {?} */ token = null;
	            if (Array.isArray(param)) {
	                param.forEach(function (paramEntry) {
	                    if (paramEntry instanceof _angular_core.Host) {
	                        isHost = true;
	                    }
	                    else if (paramEntry instanceof _angular_core.Self) {
	                        isSelf = true;
	                    }
	                    else if (paramEntry instanceof _angular_core.SkipSelf) {
	                        isSkipSelf = true;
	                    }
	                    else if (paramEntry instanceof _angular_core.Optional) {
	                        isOptional = true;
	                    }
	                    else if (paramEntry instanceof _angular_core.Attribute) {
	                        isAttribute = true;
	                        token = paramEntry.attributeName;
	                    }
	                    else if (paramEntry instanceof _angular_core.Inject) {
	                        token = paramEntry.token;
	                    }
	                    else if (paramEntry instanceof _angular_core.InjectionToken) {
	                        token = paramEntry;
	                    }
	                    else if (isValidType(paramEntry) && token == null) {
	                        token = paramEntry;
	                    }
	                });
	            }
	            else {
	                token = param;
	            }
	            if (token == null) {
	                hasUnknownDeps = true;
	                return null;
	            }
	            return {
	                isAttribute: isAttribute,
	                isHost: isHost,
	                isSelf: isSelf,
	                isSkipSelf: isSkipSelf,
	                isOptional: isOptional,
	                token: _this._getTokenMetadata(token)
	            };
	        });
	        if (hasUnknownDeps) {
	            var /** @type {?} */ depsTokens = dependenciesMetadata.map(function (dep) { return dep ? stringifyType(dep.token) : '?'; }).join(', ');
	            var /** @type {?} */ message = "Can't resolve all parameters for " + stringifyType(typeOrFunc) + ": (" + depsTokens + ").";
	            if (throwOnUnknownDeps) {
	                this._reportError(syntaxError(message), typeOrFunc);
	            }
	            else {
	                this._console.warn("Warning: " + message + " This will become an error in Angular v5.x");
	            }
	        }
	        return dependenciesMetadata;
	    };
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getTokenMetadata = function (token) {
	        token = _angular_core.resolveForwardRef(token);
	        var /** @type {?} */ compileToken;
	        if (typeof token === 'string') {
	            compileToken = { value: token };
	        }
	        else {
	            compileToken = { identifier: { reference: token } };
	        }
	        return compileToken;
	    };
	    /**
	     * @param {?} providers
	     * @param {?} targetEntryComponents
	     * @param {?=} debugInfo
	     * @param {?=} compileProviders
	     * @param {?=} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getProvidersMetadata = function (providers, targetEntryComponents, debugInfo, compileProviders, type) {
	        var _this = this;
	        if (compileProviders === void 0) { compileProviders = []; }
	        providers.forEach(function (provider, providerIdx) {
	            if (Array.isArray(provider)) {
	                _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);
	            }
	            else {
	                provider = _angular_core.resolveForwardRef(provider);
	                var /** @type {?} */ providerMeta = void 0;
	                if (provider && typeof provider === 'object' && provider.hasOwnProperty('provide')) {
	                    _this._validateProvider(provider);
	                    providerMeta = new ProviderMeta(provider.provide, provider);
	                }
	                else if (isValidType(provider)) {
	                    providerMeta = new ProviderMeta(provider, { useClass: provider });
	                }
	                else if (provider === void 0) {
	                    _this._reportError(syntaxError("Encountered undefined provider! Usually this means you have a circular dependencies (might be caused by using 'barrel' index.ts files."));
	                }
	                else {
	                    var /** @type {?} */ providersInfo = ((providers.reduce(function (soFar, seenProvider, seenProviderIdx) {
	                        if (seenProviderIdx < providerIdx) {
	                            soFar.push("" + stringifyType(seenProvider));
	                        }
	                        else if (seenProviderIdx == providerIdx) {
	                            soFar.push("?" + stringifyType(seenProvider) + "?");
	                        }
	                        else if (seenProviderIdx == providerIdx + 1) {
	                            soFar.push('...');
	                        }
	                        return soFar;
	                    }, [])))
	                        .join(', ');
	                    _this._reportError(syntaxError("Invalid " + (debugInfo ? debugInfo : 'provider') + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]"), type);
	                }
	                if (providerMeta.token === resolveIdentifier(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {
	                    targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(providerMeta, type));
	                }
	                else {
	                    compileProviders.push(_this.getProviderMetadata(providerMeta));
	                }
	            }
	        });
	        return compileProviders;
	    };
	    /**
	     * @param {?} provider
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._validateProvider = function (provider) {
	        if (provider.hasOwnProperty('useClass') && provider.useClass == null) {
	            this._reportError(syntaxError("Invalid provider for " + stringifyType(provider.provide) + ". useClass cannot be " + provider.useClass + ".\n           Usually it happens when:\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\n           2. Class was used before it was declared. Use forwardRef in this case."));
	        }
	    };
	    /**
	     * @param {?} provider
	     * @param {?=} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider, type) {
	        var _this = this;
	        var /** @type {?} */ components = [];
	        var /** @type {?} */ collectedIdentifiers = [];
	        if (provider.useFactory || provider.useExisting || provider.useClass) {
	            this._reportError(syntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!"), type);
	            return [];
	        }
	        if (!provider.multi) {
	            this._reportError(syntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!"), type);
	            return [];
	        }
	        extractIdentifiers(provider.useValue, collectedIdentifiers);
	        collectedIdentifiers.forEach(function (identifier) {
	            var /** @type {?} */ entry = _this._getEntryComponentMetadata(identifier.reference, false);
	            if (entry) {
	                components.push(entry);
	            }
	        });
	        return components;
	    };
	    /**
	     * @param {?} dirType
	     * @param {?=} throwIfNotFound
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getEntryComponentMetadata = function (dirType, throwIfNotFound) {
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        var /** @type {?} */ dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);
	        if (dirMeta && dirMeta.metadata.isComponent) {
	            return { componentType: dirType, componentFactory: dirMeta.metadata.componentFactory };
	        }
	        else {
	            var /** @type {?} */ dirSummary = (this._loadSummary(dirType, CompileSummaryKind.Directive));
	            if (dirSummary && dirSummary.isComponent) {
	                return { componentType: dirType, componentFactory: dirSummary.componentFactory };
	            }
	        }
	        if (throwIfNotFound) {
	            throw syntaxError(dirType.name + " cannot be used as an entry component.");
	        }
	    };
	    /**
	     * @param {?} provider
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {
	        var /** @type {?} */ compileDeps;
	        var /** @type {?} */ compileTypeMetadata = null;
	        var /** @type {?} */ compileFactoryMetadata = null;
	        var /** @type {?} */ token = this._getTokenMetadata(provider.token);
	        if (provider.useClass) {
	            compileTypeMetadata = this._getInjectableMetadata(provider.useClass, provider.dependencies);
	            compileDeps = compileTypeMetadata.diDeps;
	            if (provider.token === provider.useClass) {
	                // use the compileTypeMetadata as it contains information about lifecycleHooks...
	                token = { identifier: compileTypeMetadata };
	            }
	        }
	        else if (provider.useFactory) {
	            compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);
	            compileDeps = compileFactoryMetadata.diDeps;
	        }
	        return {
	            token: token,
	            useClass: compileTypeMetadata,
	            useValue: provider.useValue,
	            useFactory: compileFactoryMetadata,
	            useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : null,
	            deps: compileDeps,
	            multi: provider.multi
	        };
	    };
	    /**
	     * @param {?} queries
	     * @param {?} isViewQuery
	     * @param {?} directiveType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getQueriesMetadata = function (queries, isViewQuery, directiveType) {
	        var _this = this;
	        var /** @type {?} */ res = [];
	        Object.keys(queries).forEach(function (propertyName) {
	            var /** @type {?} */ query = queries[propertyName];
	            if (query.isViewQuery === isViewQuery) {
	                res.push(_this._getQueryMetadata(query, propertyName, directiveType));
	            }
	        });
	        return res;
	    };
	    /**
	     * @param {?} selector
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._queryVarBindings = function (selector) { return selector.split(/\s*,\s*/); };
	    /**
	     * @param {?} q
	     * @param {?} propertyName
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getQueryMetadata = function (q, propertyName, typeOrFunc) {
	        var _this = this;
	        var /** @type {?} */ selectors;
	        if (typeof q.selector === 'string') {
	            selectors =
	                this._queryVarBindings(q.selector).map(function (varName) { return _this._getTokenMetadata(varName); });
	        }
	        else {
	            if (!q.selector) {
	                this._reportError(syntaxError("Can't construct a query for the property \"" + propertyName + "\" of \"" + stringifyType(typeOrFunc) + "\" since the query selector wasn't defined."), typeOrFunc);
	            }
	            selectors = [this._getTokenMetadata(q.selector)];
	        }
	        return {
	            selectors: selectors,
	            first: q.first,
	            descendants: q.descendants, propertyName: propertyName,
	            read: q.read ? this._getTokenMetadata(q.read) : null
	        };
	    };
	    /**
	     * @param {?} error
	     * @param {?=} type
	     * @param {?=} otherType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._reportError = function (error, type, otherType) {
	        if (this._errorCollector) {
	            this._errorCollector(error, type);
	            if (otherType) {
	                this._errorCollector(error, otherType);
	            }
	        }
	        else {
	            throw error;
	        }
	    };
	    return CompileMetadataResolver;
	}());
	CompileMetadataResolver.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	CompileMetadataResolver.ctorParameters = function () { return [
	    { type: CompilerConfig, },
	    { type: NgModuleResolver, },
	    { type: DirectiveResolver, },
	    { type: PipeResolver, },
	    { type: SummaryResolver, },
	    { type: ElementSchemaRegistry, },
	    { type: DirectiveNormalizer, },
	    { type: _angular_core.ɵConsole, },
	    { type: StaticSymbolCache, decorators: [{ type: _angular_core.Optional },] },
	    { type: _angular_core.ɵReflectorReader, },
	    { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [ERROR_COLLECTOR_TOKEN,] },] },
	]; };
	/**
	 * @param {?} tree
	 * @param {?=} out
	 * @return {?}
	 */
	function flattenArray(tree, out) {
	    if (out === void 0) { out = []; }
	    if (tree) {
	        for (var /** @type {?} */ i = 0; i < tree.length; i++) {
	            var /** @type {?} */ item = _angular_core.resolveForwardRef(tree[i]);
	            if (Array.isArray(item)) {
	                flattenArray(item, out);
	            }
	            else {
	                out.push(item);
	            }
	        }
	    }
	    return out;
	}
	/**
	 * @param {?} array
	 * @return {?}
	 */
	function dedupeArray(array) {
	    if (array) {
	        return Array.from(new Set(array));
	    }
	    return [];
	}
	/**
	 * @param {?} tree
	 * @return {?}
	 */
	function flattenAndDedupeArray(tree) {
	    return dedupeArray(flattenArray(tree));
	}
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function isValidType(value) {
	    return (value instanceof StaticSymbol) || (value instanceof _angular_core.Type);
	}
	/**
	 * @param {?} reflector
	 * @param {?} type
	 * @param {?} cmpMetadata
	 * @return {?}
	 */
	function componentModuleUrl(reflector, type, cmpMetadata) {
	    if (type instanceof StaticSymbol) {
	        return reflector.resourceUri(type);
	    }
	    var /** @type {?} */ moduleId = cmpMetadata.moduleId;
	    if (typeof moduleId === 'string') {
	        var /** @type {?} */ scheme = getUrlScheme(moduleId);
	        return scheme ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
	    }
	    else if (moduleId !== null && moduleId !== void 0) {
	        throw syntaxError("moduleId should be a string in \"" + stringifyType(type) + "\". See https://goo.gl/wIDDiL for more information.\n" +
	            "If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.");
	    }
	    return reflector.importUri(type);
	}
	/**
	 * @param {?} value
	 * @param {?} targetIdentifiers
	 * @return {?}
	 */
	function extractIdentifiers(value, targetIdentifiers) {
	    visitValue(value, new _CompileValueConverter(), targetIdentifiers);
	}
	var _CompileValueConverter = (function (_super) {
	    __extends(_CompileValueConverter, _super);
	    function _CompileValueConverter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} value
	     * @param {?} targetIdentifiers
	     * @return {?}
	     */
	    _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) {
	        targetIdentifiers.push({ reference: value });
	    };
	    return _CompileValueConverter;
	}(ValueTransformer));
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function stringifyType(type) {
	    if (type instanceof StaticSymbol) {
	        return type.name + " in " + type.filePath;
	    }
	    else {
	        return _angular_core.ɵstringify(type);
	    }
	}
	/**
	 * Indicates that a component is still being loaded in a synchronous compile.
	 * @param {?} compType
	 * @return {?}
	 */
	function componentStillLoadingError(compType) {
	    var /** @type {?} */ error = Error("Can't compile synchronously as " + _angular_core.ɵstringify(compType) + " is still being loaded!");
	    ((error))[_angular_core.ɵERROR_COMPONENT_TYPE] = compType;
	    return error;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TypeModifier = {};
	TypeModifier.Const = 0;
	TypeModifier[TypeModifier.Const] = "Const";
	/**
	 * @abstract
	 */
	var Type$1 = (function () {
	    /**
	     * @param {?=} modifiers
	     */
	    function Type$1(modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        this.modifiers = modifiers;
	        if (!modifiers) {
	            this.modifiers = [];
	        }
	    }
	    /**
	     * @abstract
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Type$1.prototype.visitType = function (visitor, context) { };
	    /**
	     * @param {?} modifier
	     * @return {?}
	     */
	    Type$1.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	    return Type$1;
	}());
	var BuiltinTypeName = {};
	BuiltinTypeName.Dynamic = 0;
	BuiltinTypeName.Bool = 1;
	BuiltinTypeName.String = 2;
	BuiltinTypeName.Int = 3;
	BuiltinTypeName.Number = 4;
	BuiltinTypeName.Function = 5;
	BuiltinTypeName.Inferred = 6;
	BuiltinTypeName[BuiltinTypeName.Dynamic] = "Dynamic";
	BuiltinTypeName[BuiltinTypeName.Bool] = "Bool";
	BuiltinTypeName[BuiltinTypeName.String] = "String";
	BuiltinTypeName[BuiltinTypeName.Int] = "Int";
	BuiltinTypeName[BuiltinTypeName.Number] = "Number";
	BuiltinTypeName[BuiltinTypeName.Function] = "Function";
	BuiltinTypeName[BuiltinTypeName.Inferred] = "Inferred";
	var BuiltinType = (function (_super) {
	    __extends(BuiltinType, _super);
	    /**
	     * @param {?} name
	     * @param {?=} modifiers
	     */
	    function BuiltinType(name, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers) || this;
	        _this.name = name;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    BuiltinType.prototype.visitType = function (visitor, context) {
	        return visitor.visitBuiltintType(this, context);
	    };
	    return BuiltinType;
	}(Type$1));
	var ExpressionType = (function (_super) {
	    __extends(ExpressionType, _super);
	    /**
	     * @param {?} value
	     * @param {?=} modifiers
	     */
	    function ExpressionType(value, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers) || this;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ExpressionType.prototype.visitType = function (visitor, context) {
	        return visitor.visitExpressionType(this, context);
	    };
	    return ExpressionType;
	}(Type$1));
	var ArrayType = (function (_super) {
	    __extends(ArrayType, _super);
	    /**
	     * @param {?} of
	     * @param {?=} modifiers
	     */
	    function ArrayType(of, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers) || this;
	        _this.of = of;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ArrayType.prototype.visitType = function (visitor, context) {
	        return visitor.visitArrayType(this, context);
	    };
	    return ArrayType;
	}(Type$1));
	var MapType = (function (_super) {
	    __extends(MapType, _super);
	    /**
	     * @param {?} valueType
	     * @param {?=} modifiers
	     */
	    function MapType(valueType, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers) || this;
	        _this.valueType = valueType;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    MapType.prototype.visitType = function (visitor, context) { return visitor.visitMapType(this, context); };
	    return MapType;
	}(Type$1));
	var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
	var INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);
	var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
	var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
	var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
	var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
	var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
	var BinaryOperator = {};
	BinaryOperator.Equals = 0;
	BinaryOperator.NotEquals = 1;
	BinaryOperator.Identical = 2;
	BinaryOperator.NotIdentical = 3;
	BinaryOperator.Minus = 4;
	BinaryOperator.Plus = 5;
	BinaryOperator.Divide = 6;
	BinaryOperator.Multiply = 7;
	BinaryOperator.Modulo = 8;
	BinaryOperator.And = 9;
	BinaryOperator.Or = 10;
	BinaryOperator.Lower = 11;
	BinaryOperator.LowerEquals = 12;
	BinaryOperator.Bigger = 13;
	BinaryOperator.BiggerEquals = 14;
	BinaryOperator[BinaryOperator.Equals] = "Equals";
	BinaryOperator[BinaryOperator.NotEquals] = "NotEquals";
	BinaryOperator[BinaryOperator.Identical] = "Identical";
	BinaryOperator[BinaryOperator.NotIdentical] = "NotIdentical";
	BinaryOperator[BinaryOperator.Minus] = "Minus";
	BinaryOperator[BinaryOperator.Plus] = "Plus";
	BinaryOperator[BinaryOperator.Divide] = "Divide";
	BinaryOperator[BinaryOperator.Multiply] = "Multiply";
	BinaryOperator[BinaryOperator.Modulo] = "Modulo";
	BinaryOperator[BinaryOperator.And] = "And";
	BinaryOperator[BinaryOperator.Or] = "Or";
	BinaryOperator[BinaryOperator.Lower] = "Lower";
	BinaryOperator[BinaryOperator.LowerEquals] = "LowerEquals";
	BinaryOperator[BinaryOperator.Bigger] = "Bigger";
	BinaryOperator[BinaryOperator.BiggerEquals] = "BiggerEquals";
	/**
	 * @abstract
	 */
	var Expression = (function () {
	    /**
	     * @param {?} type
	     * @param {?=} sourceSpan
	     */
	    function Expression(type, sourceSpan) {
	        this.type = type;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @abstract
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Expression.prototype.visitExpression = function (visitor, context) { };
	    /**
	     * @param {?} name
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.prop = function (name, sourceSpan) {
	        return new ReadPropExpr(this, name, null, sourceSpan);
	    };
	    /**
	     * @param {?} index
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.key = function (index, type, sourceSpan) {
	        if (type === void 0) { type = null; }
	        return new ReadKeyExpr(this, index, type, sourceSpan);
	    };
	    /**
	     * @param {?} name
	     * @param {?} params
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.callMethod = function (name, params, sourceSpan) {
	        return new InvokeMethodExpr(this, name, params, null, sourceSpan);
	    };
	    /**
	     * @param {?} params
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.callFn = function (params, sourceSpan) {
	        return new InvokeFunctionExpr(this, params, null, sourceSpan);
	    };
	    /**
	     * @param {?} params
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.instantiate = function (params, type, sourceSpan) {
	        if (type === void 0) { type = null; }
	        return new InstantiateExpr(this, params, type, sourceSpan);
	    };
	    /**
	     * @param {?} trueCase
	     * @param {?=} falseCase
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.conditional = function (trueCase, falseCase, sourceSpan) {
	        if (falseCase === void 0) { falseCase = null; }
	        return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.equals = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.notEquals = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.identical = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.notIdentical = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.minus = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.plus = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.divide = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.multiply = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.modulo = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.and = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.or = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.lower = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.lowerEquals = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.bigger = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.biggerEquals = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.isBlank = function (sourceSpan) {
	        // Note: We use equals by purpose here to compare to null and undefined in JS.
	        // We use the typed null to allow strictNullChecks to narrow types.
	        return this.equals(TYPED_NULL_EXPR, sourceSpan);
	    };
	    /**
	     * @param {?} type
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.cast = function (type, sourceSpan) {
	        return new CastExpr(this, type, sourceSpan);
	    };
	    /**
	     * @return {?}
	     */
	    Expression.prototype.toStmt = function () { return new ExpressionStatement(this); };
	    return Expression;
	}());
	var BuiltinVar = {};
	BuiltinVar.This = 0;
	BuiltinVar.Super = 1;
	BuiltinVar.CatchError = 2;
	BuiltinVar.CatchStack = 3;
	BuiltinVar[BuiltinVar.This] = "This";
	BuiltinVar[BuiltinVar.Super] = "Super";
	BuiltinVar[BuiltinVar.CatchError] = "CatchError";
	BuiltinVar[BuiltinVar.CatchStack] = "CatchStack";
	var ReadVarExpr = (function (_super) {
	    __extends(ReadVarExpr, _super);
	    /**
	     * @param {?} name
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function ReadVarExpr(name, type, sourceSpan) {
	        if (type === void 0) { type = null; }
	        var _this = _super.call(this, type, sourceSpan) || this;
	        if (typeof name === 'string') {
	            _this.name = name;
	            _this.builtin = null;
	        }
	        else {
	            _this.name = null;
	            _this.builtin = name;
	        }
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ReadVarExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitReadVarExpr(this, context);
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    ReadVarExpr.prototype.set = function (value) {
	        return new WriteVarExpr(this.name, value, null, this.sourceSpan);
	    };
	    return ReadVarExpr;
	}(Expression));
	var WriteVarExpr = (function (_super) {
	    __extends(WriteVarExpr, _super);
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function WriteVarExpr(name, value, type, sourceSpan) {
	        if (type === void 0) { type = null; }
	        var _this = _super.call(this, type || value.type, sourceSpan) || this;
	        _this.name = name;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    WriteVarExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitWriteVarExpr(this, context);
	    };
	    /**
	     * @param {?=} type
	     * @param {?=} modifiers
	     * @return {?}
	     */
	    WriteVarExpr.prototype.toDeclStmt = function (type, modifiers) {
	        if (type === void 0) { type = null; }
	        if (modifiers === void 0) { modifiers = null; }
	        return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);
	    };
	    return WriteVarExpr;
	}(Expression));
	var WriteKeyExpr = (function (_super) {
	    __extends(WriteKeyExpr, _super);
	    /**
	     * @param {?} receiver
	     * @param {?} index
	     * @param {?} value
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function WriteKeyExpr(receiver, index, value, type, sourceSpan) {
	        if (type === void 0) { type = null; }
	        var _this = _super.call(this, type || value.type, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.index = index;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    WriteKeyExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitWriteKeyExpr(this, context);
	    };
	    return WriteKeyExpr;
	}(Expression));
	var WritePropExpr = (function (_super) {
	    __extends(WritePropExpr, _super);
	    /**
	     * @param {?} receiver
	     * @param {?} name
	     * @param {?} value
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function WritePropExpr(receiver, name, value, type, sourceSpan) {
	        if (type === void 0) { type = null; }
	        var _this = _super.call(this, type || value.type, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    WritePropExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitWritePropExpr(this, context);
	    };
	    return WritePropExpr;
	}(Expression));
	var BuiltinMethod = {};
	BuiltinMethod.ConcatArray = 0;
	BuiltinMethod.SubscribeObservable = 1;
	BuiltinMethod.Bind = 2;
	BuiltinMethod[BuiltinMethod.ConcatArray] = "ConcatArray";
	BuiltinMethod[BuiltinMethod.SubscribeObservable] = "SubscribeObservable";
	BuiltinMethod[BuiltinMethod.Bind] = "Bind";
	var InvokeMethodExpr = (function (_super) {
	    __extends(InvokeMethodExpr, _super);
	    /**
	     * @param {?} receiver
	     * @param {?} method
	     * @param {?} args
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function InvokeMethodExpr(receiver, method, args, type, sourceSpan) {
	        if (type === void 0) { type = null; }
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.args = args;
	        if (typeof method === 'string') {
	            _this.name = method;
	            _this.builtin = null;
	        }
	        else {
	            _this.name = null;
	            _this.builtin = method;
	        }
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    InvokeMethodExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitInvokeMethodExpr(this, context);
	    };
	    return InvokeMethodExpr;
	}(Expression));
	var InvokeFunctionExpr = (function (_super) {
	    __extends(InvokeFunctionExpr, _super);
	    /**
	     * @param {?} fn
	     * @param {?} args
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function InvokeFunctionExpr(fn, args, type, sourceSpan) {
	        if (type === void 0) { type = null; }
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.fn = fn;
	        _this.args = args;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    InvokeFunctionExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitInvokeFunctionExpr(this, context);
	    };
	    return InvokeFunctionExpr;
	}(Expression));
	var InstantiateExpr = (function (_super) {
	    __extends(InstantiateExpr, _super);
	    /**
	     * @param {?} classExpr
	     * @param {?} args
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function InstantiateExpr(classExpr, args, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.classExpr = classExpr;
	        _this.args = args;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    InstantiateExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitInstantiateExpr(this, context);
	    };
	    return InstantiateExpr;
	}(Expression));
	var LiteralExpr = (function (_super) {
	    __extends(LiteralExpr, _super);
	    /**
	     * @param {?} value
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function LiteralExpr(value, type, sourceSpan) {
	        if (type === void 0) { type = null; }
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    LiteralExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitLiteralExpr(this, context);
	    };
	    return LiteralExpr;
	}(Expression));
	var ExternalExpr = (function (_super) {
	    __extends(ExternalExpr, _super);
	    /**
	     * @param {?} value
	     * @param {?=} type
	     * @param {?=} typeParams
	     * @param {?=} sourceSpan
	     */
	    function ExternalExpr(value, type, typeParams, sourceSpan) {
	        if (type === void 0) { type = null; }
	        if (typeParams === void 0) { typeParams = null; }
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.value = value;
	        _this.typeParams = typeParams;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ExternalExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitExternalExpr(this, context);
	    };
	    return ExternalExpr;
	}(Expression));
	var ConditionalExpr = (function (_super) {
	    __extends(ConditionalExpr, _super);
	    /**
	     * @param {?} condition
	     * @param {?} trueCase
	     * @param {?=} falseCase
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function ConditionalExpr(condition, trueCase, falseCase, type, sourceSpan) {
	        if (falseCase === void 0) { falseCase = null; }
	        if (type === void 0) { type = null; }
	        var _this = _super.call(this, type || trueCase.type, sourceSpan) || this;
	        _this.condition = condition;
	        _this.falseCase = falseCase;
	        _this.trueCase = trueCase;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ConditionalExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitConditionalExpr(this, context);
	    };
	    return ConditionalExpr;
	}(Expression));
	var NotExpr = (function (_super) {
	    __extends(NotExpr, _super);
	    /**
	     * @param {?} condition
	     * @param {?=} sourceSpan
	     */
	    function NotExpr(condition, sourceSpan) {
	        var _this = _super.call(this, BOOL_TYPE, sourceSpan) || this;
	        _this.condition = condition;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    NotExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitNotExpr(this, context);
	    };
	    return NotExpr;
	}(Expression));
	var CastExpr = (function (_super) {
	    __extends(CastExpr, _super);
	    /**
	     * @param {?} value
	     * @param {?} type
	     * @param {?=} sourceSpan
	     */
	    function CastExpr(value, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    CastExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitCastExpr(this, context);
	    };
	    return CastExpr;
	}(Expression));
	var FnParam = (function () {
	    /**
	     * @param {?} name
	     * @param {?=} type
	     */
	    function FnParam(name, type) {
	        if (type === void 0) { type = null; }
	        this.name = name;
	        this.type = type;
	    }
	    return FnParam;
	}());
	var FunctionExpr = (function (_super) {
	    __extends(FunctionExpr, _super);
	    /**
	     * @param {?} params
	     * @param {?} statements
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function FunctionExpr(params, statements, type, sourceSpan) {
	        if (type === void 0) { type = null; }
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.params = params;
	        _this.statements = statements;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    FunctionExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitFunctionExpr(this, context);
	    };
	    /**
	     * @param {?} name
	     * @param {?=} modifiers
	     * @return {?}
	     */
	    FunctionExpr.prototype.toDeclStmt = function (name, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);
	    };
	    return FunctionExpr;
	}(Expression));
	var BinaryOperatorExpr = (function (_super) {
	    __extends(BinaryOperatorExpr, _super);
	    /**
	     * @param {?} operator
	     * @param {?} lhs
	     * @param {?} rhs
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function BinaryOperatorExpr(operator, lhs, rhs, type, sourceSpan) {
	        if (type === void 0) { type = null; }
	        var _this = _super.call(this, type || lhs.type, sourceSpan) || this;
	        _this.operator = operator;
	        _this.rhs = rhs;
	        _this.lhs = lhs;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    BinaryOperatorExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitBinaryOperatorExpr(this, context);
	    };
	    return BinaryOperatorExpr;
	}(Expression));
	var ReadPropExpr = (function (_super) {
	    __extends(ReadPropExpr, _super);
	    /**
	     * @param {?} receiver
	     * @param {?} name
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function ReadPropExpr(receiver, name, type, sourceSpan) {
	        if (type === void 0) { type = null; }
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ReadPropExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitReadPropExpr(this, context);
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    ReadPropExpr.prototype.set = function (value) {
	        return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);
	    };
	    return ReadPropExpr;
	}(Expression));
	var ReadKeyExpr = (function (_super) {
	    __extends(ReadKeyExpr, _super);
	    /**
	     * @param {?} receiver
	     * @param {?} index
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function ReadKeyExpr(receiver, index, type, sourceSpan) {
	        if (type === void 0) { type = null; }
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.index = index;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ReadKeyExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitReadKeyExpr(this, context);
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    ReadKeyExpr.prototype.set = function (value) {
	        return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);
	    };
	    return ReadKeyExpr;
	}(Expression));
	var LiteralArrayExpr = (function (_super) {
	    __extends(LiteralArrayExpr, _super);
	    /**
	     * @param {?} entries
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function LiteralArrayExpr(entries, type, sourceSpan) {
	        if (type === void 0) { type = null; }
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.entries = entries;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    LiteralArrayExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitLiteralArrayExpr(this, context);
	    };
	    return LiteralArrayExpr;
	}(Expression));
	var LiteralMapEntry = (function () {
	    /**
	     * @param {?} key
	     * @param {?} value
	     * @param {?=} quoted
	     */
	    function LiteralMapEntry(key, value, quoted) {
	        if (quoted === void 0) { quoted = false; }
	        this.key = key;
	        this.value = value;
	        this.quoted = quoted;
	    }
	    return LiteralMapEntry;
	}());
	var LiteralMapExpr = (function (_super) {
	    __extends(LiteralMapExpr, _super);
	    /**
	     * @param {?} entries
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function LiteralMapExpr(entries, type, sourceSpan) {
	        if (type === void 0) { type = null; }
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.entries = entries;
	        _this.valueType = null;
	        if (type) {
	            _this.valueType = type.valueType;
	        }
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    LiteralMapExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitLiteralMapExpr(this, context);
	    };
	    return LiteralMapExpr;
	}(Expression));
	var CommaExpr = (function (_super) {
	    __extends(CommaExpr, _super);
	    /**
	     * @param {?} parts
	     * @param {?=} sourceSpan
	     */
	    function CommaExpr(parts, sourceSpan) {
	        var _this = _super.call(this, parts[parts.length - 1].type, sourceSpan) || this;
	        _this.parts = parts;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    CommaExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitCommaExpr(this, context);
	    };
	    return CommaExpr;
	}(Expression));
	var THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
	var SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
	var CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
	var CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
	var NULL_EXPR = new LiteralExpr(null, null);
	var TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE);
	var StmtModifier = {};
	StmtModifier.Final = 0;
	StmtModifier.Private = 1;
	StmtModifier[StmtModifier.Final] = "Final";
	StmtModifier[StmtModifier.Private] = "Private";
	/**
	 * @abstract
	 */
	var Statement = (function () {
	    /**
	     * @param {?=} modifiers
	     * @param {?=} sourceSpan
	     */
	    function Statement(modifiers, sourceSpan) {
	        if (modifiers === void 0) { modifiers = null; }
	        this.modifiers = modifiers;
	        this.sourceSpan = sourceSpan;
	        if (!modifiers) {
	            this.modifiers = [];
	        }
	    }
	    /**
	     * @abstract
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Statement.prototype.visitStatement = function (visitor, context) { };
	    /**
	     * @param {?} modifier
	     * @return {?}
	     */
	    Statement.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	    return Statement;
	}());
	var DeclareVarStmt = (function (_super) {
	    __extends(DeclareVarStmt, _super);
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?=} type
	     * @param {?=} modifiers
	     * @param {?=} sourceSpan
	     */
	    function DeclareVarStmt(name, value, type, modifiers, sourceSpan) {
	        if (type === void 0) { type = null; }
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers, sourceSpan) || this;
	        _this.name = name;
	        _this.value = value;
	        _this.type = type || value.type;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    DeclareVarStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitDeclareVarStmt(this, context);
	    };
	    return DeclareVarStmt;
	}(Statement));
	var DeclareFunctionStmt = (function (_super) {
	    __extends(DeclareFunctionStmt, _super);
	    /**
	     * @param {?} name
	     * @param {?} params
	     * @param {?} statements
	     * @param {?=} type
	     * @param {?=} modifiers
	     * @param {?=} sourceSpan
	     */
	    function DeclareFunctionStmt(name, params, statements, type, modifiers, sourceSpan) {
	        if (type === void 0) { type = null; }
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers, sourceSpan) || this;
	        _this.name = name;
	        _this.params = params;
	        _this.statements = statements;
	        _this.type = type;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    DeclareFunctionStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitDeclareFunctionStmt(this, context);
	    };
	    return DeclareFunctionStmt;
	}(Statement));
	var ExpressionStatement = (function (_super) {
	    __extends(ExpressionStatement, _super);
	    /**
	     * @param {?} expr
	     * @param {?=} sourceSpan
	     */
	    function ExpressionStatement(expr, sourceSpan) {
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.expr = expr;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ExpressionStatement.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitExpressionStmt(this, context);
	    };
	    return ExpressionStatement;
	}(Statement));
	var ReturnStatement = (function (_super) {
	    __extends(ReturnStatement, _super);
	    /**
	     * @param {?} value
	     * @param {?=} sourceSpan
	     */
	    function ReturnStatement(value, sourceSpan) {
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ReturnStatement.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitReturnStmt(this, context);
	    };
	    return ReturnStatement;
	}(Statement));
	var AbstractClassPart = (function () {
	    /**
	     * @param {?=} type
	     * @param {?=} modifiers
	     */
	    function AbstractClassPart(type, modifiers) {
	        if (type === void 0) { type = null; }
	        this.type = type;
	        this.modifiers = modifiers;
	        if (!modifiers) {
	            this.modifiers = [];
	        }
	    }
	    /**
	     * @param {?} modifier
	     * @return {?}
	     */
	    AbstractClassPart.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	    return AbstractClassPart;
	}());
	var ClassField = (function (_super) {
	    __extends(ClassField, _super);
	    /**
	     * @param {?} name
	     * @param {?=} type
	     * @param {?=} modifiers
	     */
	    function ClassField(name, type, modifiers) {
	        if (type === void 0) { type = null; }
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, type, modifiers) || this;
	        _this.name = name;
	        return _this;
	    }
	    return ClassField;
	}(AbstractClassPart));
	var ClassMethod = (function (_super) {
	    __extends(ClassMethod, _super);
	    /**
	     * @param {?} name
	     * @param {?} params
	     * @param {?} body
	     * @param {?=} type
	     * @param {?=} modifiers
	     */
	    function ClassMethod(name, params, body, type, modifiers) {
	        if (type === void 0) { type = null; }
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, type, modifiers) || this;
	        _this.name = name;
	        _this.params = params;
	        _this.body = body;
	        return _this;
	    }
	    return ClassMethod;
	}(AbstractClassPart));
	var ClassGetter = (function (_super) {
	    __extends(ClassGetter, _super);
	    /**
	     * @param {?} name
	     * @param {?} body
	     * @param {?=} type
	     * @param {?=} modifiers
	     */
	    function ClassGetter(name, body, type, modifiers) {
	        if (type === void 0) { type = null; }
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, type, modifiers) || this;
	        _this.name = name;
	        _this.body = body;
	        return _this;
	    }
	    return ClassGetter;
	}(AbstractClassPart));
	var ClassStmt = (function (_super) {
	    __extends(ClassStmt, _super);
	    /**
	     * @param {?} name
	     * @param {?} parent
	     * @param {?} fields
	     * @param {?} getters
	     * @param {?} constructorMethod
	     * @param {?} methods
	     * @param {?=} modifiers
	     * @param {?=} sourceSpan
	     */
	    function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers, sourceSpan) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers, sourceSpan) || this;
	        _this.name = name;
	        _this.parent = parent;
	        _this.fields = fields;
	        _this.getters = getters;
	        _this.constructorMethod = constructorMethod;
	        _this.methods = methods;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ClassStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitDeclareClassStmt(this, context);
	    };
	    return ClassStmt;
	}(Statement));
	var IfStmt = (function (_super) {
	    __extends(IfStmt, _super);
	    /**
	     * @param {?} condition
	     * @param {?} trueCase
	     * @param {?=} falseCase
	     * @param {?=} sourceSpan
	     */
	    function IfStmt(condition, trueCase, falseCase, sourceSpan) {
	        if (falseCase === void 0) { falseCase = []; }
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.condition = condition;
	        _this.trueCase = trueCase;
	        _this.falseCase = falseCase;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    IfStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitIfStmt(this, context);
	    };
	    return IfStmt;
	}(Statement));
	var TryCatchStmt = (function (_super) {
	    __extends(TryCatchStmt, _super);
	    /**
	     * @param {?} bodyStmts
	     * @param {?} catchStmts
	     * @param {?=} sourceSpan
	     */
	    function TryCatchStmt(bodyStmts, catchStmts, sourceSpan) {
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.bodyStmts = bodyStmts;
	        _this.catchStmts = catchStmts;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    TryCatchStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitTryCatchStmt(this, context);
	    };
	    return TryCatchStmt;
	}(Statement));
	var ThrowStmt = (function (_super) {
	    __extends(ThrowStmt, _super);
	    /**
	     * @param {?} error
	     * @param {?=} sourceSpan
	     */
	    function ThrowStmt(error, sourceSpan) {
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.error = error;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ThrowStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitThrowStmt(this, context);
	    };
	    return ThrowStmt;
	}(Statement));
	var AstTransformer$1 = (function () {
	    function AstTransformer$1() {
	    }
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.transformExpr = function (expr, context) { return expr; };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.transformStmt = function (stmt, context) { return stmt; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitReadVarExpr = function (ast, context) { return this.transformExpr(ast, context); };
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitWriteVarExpr = function (expr, context) {
	        return this.transformExpr(new WriteVarExpr(expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
	    };
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitWriteKeyExpr = function (expr, context) {
	        return this.transformExpr(new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
	    };
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitWritePropExpr = function (expr, context) {
	        return this.transformExpr(new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitInvokeMethodExpr = function (ast, context) {
	        var /** @type {?} */ method = ast.builtin || ast.name;
	        return this.transformExpr(new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitInvokeFunctionExpr = function (ast, context) {
	        return this.transformExpr(new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitInstantiateExpr = function (ast, context) {
	        return this.transformExpr(new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitLiteralExpr = function (ast, context) { return this.transformExpr(ast, context); };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitExternalExpr = function (ast, context) {
	        return this.transformExpr(ast, context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitConditionalExpr = function (ast, context) {
	        return this.transformExpr(new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitNotExpr = function (ast, context) {
	        return this.transformExpr(new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitCastExpr = function (ast, context) {
	        return this.transformExpr(new CastExpr(ast.value.visitExpression(this, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitFunctionExpr = function (ast, context) {
	        return this.transformExpr(new FunctionExpr(ast.params, this.visitAllStatements(ast.statements, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitBinaryOperatorExpr = function (ast, context) {
	        return this.transformExpr(new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitReadPropExpr = function (ast, context) {
	        return this.transformExpr(new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitReadKeyExpr = function (ast, context) {
	        return this.transformExpr(new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitLiteralArrayExpr = function (ast, context) {
	        return this.transformExpr(new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitLiteralMapExpr = function (ast, context) {
	        var _this = this;
	        var /** @type {?} */ entries = ast.entries.map(function (entry) { return new LiteralMapEntry(entry.key, entry.value.visitExpression(_this, context), entry.quoted); });
	        var /** @type {?} */ mapType = new MapType(ast.valueType);
	        return this.transformExpr(new LiteralMapExpr(entries, mapType, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitCommaExpr = function (ast, context) {
	        return this.transformExpr(new CommaExpr(this.visitAllExpressions(ast.parts, context), ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} exprs
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitAllExpressions = function (exprs, context) {
	        var _this = this;
	        return exprs.map(function (expr) { return expr.visitExpression(_this, context); });
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitDeclareVarStmt = function (stmt, context) {
	        return this.transformStmt(new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers, stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	        return this.transformStmt(new DeclareFunctionStmt(stmt.name, stmt.params, this.visitAllStatements(stmt.statements, context), stmt.type, stmt.modifiers, stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitExpressionStmt = function (stmt, context) {
	        return this.transformStmt(new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitReturnStmt = function (stmt, context) {
	        return this.transformStmt(new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitDeclareClassStmt = function (stmt, context) {
	        var _this = this;
	        var /** @type {?} */ parent = stmt.parent.visitExpression(this, context);
	        var /** @type {?} */ getters = stmt.getters.map(function (getter) { return new ClassGetter(getter.name, _this.visitAllStatements(getter.body, context), getter.type, getter.modifiers); });
	        var /** @type {?} */ ctorMethod = stmt.constructorMethod &&
	            new ClassMethod(stmt.constructorMethod.name, stmt.constructorMethod.params, this.visitAllStatements(stmt.constructorMethod.body, context), stmt.constructorMethod.type, stmt.constructorMethod.modifiers);
	        var /** @type {?} */ methods = stmt.methods.map(function (method) { return new ClassMethod(method.name, method.params, _this.visitAllStatements(method.body, context), method.type, method.modifiers); });
	        return this.transformStmt(new ClassStmt(stmt.name, parent, stmt.fields, getters, ctorMethod, methods, stmt.modifiers, stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitIfStmt = function (stmt, context) {
	        return this.transformStmt(new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitTryCatchStmt = function (stmt, context) {
	        return this.transformStmt(new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitThrowStmt = function (stmt, context) {
	        return this.transformStmt(new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitCommentStmt = function (stmt, context) {
	        return this.transformStmt(stmt, context);
	    };
	    /**
	     * @param {?} stmts
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitAllStatements = function (stmts, context) {
	        var _this = this;
	        return stmts.map(function (stmt) { return stmt.visitStatement(_this, context); });
	    };
	    return AstTransformer$1;
	}());
	var RecursiveAstVisitor$1 = (function () {
	    function RecursiveAstVisitor$1() {
	    }
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitReadVarExpr = function (ast, context) { return ast; };
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitWriteVarExpr = function (expr, context) {
	        expr.value.visitExpression(this, context);
	        return expr;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitWriteKeyExpr = function (expr, context) {
	        expr.receiver.visitExpression(this, context);
	        expr.index.visitExpression(this, context);
	        expr.value.visitExpression(this, context);
	        return expr;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitWritePropExpr = function (expr, context) {
	        expr.receiver.visitExpression(this, context);
	        expr.value.visitExpression(this, context);
	        return expr;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitInvokeMethodExpr = function (ast, context) {
	        ast.receiver.visitExpression(this, context);
	        this.visitAllExpressions(ast.args, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitInvokeFunctionExpr = function (ast, context) {
	        ast.fn.visitExpression(this, context);
	        this.visitAllExpressions(ast.args, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitInstantiateExpr = function (ast, context) {
	        ast.classExpr.visitExpression(this, context);
	        this.visitAllExpressions(ast.args, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitLiteralExpr = function (ast, context) { return ast; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitExternalExpr = function (ast, context) { return ast; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitConditionalExpr = function (ast, context) {
	        ast.condition.visitExpression(this, context);
	        ast.trueCase.visitExpression(this, context);
	        ast.falseCase.visitExpression(this, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitNotExpr = function (ast, context) {
	        ast.condition.visitExpression(this, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitCastExpr = function (ast, context) {
	        ast.value.visitExpression(this, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitFunctionExpr = function (ast, context) {
	        this.visitAllStatements(ast.statements, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitBinaryOperatorExpr = function (ast, context) {
	        ast.lhs.visitExpression(this, context);
	        ast.rhs.visitExpression(this, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitReadPropExpr = function (ast, context) {
	        ast.receiver.visitExpression(this, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitReadKeyExpr = function (ast, context) {
	        ast.receiver.visitExpression(this, context);
	        ast.index.visitExpression(this, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitLiteralArrayExpr = function (ast, context) {
	        this.visitAllExpressions(ast.entries, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitLiteralMapExpr = function (ast, context) {
	        var _this = this;
	        ast.entries.forEach(function (entry) { return entry.value.visitExpression(_this, context); });
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitCommaExpr = function (ast, context) {
	        this.visitAllExpressions(ast.parts, context);
	    };
	    /**
	     * @param {?} exprs
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitAllExpressions = function (exprs, context) {
	        var _this = this;
	        exprs.forEach(function (expr) { return expr.visitExpression(_this, context); });
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitDeclareVarStmt = function (stmt, context) {
	        stmt.value.visitExpression(this, context);
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	        this.visitAllStatements(stmt.statements, context);
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitExpressionStmt = function (stmt, context) {
	        stmt.expr.visitExpression(this, context);
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitReturnStmt = function (stmt, context) {
	        stmt.value.visitExpression(this, context);
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitDeclareClassStmt = function (stmt, context) {
	        var _this = this;
	        stmt.parent.visitExpression(this, context);
	        stmt.getters.forEach(function (getter) { return _this.visitAllStatements(getter.body, context); });
	        if (stmt.constructorMethod) {
	            this.visitAllStatements(stmt.constructorMethod.body, context);
	        }
	        stmt.methods.forEach(function (method) { return _this.visitAllStatements(method.body, context); });
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitIfStmt = function (stmt, context) {
	        stmt.condition.visitExpression(this, context);
	        this.visitAllStatements(stmt.trueCase, context);
	        this.visitAllStatements(stmt.falseCase, context);
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitTryCatchStmt = function (stmt, context) {
	        this.visitAllStatements(stmt.bodyStmts, context);
	        this.visitAllStatements(stmt.catchStmts, context);
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitThrowStmt = function (stmt, context) {
	        stmt.error.visitExpression(this, context);
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitCommentStmt = function (stmt, context) { return stmt; };
	    /**
	     * @param {?} stmts
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitAllStatements = function (stmts, context) {
	        var _this = this;
	        stmts.forEach(function (stmt) { return stmt.visitStatement(_this, context); });
	    };
	    return RecursiveAstVisitor$1;
	}());
	/**
	 * @param {?} stmts
	 * @return {?}
	 */
	function findReadVarNames(stmts) {
	    var /** @type {?} */ visitor = new _ReadVarVisitor();
	    visitor.visitAllStatements(stmts, null);
	    return visitor.varNames;
	}
	var _ReadVarVisitor = (function (_super) {
	    __extends(_ReadVarVisitor, _super);
	    function _ReadVarVisitor() {
	        var _this = _super.apply(this, arguments) || this;
	        _this.varNames = new Set();
	        return _this;
	    }
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    _ReadVarVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	        // Don't descend into nested functions
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    _ReadVarVisitor.prototype.visitDeclareClassStmt = function (stmt, context) {
	        // Don't descend into nested classes
	        return stmt;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    _ReadVarVisitor.prototype.visitReadVarExpr = function (ast, context) {
	        this.varNames.add(ast.name);
	        return null;
	    };
	    return _ReadVarVisitor;
	}(RecursiveAstVisitor$1));
	/**
	 * @param {?} stmt
	 * @param {?} sourceSpan
	 * @return {?}
	 */
	function applySourceSpanToStatementIfNeeded(stmt, sourceSpan) {
	    if (!sourceSpan) {
	        return stmt;
	    }
	    var /** @type {?} */ transformer = new _ApplySourceSpanTransformer(sourceSpan);
	    return stmt.visitStatement(transformer, null);
	}
	/**
	 * @param {?} expr
	 * @param {?} sourceSpan
	 * @return {?}
	 */
	function applySourceSpanToExpressionIfNeeded(expr, sourceSpan) {
	    if (!sourceSpan) {
	        return expr;
	    }
	    var /** @type {?} */ transformer = new _ApplySourceSpanTransformer(sourceSpan);
	    return expr.visitExpression(transformer, null);
	}
	var _ApplySourceSpanTransformer = (function (_super) {
	    __extends(_ApplySourceSpanTransformer, _super);
	    /**
	     * @param {?} sourceSpan
	     */
	    function _ApplySourceSpanTransformer(sourceSpan) {
	        var _this = _super.call(this) || this;
	        _this.sourceSpan = sourceSpan;
	        return _this;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    _ApplySourceSpanTransformer.prototype._clone = function (obj) {
	        var /** @type {?} */ clone = Object.create(obj.constructor.prototype);
	        for (var /** @type {?} */ prop in obj) {
	            clone[prop] = obj[prop];
	        }
	        return clone;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    _ApplySourceSpanTransformer.prototype.transformExpr = function (expr, context) {
	        if (!expr.sourceSpan) {
	            expr = this._clone(expr);
	            expr.sourceSpan = this.sourceSpan;
	        }
	        return expr;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    _ApplySourceSpanTransformer.prototype.transformStmt = function (stmt, context) {
	        if (!stmt.sourceSpan) {
	            stmt = this._clone(stmt);
	            stmt.sourceSpan = this.sourceSpan;
	        }
	        return stmt;
	    };
	    return _ApplySourceSpanTransformer;
	}(AstTransformer$1));
	/**
	 * @param {?} name
	 * @param {?=} type
	 * @param {?=} sourceSpan
	 * @return {?}
	 */
	function variable(name, type, sourceSpan) {
	    if (type === void 0) { type = null; }
	    return new ReadVarExpr(name, type, sourceSpan);
	}
	/**
	 * @param {?} id
	 * @param {?=} typeParams
	 * @param {?=} sourceSpan
	 * @return {?}
	 */
	function importExpr(id, typeParams, sourceSpan) {
	    if (typeParams === void 0) { typeParams = null; }
	    return new ExternalExpr(id, null, typeParams, sourceSpan);
	}
	/**
	 * @param {?} id
	 * @param {?=} typeParams
	 * @param {?=} typeModifiers
	 * @return {?}
	 */
	function importType(id, typeParams, typeModifiers) {
	    if (typeParams === void 0) { typeParams = null; }
	    if (typeModifiers === void 0) { typeModifiers = null; }
	    return id != null ? expressionType(importExpr(id, typeParams), typeModifiers) : null;
	}
	/**
	 * @param {?} expr
	 * @param {?=} typeModifiers
	 * @return {?}
	 */
	function expressionType(expr, typeModifiers) {
	    if (typeModifiers === void 0) { typeModifiers = null; }
	    return expr != null ? new ExpressionType(expr, typeModifiers) : null;
	}
	/**
	 * @param {?} values
	 * @param {?=} type
	 * @param {?=} sourceSpan
	 * @return {?}
	 */
	function literalArr(values, type, sourceSpan) {
	    if (type === void 0) { type = null; }
	    return new LiteralArrayExpr(values, type, sourceSpan);
	}
	/**
	 * @param {?} values
	 * @param {?=} type
	 * @param {?=} quoted
	 * @return {?}
	 */
	function literalMap(values, type, quoted) {
	    if (type === void 0) { type = null; }
	    if (quoted === void 0) { quoted = false; }
	    return new LiteralMapExpr(values.map(function (entry) { return new LiteralMapEntry(entry[0], entry[1], quoted); }), type);
	}
	/**
	 * @param {?} expr
	 * @param {?=} sourceSpan
	 * @return {?}
	 */
	function not(expr, sourceSpan) {
	    return new NotExpr(expr, sourceSpan);
	}
	/**
	 * @param {?} params
	 * @param {?} body
	 * @param {?=} type
	 * @param {?=} sourceSpan
	 * @return {?}
	 */
	function fn(params, body, type, sourceSpan) {
	    if (type === void 0) { type = null; }
	    return new FunctionExpr(params, body, type, sourceSpan);
	}
	/**
	 * @param {?} value
	 * @param {?=} type
	 * @param {?=} sourceSpan
	 * @return {?}
	 */
	function literal(value, type, sourceSpan) {
	    if (type === void 0) { type = null; }
	    return new LiteralExpr(value, type, sourceSpan);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Create a new class stmts based on the given data.
	 * @param {?} config
	 * @return {?}
	 */
	function createClassStmt(config) {
	    var /** @type {?} */ parentArgs = config.parentArgs || [];
	    var /** @type {?} */ superCtorStmts = config.parent ? [SUPER_EXPR.callFn(parentArgs).toStmt()] : [];
	    var /** @type {?} */ builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [config.builders]);
	    var /** @type {?} */ ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));
	    return new ClassStmt(config.name, config.parent, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || [], config.sourceSpan);
	}
	/**
	 * @param {?} builders
	 * @return {?}
	 */
	function concatClassBuilderParts(builders) {
	    return {
	        fields: [].concat.apply([], builders.map(function (builder) { return builder.fields || []; })),
	        methods: [].concat.apply([], builders.map(function (builder) { return builder.methods || []; })),
	        getters: [].concat.apply([], builders.map(function (builder) { return builder.getters || []; })),
	        ctorStmts: [].concat.apply([], builders.map(function (builder) { return builder.ctorStmts || []; })),
	    };
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var QUOTED_KEYS = '$quoted$';
	/**
	 * @param {?} value
	 * @param {?=} type
	 * @return {?}
	 */
	function convertValueToOutputAst(value, type) {
	    if (type === void 0) { type = null; }
	    return visitValue(value, new _ValueOutputAstTransformer(), type);
	}
	var _ValueOutputAstTransformer = (function () {
	    function _ValueOutputAstTransformer() {
	    }
	    /**
	     * @param {?} arr
	     * @param {?} type
	     * @return {?}
	     */
	    _ValueOutputAstTransformer.prototype.visitArray = function (arr, type) {
	        var _this = this;
	        return literalArr(arr.map(function (value) { return visitValue(value, _this, null); }), type);
	    };
	    /**
	     * @param {?} map
	     * @param {?} type
	     * @return {?}
	     */
	    _ValueOutputAstTransformer.prototype.visitStringMap = function (map, type) {
	        var _this = this;
	        var /** @type {?} */ entries = [];
	        var /** @type {?} */ quotedSet = new Set(map && map[QUOTED_KEYS]);
	        Object.keys(map).forEach(function (key) {
	            entries.push(new LiteralMapEntry(key, visitValue(map[key], _this, null), quotedSet.has(key)));
	        });
	        return new LiteralMapExpr(entries, type);
	    };
	    /**
	     * @param {?} value
	     * @param {?} type
	     * @return {?}
	     */
	    _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, type) { return literal(value, type); };
	    /**
	     * @param {?} value
	     * @param {?} type
	     * @return {?}
	     */
	    _ValueOutputAstTransformer.prototype.visitOther = function (value, type) {
	        if (value instanceof Expression) {
	            return value;
	        }
	        else {
	            return importExpr({ reference: value });
	        }
	    };
	    return _ValueOutputAstTransformer;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This is currently not read, but will probably be used in the future.
	 * We keep it as we already pass it through all the rigth places...
	 */
	var ComponentFactoryDependency = (function () {
	    /**
	     * @param {?} compType
	     */
	    function ComponentFactoryDependency(compType) {
	        this.compType = compType;
	    }
	    return ComponentFactoryDependency;
	}());
	var NgModuleCompileResult = (function () {
	    /**
	     * @param {?} statements
	     * @param {?} ngModuleFactoryVar
	     * @param {?} dependencies
	     */
	    function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
	        this.statements = statements;
	        this.ngModuleFactoryVar = ngModuleFactoryVar;
	        this.dependencies = dependencies;
	    }
	    return NgModuleCompileResult;
	}());
	var NgModuleCompiler = (function () {
	    function NgModuleCompiler() {
	    }
	    /**
	     * @param {?} ngModuleMeta
	     * @param {?} extraProviders
	     * @return {?}
	     */
	    NgModuleCompiler.prototype.compile = function (ngModuleMeta, extraProviders) {
	        var /** @type {?} */ sourceSpan = typeSourceSpan('NgModule', ngModuleMeta.type);
	        var /** @type {?} */ deps = [];
	        var /** @type {?} */ bootstrapComponentFactories = [];
	        var /** @type {?} */ entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function (entryComponent) {
	            if (ngModuleMeta.bootstrapComponents.some(function (id) { return id.reference === entryComponent.componentType; })) {
	                bootstrapComponentFactories.push({ reference: entryComponent.componentFactory });
	            }
	            deps.push(new ComponentFactoryDependency(entryComponent.componentType));
	            return { reference: entryComponent.componentFactory };
	        });
	        var /** @type {?} */ builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
	        var /** @type {?} */ providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
	        providerParser.parse().forEach(function (provider) { return builder.addProvider(provider); });
	        var /** @type {?} */ injectorClass = builder.build();
	        var /** @type {?} */ ngModuleFactoryVar = identifierName(ngModuleMeta.type) + "NgFactory";
	        var /** @type {?} */ ngModuleFactoryStmt = variable(ngModuleFactoryVar)
	            .set(importExpr(createIdentifier(Identifiers.NgModuleFactory))
	            .instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(createIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const])))
	            .toDeclStmt(null, [StmtModifier.Final]);
	        var /** @type {?} */ stmts = [injectorClass, ngModuleFactoryStmt];
	        if (ngModuleMeta.id) {
	            var /** @type {?} */ registerFactoryStmt = importExpr(createIdentifier(Identifiers.RegisterModuleFactoryFn))
	                .callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)])
	                .toStmt();
	            stmts.push(registerFactoryStmt);
	        }
	        return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
	    };
	    return NgModuleCompiler;
	}());
	NgModuleCompiler.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	NgModuleCompiler.ctorParameters = function () { return []; };
	var _InjectorBuilder = (function () {
	    /**
	     * @param {?} _ngModuleMeta
	     * @param {?} _entryComponentFactories
	     * @param {?} _bootstrapComponentFactories
	     * @param {?} _sourceSpan
	     */
	    function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
	        this._ngModuleMeta = _ngModuleMeta;
	        this._entryComponentFactories = _entryComponentFactories;
	        this._bootstrapComponentFactories = _bootstrapComponentFactories;
	        this._sourceSpan = _sourceSpan;
	        this.fields = [];
	        this.getters = [];
	        this.methods = [];
	        this.ctorStmts = [];
	        this._lazyProps = new Map();
	        this._tokens = [];
	        this._instances = new Map();
	        this._createStmts = [];
	        this._destroyStmts = [];
	    }
	    /**
	     * @param {?} resolvedProvider
	     * @return {?}
	     */
	    _InjectorBuilder.prototype.addProvider = function (resolvedProvider) {
	        var _this = this;
	        var /** @type {?} */ providerValueExpressions = resolvedProvider.providers.map(function (provider) { return _this._getProviderValue(provider); });
	        var /** @type {?} */ propName = "_" + tokenName(resolvedProvider.token) + "_" + this._instances.size;
	        var /** @type {?} */ instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
	        if (resolvedProvider.lifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.OnDestroy) !== -1) {
	            var /** @type {?} */ callNgOnDestroy = instance.callMethod('ngOnDestroy', []);
	            if (!resolvedProvider.eager) {
	                callNgOnDestroy = this._lazyProps.get(instance.name).and(callNgOnDestroy);
	            }
	            this._destroyStmts.push(callNgOnDestroy.toStmt());
	        }
	        this._tokens.push(resolvedProvider.token);
	        this._instances.set(tokenReference(resolvedProvider.token), instance);
	    };
	    /**
	     * @return {?}
	     */
	    _InjectorBuilder.prototype.build = function () {
	        var _this = this;
	        var /** @type {?} */ getMethodStmts = this._tokens.map(function (token) {
	            var /** @type {?} */ providerExpr = _this._instances.get(tokenReference(token));
	            return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);
	        });
	        var /** @type {?} */ methods = [
	            new ClassMethod('createInternal', [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)),
	            new ClassMethod('getInternal', [
	                new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE),
	                new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)
	            ], getMethodStmts.concat([new ReturnStatement(InjectMethodVars.notFoundResult)]), DYNAMIC_TYPE),
	            new ClassMethod('destroyInternal', [], this._destroyStmts),
	        ];
	        var /** @type {?} */ parentArgs = [
	            variable(InjectorProps.parent.name),
	            literalArr(this._entryComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); })),
	            literalArr(this._bootstrapComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); }))
	        ];
	        var /** @type {?} */ injClassName = identifierName(this._ngModuleMeta.type) + "Injector";
	        return createClassStmt({
	            name: injClassName,
	            ctorParams: [new FnParam(InjectorProps.parent.name, importType(createIdentifier(Identifiers.Injector)))],
	            parent: importExpr(createIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]),
	            parentArgs: parentArgs,
	            builders: [{ methods: methods }, this]
	        });
	    };
	    /**
	     * @param {?} provider
	     * @return {?}
	     */
	    _InjectorBuilder.prototype._getProviderValue = function (provider) {
	        var _this = this;
	        var /** @type {?} */ result;
	        if (provider.useExisting != null) {
	            result = this._getDependency({ token: provider.useExisting });
	        }
	        else if (provider.useFactory != null) {
	            var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	            var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
	            result = importExpr(provider.useFactory).callFn(depsExpr);
	        }
	        else if (provider.useClass != null) {
	            var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	            var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
	            result =
	                importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
	        }
	        else {
	            result = convertValueToOutputAst(provider.useValue);
	        }
	        return result;
	    };
	    /**
	     * @param {?} propName
	     * @param {?} provider
	     * @param {?} providerValueExpressions
	     * @param {?} isMulti
	     * @param {?} isEager
	     * @return {?}
	     */
	    _InjectorBuilder.prototype._createProviderProperty = function (propName, provider, providerValueExpressions, isMulti, isEager) {
	        var /** @type {?} */ resolvedProviderValueExpr;
	        var /** @type {?} */ type;
	        if (isMulti) {
	            resolvedProviderValueExpr = literalArr(providerValueExpressions);
	            type = new ArrayType(DYNAMIC_TYPE);
	        }
	        else {
	            resolvedProviderValueExpr = providerValueExpressions[0];
	            type = providerValueExpressions[0].type;
	        }
	        if (!type) {
	            type = DYNAMIC_TYPE;
	        }
	        if (isEager) {
	            this.fields.push(new ClassField(propName, type));
	            this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
	        }
	        else {
	            var /** @type {?} */ internalFieldProp = THIS_EXPR.prop("_" + propName);
	            this.fields.push(new ClassField(internalFieldProp.name, type));
	            // Note: Equals is important for JS so that it also checks the undefined case!
	            var /** @type {?} */ getterStmts = [
	                new IfStmt(internalFieldProp.isBlank(), [internalFieldProp.set(resolvedProviderValueExpr).toStmt()]),
	                new ReturnStatement(internalFieldProp)
	            ];
	            this.getters.push(new ClassGetter(propName, getterStmts, type));
	            this._lazyProps.set(propName, internalFieldProp);
	        }
	        return THIS_EXPR.prop(propName);
	    };
	    /**
	     * @param {?} dep
	     * @return {?}
	     */
	    _InjectorBuilder.prototype._getDependency = function (dep) {
	        var /** @type {?} */ result = null;
	        if (dep.isValue) {
	            result = literal(dep.value);
	        }
	        if (!dep.isSkipSelf) {
	            if (dep.token) {
	                if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) {
	                    result = THIS_EXPR;
	                }
	                else if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver)) {
	                    result = THIS_EXPR.prop('componentFactoryResolver');
	                }
	            }
	            if (!result) {
	                result = this._instances.get(tokenReference(dep.token));
	            }
	        }
	        if (!result) {
	            var /** @type {?} */ args = [createDiTokenExpression(dep.token)];
	            if (dep.isOptional) {
	                args.push(NULL_EXPR);
	            }
	            result = InjectorProps.parent.callMethod('get', args);
	        }
	        return result;
	    };
	    return _InjectorBuilder;
	}());
	/**
	 * @param {?} token
	 * @return {?}
	 */
	function createDiTokenExpression(token) {
	    if (token.value != null) {
	        return literal(token.value);
	    }
	    else {
	        return importExpr(token.identifier);
	    }
	}
	var InjectorProps = (function () {
	    function InjectorProps() {
	    }
	    return InjectorProps;
	}());
	InjectorProps.parent = THIS_EXPR.prop('parent');
	var InjectMethodVars = (function () {
	    function InjectMethodVars() {
	    }
	    return InjectMethodVars;
	}());
	InjectMethodVars.token = variable('token');
	InjectMethodVars.notFoundResult = variable('notFoundResult');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit
	var VERSION$1 = 3;
	var JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';
	var SourceMapGenerator = (function () {
	    /**
	     * @param {?=} file
	     */
	    function SourceMapGenerator(file) {
	        if (file === void 0) { file = null; }
	        this.file = file;
	        this.sourcesContent = new Map();
	        this.lines = [];
	        this.lastCol0 = 0;
	        this.hasMappings = false;
	    }
	    /**
	     * @param {?} url
	     * @param {?=} content
	     * @return {?}
	     */
	    SourceMapGenerator.prototype.addSource = function (url, content) {
	        if (content === void 0) { content = null; }
	        if (!this.sourcesContent.has(url)) {
	            this.sourcesContent.set(url, content);
	        }
	        return this;
	    };
	    /**
	     * @return {?}
	     */
	    SourceMapGenerator.prototype.addLine = function () {
	        this.lines.push([]);
	        this.lastCol0 = 0;
	        return this;
	    };
	    /**
	     * @param {?} col0
	     * @param {?=} sourceUrl
	     * @param {?=} sourceLine0
	     * @param {?=} sourceCol0
	     * @return {?}
	     */
	    SourceMapGenerator.prototype.addMapping = function (col0, sourceUrl, sourceLine0, sourceCol0) {
	        if (!this.currentLine) {
	            throw new Error("A line must be added before mappings can be added");
	        }
	        if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {
	            throw new Error("Unknown source file \"" + sourceUrl + "\"");
	        }
	        if (col0 == null) {
	            throw new Error("The column in the generated code must be provided");
	        }
	        if (col0 < this.lastCol0) {
	            throw new Error("Mapping should be added in output order");
	        }
	        if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {
	            throw new Error("The source location must be provided when a source url is provided");
	        }
	        this.hasMappings = true;
	        this.lastCol0 = col0;
	        this.currentLine.push({ col0: col0, sourceUrl: sourceUrl, sourceLine0: sourceLine0, sourceCol0: sourceCol0 });
	        return this;
	    };
	    Object.defineProperty(SourceMapGenerator.prototype, "currentLine", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.lines.slice(-1)[0]; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    SourceMapGenerator.prototype.toJSON = function () {
	        var _this = this;
	        if (!this.hasMappings) {
	            return null;
	        }
	        var /** @type {?} */ sourcesIndex = new Map();
	        var /** @type {?} */ sources = [];
	        var /** @type {?} */ sourcesContent = [];
	        Array.from(this.sourcesContent.keys()).forEach(function (url, i) {
	            sourcesIndex.set(url, i);
	            sources.push(url);
	            sourcesContent.push(_this.sourcesContent.get(url) || null);
	        });
	        var /** @type {?} */ mappings = '';
	        var /** @type {?} */ lastCol0 = 0;
	        var /** @type {?} */ lastSourceIndex = 0;
	        var /** @type {?} */ lastSourceLine0 = 0;
	        var /** @type {?} */ lastSourceCol0 = 0;
	        this.lines.forEach(function (segments) {
	            lastCol0 = 0;
	            mappings += segments
	                .map(function (segment) {
	                // zero-based starting column of the line in the generated code
	                var /** @type {?} */ segAsStr = toBase64VLQ(segment.col0 - lastCol0);
	                lastCol0 = segment.col0;
	                if (segment.sourceUrl != null) {
	                    // zero-based index into the “sources” list
	                    segAsStr +=
	                        toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);
	                    lastSourceIndex = sourcesIndex.get(segment.sourceUrl);
	                    // the zero-based starting line in the original source
	                    segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);
	                    lastSourceLine0 = segment.sourceLine0;
	                    // the zero-based starting column in the original source
	                    segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);
	                    lastSourceCol0 = segment.sourceCol0;
	                }
	                return segAsStr;
	            })
	                .join(',');
	            mappings += ';';
	        });
	        mappings = mappings.slice(0, -1);
	        return {
	            'file': this.file || '',
	            'version': VERSION$1,
	            'sourceRoot': '',
	            'sources': sources,
	            'sourcesContent': sourcesContent,
	            'mappings': mappings,
	        };
	    };
	    /**
	     * @return {?}
	     */
	    SourceMapGenerator.prototype.toJsComment = function () {
	        return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) :
	            '';
	    };
	    return SourceMapGenerator;
	}());
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function toBase64String(value) {
	    var /** @type {?} */ b64 = '';
	    value = utf8Encode(value);
	    for (var /** @type {?} */ i = 0; i < value.length;) {
	        var /** @type {?} */ i1 = value.charCodeAt(i++);
	        var /** @type {?} */ i2 = value.charCodeAt(i++);
	        var /** @type {?} */ i3 = value.charCodeAt(i++);
	        b64 += toBase64Digit(i1 >> 2);
	        b64 += toBase64Digit(((i1 & 3) << 4) | (isNaN(i2) ? 0 : i2 >> 4));
	        b64 += isNaN(i2) ? '=' : toBase64Digit(((i2 & 15) << 2) | (i3 >> 6));
	        b64 += isNaN(i2) || isNaN(i3) ? '=' : toBase64Digit(i3 & 63);
	    }
	    return b64;
	}
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function toBase64VLQ(value) {
	    value = value < 0 ? ((-value) << 1) + 1 : value << 1;
	    var /** @type {?} */ out = '';
	    do {
	        var /** @type {?} */ digit = value & 31;
	        value = value >> 5;
	        if (value > 0) {
	            digit = digit | 32;
	        }
	        out += toBase64Digit(digit);
	    } while (value > 0);
	    return out;
	}
	var B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function toBase64Digit(value) {
	    if (value < 0 || value >= 64) {
	        throw new Error("Can only encode value in the range [0, 63]");
	    }
	    return B64_DIGITS[value];
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
	var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
	var _INDENT_WITH = '  ';
	var CATCH_ERROR_VAR$1 = variable('error');
	var CATCH_STACK_VAR$1 = variable('stack');
	/**
	 * @abstract
	 */
	var _EmittedLine = (function () {
	    /**
	     * @param {?} indent
	     */
	    function _EmittedLine(indent) {
	        this.indent = indent;
	        this.parts = [];
	        this.srcSpans = [];
	    }
	    return _EmittedLine;
	}());
	var EmitterVisitorContext = (function () {
	    /**
	     * @param {?} _exportedVars
	     * @param {?} _indent
	     */
	    function EmitterVisitorContext(_exportedVars, _indent) {
	        this._exportedVars = _exportedVars;
	        this._indent = _indent;
	        this._classes = [];
	        this._lines = [new _EmittedLine(_indent)];
	    }
	    /**
	     * @param {?} exportedVars
	     * @return {?}
	     */
	    EmitterVisitorContext.createRoot = function (exportedVars) {
	        return new EmitterVisitorContext(exportedVars, 0);
	    };
	    Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._lines[this._lines.length - 1]; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} varName
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.isExportedVar = function (varName) { return this._exportedVars.indexOf(varName) !== -1; };
	    /**
	     * @param {?=} from
	     * @param {?=} lastPart
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.println = function (from, lastPart) {
	        if (lastPart === void 0) { lastPart = ''; }
	        this.print(from, lastPart, true);
	    };
	    /**
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.lineIsEmpty = function () { return this._currentLine.parts.length === 0; };
	    /**
	     * @param {?} from
	     * @param {?} part
	     * @param {?=} newLine
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.print = function (from, part, newLine) {
	        if (newLine === void 0) { newLine = false; }
	        if (part.length > 0) {
	            this._currentLine.parts.push(part);
	            this._currentLine.srcSpans.push(from && from.sourceSpan || null);
	        }
	        if (newLine) {
	            this._lines.push(new _EmittedLine(this._indent));
	        }
	    };
	    /**
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.removeEmptyLastLine = function () {
	        if (this.lineIsEmpty()) {
	            this._lines.pop();
	        }
	    };
	    /**
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.incIndent = function () {
	        this._indent++;
	        this._currentLine.indent = this._indent;
	    };
	    /**
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.decIndent = function () {
	        this._indent--;
	        this._currentLine.indent = this._indent;
	    };
	    /**
	     * @param {?} clazz
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.pushClass = function (clazz) { this._classes.push(clazz); };
	    /**
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.popClass = function () { return this._classes.pop(); };
	    Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.toSource = function () {
	        return this.sourceLines
	            .map(function (l) { return l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : ''; })
	            .join('\n');
	    };
	    /**
	     * @param {?} sourceFilePath
	     * @param {?} genFilePath
	     * @param {?=} startsAtLine
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.toSourceMapGenerator = function (sourceFilePath, genFilePath, startsAtLine) {
	        if (startsAtLine === void 0) { startsAtLine = 0; }
	        var /** @type {?} */ map = new SourceMapGenerator(genFilePath);
	        var /** @type {?} */ firstOffsetMapped = false;
	        var /** @type {?} */ mapFirstOffsetIfNeeded = function () {
	            if (!firstOffsetMapped) {
	                // Add a single space so that tools won't try to load the file from disk.
	                // Note: We are using virtual urls like `ng:///`, so we have to
	                // provide a content here.
	                map.addSource(sourceFilePath, ' ').addMapping(0, sourceFilePath, 0, 0);
	                firstOffsetMapped = true;
	            }
	        };
	        for (var /** @type {?} */ i = 0; i < startsAtLine; i++) {
	            map.addLine();
	            mapFirstOffsetIfNeeded();
	        }
	        this.sourceLines.forEach(function (line, lineIdx) {
	            map.addLine();
	            var /** @type {?} */ spans = line.srcSpans;
	            var /** @type {?} */ parts = line.parts;
	            var /** @type {?} */ col0 = line.indent * _INDENT_WITH.length;
	            var /** @type {?} */ spanIdx = 0;
	            // skip leading parts without source spans
	            while (spanIdx < spans.length && !spans[spanIdx]) {
	                col0 += parts[spanIdx].length;
	                spanIdx++;
	            }
	            if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {
	                firstOffsetMapped = true;
	            }
	            else {
	                mapFirstOffsetIfNeeded();
	            }
	            while (spanIdx < spans.length) {
	                var /** @type {?} */ span = spans[spanIdx];
	                var /** @type {?} */ source = span.start.file;
	                var /** @type {?} */ sourceLine = span.start.line;
	                var /** @type {?} */ sourceCol = span.start.col;
	                map.addSource(source.url, source.content)
	                    .addMapping(col0, source.url, sourceLine, sourceCol);
	                col0 += parts[spanIdx].length;
	                spanIdx++;
	                // assign parts without span or the same span to the previous segment
	                while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {
	                    col0 += parts[spanIdx].length;
	                    spanIdx++;
	                }
	            }
	        });
	        return map;
	    };
	    Object.defineProperty(EmitterVisitorContext.prototype, "sourceLines", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {
	                return this._lines.slice(0, -1);
	            }
	            return this._lines;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return EmitterVisitorContext;
	}());
	/**
	 * @abstract
	 */
	var AbstractEmitterVisitor = (function () {
	    /**
	     * @param {?} _escapeDollarInStrings
	     */
	    function AbstractEmitterVisitor(_escapeDollarInStrings) {
	        this._escapeDollarInStrings = _escapeDollarInStrings;
	    }
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitExpressionStmt = function (stmt, ctx) {
	        stmt.expr.visitExpression(this, ctx);
	        ctx.println(stmt, ';');
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitReturnStmt = function (stmt, ctx) {
	        ctx.print(stmt, "return ");
	        stmt.value.visitExpression(this, ctx);
	        ctx.println(stmt, ';');
	        return null;
	    };
	    /**
	     * @abstract
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitCastExpr = function (ast, context) { };
	    /**
	     * @abstract
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) { };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitIfStmt = function (stmt, ctx) {
	        ctx.print(stmt, "if (");
	        stmt.condition.visitExpression(this, ctx);
	        ctx.print(stmt, ") {");
	        var /** @type {?} */ hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;
	        if (stmt.trueCase.length <= 1 && !hasElseCase) {
	            ctx.print(stmt, " ");
	            this.visitAllStatements(stmt.trueCase, ctx);
	            ctx.removeEmptyLastLine();
	            ctx.print(stmt, " ");
	        }
	        else {
	            ctx.println();
	            ctx.incIndent();
	            this.visitAllStatements(stmt.trueCase, ctx);
	            ctx.decIndent();
	            if (hasElseCase) {
	                ctx.println(stmt, "} else {");
	                ctx.incIndent();
	                this.visitAllStatements(stmt.falseCase, ctx);
	                ctx.decIndent();
	            }
	        }
	        ctx.println(stmt, "}");
	        return null;
	    };
	    /**
	     * @abstract
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) { };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitThrowStmt = function (stmt, ctx) {
	        ctx.print(stmt, "throw ");
	        stmt.error.visitExpression(this, ctx);
	        ctx.println(stmt, ";");
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitCommentStmt = function (stmt, ctx) {
	        var /** @type {?} */ lines = stmt.comment.split('\n');
	        lines.forEach(function (line) { ctx.println(stmt, "// " + line); });
	        return null;
	    };
	    /**
	     * @abstract
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) { };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitWriteVarExpr = function (expr, ctx) {
	        var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();
	        if (!lineWasEmpty) {
	            ctx.print(expr, '(');
	        }
	        ctx.print(expr, expr.name + " = ");
	        expr.value.visitExpression(this, ctx);
	        if (!lineWasEmpty) {
	            ctx.print(expr, ')');
	        }
	        return null;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function (expr, ctx) {
	        var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();
	        if (!lineWasEmpty) {
	            ctx.print(expr, '(');
	        }
	        expr.receiver.visitExpression(this, ctx);
	        ctx.print(expr, "[");
	        expr.index.visitExpression(this, ctx);
	        ctx.print(expr, "] = ");
	        expr.value.visitExpression(this, ctx);
	        if (!lineWasEmpty) {
	            ctx.print(expr, ')');
	        }
	        return null;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitWritePropExpr = function (expr, ctx) {
	        var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();
	        if (!lineWasEmpty) {
	            ctx.print(expr, '(');
	        }
	        expr.receiver.visitExpression(this, ctx);
	        ctx.print(expr, "." + expr.name + " = ");
	        expr.value.visitExpression(this, ctx);
	        if (!lineWasEmpty) {
	            ctx.print(expr, ')');
	        }
	        return null;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	        expr.receiver.visitExpression(this, ctx);
	        var /** @type {?} */ name = expr.name;
	        if (expr.builtin != null) {
	            name = this.getBuiltinMethodName(expr.builtin);
	            if (name == null) {
	                // some builtins just mean to skip the call.
	                return null;
	            }
	        }
	        ctx.print(expr, "." + name + "(");
	        this.visitAllExpressions(expr.args, ctx, ",");
	        ctx.print(expr, ")");
	        return null;
	    };
	    /**
	     * @abstract
	     * @param {?} method
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.getBuiltinMethodName = function (method) { };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	        expr.fn.visitExpression(this, ctx);
	        ctx.print(expr, "(");
	        this.visitAllExpressions(expr.args, ctx, ',');
	        ctx.print(expr, ")");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	        var /** @type {?} */ varName = ast.name;
	        if (ast.builtin != null) {
	            switch (ast.builtin) {
	                case BuiltinVar.Super:
	                    varName = 'super';
	                    break;
	                case BuiltinVar.This:
	                    varName = 'this';
	                    break;
	                case BuiltinVar.CatchError:
	                    varName = CATCH_ERROR_VAR$1.name;
	                    break;
	                case BuiltinVar.CatchStack:
	                    varName = CATCH_STACK_VAR$1.name;
	                    break;
	                default:
	                    throw new Error("Unknown builtin variable " + ast.builtin);
	            }
	        }
	        ctx.print(ast, varName);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
	        ctx.print(ast, "new ");
	        ast.classExpr.visitExpression(this, ctx);
	        ctx.print(ast, "(");
	        this.visitAllExpressions(ast.args, ctx, ',');
	        ctx.print(ast, ")");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	        var /** @type {?} */ value = ast.value;
	        if (typeof value === 'string') {
	            ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));
	        }
	        else {
	            ctx.print(ast, "" + value);
	        }
	        return null;
	    };
	    /**
	     * @abstract
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) { };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitConditionalExpr = function (ast, ctx) {
	        ctx.print(ast, "(");
	        ast.condition.visitExpression(this, ctx);
	        ctx.print(ast, '? ');
	        ast.trueCase.visitExpression(this, ctx);
	        ctx.print(ast, ': ');
	        ast.falseCase.visitExpression(this, ctx);
	        ctx.print(ast, ")");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitNotExpr = function (ast, ctx) {
	        ctx.print(ast, '!');
	        ast.condition.visitExpression(this, ctx);
	        return null;
	    };
	    /**
	     * @abstract
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) { };
	    /**
	     * @abstract
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	        var /** @type {?} */ opStr;
	        switch (ast.operator) {
	            case BinaryOperator.Equals:
	                opStr = '==';
	                break;
	            case BinaryOperator.Identical:
	                opStr = '===';
	                break;
	            case BinaryOperator.NotEquals:
	                opStr = '!=';
	                break;
	            case BinaryOperator.NotIdentical:
	                opStr = '!==';
	                break;
	            case BinaryOperator.And:
	                opStr = '&&';
	                break;
	            case BinaryOperator.Or:
	                opStr = '||';
	                break;
	            case BinaryOperator.Plus:
	                opStr = '+';
	                break;
	            case BinaryOperator.Minus:
	                opStr = '-';
	                break;
	            case BinaryOperator.Divide:
	                opStr = '/';
	                break;
	            case BinaryOperator.Multiply:
	                opStr = '*';
	                break;
	            case BinaryOperator.Modulo:
	                opStr = '%';
	                break;
	            case BinaryOperator.Lower:
	                opStr = '<';
	                break;
	            case BinaryOperator.LowerEquals:
	                opStr = '<=';
	                break;
	            case BinaryOperator.Bigger:
	                opStr = '>';
	                break;
	            case BinaryOperator.BiggerEquals:
	                opStr = '>=';
	                break;
	            default:
	                throw new Error("Unknown operator " + ast.operator);
	        }
	        ctx.print(ast, "(");
	        ast.lhs.visitExpression(this, ctx);
	        ctx.print(ast, " " + opStr + " ");
	        ast.rhs.visitExpression(this, ctx);
	        ctx.print(ast, ")");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitReadPropExpr = function (ast, ctx) {
	        ast.receiver.visitExpression(this, ctx);
	        ctx.print(ast, ".");
	        ctx.print(ast, ast.name);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitReadKeyExpr = function (ast, ctx) {
	        ast.receiver.visitExpression(this, ctx);
	        ctx.print(ast, "[");
	        ast.index.visitExpression(this, ctx);
	        ctx.print(ast, "]");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	        var /** @type {?} */ useNewLine = ast.entries.length > 1;
	        ctx.print(ast, "[", useNewLine);
	        ctx.incIndent();
	        this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
	        ctx.decIndent();
	        ctx.print(ast, "]", useNewLine);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) {
	        var _this = this;
	        var /** @type {?} */ useNewLine = ast.entries.length > 1;
	        ctx.print(ast, "{", useNewLine);
	        ctx.incIndent();
	        this.visitAllObjects(function (entry) {
	            ctx.print(ast, escapeIdentifier(entry.key, _this._escapeDollarInStrings, entry.quoted) + ": ");
	            entry.value.visitExpression(_this, ctx);
	        }, ast.entries, ctx, ',', useNewLine);
	        ctx.decIndent();
	        ctx.print(ast, "}", useNewLine);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitCommaExpr = function (ast, ctx) {
	        ctx.print(ast, '(');
	        this.visitAllExpressions(ast.parts, ctx, ',');
	        ctx.print(ast, ')');
	        return null;
	    };
	    /**
	     * @param {?} expressions
	     * @param {?} ctx
	     * @param {?} separator
	     * @param {?=} newLine
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitAllExpressions = function (expressions, ctx, separator, newLine) {
	        var _this = this;
	        if (newLine === void 0) { newLine = false; }
	        this.visitAllObjects(function (expr) { return expr.visitExpression(_this, ctx); }, expressions, ctx, separator, newLine);
	    };
	    /**
	     * @template T
	     * @param {?} handler
	     * @param {?} expressions
	     * @param {?} ctx
	     * @param {?} separator
	     * @param {?=} newLine
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitAllObjects = function (handler, expressions, ctx, separator, newLine) {
	        if (newLine === void 0) { newLine = false; }
	        for (var /** @type {?} */ i = 0; i < expressions.length; i++) {
	            if (i > 0) {
	                ctx.print(null, separator, newLine);
	            }
	            handler(expressions[i]);
	        }
	        if (newLine) {
	            ctx.println();
	        }
	    };
	    /**
	     * @param {?} statements
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitAllStatements = function (statements, ctx) {
	        var _this = this;
	        statements.forEach(function (stmt) { return stmt.visitStatement(_this, ctx); });
	    };
	    return AbstractEmitterVisitor;
	}());
	/**
	 * @param {?} input
	 * @param {?} escapeDollar
	 * @param {?=} alwaysQuote
	 * @return {?}
	 */
	function escapeIdentifier(input, escapeDollar, alwaysQuote) {
	    if (alwaysQuote === void 0) { alwaysQuote = true; }
	    if (input == null) {
	        return null;
	    }
	    var /** @type {?} */ body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () {
	        var match = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            match[_i] = arguments[_i];
	        }
	        if (match[0] == '$') {
	            return escapeDollar ? '\\$' : '$';
	        }
	        else if (match[0] == '\n') {
	            return '\\n';
	        }
	        else if (match[0] == '\r') {
	            return '\\r';
	        }
	        else {
	            return "\\" + match[0];
	        }
	    });
	    var /** @type {?} */ requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
	    return requiresQuotes ? "'" + body + "'" : body;
	}
	/**
	 * @param {?} count
	 * @return {?}
	 */
	function _createIndent(count) {
	    var /** @type {?} */ res = '';
	    for (var /** @type {?} */ i = 0; i < count; i++) {
	        res += _INDENT_WITH;
	    }
	    return res;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _debugFilePath = '/debug/lib';
	/**
	 * @param {?} ast
	 * @return {?}
	 */
	function debugOutputAstAsTypeScript(ast) {
	    var /** @type {?} */ converter = new _TsEmitterVisitor(_debugFilePath, {
	        /**
	         * @param {?} filePath
	         * @param {?} containingFilePath
	         * @return {?}
	         */
	        fileNameToModuleName: function (filePath, containingFilePath) { return filePath; },
	        /**
	         * @param {?} symbol
	         * @return {?}
	         */
	        getImportAs: function (symbol) { return null; },
	        getTypeArity: function (symbol) { return null; }
	    });
	    var /** @type {?} */ ctx = EmitterVisitorContext.createRoot([]);
	    var /** @type {?} */ asts = Array.isArray(ast) ? ast : [ast];
	    asts.forEach(function (ast) {
	        if (ast instanceof Statement) {
	            ast.visitStatement(converter, ctx);
	        }
	        else if (ast instanceof Expression) {
	            ast.visitExpression(converter, ctx);
	        }
	        else if (ast instanceof Type$1) {
	            ast.visitType(converter, ctx);
	        }
	        else {
	            throw new Error("Don't know how to print debug info for " + ast);
	        }
	    });
	    return ctx.toSource();
	}
	var TypeScriptEmitter = (function () {
	    /**
	     * @param {?} _importResolver
	     */
	    function TypeScriptEmitter(_importResolver) {
	        this._importResolver = _importResolver;
	    }
	    /**
	     * @param {?} srcFilePath
	     * @param {?} genFilePath
	     * @param {?} stmts
	     * @param {?} exportedVars
	     * @param {?=} preamble
	     * @return {?}
	     */
	    TypeScriptEmitter.prototype.emitStatements = function (srcFilePath, genFilePath, stmts, exportedVars, preamble) {
	        var _this = this;
	        if (preamble === void 0) { preamble = ''; }
	        var /** @type {?} */ converter = new _TsEmitterVisitor(genFilePath, this._importResolver);
	        var /** @type {?} */ ctx = EmitterVisitorContext.createRoot(exportedVars);
	        converter.visitAllStatements(stmts, ctx);
	        var /** @type {?} */ preambleLines = preamble ? preamble.split('\n') : [];
	        converter.reexports.forEach(function (reexports, exportedFilePath) {
	            var /** @type {?} */ reexportsCode = reexports.map(function (reexport) { return reexport.name + " as " + reexport.as; }).join(',');
	            preambleLines.push("export {" + reexportsCode + "} from '" + _this._importResolver.fileNameToModuleName(exportedFilePath, genFilePath) + "';");
	        });
	        converter.importsWithPrefixes.forEach(function (prefix, importedFilePath) {
	            // Note: can't write the real word for import as it screws up system.js auto detection...
	            preambleLines.push("imp" +
	                ("ort * as " + prefix + " from '" + _this._importResolver.fileNameToModuleName(importedFilePath, genFilePath) + "';"));
	        });
	        var /** @type {?} */ sm = ctx.toSourceMapGenerator(srcFilePath, genFilePath, preambleLines.length).toJsComment();
	        var /** @type {?} */ lines = preambleLines.concat([ctx.toSource(), sm]);
	        if (sm) {
	            // always add a newline at the end, as some tools have bugs without it.
	            lines.push('');
	        }
	        return lines.join('\n');
	    };
	    return TypeScriptEmitter;
	}());
	var _TsEmitterVisitor = (function (_super) {
	    __extends(_TsEmitterVisitor, _super);
	    /**
	     * @param {?} _genFilePath
	     * @param {?} _importResolver
	     */
	    function _TsEmitterVisitor(_genFilePath, _importResolver) {
	        var _this = _super.call(this, false) || this;
	        _this._genFilePath = _genFilePath;
	        _this._importResolver = _importResolver;
	        _this.typeExpression = 0;
	        _this.importsWithPrefixes = new Map();
	        _this.reexports = new Map();
	        return _this;
	    }
	    /**
	     * @param {?} t
	     * @param {?} ctx
	     * @param {?=} defaultType
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitType = function (t, ctx, defaultType) {
	        if (defaultType === void 0) { defaultType = 'any'; }
	        if (t != null) {
	            this.typeExpression++;
	            t.visitType(this, ctx);
	            this.typeExpression--;
	        }
	        else {
	            ctx.print(null, defaultType);
	        }
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	        var /** @type {?} */ value = ast.value;
	        if (value == null && ast.type != INFERRED_TYPE) {
	            ctx.print(ast, "(" + value + " as any)");
	            return null;
	        }
	        return _super.prototype.visitLiteralExpr.call(this, ast, ctx);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	        if (ast.entries.length === 0) {
	            ctx.print(ast, '(');
	        }
	        var /** @type {?} */ result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
	        if (ast.entries.length === 0) {
	            ctx.print(ast, ' as any[])');
	        }
	        return result;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	        this._visitIdentifier(ast.value, ast.typeParams, ctx);
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	        if (ctx.isExportedVar(stmt.name) && stmt.value instanceof ExternalExpr && !stmt.type) {
	            // check for a reexport
	            var _a = this._resolveStaticSymbol(stmt.value.value), name = _a.name, filePath = _a.filePath, members = _a.members;
	            if (members.length === 0 && filePath !== this._genFilePath) {
	                var /** @type {?} */ reexports = this.reexports.get(filePath);
	                if (!reexports) {
	                    reexports = [];
	                    this.reexports.set(filePath, reexports);
	                }
	                reexports.push({ name: name, as: stmt.name });
	                return null;
	            }
	        }
	        if (ctx.isExportedVar(stmt.name)) {
	            ctx.print(stmt, "export ");
	        }
	        if (stmt.hasModifier(StmtModifier.Final)) {
	            ctx.print(stmt, "const");
	        }
	        else {
	            ctx.print(stmt, "var");
	        }
	        ctx.print(stmt, " " + stmt.name);
	        this._printColonType(stmt.type, ctx);
	        ctx.print(stmt, " = ");
	        stmt.value.visitExpression(this, ctx);
	        ctx.println(stmt, ";");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	        ctx.print(ast, "(<");
	        ast.type.visitType(this, ctx);
	        ctx.print(ast, ">");
	        ast.value.visitExpression(this, ctx);
	        ctx.print(ast, ")");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
	        ctx.print(ast, "new ");
	        this.typeExpression++;
	        ast.classExpr.visitExpression(this, ctx);
	        this.typeExpression--;
	        ctx.print(ast, "(");
	        this.visitAllExpressions(ast.args, ctx, ',');
	        ctx.print(ast, ")");
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	        var _this = this;
	        ctx.pushClass(stmt);
	        if (ctx.isExportedVar(stmt.name)) {
	            ctx.print(stmt, "export ");
	        }
	        ctx.print(stmt, "class " + stmt.name);
	        if (stmt.parent != null) {
	            ctx.print(stmt, " extends ");
	            this.typeExpression++;
	            stmt.parent.visitExpression(this, ctx);
	            this.typeExpression--;
	        }
	        ctx.println(stmt, " {");
	        ctx.incIndent();
	        stmt.fields.forEach(function (field) { return _this._visitClassField(field, ctx); });
	        if (stmt.constructorMethod != null) {
	            this._visitClassConstructor(stmt, ctx);
	        }
	        stmt.getters.forEach(function (getter) { return _this._visitClassGetter(getter, ctx); });
	        stmt.methods.forEach(function (method) { return _this._visitClassMethod(method, ctx); });
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	        ctx.popClass();
	        return null;
	    };
	    /**
	     * @param {?} field
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._visitClassField = function (field, ctx) {
	        if (field.hasModifier(StmtModifier.Private)) {
	            // comment out as a workaround for #10967
	            ctx.print(null, "/*private*/ ");
	        }
	        ctx.print(null, field.name);
	        this._printColonType(field.type, ctx);
	        ctx.println(null, ";");
	    };
	    /**
	     * @param {?} getter
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) {
	        if (getter.hasModifier(StmtModifier.Private)) {
	            ctx.print(null, "private ");
	        }
	        ctx.print(null, "get " + getter.name + "()");
	        this._printColonType(getter.type, ctx);
	        ctx.println(null, " {");
	        ctx.incIndent();
	        this.visitAllStatements(getter.body, ctx);
	        ctx.decIndent();
	        ctx.println(null, "}");
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	        ctx.print(stmt, "constructor(");
	        this._visitParams(stmt.constructorMethod.params, ctx);
	        ctx.println(stmt, ") {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.constructorMethod.body, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	    };
	    /**
	     * @param {?} method
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._visitClassMethod = function (method, ctx) {
	        if (method.hasModifier(StmtModifier.Private)) {
	            ctx.print(null, "private ");
	        }
	        ctx.print(null, method.name + "(");
	        this._visitParams(method.params, ctx);
	        ctx.print(null, ")");
	        this._printColonType(method.type, ctx, 'void');
	        ctx.println(null, " {");
	        ctx.incIndent();
	        this.visitAllStatements(method.body, ctx);
	        ctx.decIndent();
	        ctx.println(null, "}");
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	        ctx.print(ast, "(");
	        this._visitParams(ast.params, ctx);
	        ctx.print(ast, ")");
	        this._printColonType(ast.type, ctx, 'void');
	        ctx.println(ast, " => {");
	        ctx.incIndent();
	        this.visitAllStatements(ast.statements, ctx);
	        ctx.decIndent();
	        ctx.print(ast, "}");
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	        if (ctx.isExportedVar(stmt.name)) {
	            ctx.print(stmt, "export ");
	        }
	        ctx.print(stmt, "function " + stmt.name + "(");
	        this._visitParams(stmt.params, ctx);
	        ctx.print(stmt, ")");
	        this._printColonType(stmt.type, ctx, 'void');
	        ctx.println(stmt, " {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.statements, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	        ctx.println(stmt, "try {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.bodyStmts, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "} catch (" + CATCH_ERROR_VAR$1.name + ") {");
	        ctx.incIndent();
	        var /** @type {?} */ catchStmts = [/** @type {?} */ (CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [
	                StmtModifier.Final
	            ]))].concat(stmt.catchStmts);
	        this.visitAllStatements(catchStmts, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	        return null;
	    };
	    /**
	     * @param {?} type
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitBuiltintType = function (type, ctx) {
	        var /** @type {?} */ typeStr;
	        switch (type.name) {
	            case BuiltinTypeName.Bool:
	                typeStr = 'boolean';
	                break;
	            case BuiltinTypeName.Dynamic:
	                typeStr = 'any';
	                break;
	            case BuiltinTypeName.Function:
	                typeStr = 'Function';
	                break;
	            case BuiltinTypeName.Number:
	                typeStr = 'number';
	                break;
	            case BuiltinTypeName.Int:
	                typeStr = 'number';
	                break;
	            case BuiltinTypeName.String:
	                typeStr = 'string';
	                break;
	            default:
	                throw new Error("Unsupported builtin type " + type.name);
	        }
	        ctx.print(null, typeStr);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitExpressionType = function (ast, ctx) {
	        ast.value.visitExpression(this, ctx);
	        return null;
	    };
	    /**
	     * @param {?} type
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitArrayType = function (type, ctx) {
	        this.visitType(type.of, ctx);
	        ctx.print(null, "[]");
	        return null;
	    };
	    /**
	     * @param {?} type
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitMapType = function (type, ctx) {
	        ctx.print(null, "{[key: string]:");
	        this.visitType(type.valueType, ctx);
	        ctx.print(null, "}");
	        return null;
	    };
	    /**
	     * @param {?} method
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	        var /** @type {?} */ name;
	        switch (method) {
	            case BuiltinMethod.ConcatArray:
	                name = 'concat';
	                break;
	            case BuiltinMethod.SubscribeObservable:
	                name = 'subscribe';
	                break;
	            case BuiltinMethod.Bind:
	                name = 'bind';
	                break;
	            default:
	                throw new Error("Unknown builtin method: " + method);
	        }
	        return name;
	    };
	    /**
	     * @param {?} params
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	        var _this = this;
	        this.visitAllObjects(function (param) {
	            ctx.print(null, param.name);
	            _this._printColonType(param.type, ctx);
	        }, params, ctx, ',');
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._resolveStaticSymbol = function (value) {
	        var /** @type {?} */ reference = value.reference;
	        if (!(reference instanceof StaticSymbol)) {
	            throw new Error("Internal error: unknown identifier " + JSON.stringify(value));
	        }
	        var /** @type {?} */ arity = this._importResolver.getTypeArity(reference) || undefined;
	        var /** @type {?} */ importReference = this._importResolver.getImportAs(reference) || reference;
	        return {
	            name: importReference.name,
	            filePath: importReference.filePath,
	            members: importReference.members, arity: arity
	        };
	    };
	    /**
	     * @param {?} value
	     * @param {?} typeParams
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) {
	        var _this = this;
	        var _a = this._resolveStaticSymbol(value), name = _a.name, filePath = _a.filePath, members = _a.members, arity = _a.arity;
	        if (filePath != this._genFilePath) {
	            var /** @type {?} */ prefix = this.importsWithPrefixes.get(filePath);
	            if (prefix == null) {
	                prefix = "import" + this.importsWithPrefixes.size;
	                this.importsWithPrefixes.set(filePath, prefix);
	            }
	            ctx.print(null, prefix + ".");
	        }
	        if (members.length) {
	            ctx.print(null, name);
	            ctx.print(null, '.');
	            ctx.print(null, members.join('.'));
	        }
	        else {
	            ctx.print(null, name);
	        }
	        if (this.typeExpression > 0) {
	            // If we are in a type expression that refers to a generic type then supply
	            // the required type parameters. If there were not enough type parameters
	            // supplied, supply any as the type. Outside a type expression the reference
	            // should not supply type parameters and be treated as a simple value reference
	            // to the constructor function itself.
	            var /** @type {?} */ suppliedParameters = (typeParams && typeParams.length) || 0;
	            var /** @type {?} */ additionalParameters = (arity || 0) - suppliedParameters;
	            if (suppliedParameters > 0 || additionalParameters > 0) {
	                ctx.print(null, "<");
	                if (suppliedParameters > 0) {
	                    this.visitAllObjects(function (type) { return type.visitType(_this, ctx); }, typeParams, ctx, ',');
	                }
	                if (additionalParameters > 0) {
	                    for (var /** @type {?} */ i = 0; i < additionalParameters; i++) {
	                        if (i > 0 || suppliedParameters > 0)
	                            ctx.print(null, ',');
	                        ctx.print(null, 'any');
	                    }
	                }
	                ctx.print(null, ">");
	            }
	        }
	    };
	    /**
	     * @param {?} type
	     * @param {?} ctx
	     * @param {?=} defaultType
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._printColonType = function (type, ctx, defaultType) {
	        if (type !== INFERRED_TYPE) {
	            ctx.print(null, ':');
	            this.visitType(type, ctx, defaultType);
	        }
	    };
	    return _TsEmitterVisitor;
	}(AbstractEmitterVisitor));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// =================================================================================================
	// =================================================================================================
	// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	// =================================================================================================
	// =================================================================================================
	//
	//        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!
	//                               Reach out to mprobst for details.
	//
	// =================================================================================================
	/** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */
	var SECURITY_SCHEMA = {};
	/**
	 * @param {?} ctx
	 * @param {?} specs
	 * @return {?}
	 */
	function registerContext(ctx, specs) {
	    for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
	        var spec = specs_1[_i];
	        SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
	    }
	}
	// Case is insignificant below, all element and attribute names are lower-cased for lookup.
	registerContext(_angular_core.SecurityContext.HTML, [
	    'iframe|srcdoc',
	    '*|innerHTML',
	    '*|outerHTML',
	]);
	registerContext(_angular_core.SecurityContext.STYLE, ['*|style']);
	// NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.
	registerContext(_angular_core.SecurityContext.URL, [
	    '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',
	    'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',
	    'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',
	    'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',
	]);
	registerContext(_angular_core.SecurityContext.RESOURCE_URL, [
	    'applet|code',
	    'applet|codebase',
	    'base|href',
	    'embed|src',
	    'frame|src',
	    'head|profile',
	    'html|manifest',
	    'iframe|src',
	    'link|href',
	    'media|src',
	    'object|codebase',
	    'object|data',
	    'script|src',
	]);
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var BOOLEAN = 'boolean';
	var NUMBER = 'number';
	var STRING = 'string';
	var OBJECT = 'object';
	/**
	 * This array represents the DOM schema. It encodes inheritance, properties, and events.
	 *
	 * ## Overview
	 *
	 * Each line represents one kind of element. The `element_inheritance` and properties are joined
	 * using `element_inheritance|properties` syntax.
	 *
	 * ## Element Inheritance
	 *
	 * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.
	 * Here the individual elements are separated by `,` (commas). Every element in the list
	 * has identical properties.
	 *
	 * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is
	 * specified then `""` (blank) element is assumed.
	 *
	 * NOTE: The blank element inherits from root `[Element]` element, the super element of all
	 * elements.
	 *
	 * NOTE an element prefix such as `:svg:` has no special meaning to the schema.
	 *
	 * ## Properties
	 *
	 * Each element has a set of properties separated by `,` (commas). Each property can be prefixed
	 * by a special character designating its type:
	 *
	 * - (no prefix): property is a string.
	 * - `*`: property represents an event.
	 * - `!`: property is a boolean.
	 * - `#`: property is a number.
	 * - `%`: property is an object.
	 *
	 * ## Query
	 *
	 * The class creates an internal squas representation which allows to easily answer the query of
	 * if a given property exist on a given element.
	 *
	 * NOTE: We don't yet support querying for types or events.
	 * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,
	 *       see dom_element_schema_registry_spec.ts
	 */
	// =================================================================================================
	// =================================================================================================
	// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	// =================================================================================================
	// =================================================================================================
	//
	//                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!
	//
	// Newly added properties must be security reviewed and assigned an appropriate SecurityContext in
	// dom_security_schema.ts. Reach out to mprobst & rjamet for details.
	//
	// =================================================================================================
	var SCHEMA = [
	    '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop',
	    '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	    'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	    'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume',
	    ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',
	    ':svg:graphics^:svg:|',
	    ':svg:animation^:svg:|*begin,*end,*repeat',
	    ':svg:geometry^:svg:|',
	    ':svg:componentTransferFunction^:svg:|',
	    ':svg:gradient^:svg:|',
	    ':svg:textContent^:svg:graphics|',
	    ':svg:textPositioning^:svg:textContent|',
	    'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',
	    'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username',
	    'audio^media|',
	    'br^[HTMLElement]|clear',
	    'base^[HTMLElement]|href,target',
	    'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',
	    'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',
	    'canvas^[HTMLElement]|#height,#width',
	    'content^[HTMLElement]|select',
	    'dl^[HTMLElement]|!compact',
	    'datalist^[HTMLElement]|',
	    'details^[HTMLElement]|!open',
	    'dialog^[HTMLElement]|!open,returnValue',
	    'dir^[HTMLElement]|!compact',
	    'div^[HTMLElement]|align',
	    'embed^[HTMLElement]|align,height,name,src,type,width',
	    'fieldset^[HTMLElement]|!disabled,name',
	    'font^[HTMLElement]|color,face,size',
	    'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',
	    'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',
	    'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',
	    'hr^[HTMLElement]|align,color,!noShade,size,width',
	    'head^[HTMLElement]|',
	    'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',
	    'html^[HTMLElement]|version',
	    'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',
	    'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',
	    'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',
	    'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name',
	    'li^[HTMLElement]|type,#value',
	    'label^[HTMLElement]|htmlFor',
	    'legend^[HTMLElement]|align',
	    'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type',
	    'map^[HTMLElement]|name',
	    'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',
	    'menu^[HTMLElement]|!compact',
	    'meta^[HTMLElement]|content,httpEquiv,name,scheme',
	    'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',
	    'ins,del^[HTMLElement]|cite,dateTime',
	    'ol^[HTMLElement]|!compact,!reversed,#start,type',
	    'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',
	    'optgroup^[HTMLElement]|!disabled,label',
	    'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',
	    'output^[HTMLElement]|defaultValue,%htmlFor,name,value',
	    'p^[HTMLElement]|align',
	    'param^[HTMLElement]|name,type,value,valueType',
	    'picture^[HTMLElement]|',
	    'pre^[HTMLElement]|#width',
	    'progress^[HTMLElement]|#max,#value',
	    'q,blockquote,cite^[HTMLElement]|',
	    'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',
	    'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',
	    'shadow^[HTMLElement]|',
	    'source^[HTMLElement]|media,sizes,src,srcset,type',
	    'span^[HTMLElement]|',
	    'style^[HTMLElement]|!disabled,media,type',
	    'caption^[HTMLElement]|align',
	    'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',
	    'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',
	    'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',
	    'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',
	    'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',
	    'template^[HTMLElement]|',
	    'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',
	    'title^[HTMLElement]|text',
	    'track^[HTMLElement]|!default,kind,label,src,srclang',
	    'ul^[HTMLElement]|!compact,type',
	    'unknown^[HTMLElement]|',
	    'video^media|#height,poster,#width',
	    ':svg:a^:svg:graphics|',
	    ':svg:animate^:svg:animation|',
	    ':svg:animateMotion^:svg:animation|',
	    ':svg:animateTransform^:svg:animation|',
	    ':svg:circle^:svg:geometry|',
	    ':svg:clipPath^:svg:graphics|',
	    ':svg:cursor^:svg:|',
	    ':svg:defs^:svg:graphics|',
	    ':svg:desc^:svg:|',
	    ':svg:discard^:svg:|',
	    ':svg:ellipse^:svg:geometry|',
	    ':svg:feBlend^:svg:|',
	    ':svg:feColorMatrix^:svg:|',
	    ':svg:feComponentTransfer^:svg:|',
	    ':svg:feComposite^:svg:|',
	    ':svg:feConvolveMatrix^:svg:|',
	    ':svg:feDiffuseLighting^:svg:|',
	    ':svg:feDisplacementMap^:svg:|',
	    ':svg:feDistantLight^:svg:|',
	    ':svg:feDropShadow^:svg:|',
	    ':svg:feFlood^:svg:|',
	    ':svg:feFuncA^:svg:componentTransferFunction|',
	    ':svg:feFuncB^:svg:componentTransferFunction|',
	    ':svg:feFuncG^:svg:componentTransferFunction|',
	    ':svg:feFuncR^:svg:componentTransferFunction|',
	    ':svg:feGaussianBlur^:svg:|',
	    ':svg:feImage^:svg:|',
	    ':svg:feMerge^:svg:|',
	    ':svg:feMergeNode^:svg:|',
	    ':svg:feMorphology^:svg:|',
	    ':svg:feOffset^:svg:|',
	    ':svg:fePointLight^:svg:|',
	    ':svg:feSpecularLighting^:svg:|',
	    ':svg:feSpotLight^:svg:|',
	    ':svg:feTile^:svg:|',
	    ':svg:feTurbulence^:svg:|',
	    ':svg:filter^:svg:|',
	    ':svg:foreignObject^:svg:graphics|',
	    ':svg:g^:svg:graphics|',
	    ':svg:image^:svg:graphics|',
	    ':svg:line^:svg:geometry|',
	    ':svg:linearGradient^:svg:gradient|',
	    ':svg:mpath^:svg:|',
	    ':svg:marker^:svg:|',
	    ':svg:mask^:svg:|',
	    ':svg:metadata^:svg:|',
	    ':svg:path^:svg:geometry|',
	    ':svg:pattern^:svg:|',
	    ':svg:polygon^:svg:geometry|',
	    ':svg:polyline^:svg:geometry|',
	    ':svg:radialGradient^:svg:gradient|',
	    ':svg:rect^:svg:geometry|',
	    ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',
	    ':svg:script^:svg:|type',
	    ':svg:set^:svg:animation|',
	    ':svg:stop^:svg:|',
	    ':svg:style^:svg:|!disabled,media,title,type',
	    ':svg:switch^:svg:graphics|',
	    ':svg:symbol^:svg:|',
	    ':svg:tspan^:svg:textPositioning|',
	    ':svg:text^:svg:textPositioning|',
	    ':svg:textPath^:svg:textContent|',
	    ':svg:title^:svg:|',
	    ':svg:use^:svg:graphics|',
	    ':svg:view^:svg:|#zoomAndPan',
	    'data^[HTMLElement]|value',
	    'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',
	    'summary^[HTMLElement]|',
	    'time^[HTMLElement]|dateTime',
	];
	var _ATTR_TO_PROP = {
	    'class': 'className',
	    'for': 'htmlFor',
	    'formaction': 'formAction',
	    'innerHtml': 'innerHTML',
	    'readonly': 'readOnly',
	    'tabindex': 'tabIndex',
	};
	var DomElementSchemaRegistry = (function (_super) {
	    __extends(DomElementSchemaRegistry, _super);
	    function DomElementSchemaRegistry() {
	        var _this = _super.call(this) || this;
	        _this._schema = {};
	        SCHEMA.forEach(function (encodedType) {
	            var type = {};
	            var _a = encodedType.split('|'), strType = _a[0], strProperties = _a[1];
	            var properties = strProperties.split(',');
	            var _b = strType.split('^'), typeNames = _b[0], superName = _b[1];
	            typeNames.split(',').forEach(function (tag) { return _this._schema[tag.toLowerCase()] = type; });
	            var superType = superName && _this._schema[superName.toLowerCase()];
	            if (superType) {
	                Object.keys(superType).forEach(function (prop) { type[prop] = superType[prop]; });
	            }
	            properties.forEach(function (property) {
	                if (property.length > 0) {
	                    switch (property[0]) {
	                        case '*':
	                            // We don't yet support events.
	                            // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events
	                            // will
	                            // almost certainly introduce bad XSS vulnerabilities.
	                            // type[property.substring(1)] = EVENT;
	                            break;
	                        case '!':
	                            type[property.substring(1)] = BOOLEAN;
	                            break;
	                        case '#':
	                            type[property.substring(1)] = NUMBER;
	                            break;
	                        case '%':
	                            type[property.substring(1)] = OBJECT;
	                            break;
	                        default:
	                            type[property] = STRING;
	                    }
	                }
	            });
	        });
	        return _this;
	    }
	    /**
	     * @param {?} tagName
	     * @param {?} propName
	     * @param {?} schemaMetas
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) {
	        if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {
	            return true;
	        }
	        if (tagName.indexOf('-') > -1) {
	            if (tagName === 'ng-container' || tagName === 'ng-content') {
	                return false;
	            }
	            if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                // Can't tell now as we don't know which properties a custom element will get
	                // once it is instantiated
	                return true;
	            }
	        }
	        var /** @type {?} */ elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];
	        return !!elementProperties[propName];
	    };
	    /**
	     * @param {?} tagName
	     * @param {?} schemaMetas
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {
	        if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {
	            return true;
	        }
	        if (tagName.indexOf('-') > -1) {
	            if (tagName === 'ng-container' || tagName === 'ng-content') {
	                return true;
	            }
	            if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                // Allow any custom elements
	                return true;
	            }
	        }
	        return !!this._schema[tagName.toLowerCase()];
	    };
	    /**
	     * securityContext returns the security context for the given property on the given DOM tag.
	     *
	     * Tag and property name are statically known and cannot change at runtime, i.e. it is not
	     * possible to bind a value into a changing attribute or tag name.
	     *
	     * The filtering is white list based. All attributes in the schema above are assumed to have the
	     * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known
	     * attack vectors are assigned their appropriate context.
	     * @param {?} tagName
	     * @param {?} propName
	     * @param {?} isAttribute
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.securityContext = function (tagName, propName, isAttribute) {
	        if (isAttribute) {
	            // NB: For security purposes, use the mapped property name, not the attribute name.
	            propName = this.getMappedPropName(propName);
	        }
	        // Make sure comparisons are case insensitive, so that case differences between attribute and
	        // property names do not have a security impact.
	        tagName = tagName.toLowerCase();
	        propName = propName.toLowerCase();
	        var /** @type {?} */ ctx = SECURITY_SCHEMA[tagName + '|' + propName];
	        if (ctx) {
	            return ctx;
	        }
	        ctx = SECURITY_SCHEMA['*|' + propName];
	        return ctx ? ctx : _angular_core.SecurityContext.NONE;
	    };
	    /**
	     * @param {?} propName
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) { return _ATTR_TO_PROP[propName] || propName; };
	    /**
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { return 'ng-component'; };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.validateProperty = function (name) {
	        if (name.toLowerCase().startsWith('on')) {
	            var /** @type {?} */ msg = "Binding to event property '" + name + "' is disallowed for security reasons, " +
	                ("please use (" + name.slice(2) + ")=...") +
	                ("\nIf '" + name + "' is a directive input, make sure the directive is imported by the") +
	                " current module.";
	            return { error: true, msg: msg };
	        }
	        else {
	            return { error: false };
	        }
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.validateAttribute = function (name) {
	        if (name.toLowerCase().startsWith('on')) {
	            var /** @type {?} */ msg = "Binding to event attribute '" + name + "' is disallowed for security reasons, " +
	                ("please use (" + name.slice(2) + ")=...");
	            return { error: true, msg: msg };
	        }
	        else {
	            return { error: false };
	        }
	    };
	    /**
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.allKnownElementNames = function () { return Object.keys(this._schema); };
	    /**
	     * @param {?} propName
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) {
	        return dashCaseToCamelCase(propName);
	    };
	    /**
	     * @param {?} camelCaseProp
	     * @param {?} userProvidedProp
	     * @param {?} val
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {
	        var /** @type {?} */ unit = '';
	        var /** @type {?} */ strVal = val.toString().trim();
	        var /** @type {?} */ errorMsg = null;
	        if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {
	            if (typeof val === 'number') {
	                unit = 'px';
	            }
	            else {
	                var /** @type {?} */ valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
	                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
	                    errorMsg = "Please provide a CSS unit value for " + userProvidedProp + ":" + val;
	                }
	            }
	        }
	        return { error: errorMsg, value: strVal + unit };
	    };
	    return DomElementSchemaRegistry;
	}(ElementSchemaRegistry));
	DomElementSchemaRegistry.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	DomElementSchemaRegistry.ctorParameters = function () { return []; };
	/**
	 * @param {?} prop
	 * @return {?}
	 */
	function _isPixelDimensionStyle(prop) {
	    switch (prop) {
	        case 'width':
	        case 'height':
	        case 'minWidth':
	        case 'minHeight':
	        case 'maxWidth':
	        case 'maxHeight':
	        case 'left':
	        case 'top':
	        case 'bottom':
	        case 'right':
	        case 'fontSize':
	        case 'outlineWidth':
	        case 'outlineOffset':
	        case 'paddingTop':
	        case 'paddingLeft':
	        case 'paddingBottom':
	        case 'paddingRight':
	        case 'marginTop':
	        case 'marginLeft':
	        case 'marginBottom':
	        case 'marginRight':
	        case 'borderRadius':
	        case 'borderWidth':
	        case 'borderTopWidth':
	        case 'borderLeftWidth':
	        case 'borderRightWidth':
	        case 'borderBottomWidth':
	        case 'textIndent':
	            return true;
	        default:
	            return false;
	    }
	}
	var ShadowCss = (function () {
	    function ShadowCss() {
	        this.strictStyling = true;
	    }
	    /**
	     * @param {?} cssText
	     * @param {?} selector
	     * @param {?=} hostSelector
	     * @return {?}
	     */
	    ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
	        if (hostSelector === void 0) { hostSelector = ''; }
	        var /** @type {?} */ sourceMappingUrl = extractSourceMappingUrl(cssText);
	        cssText = stripComments(cssText);
	        cssText = this._insertDirectives(cssText);
	        return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
	    };
	    /**
	     * @param {?} cssText
	     * @return {?}
	     */
	    ShadowCss.prototype._insertDirectives = function (cssText) {
	        cssText = this._insertPolyfillDirectivesInCssText(cssText);
	        return this._insertPolyfillRulesInCssText(cssText);
	    };
	    /**
	     * @param {?} cssText
	     * @return {?}
	     */
	    ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return cssText.replace(_cssContentNextSelectorRe, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i] = arguments[_i];
	            }
	            return m[2] + '{';
	        });
	    };
	    /**
	     * @param {?} cssText
	     * @return {?}
	     */
	    ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return cssText.replace(_cssContentRuleRe, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i] = arguments[_i];
	            }
	            var /** @type {?} */ rule = m[0].replace(m[1], '').replace(m[2], '');
	            return m[4] + rule;
	        });
	    };
	    /**
	     * @param {?} cssText
	     * @param {?} scopeSelector
	     * @param {?} hostSelector
	     * @return {?}
	     */
	    ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
	        var /** @type {?} */ unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
	        // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively
	        cssText = this._insertPolyfillHostInCssText(cssText);
	        cssText = this._convertColonHost(cssText);
	        cssText = this._convertColonHostContext(cssText);
	        cssText = this._convertShadowDOMSelectors(cssText);
	        if (scopeSelector) {
	            cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
	        }
	        cssText = cssText + '\n' + unscopedRules;
	        return cssText.trim();
	    };
	    /**
	     * @param {?} cssText
	     * @return {?}
	     */
	    ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        var /** @type {?} */ r = '';
	        var /** @type {?} */ m;
	        _cssContentUnscopedRuleRe.lastIndex = 0;
	        while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
	            var /** @type {?} */ rule = m[0].replace(m[2], '').replace(m[1], m[4]);
	            r += rule + '\n\n';
	        }
	        return r;
	    };
	    /**
	     * @param {?} cssText
	     * @return {?}
	     */
	    ShadowCss.prototype._convertColonHost = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
	    };
	    /**
	     * @param {?} cssText
	     * @return {?}
	     */
	    ShadowCss.prototype._convertColonHostContext = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
	    };
	    /**
	     * @param {?} cssText
	     * @param {?} regExp
	     * @param {?} partReplacer
	     * @return {?}
	     */
	    ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
	        // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule
	        return cssText.replace(regExp, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i] = arguments[_i];
	            }
	            if (m[2]) {
	                var /** @type {?} */ parts = m[2].split(',');
	                var /** @type {?} */ r = [];
	                for (var /** @type {?} */ i = 0; i < parts.length; i++) {
	                    var /** @type {?} */ p = parts[i].trim();
	                    if (!p)
	                        break;
	                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
	                }
	                return r.join(',');
	            }
	            else {
	                return _polyfillHostNoCombinator + m[3];
	            }
	        });
	    };
	    /**
	     * @param {?} host
	     * @param {?} part
	     * @param {?} suffix
	     * @return {?}
	     */
	    ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
	        if (part.indexOf(_polyfillHost) > -1) {
	            return this._colonHostPartReplacer(host, part, suffix);
	        }
	        else {
	            return host + part + suffix + ', ' + part + ' ' + host + suffix;
	        }
	    };
	    /**
	     * @param {?} host
	     * @param {?} part
	     * @param {?} suffix
	     * @return {?}
	     */
	    ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
	        return host + part.replace(_polyfillHost, '') + suffix;
	    };
	    /**
	     * @param {?} cssText
	     * @return {?}
	     */
	    ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
	        return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);
	    };
	    /**
	     * @param {?} cssText
	     * @param {?} scopeSelector
	     * @param {?} hostSelector
	     * @return {?}
	     */
	    ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
	        var _this = this;
	        return processRules(cssText, function (rule) {
	            var /** @type {?} */ selector = rule.selector;
	            var /** @type {?} */ content = rule.content;
	            if (rule.selector[0] != '@') {
	                selector =
	                    _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
	            }
	            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||
	                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {
	                content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
	            }
	            return new CssRule(selector, content);
	        });
	    };
	    /**
	     * @param {?} selector
	     * @param {?} scopeSelector
	     * @param {?} hostSelector
	     * @param {?} strict
	     * @return {?}
	     */
	    ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
	        var _this = this;
	        return selector.split(',')
	            .map(function (part) { return part.trim().split(_shadowDeepSelectors); })
	            .map(function (deepParts) {
	            var shallowPart = deepParts[0], otherParts = deepParts.slice(1);
	            var /** @type {?} */ applyScope = function (shallowPart) {
	                if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
	                    return strict ?
	                        _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :
	                        _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
	                }
	                else {
	                    return shallowPart;
	                }
	            };
	            return [applyScope(shallowPart)].concat(otherParts).join(' ');
	        })
	            .join(', ');
	    };
	    /**
	     * @param {?} selector
	     * @param {?} scopeSelector
	     * @return {?}
	     */
	    ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
	        var /** @type {?} */ re = this._makeScopeMatcher(scopeSelector);
	        return !re.test(selector);
	    };
	    /**
	     * @param {?} scopeSelector
	     * @return {?}
	     */
	    ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
	        var /** @type {?} */ lre = /\[/g;
	        var /** @type {?} */ rre = /\]/g;
	        scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
	        return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
	    };
	    /**
	     * @param {?} selector
	     * @param {?} scopeSelector
	     * @param {?} hostSelector
	     * @return {?}
	     */
	    ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
	        // Difference from webcomponents.js: scopeSelector could not be an array
	        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
	    };
	    /**
	     * @param {?} selector
	     * @param {?} scopeSelector
	     * @param {?} hostSelector
	     * @return {?}
	     */
	    ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
	        // In Android browser, the lastIndex is not reset when the regex is used in String.replace()
	        _polyfillHostRe.lastIndex = 0;
	        if (_polyfillHostRe.test(selector)) {
	            var /** @type {?} */ replaceBy_1 = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
	            return selector
	                .replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {
	                return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {
	                    return before + replaceBy_1 + colon + after;
	                });
	            })
	                .replace(_polyfillHostRe, replaceBy_1 + ' ');
	        }
	        return scopeSelector + ' ' + selector;
	    };
	    /**
	     * @param {?} selector
	     * @param {?} scopeSelector
	     * @param {?} hostSelector
	     * @return {?}
	     */
	    ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {
	        var _this = this;
	        var /** @type {?} */ isRe = /\[is=([^\]]*)\]/g;
	        scopeSelector = scopeSelector.replace(isRe, function (_) {
	            var parts = [];
	            for (var _i = 1; _i < arguments.length; _i++) {
	                parts[_i - 1] = arguments[_i];
	            }
	            return parts[0];
	        });
	        var /** @type {?} */ attrName = '[' + scopeSelector + ']';
	        var /** @type {?} */ _scopeSelectorPart = function (p) {
	            var /** @type {?} */ scopedP = p.trim();
	            if (!scopedP) {
	                return '';
	            }
	            if (p.indexOf(_polyfillHostNoCombinator) > -1) {
	                scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
	            }
	            else {
	                // remove :host since it should be unnecessary
	                var /** @type {?} */ t = p.replace(_polyfillHostRe, '');
	                if (t.length > 0) {
	                    var /** @type {?} */ matches = t.match(/([^:]*)(:*)(.*)/);
	                    if (matches) {
	                        scopedP = matches[1] + attrName + matches[2] + matches[3];
	                    }
	                }
	            }
	            return scopedP;
	        };
	        var /** @type {?} */ safeContent = new SafeSelector(selector);
	        selector = safeContent.content();
	        var /** @type {?} */ scopedSelector = '';
	        var /** @type {?} */ startIndex = 0;
	        var /** @type {?} */ res;
	        var /** @type {?} */ sep = /( |>|\+|~(?!=))\s*/g;
	        var /** @type {?} */ scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
	        while ((res = sep.exec(selector)) !== null) {
	            var /** @type {?} */ separator = res[1];
	            var /** @type {?} */ part = selector.slice(startIndex, res.index).trim();
	            // if a selector appears before :host-context it should not be shimmed as it
	            // matches on ancestor elements and not on elements in the host's shadow
	            var /** @type {?} */ scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
	            scopedSelector += scopedPart + " " + separator + " ";
	            startIndex = sep.lastIndex;
	        }
	        scopedSelector += _scopeSelectorPart(selector.substring(startIndex));
	        // replace the placeholders with their original values
	        return safeContent.restore(scopedSelector);
	    };
	    /**
	     * @param {?} selector
	     * @return {?}
	     */
	    ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
	        return selector.replace(_colonHostContextRe, _polyfillHostContext)
	            .replace(_colonHostRe, _polyfillHost);
	    };
	    return ShadowCss;
	}());
	var SafeSelector = (function () {
	    /**
	     * @param {?} selector
	     */
	    function SafeSelector(selector) {
	        var _this = this;
	        this.placeholders = [];
	        this.index = 0;
	        // Replaces attribute selectors with placeholders.
	        // The WS in [attr="va lue"] would otherwise be interpreted as a selector separator.
	        selector = selector.replace(/(\[[^\]]*\])/g, function (_, keep) {
	            var replaceBy = "__ph-" + _this.index + "__";
	            _this.placeholders.push(keep);
	            _this.index++;
	            return replaceBy;
	        });
	        // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.
	        // WS and "+" would otherwise be interpreted as selector separators.
	        this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function (_, pseudo, exp) {
	            var replaceBy = "__ph-" + _this.index + "__";
	            _this.placeholders.push(exp);
	            _this.index++;
	            return pseudo + replaceBy;
	        });
	    }
	    
	    /**
	     * @param {?} content
	     * @return {?}
	     */
	    SafeSelector.prototype.restore = function (content) {
	        var _this = this;
	        return content.replace(/__ph-(\d+)__/g, function (ph, index) { return _this.placeholders[+index]; });
	    };
	    /**
	     * @return {?}
	     */
	    SafeSelector.prototype.content = function () { return this._content; };
	    return SafeSelector;
	}());
	var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
	var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
	var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
	var _polyfillHost = '-shadowcsshost';
	// note: :host-context pre-processed to -shadowcsshostcontext.
	var _polyfillHostContext = '-shadowcsscontext';
	var _parenSuffix = ')(?:\\((' +
	    '(?:\\([^)(]*\\)|[^)(]*)+?' +
	    ')\\))?([^,{]*)';
	var _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
	var _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
	var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
	var _shadowDOMSelectorsRe = [
	    /::shadow/g,
	    /::content/g,
	    // Deprecated selectors
	    /\/shadow-deep\//g,
	    /\/shadow\//g,
	];
	var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
	var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
	var _polyfillHostRe = /-shadowcsshost/gim;
	var _colonHostRe = /:host/gim;
	var _colonHostContextRe = /:host-context/gim;
	var _commentRe = /\/\*\s*[\s\S]*?\*\//g;
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function stripComments(input) {
	    return input.replace(_commentRe, '');
	}
	// all comments except inline source mapping
	var _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function extractSourceMappingUrl(input) {
	    var /** @type {?} */ matcher = input.match(_sourceMappingUrlRe);
	    return matcher ? matcher[0] : '';
	}
	var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
	var _curlyRe = /([{}])/g;
	var OPEN_CURLY = '{';
	var CLOSE_CURLY = '}';
	var BLOCK_PLACEHOLDER = '%BLOCK%';
	var CssRule = (function () {
	    /**
	     * @param {?} selector
	     * @param {?} content
	     */
	    function CssRule(selector, content) {
	        this.selector = selector;
	        this.content = content;
	    }
	    return CssRule;
	}());
	/**
	 * @param {?} input
	 * @param {?} ruleCallback
	 * @return {?}
	 */
	function processRules(input, ruleCallback) {
	    var /** @type {?} */ inputWithEscapedBlocks = escapeBlocks(input);
	    var /** @type {?} */ nextBlockIndex = 0;
	    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i] = arguments[_i];
	        }
	        var /** @type {?} */ selector = m[2];
	        var /** @type {?} */ content = '';
	        var /** @type {?} */ suffix = m[4];
	        var /** @type {?} */ contentPrefix = '';
	        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
	            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
	            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
	            contentPrefix = '{';
	        }
	        var /** @type {?} */ rule = ruleCallback(new CssRule(selector, content));
	        return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
	    });
	}
	var StringWithEscapedBlocks = (function () {
	    /**
	     * @param {?} escapedString
	     * @param {?} blocks
	     */
	    function StringWithEscapedBlocks(escapedString, blocks) {
	        this.escapedString = escapedString;
	        this.blocks = blocks;
	    }
	    return StringWithEscapedBlocks;
	}());
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function escapeBlocks(input) {
	    var /** @type {?} */ inputParts = input.split(_curlyRe);
	    var /** @type {?} */ resultParts = [];
	    var /** @type {?} */ escapedBlocks = [];
	    var /** @type {?} */ bracketCount = 0;
	    var /** @type {?} */ currentBlockParts = [];
	    for (var /** @type {?} */ partIndex = 0; partIndex < inputParts.length; partIndex++) {
	        var /** @type {?} */ part = inputParts[partIndex];
	        if (part == CLOSE_CURLY) {
	            bracketCount--;
	        }
	        if (bracketCount > 0) {
	            currentBlockParts.push(part);
	        }
	        else {
	            if (currentBlockParts.length > 0) {
	                escapedBlocks.push(currentBlockParts.join(''));
	                resultParts.push(BLOCK_PLACEHOLDER);
	                currentBlockParts = [];
	            }
	            resultParts.push(part);
	        }
	        if (part == OPEN_CURLY) {
	            bracketCount++;
	        }
	    }
	    if (currentBlockParts.length > 0) {
	        escapedBlocks.push(currentBlockParts.join(''));
	        resultParts.push(BLOCK_PLACEHOLDER);
	    }
	    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var COMPONENT_VARIABLE = '%COMP%';
	var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	var StylesCompileDependency = (function () {
	    /**
	     * @param {?} name
	     * @param {?} moduleUrl
	     * @param {?} isShimmed
	     * @param {?} valuePlaceholder
	     */
	    function StylesCompileDependency(name, moduleUrl, isShimmed, valuePlaceholder) {
	        this.name = name;
	        this.moduleUrl = moduleUrl;
	        this.isShimmed = isShimmed;
	        this.valuePlaceholder = valuePlaceholder;
	    }
	    return StylesCompileDependency;
	}());
	var StylesCompileResult = (function () {
	    /**
	     * @param {?} componentStylesheet
	     * @param {?} externalStylesheets
	     */
	    function StylesCompileResult(componentStylesheet, externalStylesheets) {
	        this.componentStylesheet = componentStylesheet;
	        this.externalStylesheets = externalStylesheets;
	    }
	    return StylesCompileResult;
	}());
	var CompiledStylesheet = (function () {
	    /**
	     * @param {?} statements
	     * @param {?} stylesVar
	     * @param {?} dependencies
	     * @param {?} isShimmed
	     * @param {?} meta
	     */
	    function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
	        this.statements = statements;
	        this.stylesVar = stylesVar;
	        this.dependencies = dependencies;
	        this.isShimmed = isShimmed;
	        this.meta = meta;
	    }
	    return CompiledStylesheet;
	}());
	var StyleCompiler = (function () {
	    /**
	     * @param {?} _urlResolver
	     */
	    function StyleCompiler(_urlResolver) {
	        this._urlResolver = _urlResolver;
	        this._shadowCss = new ShadowCss();
	    }
	    /**
	     * @param {?} comp
	     * @return {?}
	     */
	    StyleCompiler.prototype.compileComponent = function (comp) {
	        var _this = this;
	        var /** @type {?} */ externalStylesheets = [];
	        var /** @type {?} */ componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
	            styles: comp.template.styles,
	            styleUrls: comp.template.styleUrls,
	            moduleUrl: identifierModuleUrl(comp.type)
	        }), true);
	        comp.template.externalStylesheets.forEach(function (stylesheetMeta) {
	            var /** @type {?} */ compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);
	            externalStylesheets.push(compiledStylesheet);
	        });
	        return new StylesCompileResult(componentStylesheet, externalStylesheets);
	    };
	    /**
	     * @param {?} comp
	     * @param {?} stylesheet
	     * @param {?} isComponentStylesheet
	     * @return {?}
	     */
	    StyleCompiler.prototype._compileStyles = function (comp, stylesheet, isComponentStylesheet) {
	        var _this = this;
	        var /** @type {?} */ shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated;
	        var /** @type {?} */ styleExpressions = stylesheet.styles.map(function (plainStyle) { return literal(_this._shimIfNeeded(plainStyle, shim)); });
	        var /** @type {?} */ dependencies = [];
	        for (var /** @type {?} */ i = 0; i < stylesheet.styleUrls.length; i++) {
	            var /** @type {?} */ identifier = { reference: null };
	            dependencies.push(new StylesCompileDependency(getStylesVarName(null), stylesheet.styleUrls[i], shim, identifier));
	            styleExpressions.push(new ExternalExpr(identifier));
	        }
	        // styles variable contains plain strings and arrays of other styles arrays (recursive),
	        // so we set its type to dynamic.
	        var /** @type {?} */ stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
	        var /** @type {?} */ stmt = variable(stylesVar)
	            .set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])))
	            .toDeclStmt(null, [StmtModifier.Final]);
	        return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
	    };
	    /**
	     * @param {?} style
	     * @param {?} shim
	     * @return {?}
	     */
	    StyleCompiler.prototype._shimIfNeeded = function (style$$1, shim) {
	        return shim ? this._shadowCss.shimCssText(style$$1, CONTENT_ATTR, HOST_ATTR) : style$$1;
	    };
	    return StyleCompiler;
	}());
	StyleCompiler.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	StyleCompiler.ctorParameters = function () { return [
	    { type: UrlResolver, },
	]; };
	/**
	 * @param {?} component
	 * @return {?}
	 */
	function getStylesVarName(component) {
	    var /** @type {?} */ result = "styles";
	    if (component) {
	        result += "_" + identifierName(component.type);
	    }
	    return result;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EventHandlerVars = (function () {
	    function EventHandlerVars() {
	    }
	    return EventHandlerVars;
	}());
	EventHandlerVars.event = variable('$event');
	var ConvertActionBindingResult = (function () {
	    /**
	     * @param {?} stmts
	     * @param {?} allowDefault
	     */
	    function ConvertActionBindingResult(stmts, allowDefault) {
	        this.stmts = stmts;
	        this.allowDefault = allowDefault;
	    }
	    return ConvertActionBindingResult;
	}());
	/**
	 * Converts the given expression AST into an executable output AST, assuming the expression is
	 * used in an action binding (e.g. an event handler).
	 * @param {?} localResolver
	 * @param {?} implicitReceiver
	 * @param {?} action
	 * @param {?} bindingId
	 * @return {?}
	 */
	function convertActionBinding(localResolver, implicitReceiver, action, bindingId) {
	    if (!localResolver) {
	        localResolver = new DefaultLocalResolver();
	    }
	    var /** @type {?} */ actionWithoutBuiltins = convertPropertyBindingBuiltins({
	        createLiteralArrayConverter: function (argCount) {
	            // Note: no caching for literal arrays in actions.
	            return function (args) { return literalArr(args); };
	        },
	        createLiteralMapConverter: function (keys) {
	            // Note: no caching for literal maps in actions.
	            return function (args) { return literalMap(/** @type {?} */ (keys.map(function (key, i) { return [key, args[i]]; }))); };
	        },
	        createPipeConverter: function (name) {
	            throw new Error("Illegal State: Actions are not allowed to contain pipes. Pipe: " + name);
	        }
	    }, action);
	    var /** @type {?} */ visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId);
	    var /** @type {?} */ actionStmts = [];
	    flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);
	    prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
	    var /** @type {?} */ lastIndex = actionStmts.length - 1;
	    var /** @type {?} */ preventDefaultVar = null;
	    if (lastIndex >= 0) {
	        var /** @type {?} */ lastStatement = actionStmts[lastIndex];
	        var /** @type {?} */ returnExpr = convertStmtIntoExpression(lastStatement);
	        if (returnExpr) {
	            // Note: We need to cast the result of the method call to dynamic,
	            // as it might be a void method!
	            preventDefaultVar = createPreventDefaultVar(bindingId);
	            actionStmts[lastIndex] =
	                preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false)))
	                    .toDeclStmt(null, [StmtModifier.Final]);
	        }
	    }
	    return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
	}
	/**
	 * @param {?} converterFactory
	 * @param {?} ast
	 * @return {?}
	 */
	function convertPropertyBindingBuiltins(converterFactory, ast) {
	    return convertBuiltins(converterFactory, ast);
	}
	var ConvertPropertyBindingResult = (function () {
	    /**
	     * @param {?} stmts
	     * @param {?} currValExpr
	     */
	    function ConvertPropertyBindingResult(stmts, currValExpr) {
	        this.stmts = stmts;
	        this.currValExpr = currValExpr;
	    }
	    return ConvertPropertyBindingResult;
	}());
	/**
	 * Converts the given expression AST into an executable output AST, assuming the expression
	 * is used in property binding. The expression has to be preprocessed via
	 * `convertPropertyBindingBuiltins`.
	 * @param {?} localResolver
	 * @param {?} implicitReceiver
	 * @param {?} expressionWithoutBuiltins
	 * @param {?} bindingId
	 * @return {?}
	 */
	function convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId) {
	    if (!localResolver) {
	        localResolver = new DefaultLocalResolver();
	    }
	    var /** @type {?} */ currValExpr = createCurrValueExpr(bindingId);
	    var /** @type {?} */ stmts = [];
	    var /** @type {?} */ visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId);
	    var /** @type {?} */ outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);
	    if (visitor.temporaryCount) {
	        for (var /** @type {?} */ i = 0; i < visitor.temporaryCount; i++) {
	            stmts.push(temporaryDeclaration(bindingId, i));
	        }
	    }
	    stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [StmtModifier.Final]));
	    return new ConvertPropertyBindingResult(stmts, currValExpr);
	}
	/**
	 * @param {?} converterFactory
	 * @param {?} ast
	 * @return {?}
	 */
	function convertBuiltins(converterFactory, ast) {
	    var /** @type {?} */ visitor = new _BuiltinAstConverter(converterFactory);
	    return ast.visit(visitor);
	}
	/**
	 * @param {?} bindingId
	 * @param {?} temporaryNumber
	 * @return {?}
	 */
	function temporaryName(bindingId, temporaryNumber) {
	    return "tmp_" + bindingId + "_" + temporaryNumber;
	}
	/**
	 * @param {?} bindingId
	 * @param {?} temporaryNumber
	 * @return {?}
	 */
	function temporaryDeclaration(bindingId, temporaryNumber) {
	    return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
	}
	/**
	 * @param {?} temporaryCount
	 * @param {?} bindingId
	 * @param {?} statements
	 * @return {?}
	 */
	function prependTemporaryDecls(temporaryCount, bindingId, statements) {
	    for (var /** @type {?} */ i = temporaryCount - 1; i >= 0; i--) {
	        statements.unshift(temporaryDeclaration(bindingId, i));
	    }
	}
	var _Mode = {};
	_Mode.Statement = 0;
	_Mode.Expression = 1;
	_Mode[_Mode.Statement] = "Statement";
	_Mode[_Mode.Expression] = "Expression";
	/**
	 * @param {?} mode
	 * @param {?} ast
	 * @return {?}
	 */
	function ensureStatementMode(mode, ast) {
	    if (mode !== _Mode.Statement) {
	        throw new Error("Expected a statement, but saw " + ast);
	    }
	}
	/**
	 * @param {?} mode
	 * @param {?} ast
	 * @return {?}
	 */
	function ensureExpressionMode(mode, ast) {
	    if (mode !== _Mode.Expression) {
	        throw new Error("Expected an expression, but saw " + ast);
	    }
	}
	/**
	 * @param {?} mode
	 * @param {?} expr
	 * @return {?}
	 */
	function convertToStatementIfNeeded(mode, expr) {
	    if (mode === _Mode.Statement) {
	        return expr.toStmt();
	    }
	    else {
	        return expr;
	    }
	}
	var _BuiltinAstConverter = (function (_super) {
	    __extends(_BuiltinAstConverter, _super);
	    /**
	     * @param {?} _converterFactory
	     */
	    function _BuiltinAstConverter(_converterFactory) {
	        var _this = _super.call(this) || this;
	        _this._converterFactory = _converterFactory;
	        return _this;
	    }
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    _BuiltinAstConverter.prototype.visitPipe = function (ast, context) {
	        var _this = this;
	        var /** @type {?} */ args = [ast.exp].concat(ast.args).map(function (ast) { return ast.visit(_this, context); });
	        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createPipeConverter(ast.name, args.length));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    _BuiltinAstConverter.prototype.visitLiteralArray = function (ast, context) {
	        var _this = this;
	        var /** @type {?} */ args = ast.expressions.map(function (ast) { return ast.visit(_this, context); });
	        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    _BuiltinAstConverter.prototype.visitLiteralMap = function (ast, context) {
	        var _this = this;
	        var /** @type {?} */ args = ast.values.map(function (ast) { return ast.visit(_this, context); });
	        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralMapConverter(ast.keys));
	    };
	    return _BuiltinAstConverter;
	}(AstTransformer));
	var _AstToIrVisitor = (function () {
	    /**
	     * @param {?} _localResolver
	     * @param {?} _implicitReceiver
	     * @param {?} bindingId
	     */
	    function _AstToIrVisitor(_localResolver, _implicitReceiver, bindingId) {
	        this._localResolver = _localResolver;
	        this._implicitReceiver = _implicitReceiver;
	        this.bindingId = bindingId;
	        this._nodeMap = new Map();
	        this._resultMap = new Map();
	        this._currentTemporary = 0;
	        this.temporaryCount = 0;
	    }
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitBinary = function (ast, mode) {
	        var /** @type {?} */ op;
	        switch (ast.operation) {
	            case '+':
	                op = BinaryOperator.Plus;
	                break;
	            case '-':
	                op = BinaryOperator.Minus;
	                break;
	            case '*':
	                op = BinaryOperator.Multiply;
	                break;
	            case '/':
	                op = BinaryOperator.Divide;
	                break;
	            case '%':
	                op = BinaryOperator.Modulo;
	                break;
	            case '&&':
	                op = BinaryOperator.And;
	                break;
	            case '||':
	                op = BinaryOperator.Or;
	                break;
	            case '==':
	                op = BinaryOperator.Equals;
	                break;
	            case '!=':
	                op = BinaryOperator.NotEquals;
	                break;
	            case '===':
	                op = BinaryOperator.Identical;
	                break;
	            case '!==':
	                op = BinaryOperator.NotIdentical;
	                break;
	            case '<':
	                op = BinaryOperator.Lower;
	                break;
	            case '>':
	                op = BinaryOperator.Bigger;
	                break;
	            case '<=':
	                op = BinaryOperator.LowerEquals;
	                break;
	            case '>=':
	                op = BinaryOperator.BiggerEquals;
	                break;
	            default:
	                throw new Error("Unsupported operation " + ast.operation);
	        }
	        return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitChain = function (ast, mode) {
	        ensureStatementMode(mode, ast);
	        return this.visitAll(ast.expressions, mode);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitConditional = function (ast, mode) {
	        var /** @type {?} */ value = this.visit(ast.condition, _Mode.Expression);
	        return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitPipe = function (ast, mode) {
	        throw new Error("Illegal state: Pipes should have been converted into functions. Pipe: " + ast.name);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitFunctionCall = function (ast, mode) {
	        var /** @type {?} */ convertedArgs = this.visitAll(ast.args, _Mode.Expression);
	        var /** @type {?} */ fnResult;
	        if (ast instanceof BuiltinFunctionCall) {
	            fnResult = ast.converter(convertedArgs);
	        }
	        else {
	            fnResult = this.visit(ast.target, _Mode.Expression).callFn(convertedArgs);
	        }
	        return convertToStatementIfNeeded(mode, fnResult);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitImplicitReceiver = function (ast, mode) {
	        ensureExpressionMode(mode, ast);
	        return this._implicitReceiver;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitInterpolation = function (ast, mode) {
	        ensureExpressionMode(mode, ast);
	        var /** @type {?} */ args = [literal(ast.expressions.length)];
	        for (var /** @type {?} */ i = 0; i < ast.strings.length - 1; i++) {
	            args.push(literal(ast.strings[i]));
	            args.push(this.visit(ast.expressions[i], _Mode.Expression));
	        }
	        args.push(literal(ast.strings[ast.strings.length - 1]));
	        return ast.expressions.length <= 9 ?
	            importExpr(createIdentifier(Identifiers.inlineInterpolate)).callFn(args) :
	            importExpr(createIdentifier(Identifiers.interpolate)).callFn([
	                args[0], literalArr(args.slice(1))
	            ]);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitKeyedRead = function (ast, mode) {
	        var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);
	        if (leftMostSafe) {
	            return this.convertSafeAccess(ast, leftMostSafe, mode);
	        }
	        else {
	            return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
	        }
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitKeyedWrite = function (ast, mode) {
	        var /** @type {?} */ obj = this.visit(ast.obj, _Mode.Expression);
	        var /** @type {?} */ key = this.visit(ast.key, _Mode.Expression);
	        var /** @type {?} */ value = this.visit(ast.value, _Mode.Expression);
	        return convertToStatementIfNeeded(mode, obj.key(key).set(value));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitLiteralArray = function (ast, mode) {
	        throw new Error("Illegal State: literal arrays should have been converted into functions");
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitLiteralMap = function (ast, mode) {
	        throw new Error("Illegal State: literal maps should have been converted into functions");
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitLiteralPrimitive = function (ast, mode) {
	        return convertToStatementIfNeeded(mode, literal(ast.value));
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype._getLocal = function (name) { return this._localResolver.getLocal(name); };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitMethodCall = function (ast, mode) {
	        var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);
	        if (leftMostSafe) {
	            return this.convertSafeAccess(ast, leftMostSafe, mode);
	        }
	        else {
	            var /** @type {?} */ args = this.visitAll(ast.args, _Mode.Expression);
	            var /** @type {?} */ result = null;
	            var /** @type {?} */ receiver = this.visit(ast.receiver, _Mode.Expression);
	            if (receiver === this._implicitReceiver) {
	                var /** @type {?} */ varExpr = this._getLocal(ast.name);
	                if (varExpr) {
	                    result = varExpr.callFn(args);
	                }
	            }
	            if (result == null) {
	                result = receiver.callMethod(ast.name, args);
	            }
	            return convertToStatementIfNeeded(mode, result);
	        }
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitPrefixNot = function (ast, mode) {
	        return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitPropertyRead = function (ast, mode) {
	        var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);
	        if (leftMostSafe) {
	            return this.convertSafeAccess(ast, leftMostSafe, mode);
	        }
	        else {
	            var /** @type {?} */ result = null;
	            var /** @type {?} */ receiver = this.visit(ast.receiver, _Mode.Expression);
	            if (receiver === this._implicitReceiver) {
	                result = this._getLocal(ast.name);
	            }
	            if (result == null) {
	                result = receiver.prop(ast.name);
	            }
	            return convertToStatementIfNeeded(mode, result);
	        }
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitPropertyWrite = function (ast, mode) {
	        var /** @type {?} */ receiver = this.visit(ast.receiver, _Mode.Expression);
	        if (receiver === this._implicitReceiver) {
	            var /** @type {?} */ varExpr = this._getLocal(ast.name);
	            if (varExpr) {
	                throw new Error('Cannot assign to a reference or variable!');
	            }
	        }
	        return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitSafePropertyRead = function (ast, mode) {
	        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitSafeMethodCall = function (ast, mode) {
	        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	    };
	    /**
	     * @param {?} asts
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitAll = function (asts, mode) {
	        var _this = this;
	        return asts.map(function (ast) { return _this.visit(ast, mode); });
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitQuote = function (ast, mode) {
	        throw new Error('Quotes are not supported for evaluation!');
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visit = function (ast, mode) {
	        var /** @type {?} */ result = this._resultMap.get(ast);
	        if (result)
	            return result;
	        return (this._nodeMap.get(ast) || ast).visit(this, mode);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} leftMostSafe
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.convertSafeAccess = function (ast, leftMostSafe, mode) {
	        // If the expression contains a safe access node on the left it needs to be converted to
	        // an expression that guards the access to the member by checking the receiver for blank. As
	        // execution proceeds from left to right, the left most part of the expression must be guarded
	        // first but, because member access is left associative, the right side of the expression is at
	        // the top of the AST. The desired result requires lifting a copy of the the left part of the
	        // expression up to test it for blank before generating the unguarded version.
	        // Consider, for example the following expression: a?.b.c?.d.e
	        // This results in the ast:
	        //         .
	        //        / \
	        //       ?.   e
	        //      /  \
	        //     .    d
	        //    / \
	        //   ?.  c
	        //  /  \
	        // a    b
	        // The following tree should be generated:
	        //
	        //        /---- ? ----\
	        //       /      |      \
	        //     a   /--- ? ---\  null
	        //        /     |     \
	        //       .      .     null
	        //      / \    / \
	        //     .  c   .   e
	        //    / \    / \
	        //   a   b  ,   d
	        //         / \
	        //        .   c
	        //       / \
	        //      a   b
	        //
	        // Notice that the first guard condition is the left hand of the left most safe access node
	        // which comes in as leftMostSafe to this routine.
	        var /** @type {?} */ guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);
	        var /** @type {?} */ temporary;
	        if (this.needsTemporary(leftMostSafe.receiver)) {
	            // If the expression has method calls or pipes then we need to save the result into a
	            // temporary variable to avoid calling stateful or impure code more than once.
	            temporary = this.allocateTemporary();
	            // Preserve the result in the temporary variable
	            guardedExpression = temporary.set(guardedExpression);
	            // Ensure all further references to the guarded expression refer to the temporary instead.
	            this._resultMap.set(leftMostSafe.receiver, temporary);
	        }
	        var /** @type {?} */ condition = guardedExpression.isBlank();
	        // Convert the ast to an unguarded access to the receiver's member. The map will substitute
	        // leftMostNode with its unguarded version in the call to `this.visit()`.
	        if (leftMostSafe instanceof SafeMethodCall) {
	            this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
	        }
	        else {
	            this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
	        }
	        // Recursively convert the node now without the guarded member access.
	        var /** @type {?} */ access = this.visit(ast, _Mode.Expression);
	        // Remove the mapping. This is not strictly required as the converter only traverses each node
	        // once but is safer if the conversion is changed to traverse the nodes more than once.
	        this._nodeMap.delete(leftMostSafe);
	        // If we allocated a temporary, release it.
	        if (temporary) {
	            this.releaseTemporary(temporary);
	        }
	        // Produce the conditional
	        return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
	    };
	    /**
	     * @param {?} ast
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.leftMostSafeNode = function (ast) {
	        var _this = this;
	        var /** @type {?} */ visit = function (visitor, ast) {
	            return (_this._nodeMap.get(ast) || ast).visit(visitor);
	        };
	        return ast.visit({
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitBinary: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitChain: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitConditional: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitFunctionCall: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitImplicitReceiver: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitInterpolation: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitKeyedRead: function (ast) { return visit(this, ast.obj); },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitKeyedWrite: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitLiteralArray: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitLiteralMap: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitLiteralPrimitive: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitMethodCall: function (ast) { return visit(this, ast.receiver); },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPipe: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPrefixNot: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPropertyRead: function (ast) { return visit(this, ast.receiver); },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPropertyWrite: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitQuote: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitSafeMethodCall: function (ast) { return visit(this, ast.receiver) || ast; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitSafePropertyRead: function (ast) {
	                return visit(this, ast.receiver) || ast;
	            }
	        });
	    };
	    /**
	     * @param {?} ast
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.needsTemporary = function (ast) {
	        var _this = this;
	        var /** @type {?} */ visit = function (visitor, ast) {
	            return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
	        };
	        var /** @type {?} */ visitSome = function (visitor, ast) {
	            return ast.some(function (ast) { return visit(visitor, ast); });
	        };
	        return ast.visit({
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitBinary: function (ast) { return visit(this, ast.left) || visit(this, ast.right); },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitChain: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitConditional: function (ast) {
	                return visit(this, ast.condition) || visit(this, ast.trueExp) ||
	                    visit(this, ast.falseExp);
	            },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitFunctionCall: function (ast) { return true; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitImplicitReceiver: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitInterpolation: function (ast) { return visitSome(this, ast.expressions); },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitKeyedRead: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitKeyedWrite: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitLiteralArray: function (ast) { return true; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitLiteralMap: function (ast) { return true; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitLiteralPrimitive: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitMethodCall: function (ast) { return true; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPipe: function (ast) { return true; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPrefixNot: function (ast) { return visit(this, ast.expression); },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPropertyRead: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPropertyWrite: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitQuote: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitSafeMethodCall: function (ast) { return true; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitSafePropertyRead: function (ast) { return false; }
	        });
	    };
	    /**
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.allocateTemporary = function () {
	        var /** @type {?} */ tempNumber = this._currentTemporary++;
	        this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
	        return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
	    };
	    /**
	     * @param {?} temporary
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.releaseTemporary = function (temporary) {
	        this._currentTemporary--;
	        if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
	            throw new Error("Temporary " + temporary.name + " released out of order");
	        }
	    };
	    return _AstToIrVisitor;
	}());
	/**
	 * @param {?} arg
	 * @param {?} output
	 * @return {?}
	 */
	function flattenStatements(arg, output) {
	    if (Array.isArray(arg)) {
	        ((arg)).forEach(function (entry) { return flattenStatements(entry, output); });
	    }
	    else {
	        output.push(arg);
	    }
	}
	var DefaultLocalResolver = (function () {
	    function DefaultLocalResolver() {
	    }
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    DefaultLocalResolver.prototype.getLocal = function (name) {
	        if (name === EventHandlerVars.event.name) {
	            return EventHandlerVars.event;
	        }
	        return null;
	    };
	    return DefaultLocalResolver;
	}());
	/**
	 * @param {?} bindingId
	 * @return {?}
	 */
	function createCurrValueExpr(bindingId) {
	    return variable("currVal_" + bindingId); // fix syntax highlighting: `
	}
	/**
	 * @param {?} bindingId
	 * @return {?}
	 */
	function createPreventDefaultVar(bindingId) {
	    return variable("pd_" + bindingId);
	}
	/**
	 * @param {?} stmt
	 * @return {?}
	 */
	function convertStmtIntoExpression(stmt) {
	    if (stmt instanceof ExpressionStatement) {
	        return stmt.expr;
	    }
	    else if (stmt instanceof ReturnStatement) {
	        return stmt.value;
	    }
	    return null;
	}
	var BuiltinFunctionCall = (function (_super) {
	    __extends(BuiltinFunctionCall, _super);
	    /**
	     * @param {?} span
	     * @param {?} args
	     * @param {?} converter
	     */
	    function BuiltinFunctionCall(span, args, converter) {
	        var _this = _super.call(this, span, null, args) || this;
	        _this.args = args;
	        _this.converter = converter;
	        return _this;
	    }
	    return BuiltinFunctionCall;
	}(FunctionCall));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CLASS_ATTR$1 = 'class';
	var STYLE_ATTR = 'style';
	var IMPLICIT_TEMPLATE_VAR = '\$implicit';
	var NG_CONTAINER_TAG = 'ng-container';
	var ViewCompileResult = (function () {
	    /**
	     * @param {?} statements
	     * @param {?} viewClassVar
	     * @param {?} rendererTypeVar
	     */
	    function ViewCompileResult(statements, viewClassVar, rendererTypeVar) {
	        this.statements = statements;
	        this.viewClassVar = viewClassVar;
	        this.rendererTypeVar = rendererTypeVar;
	    }
	    return ViewCompileResult;
	}());
	var ViewCompiler = (function () {
	    /**
	     * @param {?} _genConfigNext
	     * @param {?} _schemaRegistry
	     */
	    function ViewCompiler(_genConfigNext, _schemaRegistry) {
	        this._genConfigNext = _genConfigNext;
	        this._schemaRegistry = _schemaRegistry;
	    }
	    /**
	     * @param {?} component
	     * @param {?} template
	     * @param {?} styles
	     * @param {?} usedPipes
	     * @return {?}
	     */
	    ViewCompiler.prototype.compileComponent = function (component, template, styles, usedPipes) {
	        var /** @type {?} */ embeddedViewCount = 0;
	        var /** @type {?} */ staticQueryIds = findStaticQueryIds(template);
	        var /** @type {?} */ statements = [];
	        var /** @type {?} */ renderComponentVarName;
	        if (!component.isHost) {
	            var /** @type {?} */ customRenderData = [];
	            if (component.template.animations && component.template.animations.length) {
	                customRenderData.push(new LiteralMapEntry('animation', convertValueToOutputAst(component.template.animations), true));
	            }
	            var /** @type {?} */ renderComponentVar = variable(rendererTypeName(component.type.reference));
	            renderComponentVarName = renderComponentVar.name;
	            statements.push(renderComponentVar
	                .set(importExpr(createIdentifier(Identifiers.createRendererType2))
	                .callFn([new LiteralMapExpr([
	                    new LiteralMapEntry('encapsulation', literal(component.template.encapsulation)),
	                    new LiteralMapEntry('styles', styles),
	                    new LiteralMapEntry('data', new LiteralMapExpr(customRenderData))
	                ])]))
	                .toDeclStmt(importType(createIdentifier(Identifiers.RendererType2)), [StmtModifier.Final]));
	        }
	        var /** @type {?} */ viewBuilderFactory = function (parent) {
	            var /** @type {?} */ embeddedViewIndex = embeddedViewCount++;
	            return new ViewBuilder(parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory);
	        };
	        var /** @type {?} */ visitor = viewBuilderFactory(null);
	        visitor.visitAll([], template);
	        statements.push.apply(statements, visitor.build());
	        return new ViewCompileResult(statements, visitor.viewName, renderComponentVarName);
	    };
	    return ViewCompiler;
	}());
	ViewCompiler.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	ViewCompiler.ctorParameters = function () { return [
	    { type: CompilerConfig, },
	    { type: ElementSchemaRegistry, },
	]; };
	var LOG_VAR = variable('l');
	var VIEW_VAR = variable('v');
	var CHECK_VAR = variable('ck');
	var COMP_VAR = variable('co');
	var EVENT_NAME_VAR = variable('en');
	var ALLOW_DEFAULT_VAR = variable("ad");
	var ViewBuilder = (function () {
	    /**
	     * @param {?} parent
	     * @param {?} component
	     * @param {?} embeddedViewIndex
	     * @param {?} usedPipes
	     * @param {?} staticQueryIds
	     * @param {?} viewBuilderFactory
	     */
	    function ViewBuilder(parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory) {
	        this.parent = parent;
	        this.component = component;
	        this.embeddedViewIndex = embeddedViewIndex;
	        this.usedPipes = usedPipes;
	        this.staticQueryIds = staticQueryIds;
	        this.viewBuilderFactory = viewBuilderFactory;
	        this.nodes = [];
	        this.purePipeNodeIndices = Object.create(null);
	        this.refNodeIndices = Object.create(null);
	        this.variables = [];
	        this.children = [];
	        // TODO(tbosch): The old view compiler used to use an `any` type
	        // for the context in any embedded view. We keep this behaivor for now
	        // to be able to introduce the new view compiler without too many errors.
	        this.compType = this.embeddedViewIndex > 0 ? DYNAMIC_TYPE : importType(this.component.type);
	    }
	    Object.defineProperty(ViewBuilder.prototype, "viewName", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return viewClassName(this.component.type.reference, this.embeddedViewIndex);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} variables
	     * @param {?} astNodes
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitAll = function (variables, astNodes) {
	        var _this = this;
	        this.variables = variables;
	        // create the pipes for the pure pipes immediately, so that we know their indices.
	        if (!this.parent) {
	            this.usedPipes.forEach(function (pipe) {
	                if (pipe.pure) {
	                    _this.purePipeNodeIndices[pipe.name] = _this._createPipe(null, pipe);
	                }
	            });
	        }
	        if (!this.parent) {
	            var /** @type {?} */ queryIds_1 = staticViewQueryIds(this.staticQueryIds);
	            this.component.viewQueries.forEach(function (query, queryIndex) {
	                // Note: queries start with id 1 so we can use the number in a Bloom filter!
	                var /** @type {?} */ queryId = queryIndex + 1;
	                var /** @type {?} */ bindingType = query.first ? 0 /* First */ : 1;
	                var /** @type {?} */ flags = 67108864 /* TypeViewQuery */ | calcStaticDynamicQueryFlags(queryIds_1, queryId, query.first);
	                _this.nodes.push(function () { return ({
	                    sourceSpan: null,
	                    nodeFlags: flags,
	                    nodeDef: importExpr(createIdentifier(Identifiers.queryDef)).callFn([
	                        literal(flags), literal(queryId),
	                        new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType))])
	                    ])
	                }); });
	            });
	        }
	        templateVisitAll(this, astNodes);
	        if (this.parent && (astNodes.length === 0 || needsAdditionalRootNode(astNodes))) {
	            // if the view is an embedded view, then we need to add an additional root node in some cases
	            this.nodes.push(function () { return ({
	                sourceSpan: null,
	                nodeFlags: 1 /* TypeElement */,
	                nodeDef: importExpr(createIdentifier(Identifiers.anchorDef)).callFn([
	                    literal(0 /* None */), NULL_EXPR, NULL_EXPR, literal(0)
	                ])
	            }); });
	        }
	    };
	    /**
	     * @param {?=} targetStatements
	     * @return {?}
	     */
	    ViewBuilder.prototype.build = function (targetStatements) {
	        if (targetStatements === void 0) { targetStatements = []; }
	        this.children.forEach(function (child) { return child.build(targetStatements); });
	        var _a = this._createNodeExpressions(), updateRendererStmts = _a.updateRendererStmts, updateDirectivesStmts = _a.updateDirectivesStmts, nodeDefExprs = _a.nodeDefExprs;
	        var /** @type {?} */ updateRendererFn = this._createUpdateFn(updateRendererStmts);
	        var /** @type {?} */ updateDirectivesFn = this._createUpdateFn(updateDirectivesStmts);
	        var /** @type {?} */ viewFlags = 0;
	        if (!this.parent && this.component.changeDetection === _angular_core.ChangeDetectionStrategy.OnPush) {
	            viewFlags |= 2 /* OnPush */;
	        }
	        var /** @type {?} */ viewFactory = new DeclareFunctionStmt(this.viewName, [new FnParam(LOG_VAR.name)], [new ReturnStatement(importExpr(createIdentifier(Identifiers.viewDef)).callFn([
	                literal(viewFlags),
	                literalArr(nodeDefExprs),
	                updateDirectivesFn,
	                updateRendererFn,
	            ]))], importType(createIdentifier(Identifiers.ViewDefinition)));
	        targetStatements.push(viewFactory);
	        return targetStatements;
	    };
	    /**
	     * @param {?} updateStmts
	     * @return {?}
	     */
	    ViewBuilder.prototype._createUpdateFn = function (updateStmts) {
	        var /** @type {?} */ updateFn;
	        if (updateStmts.length > 0) {
	            var /** @type {?} */ preStmts = [];
	            if (!this.component.isHost && findReadVarNames(updateStmts).has(COMP_VAR.name)) {
	                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));
	            }
	            updateFn = fn([
	                new FnParam(CHECK_VAR.name, INFERRED_TYPE),
	                new FnParam(VIEW_VAR.name, INFERRED_TYPE)
	            ], preStmts.concat(updateStmts), INFERRED_TYPE);
	        }
	        else {
	            updateFn = NULL_EXPR;
	        }
	        return updateFn;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitNgContent = function (ast, context) {
	        // ngContentDef(ngContentIndex: number, index: number): NodeDef;
	        this.nodes.push(function () { return ({
	            sourceSpan: ast.sourceSpan,
	            nodeFlags: 4 /* TypeNgContent */,
	            nodeDef: importExpr(createIdentifier(Identifiers.ngContentDef)).callFn([
	                literal(ast.ngContentIndex), literal(ast.index)
	            ])
	        }); });
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitText = function (ast, context) {
	        // textDef(ngContentIndex: number, constants: string[]): NodeDef;
	        this.nodes.push(function () { return ({
	            sourceSpan: ast.sourceSpan,
	            nodeFlags: 2 /* TypeText */,
	            nodeDef: importExpr(createIdentifier(Identifiers.textDef)).callFn([
	                literal(ast.ngContentIndex), literalArr([literal(ast.value)])
	            ])
	        }); });
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitBoundText = function (ast, context) {
	        var _this = this;
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        // reserve the space in the nodeDefs array
	        this.nodes.push(null);
	        var /** @type {?} */ astWithSource = (ast.value);
	        var /** @type {?} */ inter = (astWithSource.ast);
	        var /** @type {?} */ updateRendererExpressions = inter.expressions.map(function (expr, bindingIndex) { return _this._preprocessUpdateExpression({ nodeIndex: nodeIndex, bindingIndex: bindingIndex, sourceSpan: ast.sourceSpan, context: COMP_VAR, value: expr }); });
	        // textDef(ngContentIndex: number, constants: string[]): NodeDef;
	        this.nodes[nodeIndex] = function () { return ({
	            sourceSpan: ast.sourceSpan,
	            nodeFlags: 2 /* TypeText */,
	            nodeDef: importExpr(createIdentifier(Identifiers.textDef)).callFn([
	                literal(ast.ngContentIndex), literalArr(inter.strings.map(function (s) { return literal(s); }))
	            ]),
	            updateRenderer: updateRendererExpressions
	        }); };
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitEmbeddedTemplate = function (ast, context) {
	        var _this = this;
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        // reserve the space in the nodeDefs array
	        this.nodes.push(null);
	        var _a = this._visitElementOrTemplate(nodeIndex, ast), flags = _a.flags, queryMatchesExpr = _a.queryMatchesExpr, hostEvents = _a.hostEvents;
	        var /** @type {?} */ childVisitor = this.viewBuilderFactory(this);
	        this.children.push(childVisitor);
	        childVisitor.visitAll(ast.variables, ast.children);
	        var /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;
	        // anchorDef(
	        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], ngContentIndex: number,
	        //   childCount: number, handleEventFn?: ElementHandleEventFn, templateFactory?:
	        //   ViewDefinitionFactory): NodeDef;
	        this.nodes[nodeIndex] = function () { return ({
	            sourceSpan: ast.sourceSpan,
	            nodeFlags: 1 /* TypeElement */ | flags,
	            nodeDef: importExpr(createIdentifier(Identifiers.anchorDef)).callFn([
	                literal(flags),
	                queryMatchesExpr,
	                literal(ast.ngContentIndex),
	                literal(childCount),
	                _this._createElementHandleEventFn(nodeIndex, hostEvents),
	                variable(childVisitor.viewName),
	            ])
	        }); };
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitElement = function (ast, context) {
	        var _this = this;
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        // reserve the space in the nodeDefs array so we can add children
	        this.nodes.push(null);
	        var /** @type {?} */ elName = ast.name;
	        if (ast.name === NG_CONTAINER_TAG) {
	            // Using a null element name creates an anchor.
	            elName = null;
	        }
	        var _a = this._visitElementOrTemplate(nodeIndex, ast), flags = _a.flags, usedEvents = _a.usedEvents, queryMatchesExpr = _a.queryMatchesExpr, dirHostBindings = _a.hostBindings, hostEvents = _a.hostEvents;
	        var /** @type {?} */ inputDefs = [];
	        var /** @type {?} */ updateRendererExpressions = [];
	        var /** @type {?} */ outputDefs = [];
	        if (elName) {
	            var /** @type {?} */ hostBindings = ast.inputs
	                .map(function (inputAst) { return ({
	                context: /** @type {?} */ (COMP_VAR),
	                inputAst: inputAst,
	                dirAst: null,
	            }); })
	                .concat(dirHostBindings);
	            if (hostBindings.length) {
	                updateRendererExpressions =
	                    hostBindings.map(function (hostBinding, bindingIndex) { return _this._preprocessUpdateExpression({
	                        context: hostBinding.context,
	                        nodeIndex: nodeIndex,
	                        bindingIndex: bindingIndex,
	                        sourceSpan: hostBinding.inputAst.sourceSpan,
	                        value: hostBinding.inputAst.value
	                    }); });
	                inputDefs = hostBindings.map(function (hostBinding) { return elementBindingDef(hostBinding.inputAst, hostBinding.dirAst); });
	            }
	            outputDefs = usedEvents.map(function (_a) {
	                var target = _a[0], eventName = _a[1];
	                return literalArr([literal(target), literal(eventName)]);
	            });
	        }
	        templateVisitAll(this, ast.children);
	        var /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;
	        var /** @type {?} */ compAst = ast.directives.find(function (dirAst) { return dirAst.directive.isComponent; });
	        var /** @type {?} */ compRendererType = NULL_EXPR;
	        var /** @type {?} */ compView = NULL_EXPR;
	        if (compAst) {
	            compView = importExpr({ reference: compAst.directive.componentViewType });
	            compRendererType = importExpr({ reference: compAst.directive.rendererType });
	        }
	        // elementDef(
	        //   flags: NodeFlags, matchedQueriesDsl: [string | number, QueryValueType][],
	        //   ngContentIndex: number, childCount: number, namespaceAndName: string,
	        //   fixedAttrs: [string, string][] = [],
	        //   bindings?: [BindingFlags, string, string | SecurityContext][],
	        //   outputs?: ([OutputType.ElementOutput | OutputType.DirectiveHostOutput, string, string])[],
	        //   handleEvent?: ElementHandleEventFn,
	        //   componentView?: () => ViewDefinition, componentRendererType?: RendererType2): NodeDef;
	        this.nodes[nodeIndex] = function () { return ({
	            sourceSpan: ast.sourceSpan,
	            nodeFlags: 1 /* TypeElement */ | flags,
	            nodeDef: importExpr(createIdentifier(Identifiers.elementDef)).callFn([
	                literal(flags),
	                queryMatchesExpr,
	                literal(ast.ngContentIndex),
	                literal(childCount),
	                literal(elName),
	                elName ? fixedAttrsDef(ast) : NULL_EXPR,
	                inputDefs.length ? literalArr(inputDefs) : NULL_EXPR,
	                outputDefs.length ? literalArr(outputDefs) : NULL_EXPR,
	                _this._createElementHandleEventFn(nodeIndex, hostEvents),
	                compView,
	                compRendererType,
	            ]),
	            updateRenderer: updateRendererExpressions
	        }); };
	    };
	    /**
	     * @param {?} nodeIndex
	     * @param {?} ast
	     * @return {?}
	     */
	    ViewBuilder.prototype._visitElementOrTemplate = function (nodeIndex, ast) {
	        var _this = this;
	        var /** @type {?} */ flags = 0;
	        if (ast.hasViewContainer) {
	            flags |= 8388608 /* EmbeddedViews */;
	        }
	        var /** @type {?} */ usedEvents = new Map();
	        ast.outputs.forEach(function (event) {
	            var _a = elementEventNameAndTarget(event, null), name = _a.name, target = _a.target;
	            usedEvents.set(_angular_core.ɵelementEventFullName(target, name), [target, name]);
	        });
	        ast.directives.forEach(function (dirAst) {
	            dirAst.hostEvents.forEach(function (event) {
	                var _a = elementEventNameAndTarget(event, dirAst), name = _a.name, target = _a.target;
	                usedEvents.set(_angular_core.ɵelementEventFullName(target, name), [target, name]);
	            });
	        });
	        var /** @type {?} */ hostBindings = [];
	        var /** @type {?} */ hostEvents = [];
	        var /** @type {?} */ componentFactoryResolverProvider = createComponentFactoryResolver(ast.directives);
	        if (componentFactoryResolverProvider) {
	            this._visitProvider(componentFactoryResolverProvider, ast.queryMatches);
	        }
	        ast.providers.forEach(function (providerAst, providerIndex) {
	            var /** @type {?} */ dirAst;
	            var /** @type {?} */ dirIndex;
	            ast.directives.forEach(function (localDirAst, i) {
	                if (localDirAst.directive.type.reference === tokenReference(providerAst.token)) {
	                    dirAst = localDirAst;
	                    dirIndex = i;
	                }
	            });
	            if (dirAst) {
	                var _a = _this._visitDirective(providerAst, dirAst, dirIndex, nodeIndex, ast.references, ast.queryMatches, usedEvents, _this.staticQueryIds.get(/** @type {?} */ (ast))), dirHostBindings = _a.hostBindings, dirHostEvents = _a.hostEvents;
	                hostBindings.push.apply(hostBindings, dirHostBindings);
	                hostEvents.push.apply(hostEvents, dirHostEvents);
	            }
	            else {
	                _this._visitProvider(providerAst, ast.queryMatches);
	            }
	        });
	        var /** @type {?} */ queryMatchExprs = [];
	        ast.queryMatches.forEach(function (match) {
	            var /** @type {?} */ valueType;
	            if (tokenReference(match.value) === resolveIdentifier(Identifiers.ElementRef)) {
	                valueType = 0 /* ElementRef */;
	            }
	            else if (tokenReference(match.value) === resolveIdentifier(Identifiers.ViewContainerRef)) {
	                valueType = 3 /* ViewContainerRef */;
	            }
	            else if (tokenReference(match.value) === resolveIdentifier(Identifiers.TemplateRef)) {
	                valueType = 2 /* TemplateRef */;
	            }
	            if (valueType != null) {
	                queryMatchExprs.push(literalArr([literal(match.queryId), literal(valueType)]));
	            }
	        });
	        ast.references.forEach(function (ref) {
	            var /** @type {?} */ valueType;
	            if (!ref.value) {
	                valueType = 1 /* RenderElement */;
	            }
	            else if (tokenReference(ref.value) === resolveIdentifier(Identifiers.TemplateRef)) {
	                valueType = 2 /* TemplateRef */;
	            }
	            if (valueType != null) {
	                _this.refNodeIndices[ref.name] = nodeIndex;
	                queryMatchExprs.push(literalArr([literal(ref.name), literal(valueType)]));
	            }
	        });
	        ast.outputs.forEach(function (outputAst) {
	            hostEvents.push({ context: COMP_VAR, eventAst: outputAst, dirAst: null });
	        });
	        return {
	            flags: flags,
	            usedEvents: Array.from(usedEvents.values()),
	            queryMatchesExpr: queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,
	            hostBindings: hostBindings,
	            hostEvents: hostEvents
	        };
	    };
	    /**
	     * @param {?} providerAst
	     * @param {?} dirAst
	     * @param {?} directiveIndex
	     * @param {?} elementNodeIndex
	     * @param {?} refs
	     * @param {?} queryMatches
	     * @param {?} usedEvents
	     * @param {?} queryIds
	     * @return {?}
	     */
	    ViewBuilder.prototype._visitDirective = function (providerAst, dirAst, directiveIndex, elementNodeIndex, refs, queryMatches, usedEvents, queryIds) {
	        var _this = this;
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        // reserve the space in the nodeDefs array so we can add children
	        this.nodes.push(null);
	        dirAst.directive.queries.forEach(function (query, queryIndex) {
	            var /** @type {?} */ queryId = dirAst.contentQueryStartId + queryIndex;
	            var /** @type {?} */ flags = 33554432 /* TypeContentQuery */ | calcStaticDynamicQueryFlags(queryIds, queryId, query.first);
	            var /** @type {?} */ bindingType = query.first ? 0 /* First */ : 1;
	            _this.nodes.push(function () { return ({
	                sourceSpan: dirAst.sourceSpan,
	                nodeFlags: flags,
	                nodeDef: importExpr(createIdentifier(Identifiers.queryDef)).callFn([
	                    literal(flags), literal(queryId),
	                    new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType))])
	                ]),
	            }); });
	        });
	        // Note: the operation below might also create new nodeDefs,
	        // but we don't want them to be a child of a directive,
	        // as they might be a provider/pipe on their own.
	        // I.e. we only allow queries as children of directives nodes.
	        var /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;
	        var _a = this._visitProviderOrDirective(providerAst, queryMatches), flags = _a.flags, queryMatchExprs = _a.queryMatchExprs, providerExpr = _a.providerExpr, depsExpr = _a.depsExpr;
	        refs.forEach(function (ref) {
	            if (ref.value && tokenReference(ref.value) === tokenReference(providerAst.token)) {
	                _this.refNodeIndices[ref.name] = nodeIndex;
	                queryMatchExprs.push(literalArr([literal(ref.name), literal(4 /* Provider */)]));
	            }
	        });
	        if (dirAst.directive.isComponent) {
	            flags |= 16384 /* Component */;
	        }
	        var /** @type {?} */ inputDefs = dirAst.inputs.map(function (inputAst, inputIndex) {
	            var /** @type {?} */ mapValue = literalArr([literal(inputIndex), literal(inputAst.directiveName)]);
	            // Note: it's important to not quote the key so that we can capture renames by minifiers!
	            return new LiteralMapEntry(inputAst.directiveName, mapValue, false);
	        });
	        var /** @type {?} */ outputDefs = [];
	        var /** @type {?} */ dirMeta = dirAst.directive;
	        Object.keys(dirMeta.outputs).forEach(function (propName) {
	            var /** @type {?} */ eventName = dirMeta.outputs[propName];
	            if (usedEvents.has(eventName)) {
	                // Note: it's important to not quote the key so that we can capture renames by minifiers!
	                outputDefs.push(new LiteralMapEntry(propName, literal(eventName), false));
	            }
	        });
	        var /** @type {?} */ updateDirectiveExpressions = [];
	        if (dirAst.inputs.length || (flags & (131072 /* DoCheck */ | 32768 /* OnInit */)) > 0) {
	            updateDirectiveExpressions =
	                dirAst.inputs.map(function (input, bindingIndex) { return _this._preprocessUpdateExpression({
	                    nodeIndex: nodeIndex,
	                    bindingIndex: bindingIndex,
	                    sourceSpan: input.sourceSpan,
	                    context: COMP_VAR,
	                    value: input.value
	                }); });
	        }
	        var /** @type {?} */ dirContextExpr = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([
	            VIEW_VAR, literal(nodeIndex)
	        ]);
	        var /** @type {?} */ hostBindings = dirAst.hostProperties.map(function (inputAst) { return ({
	            context: dirContextExpr,
	            dirAst: dirAst,
	            inputAst: inputAst,
	        }); });
	        var /** @type {?} */ hostEvents = dirAst.hostEvents.map(function (hostEventAst) { return ({
	            context: dirContextExpr,
	            eventAst: hostEventAst, dirAst: dirAst,
	        }); });
	        // directiveDef(
	        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], childCount: number, ctor:
	        //   any,
	        //   deps: ([DepFlags, any] | any)[], props?: {[name: string]: [number, string]},
	        //   outputs?: {[name: string]: string}, component?: () => ViewDefinition): NodeDef;
	        this.nodes[nodeIndex] = function () { return ({
	            sourceSpan: dirAst.sourceSpan,
	            nodeFlags: 8192 /* TypeDirective */ | flags,
	            nodeDef: importExpr(createIdentifier(Identifiers.directiveDef)).callFn([
	                literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,
	                literal(childCount), providerExpr, depsExpr,
	                inputDefs.length ? new LiteralMapExpr(inputDefs) : NULL_EXPR,
	                outputDefs.length ? new LiteralMapExpr(outputDefs) : NULL_EXPR
	            ]),
	            updateDirectives: updateDirectiveExpressions,
	            directive: dirAst.directive.type,
	        }); };
	        return { hostBindings: hostBindings, hostEvents: hostEvents };
	    };
	    /**
	     * @param {?} providerAst
	     * @param {?} queryMatches
	     * @return {?}
	     */
	    ViewBuilder.prototype._visitProvider = function (providerAst, queryMatches) {
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        // reserve the space in the nodeDefs array so we can add children
	        this.nodes.push(null);
	        var _a = this._visitProviderOrDirective(providerAst, queryMatches), flags = _a.flags, queryMatchExprs = _a.queryMatchExprs, providerExpr = _a.providerExpr, depsExpr = _a.depsExpr;
	        // providerDef(
	        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], token:any,
	        //   value: any, deps: ([DepFlags, any] | any)[]): NodeDef;
	        this.nodes[nodeIndex] = function () { return ({
	            sourceSpan: providerAst.sourceSpan,
	            nodeFlags: flags,
	            nodeDef: importExpr(createIdentifier(Identifiers.providerDef)).callFn([
	                literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,
	                tokenExpr(providerAst.token), providerExpr, depsExpr
	            ])
	        }); };
	    };
	    /**
	     * @param {?} providerAst
	     * @param {?} queryMatches
	     * @return {?}
	     */
	    ViewBuilder.prototype._visitProviderOrDirective = function (providerAst, queryMatches) {
	        var /** @type {?} */ flags = 0;
	        if (!providerAst.eager) {
	            flags |= 2048 /* LazyProvider */;
	        }
	        if (providerAst.providerType === ProviderAstType.PrivateService) {
	            flags |= 4096 /* PrivateProvider */;
	        }
	        providerAst.lifecycleHooks.forEach(function (lifecycleHook) {
	            // for regular providers, we only support ngOnDestroy
	            if (lifecycleHook === _angular_core.ɵLifecycleHooks.OnDestroy ||
	                providerAst.providerType === ProviderAstType.Directive ||
	                providerAst.providerType === ProviderAstType.Component) {
	                flags |= lifecycleHookToNodeFlag(lifecycleHook);
	            }
	        });
	        var /** @type {?} */ queryMatchExprs = [];
	        queryMatches.forEach(function (match) {
	            if (tokenReference(match.value) === tokenReference(providerAst.token)) {
	                queryMatchExprs.push(literalArr([literal(match.queryId), literal(4 /* Provider */)]));
	            }
	        });
	        var _a = providerDef(providerAst), providerExpr = _a.providerExpr, depsExpr = _a.depsExpr, providerType = _a.flags;
	        return { flags: flags | providerType, queryMatchExprs: queryMatchExprs, providerExpr: providerExpr, depsExpr: depsExpr };
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    ViewBuilder.prototype.getLocal = function (name) {
	        if (name == EventHandlerVars.event.name) {
	            return EventHandlerVars.event;
	        }
	        var /** @type {?} */ currViewExpr = VIEW_VAR;
	        for (var /** @type {?} */ currBuilder = this; currBuilder; currBuilder = currBuilder.parent, currViewExpr = currViewExpr.prop('parent')) {
	            // check references
	            var /** @type {?} */ refNodeIndex = currBuilder.refNodeIndices[name];
	            if (refNodeIndex != null) {
	                return importExpr(createIdentifier(Identifiers.nodeValue)).callFn([
	                    currViewExpr, literal(refNodeIndex)
	                ]);
	            }
	            // check variables
	            var /** @type {?} */ varAst = currBuilder.variables.find(function (varAst) { return varAst.name === name; });
	            if (varAst) {
	                var /** @type {?} */ varValue = varAst.value || IMPLICIT_TEMPLATE_VAR;
	                return currViewExpr.prop('context').prop(varValue);
	            }
	        }
	        return null;
	    };
	    /**
	     * @param {?} sourceSpan
	     * @param {?} argCount
	     * @return {?}
	     */
	    ViewBuilder.prototype.createLiteralArrayConverter = function (sourceSpan, argCount) {
	        if (argCount === 0) {
	            var /** @type {?} */ valueExpr_1 = importExpr(createIdentifier(Identifiers.EMPTY_ARRAY));
	            return function () { return valueExpr_1; };
	        }
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        // pureArrayDef(argCount: number): NodeDef;
	        this.nodes.push(function () { return ({
	            sourceSpan: sourceSpan,
	            nodeFlags: 16 /* TypePureArray */,
	            nodeDef: importExpr(createIdentifier(Identifiers.pureArrayDef)).callFn([literal(argCount)])
	        }); });
	        return function (args) { return callCheckStmt(nodeIndex, args); };
	    };
	    /**
	     * @param {?} sourceSpan
	     * @param {?} keys
	     * @return {?}
	     */
	    ViewBuilder.prototype.createLiteralMapConverter = function (sourceSpan, keys) {
	        if (keys.length === 0) {
	            var /** @type {?} */ valueExpr_2 = importExpr(createIdentifier(Identifiers.EMPTY_MAP));
	            return function () { return valueExpr_2; };
	        }
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        // function pureObjectDef(propertyNames: string[]): NodeDef
	        this.nodes.push(function () { return ({
	            sourceSpan: sourceSpan,
	            nodeFlags: 32 /* TypePureObject */,
	            nodeDef: importExpr(createIdentifier(Identifiers.pureObjectDef))
	                .callFn([literalArr(keys.map(function (key) { return literal(key); }))])
	        }); });
	        return function (args) { return callCheckStmt(nodeIndex, args); };
	    };
	    /**
	     * @param {?} expression
	     * @param {?} name
	     * @param {?} argCount
	     * @return {?}
	     */
	    ViewBuilder.prototype.createPipeConverter = function (expression, name, argCount) {
	        var /** @type {?} */ pipe = this.usedPipes.find(function (pipeSummary) { return pipeSummary.name === name; });
	        if (pipe.pure) {
	            var /** @type {?} */ nodeIndex_1 = this.nodes.length;
	            // function purePipeDef(argCount: number): NodeDef;
	            this.nodes.push(function () { return ({
	                sourceSpan: expression.sourceSpan,
	                nodeFlags: 64 /* TypePurePipe */,
	                nodeDef: importExpr(createIdentifier(Identifiers.purePipeDef))
	                    .callFn([literal(argCount)])
	            }); });
	            // find underlying pipe in the component view
	            var /** @type {?} */ compViewExpr = VIEW_VAR;
	            var /** @type {?} */ compBuilder = this;
	            while (compBuilder.parent) {
	                compBuilder = compBuilder.parent;
	                compViewExpr = compViewExpr.prop('parent');
	            }
	            var /** @type {?} */ pipeNodeIndex = compBuilder.purePipeNodeIndices[name];
	            var /** @type {?} */ pipeValueExpr_1 = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([
	                compViewExpr, literal(pipeNodeIndex)
	            ]);
	            return function (args) { return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, callCheckStmt(nodeIndex_1, [pipeValueExpr_1].concat(args))); };
	        }
	        else {
	            var /** @type {?} */ nodeIndex = this._createPipe(expression.sourceSpan, pipe);
	            var /** @type {?} */ nodeValueExpr_1 = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([
	                VIEW_VAR, literal(nodeIndex)
	            ]);
	            return function (args) { return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, nodeValueExpr_1.callMethod('transform', args)); };
	        }
	    };
	    /**
	     * @param {?} sourceSpan
	     * @param {?} pipe
	     * @return {?}
	     */
	    ViewBuilder.prototype._createPipe = function (sourceSpan, pipe) {
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        var /** @type {?} */ flags = 0;
	        pipe.type.lifecycleHooks.forEach(function (lifecycleHook) {
	            // for pipes, we only support ngOnDestroy
	            if (lifecycleHook === _angular_core.ɵLifecycleHooks.OnDestroy) {
	                flags |= lifecycleHookToNodeFlag(lifecycleHook);
	            }
	        });
	        var /** @type {?} */ depExprs = pipe.type.diDeps.map(depDef);
	        // function pipeDef(
	        //   flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef
	        this.nodes.push(function () { return ({
	            sourceSpan: sourceSpan,
	            nodeFlags: 8 /* TypePipe */,
	            nodeDef: importExpr(createIdentifier(Identifiers.pipeDef)).callFn([
	                literal(flags), importExpr(pipe.type), literalArr(depExprs)
	            ])
	        }); });
	        return nodeIndex;
	    };
	    /**
	     * @param {?} expression
	     * @return {?}
	     */
	    ViewBuilder.prototype._preprocessUpdateExpression = function (expression) {
	        var _this = this;
	        return {
	            nodeIndex: expression.nodeIndex,
	            bindingIndex: expression.bindingIndex,
	            sourceSpan: expression.sourceSpan,
	            context: expression.context,
	            value: convertPropertyBindingBuiltins({
	                createLiteralArrayConverter: function (argCount) { return _this.createLiteralArrayConverter(expression.sourceSpan, argCount); },
	                createLiteralMapConverter: function (keys) { return _this.createLiteralMapConverter(expression.sourceSpan, keys); },
	                createPipeConverter: function (name, argCount) { return _this.createPipeConverter(expression, name, argCount); }
	            }, expression.value)
	        };
	    };
	    /**
	     * @return {?}
	     */
	    ViewBuilder.prototype._createNodeExpressions = function () {
	        var /** @type {?} */ self = this;
	        var /** @type {?} */ updateBindingCount = 0;
	        var /** @type {?} */ updateRendererStmts = [];
	        var /** @type {?} */ updateDirectivesStmts = [];
	        var /** @type {?} */ nodeDefExprs = this.nodes.map(function (factory, nodeIndex) {
	            var _a = factory(), nodeDef = _a.nodeDef, nodeFlags = _a.nodeFlags, updateDirectives = _a.updateDirectives, updateRenderer = _a.updateRenderer, sourceSpan = _a.sourceSpan;
	            if (updateRenderer) {
	                updateRendererStmts.push.apply(updateRendererStmts, createUpdateStatements(nodeIndex, sourceSpan, updateRenderer, false));
	            }
	            if (updateDirectives) {
	                updateDirectivesStmts.push.apply(updateDirectivesStmts, createUpdateStatements(nodeIndex, sourceSpan, updateDirectives, (nodeFlags & (131072 /* DoCheck */ | 32768 /* OnInit */)) > 0));
	            }
	            // We use a comma expression to call the log function before
	            // the nodeDef function, but still use the result of the nodeDef function
	            // as the value.
	            // Note: We only add the logger to elements / text nodes,
	            // so we don't generate too much code.
	            var /** @type {?} */ logWithNodeDef = nodeFlags & 3 /* CatRenderNode */ ?
	                new CommaExpr([LOG_VAR.callFn([]).callFn([]), nodeDef]) :
	                nodeDef;
	            return applySourceSpanToExpressionIfNeeded(logWithNodeDef, sourceSpan);
	        });
	        return { updateRendererStmts: updateRendererStmts, updateDirectivesStmts: updateDirectivesStmts, nodeDefExprs: nodeDefExprs };
	        /**
	         * @param {?} nodeIndex
	         * @param {?} sourceSpan
	         * @param {?} expressions
	         * @param {?} allowEmptyExprs
	         * @return {?}
	         */
	        function createUpdateStatements(nodeIndex, sourceSpan, expressions, allowEmptyExprs) {
	            var /** @type {?} */ updateStmts = [];
	            var /** @type {?} */ exprs = expressions.map(function (_a) {
	                var sourceSpan = _a.sourceSpan, context = _a.context, value = _a.value;
	                var /** @type {?} */ bindingId = "" + updateBindingCount++;
	                var /** @type {?} */ nameResolver = context === COMP_VAR ? self : null;
	                var _b = convertPropertyBinding(nameResolver, context, value, bindingId), stmts = _b.stmts, currValExpr = _b.currValExpr;
	                updateStmts.push.apply(updateStmts, stmts.map(function (stmt) { return applySourceSpanToStatementIfNeeded(stmt, sourceSpan); }));
	                return applySourceSpanToExpressionIfNeeded(currValExpr, sourceSpan);
	            });
	            if (expressions.length || allowEmptyExprs) {
	                updateStmts.push(applySourceSpanToStatementIfNeeded(callCheckStmt(nodeIndex, exprs).toStmt(), sourceSpan));
	            }
	            return updateStmts;
	        }
	    };
	    /**
	     * @param {?} nodeIndex
	     * @param {?} handlers
	     * @return {?}
	     */
	    ViewBuilder.prototype._createElementHandleEventFn = function (nodeIndex, handlers) {
	        var _this = this;
	        var /** @type {?} */ handleEventStmts = [];
	        var /** @type {?} */ handleEventBindingCount = 0;
	        handlers.forEach(function (_a) {
	            var context = _a.context, eventAst = _a.eventAst, dirAst = _a.dirAst;
	            var /** @type {?} */ bindingId = "" + handleEventBindingCount++;
	            var /** @type {?} */ nameResolver = context === COMP_VAR ? _this : null;
	            var _b = convertActionBinding(nameResolver, context, eventAst.handler, bindingId), stmts = _b.stmts, allowDefault = _b.allowDefault;
	            var /** @type {?} */ trueStmts = stmts;
	            if (allowDefault) {
	                trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());
	            }
	            var _c = elementEventNameAndTarget(eventAst, dirAst), eventTarget = _c.target, eventName = _c.name;
	            var /** @type {?} */ fullEventName = _angular_core.ɵelementEventFullName(eventTarget, eventName);
	            handleEventStmts.push(applySourceSpanToStatementIfNeeded(new IfStmt(literal(fullEventName).identical(EVENT_NAME_VAR), trueStmts), eventAst.sourceSpan));
	        });
	        var /** @type {?} */ handleEventFn;
	        if (handleEventStmts.length > 0) {
	            var /** @type {?} */ preStmts = [ALLOW_DEFAULT_VAR.set(literal(true)).toDeclStmt(BOOL_TYPE)];
	            if (!this.component.isHost && findReadVarNames(handleEventStmts).has(COMP_VAR.name)) {
	                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));
	            }
	            handleEventFn = fn([
	                new FnParam(VIEW_VAR.name, INFERRED_TYPE),
	                new FnParam(EVENT_NAME_VAR.name, INFERRED_TYPE),
	                new FnParam(EventHandlerVars.event.name, INFERRED_TYPE)
	            ], preStmts.concat(handleEventStmts, [new ReturnStatement(ALLOW_DEFAULT_VAR)]), INFERRED_TYPE);
	        }
	        else {
	            handleEventFn = NULL_EXPR;
	        }
	        return handleEventFn;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitDirective = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitDirectiveProperty = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitReference = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitVariable = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitEvent = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitElementProperty = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitAttr = function (ast, context) { };
	    return ViewBuilder;
	}());
	/**
	 * @param {?} providerAst
	 * @return {?}
	 */
	function providerDef(providerAst) {
	    return providerAst.multiProvider ?
	        multiProviderDef(providerAst.providers) :
	        singleProviderDef(providerAst.providerType, providerAst.providers[0]);
	}
	/**
	 * @param {?} providers
	 * @return {?}
	 */
	function multiProviderDef(providers) {
	    var /** @type {?} */ allDepDefs = [];
	    var /** @type {?} */ allParams = [];
	    var /** @type {?} */ exprs = providers.map(function (provider, providerIndex) {
	        var /** @type {?} */ expr;
	        if (provider.useClass) {
	            var /** @type {?} */ depExprs = convertDeps(providerIndex, provider.deps || provider.useClass.diDeps);
	            expr = importExpr(provider.useClass).instantiate(depExprs);
	        }
	        else if (provider.useFactory) {
	            var /** @type {?} */ depExprs = convertDeps(providerIndex, provider.deps || provider.useFactory.diDeps);
	            expr = importExpr(provider.useFactory).callFn(depExprs);
	        }
	        else if (provider.useExisting) {
	            var /** @type {?} */ depExprs = convertDeps(providerIndex, [{ token: provider.useExisting }]);
	            expr = depExprs[0];
	        }
	        else {
	            expr = convertValueToOutputAst(provider.useValue);
	        }
	        return expr;
	    });
	    var /** @type {?} */ providerExpr = fn(allParams, [new ReturnStatement(literalArr(exprs))], INFERRED_TYPE);
	    return { providerExpr: providerExpr, flags: 512 /* TypeFactoryProvider */, depsExpr: literalArr(allDepDefs) };
	    /**
	     * @param {?} providerIndex
	     * @param {?} deps
	     * @return {?}
	     */
	    function convertDeps(providerIndex, deps) {
	        return deps.map(function (dep, depIndex) {
	            var /** @type {?} */ paramName = "p" + providerIndex + "_" + depIndex;
	            allParams.push(new FnParam(paramName, DYNAMIC_TYPE));
	            allDepDefs.push(depDef(dep));
	            return variable(paramName);
	        });
	    }
	}
	/**
	 * @param {?} providerType
	 * @param {?} providerMeta
	 * @return {?}
	 */
	function singleProviderDef(providerType, providerMeta) {
	    var /** @type {?} */ providerExpr;
	    var /** @type {?} */ flags;
	    var /** @type {?} */ deps;
	    if (providerType === ProviderAstType.Directive || providerType === ProviderAstType.Component) {
	        providerExpr = importExpr(providerMeta.useClass);
	        flags = 8192 /* TypeDirective */;
	        deps = providerMeta.deps || providerMeta.useClass.diDeps;
	    }
	    else {
	        if (providerMeta.useClass) {
	            providerExpr = importExpr(providerMeta.useClass);
	            flags = 256 /* TypeClassProvider */;
	            deps = providerMeta.deps || providerMeta.useClass.diDeps;
	        }
	        else if (providerMeta.useFactory) {
	            providerExpr = importExpr(providerMeta.useFactory);
	            flags = 512 /* TypeFactoryProvider */;
	            deps = providerMeta.deps || providerMeta.useFactory.diDeps;
	        }
	        else if (providerMeta.useExisting) {
	            providerExpr = NULL_EXPR;
	            flags = 1024 /* TypeUseExistingProvider */;
	            deps = [{ token: providerMeta.useExisting }];
	        }
	        else {
	            providerExpr = convertValueToOutputAst(providerMeta.useValue);
	            flags = 128 /* TypeValueProvider */;
	            deps = [];
	        }
	    }
	    var /** @type {?} */ depsExpr = literalArr(deps.map(function (dep) { return depDef(dep); }));
	    return { providerExpr: providerExpr, flags: flags, depsExpr: depsExpr };
	}
	/**
	 * @param {?} tokenMeta
	 * @return {?}
	 */
	function tokenExpr(tokenMeta) {
	    return tokenMeta.identifier ? importExpr(tokenMeta.identifier) : literal(tokenMeta.value);
	}
	/**
	 * @param {?} dep
	 * @return {?}
	 */
	function depDef(dep) {
	    // Note: the following fields have already been normalized out by provider_analyzer:
	    // - isAttribute, isSelf, isHost
	    var /** @type {?} */ expr = dep.isValue ? convertValueToOutputAst(dep.value) : tokenExpr(dep.token);
	    var /** @type {?} */ flags = 0;
	    if (dep.isSkipSelf) {
	        flags |= 1 /* SkipSelf */;
	    }
	    if (dep.isOptional) {
	        flags |= 2 /* Optional */;
	    }
	    if (dep.isValue) {
	        flags |= 8 /* Value */;
	    }
	    return flags === 0 /* None */ ? expr : literalArr([literal(flags), expr]);
	}
	/**
	 * @param {?} astNodes
	 * @return {?}
	 */
	function needsAdditionalRootNode(astNodes) {
	    var /** @type {?} */ lastAstNode = astNodes[astNodes.length - 1];
	    if (lastAstNode instanceof EmbeddedTemplateAst) {
	        return lastAstNode.hasViewContainer;
	    }
	    if (lastAstNode instanceof ElementAst) {
	        if (lastAstNode.name === NG_CONTAINER_TAG && lastAstNode.children.length) {
	            return needsAdditionalRootNode(lastAstNode.children);
	        }
	        return lastAstNode.hasViewContainer;
	    }
	    return lastAstNode instanceof NgContentAst;
	}
	/**
	 * @param {?} lifecycleHook
	 * @return {?}
	 */
	function lifecycleHookToNodeFlag(lifecycleHook) {
	    var /** @type {?} */ nodeFlag = 0;
	    switch (lifecycleHook) {
	        case _angular_core.ɵLifecycleHooks.AfterContentChecked:
	            nodeFlag = 1048576 /* AfterContentChecked */;
	            break;
	        case _angular_core.ɵLifecycleHooks.AfterContentInit:
	            nodeFlag = 524288 /* AfterContentInit */;
	            break;
	        case _angular_core.ɵLifecycleHooks.AfterViewChecked:
	            nodeFlag = 4194304 /* AfterViewChecked */;
	            break;
	        case _angular_core.ɵLifecycleHooks.AfterViewInit:
	            nodeFlag = 2097152 /* AfterViewInit */;
	            break;
	        case _angular_core.ɵLifecycleHooks.DoCheck:
	            nodeFlag = 131072 /* DoCheck */;
	            break;
	        case _angular_core.ɵLifecycleHooks.OnChanges:
	            nodeFlag = 262144 /* OnChanges */;
	            break;
	        case _angular_core.ɵLifecycleHooks.OnDestroy:
	            nodeFlag = 65536 /* OnDestroy */;
	            break;
	        case _angular_core.ɵLifecycleHooks.OnInit:
	            nodeFlag = 32768 /* OnInit */;
	            break;
	    }
	    return nodeFlag;
	}
	/**
	 * @param {?} inputAst
	 * @param {?} dirAst
	 * @return {?}
	 */
	function elementBindingDef(inputAst, dirAst) {
	    switch (inputAst.type) {
	        case PropertyBindingType.Attribute:
	            return literalArr([
	                literal(1 /* TypeElementAttribute */), literal(inputAst.name),
	                literal(inputAst.securityContext)
	            ]);
	        case PropertyBindingType.Property:
	            return literalArr([
	                literal(8 /* TypeProperty */), literal(inputAst.name),
	                literal(inputAst.securityContext)
	            ]);
	        case PropertyBindingType.Animation:
	            var /** @type {?} */ bindingType = 8 /* TypeProperty */ |
	                (dirAst && dirAst.directive.isComponent ? 32 /* SyntheticHostProperty */ :
	                    16 /* SyntheticProperty */);
	            return literalArr([
	                literal(bindingType), literal('@' + inputAst.name), literal(inputAst.securityContext)
	            ]);
	        case PropertyBindingType.Class:
	            return literalArr([literal(2 /* TypeElementClass */), literal(inputAst.name), NULL_EXPR]);
	        case PropertyBindingType.Style:
	            return literalArr([
	                literal(4 /* TypeElementStyle */), literal(inputAst.name), literal(inputAst.unit)
	            ]);
	    }
	}
	/**
	 * @param {?} elementAst
	 * @return {?}
	 */
	function fixedAttrsDef(elementAst) {
	    var /** @type {?} */ mapResult = Object.create(null);
	    elementAst.attrs.forEach(function (attrAst) { mapResult[attrAst.name] = attrAst.value; });
	    elementAst.directives.forEach(function (dirAst) {
	        Object.keys(dirAst.directive.hostAttributes).forEach(function (name) {
	            var /** @type {?} */ value = dirAst.directive.hostAttributes[name];
	            var /** @type {?} */ prevValue = mapResult[name];
	            mapResult[name] = prevValue != null ? mergeAttributeValue(name, prevValue, value) : value;
	        });
	    });
	    var /** @type {?} */ mapEntries = [];
	    // Note: We need to sort to get a defined output order
	    // for tests and for caching generated artifacts...
	    return literalArr(Object.keys(mapResult).sort().map(function (attrName) { return literalArr([literal(attrName), literal(mapResult[attrName])]); }));
	}
	/**
	 * @param {?} attrName
	 * @param {?} attrValue1
	 * @param {?} attrValue2
	 * @return {?}
	 */
	function mergeAttributeValue(attrName, attrValue1, attrValue2) {
	    if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
	        return attrValue1 + " " + attrValue2;
	    }
	    else {
	        return attrValue2;
	    }
	}
	/**
	 * @param {?} nodeIndex
	 * @param {?} exprs
	 * @return {?}
	 */
	function callCheckStmt(nodeIndex, exprs) {
	    if (exprs.length > 10) {
	        return CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(1 /* Dynamic */), literalArr(exprs)]);
	    }
	    else {
	        return CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(0 /* Inline */)].concat(exprs));
	    }
	}
	/**
	 * @param {?} nodeIndex
	 * @param {?} bindingIdx
	 * @param {?} expr
	 * @return {?}
	 */
	function callUnwrapValue(nodeIndex, bindingIdx, expr) {
	    return importExpr(createIdentifier(Identifiers.unwrapValue)).callFn([
	        VIEW_VAR, literal(nodeIndex), literal(bindingIdx), expr
	    ]);
	}
	/**
	 * @param {?} nodes
	 * @param {?=} result
	 * @return {?}
	 */
	function findStaticQueryIds(nodes, result) {
	    if (result === void 0) { result = new Map(); }
	    nodes.forEach(function (node) {
	        var /** @type {?} */ staticQueryIds = new Set();
	        var /** @type {?} */ dynamicQueryIds = new Set();
	        var /** @type {?} */ queryMatches;
	        if (node instanceof ElementAst) {
	            findStaticQueryIds(node.children, result);
	            node.children.forEach(function (child) {
	                var /** @type {?} */ childData = result.get(child);
	                childData.staticQueryIds.forEach(function (queryId) { return staticQueryIds.add(queryId); });
	                childData.dynamicQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });
	            });
	            queryMatches = node.queryMatches;
	        }
	        else if (node instanceof EmbeddedTemplateAst) {
	            findStaticQueryIds(node.children, result);
	            node.children.forEach(function (child) {
	                var /** @type {?} */ childData = result.get(child);
	                childData.staticQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });
	                childData.dynamicQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });
	            });
	            queryMatches = node.queryMatches;
	        }
	        if (queryMatches) {
	            queryMatches.forEach(function (match) { return staticQueryIds.add(match.queryId); });
	        }
	        dynamicQueryIds.forEach(function (queryId) { return staticQueryIds.delete(queryId); });
	        result.set(node, { staticQueryIds: staticQueryIds, dynamicQueryIds: dynamicQueryIds });
	    });
	    return result;
	}
	/**
	 * @param {?} nodeStaticQueryIds
	 * @return {?}
	 */
	function staticViewQueryIds(nodeStaticQueryIds) {
	    var /** @type {?} */ staticQueryIds = new Set();
	    var /** @type {?} */ dynamicQueryIds = new Set();
	    Array.from(nodeStaticQueryIds.values()).forEach(function (entry) {
	        entry.staticQueryIds.forEach(function (queryId) { return staticQueryIds.add(queryId); });
	        entry.dynamicQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });
	    });
	    dynamicQueryIds.forEach(function (queryId) { return staticQueryIds.delete(queryId); });
	    return { staticQueryIds: staticQueryIds, dynamicQueryIds: dynamicQueryIds };
	}
	/**
	 * @param {?} directives
	 * @return {?}
	 */
	function createComponentFactoryResolver(directives) {
	    var /** @type {?} */ componentDirMeta = directives.find(function (dirAst) { return dirAst.directive.isComponent; });
	    if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {
	        var /** @type {?} */ entryComponentFactories = componentDirMeta.directive.entryComponents.map(function (entryComponent) { return importExpr({ reference: entryComponent.componentFactory }); });
	        var /** @type {?} */ token = createIdentifierToken(Identifiers.ComponentFactoryResolver);
	        var /** @type {?} */ classMeta = {
	            diDeps: [
	                { isValue: true, value: literalArr(entryComponentFactories) },
	                { token: token, isSkipSelf: true, isOptional: true },
	                { token: createIdentifierToken(Identifiers.NgModuleRef) },
	            ],
	            lifecycleHooks: [],
	            reference: resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)
	        };
	        return new ProviderAst(token, false, true, [{ token: token, multi: false, useClass: classMeta }], ProviderAstType.PrivateService, [], componentDirMeta.sourceSpan);
	    }
	    return null;
	}
	/**
	 * @param {?} eventAst
	 * @param {?} dirAst
	 * @return {?}
	 */
	function elementEventNameAndTarget(eventAst, dirAst) {
	    if (eventAst.isAnimation) {
	        return {
	            name: "@" + eventAst.name + "." + eventAst.phase,
	            target: dirAst && dirAst.directive.isComponent ? 'component' : null
	        };
	    }
	    else {
	        return eventAst;
	    }
	}
	/**
	 * @param {?} queryIds
	 * @param {?} queryId
	 * @param {?} isFirst
	 * @return {?}
	 */
	function calcStaticDynamicQueryFlags(queryIds, queryId, isFirst) {
	    var /** @type {?} */ flags = 0;
	    // Note: We only make queries static that query for a single item.
	    // This is because of backwards compatibility with the old view compiler...
	    if (isFirst && (queryIds.staticQueryIds.has(queryId) || !queryIds.dynamicQueryIds.has(queryId))) {
	        flags |= 134217728 /* StaticQuery */;
	    }
	    else {
	        flags |= 268435456 /* DynamicQuery */;
	    }
	    return flags;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var GeneratedFile = (function () {
	    /**
	     * @param {?} srcFileUrl
	     * @param {?} genFileUrl
	     * @param {?} source
	     */
	    function GeneratedFile(srcFileUrl, genFileUrl, source) {
	        this.srcFileUrl = srcFileUrl;
	        this.genFileUrl = genFileUrl;
	        this.source = source;
	    }
	    return GeneratedFile;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} summaryResolver
	 * @param {?} symbolResolver
	 * @param {?} symbols
	 * @param {?} types
	 * @return {?}
	 */
	function serializeSummaries(summaryResolver, symbolResolver, symbols, types) {
	    var /** @type {?} */ serializer = new Serializer$1(symbolResolver, summaryResolver);
	    // for symbols, we use everything except for the class metadata itself
	    // (we keep the statics though), as the class metadata is contained in the
	    // CompileTypeSummary.
	    symbols.forEach(function (resolvedSymbol) { return serializer.addOrMergeSummary({ symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata }); });
	    // Add summaries that are referenced by the given symbols (transitively)
	    // Note: the serializer.symbols array might be growing while
	    // we execute the loop!
	    for (var /** @type {?} */ processedIndex = 0; processedIndex < serializer.symbols.length; processedIndex++) {
	        var /** @type {?} */ symbol = serializer.symbols[processedIndex];
	        if (summaryResolver.isLibraryFile(symbol.filePath)) {
	            var /** @type {?} */ summary = summaryResolver.resolveSummary(symbol);
	            if (!summary) {
	                // some symbols might originate from a plain typescript library
	                // that just exported .d.ts and .metadata.json files, i.e. where no summary
	                // files were created.
	                var /** @type {?} */ resolvedSymbol = symbolResolver.resolveSymbol(symbol);
	                if (resolvedSymbol) {
	                    summary = { symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata };
	                }
	            }
	            if (summary) {
	                serializer.addOrMergeSummary(summary);
	            }
	        }
	    }
	    // Add type summaries.
	    // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,
	    // as the type summaries already contain the transitive data that they require
	    // (in a minimal way).
	    types.forEach(function (typeSummary) {
	        serializer.addOrMergeSummary({ symbol: typeSummary.type.reference, metadata: { __symbolic: 'class' }, type: typeSummary });
	        if (typeSummary.summaryKind === CompileSummaryKind.NgModule) {
	            var /** @type {?} */ ngModuleSummary = (typeSummary);
	            ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(function (id) {
	                var /** @type {?} */ symbol = id.reference;
	                if (summaryResolver.isLibraryFile(symbol.filePath)) {
	                    var /** @type {?} */ summary = summaryResolver.resolveSummary(symbol);
	                    if (summary) {
	                        serializer.addOrMergeSummary(summary);
	                    }
	                }
	            });
	        }
	    });
	    return serializer.serialize();
	}
	/**
	 * @param {?} symbolCache
	 * @param {?} json
	 * @return {?}
	 */
	function deserializeSummaries(symbolCache, json) {
	    var /** @type {?} */ deserializer = new Deserializer(symbolCache);
	    return deserializer.deserialize(json);
	}
	var Serializer$1 = (function (_super) {
	    __extends(Serializer$1, _super);
	    /**
	     * @param {?} symbolResolver
	     * @param {?} summaryResolver
	     */
	    function Serializer$1(symbolResolver, summaryResolver) {
	        var _this = _super.call(this) || this;
	        _this.symbolResolver = symbolResolver;
	        _this.summaryResolver = summaryResolver;
	        // Note: This only contains symbols without members.
	        _this.symbols = [];
	        _this.indexBySymbol = new Map();
	        _this.processedSummaryBySymbol = new Map();
	        _this.processedSummaries = [];
	        return _this;
	    }
	    /**
	     * @param {?} summary
	     * @return {?}
	     */
	    Serializer$1.prototype.addOrMergeSummary = function (summary) {
	        var /** @type {?} */ symbolMeta = summary.metadata;
	        if (symbolMeta && symbolMeta.__symbolic === 'class') {
	            // For classes, we only keep their statics and arity, but not the metadata
	            // of the class itself as that has been captured already via other summaries
	            // (e.g. DirectiveSummary, ...).
	            symbolMeta = { __symbolic: 'class', statics: symbolMeta.statics, arity: symbolMeta.arity };
	        }
	        var /** @type {?} */ processedSummary = this.processedSummaryBySymbol.get(summary.symbol);
	        if (!processedSummary) {
	            processedSummary = this.processValue({ symbol: summary.symbol });
	            this.processedSummaries.push(processedSummary);
	            this.processedSummaryBySymbol.set(summary.symbol, processedSummary);
	        }
	        // Note: == on purpose to compare with undefined!
	        if (processedSummary.metadata == null && symbolMeta != null) {
	            processedSummary.metadata = this.processValue(symbolMeta);
	        }
	        // Note: == on purpose to compare with undefined!
	        if (processedSummary.type == null && summary.type != null) {
	            processedSummary.type = this.processValue(summary.type);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    Serializer$1.prototype.serialize = function () {
	        var _this = this;
	        var /** @type {?} */ exportAs = [];
	        var /** @type {?} */ json = JSON.stringify({
	            summaries: this.processedSummaries,
	            symbols: this.symbols.map(function (symbol, index) {
	                symbol.assertNoMembers();
	                var /** @type {?} */ importAs;
	                if (_this.summaryResolver.isLibraryFile(symbol.filePath)) {
	                    importAs = symbol.name + "_" + index;
	                    exportAs.push({ symbol: symbol, exportAs: importAs });
	                }
	                return {
	                    __symbol: index,
	                    name: symbol.name,
	                    // We convert the source filenames tinto output filenames,
	                    // as the generated summary file will be used when teh current
	                    // compilation unit is used as a library
	                    filePath: _this.summaryResolver.getLibraryFileName(symbol.filePath),
	                    importAs: importAs
	                };
	            })
	        });
	        return { json: json, exportAs: exportAs };
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    Serializer$1.prototype.processValue = function (value) { return visitValue(value, this, null); };
	    /**
	     * @param {?} value
	     * @param {?} context
	     * @return {?}
	     */
	    Serializer$1.prototype.visitOther = function (value, context) {
	        if (value instanceof StaticSymbol) {
	            var /** @type {?} */ baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);
	            var /** @type {?} */ index = this.indexBySymbol.get(baseSymbol);
	            // Note: == on purpose to compare with undefined!
	            if (index == null) {
	                index = this.indexBySymbol.size;
	                this.indexBySymbol.set(baseSymbol, index);
	                this.symbols.push(baseSymbol);
	            }
	            return { __symbol: index, members: value.members };
	        }
	    };
	    return Serializer$1;
	}(ValueTransformer));
	var Deserializer = (function (_super) {
	    __extends(Deserializer, _super);
	    /**
	     * @param {?} symbolCache
	     */
	    function Deserializer(symbolCache) {
	        var _this = _super.call(this) || this;
	        _this.symbolCache = symbolCache;
	        return _this;
	    }
	    /**
	     * @param {?} json
	     * @return {?}
	     */
	    Deserializer.prototype.deserialize = function (json) {
	        var _this = this;
	        var /** @type {?} */ data = JSON.parse(json);
	        var /** @type {?} */ importAs = [];
	        this.symbols = [];
	        data.symbols.forEach(function (serializedSymbol) {
	            var /** @type {?} */ symbol = _this.symbolCache.get(serializedSymbol.filePath, serializedSymbol.name);
	            _this.symbols.push(symbol);
	            if (serializedSymbol.importAs) {
	                importAs.push({ symbol: symbol, importAs: serializedSymbol.importAs });
	            }
	        });
	        var /** @type {?} */ summaries = visitValue(data.summaries, this, null);
	        return { summaries: summaries, importAs: importAs };
	    };
	    /**
	     * @param {?} map
	     * @param {?} context
	     * @return {?}
	     */
	    Deserializer.prototype.visitStringMap = function (map, context) {
	        if ('__symbol' in map) {
	            var /** @type {?} */ baseSymbol = this.symbols[map['__symbol']];
	            var /** @type {?} */ members = map['members'];
	            return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) :
	                baseSymbol;
	        }
	        else {
	            return _super.prototype.visitStringMap.call(this, map, context);
	        }
	    };
	    return Deserializer;
	}(ValueTransformer));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var AotCompiler = (function () {
	    /**
	     * @param {?} _config
	     * @param {?} _host
	     * @param {?} _metadataResolver
	     * @param {?} _templateParser
	     * @param {?} _styleCompiler
	     * @param {?} _viewCompiler
	     * @param {?} _ngModuleCompiler
	     * @param {?} _outputEmitter
	     * @param {?} _summaryResolver
	     * @param {?} _localeId
	     * @param {?} _translationFormat
	     * @param {?} _genFilePreamble
	     * @param {?} _symbolResolver
	     */
	    function AotCompiler(_config, _host, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _outputEmitter, _summaryResolver, _localeId, _translationFormat, _genFilePreamble, _symbolResolver) {
	        this._config = _config;
	        this._host = _host;
	        this._metadataResolver = _metadataResolver;
	        this._templateParser = _templateParser;
	        this._styleCompiler = _styleCompiler;
	        this._viewCompiler = _viewCompiler;
	        this._ngModuleCompiler = _ngModuleCompiler;
	        this._outputEmitter = _outputEmitter;
	        this._summaryResolver = _summaryResolver;
	        this._localeId = _localeId;
	        this._translationFormat = _translationFormat;
	        this._genFilePreamble = _genFilePreamble;
	        this._symbolResolver = _symbolResolver;
	    }
	    /**
	     * @return {?}
	     */
	    AotCompiler.prototype.clearCache = function () { this._metadataResolver.clearCache(); };
	    /**
	     * @param {?} rootFiles
	     * @return {?}
	     */
	    AotCompiler.prototype.compileAll = function (rootFiles) {
	        var _this = this;
	        var /** @type {?} */ programSymbols = extractProgramSymbols(this._symbolResolver, rootFiles, this._host);
	        var _a = analyzeAndValidateNgModules(programSymbols, this._host, this._metadataResolver), ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective, files = _a.files, ngModules = _a.ngModules;
	        return Promise
	            .all(ngModules.map(function (ngModule) { return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false); }))
	            .then(function () {
	            var /** @type {?} */ sourceModules = files.map(function (file) { return _this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables); });
	            return flatten(sourceModules);
	        });
	    };
	    /**
	     * @param {?} srcFileUrl
	     * @param {?} ngModuleByPipeOrDirective
	     * @param {?} directives
	     * @param {?} pipes
	     * @param {?} ngModules
	     * @param {?} injectables
	     * @return {?}
	     */
	    AotCompiler.prototype._compileSrcFile = function (srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {
	        var _this = this;
	        var /** @type {?} */ fileSuffix = splitTypescriptSuffix(srcFileUrl)[1];
	        var /** @type {?} */ statements = [];
	        var /** @type {?} */ exportedVars = [];
	        var /** @type {?} */ generatedFiles = [];
	        generatedFiles.push(this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables, statements, exportedVars));
	        // compile all ng modules
	        exportedVars.push.apply(exportedVars, ngModules.map(function (ngModuleType) { return _this._compileModule(ngModuleType, statements); }));
	        // compile components
	        directives.forEach(function (dirType) {
	            var /** @type {?} */ compMeta = _this._metadataResolver.getDirectiveMetadata(/** @type {?} */ (dirType));
	            if (!compMeta.isComponent) {
	                return Promise.resolve(null);
	            }
	            var /** @type {?} */ ngModule = ngModuleByPipeOrDirective.get(dirType);
	            if (!ngModule) {
	                throw new Error("Internal Error: cannot determine the module for component " + identifierName(compMeta.type) + "!");
	            }
	            _assertComponent(compMeta);
	            // compile styles
	            var /** @type {?} */ stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
	            stylesCompileResults.externalStylesheets.forEach(function (compiledStyleSheet) {
	                generatedFiles.push(_this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));
	            });
	            // compile components
	            var /** @type {?} */ compViewVars = _this._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements);
	            exportedVars.push(_this._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), compViewVars.viewClassVar, compViewVars.compRenderTypeVar);
	        });
	        if (statements.length > 0) {
	            var /** @type {?} */ srcModule = this._codegenSourceModule(srcFileUrl, ngfactoryFilePath(srcFileUrl), statements, exportedVars);
	            generatedFiles.unshift(srcModule);
	        }
	        return generatedFiles;
	    };
	    /**
	     * @param {?} srcFileUrl
	     * @param {?} directives
	     * @param {?} pipes
	     * @param {?} ngModules
	     * @param {?} injectables
	     * @param {?} targetStatements
	     * @param {?} targetExportedVars
	     * @return {?}
	     */
	    AotCompiler.prototype._createSummary = function (srcFileUrl, directives, pipes, ngModules, injectables, targetStatements, targetExportedVars) {
	        var _this = this;
	        var /** @type {?} */ symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileUrl)
	            .map(function (symbol) { return _this._symbolResolver.resolveSymbol(symbol); });
	        var /** @type {?} */ typeSummaries = ngModules.map(function (ref) { return _this._metadataResolver.getNgModuleSummary(ref); }).concat(directives.map(function (ref) { return _this._metadataResolver.getDirectiveSummary(ref); }), pipes.map(function (ref) { return _this._metadataResolver.getPipeSummary(ref); }), injectables.map(function (ref) { return _this._metadataResolver.getInjectableSummary(ref); }));
	        var _a = serializeSummaries(this._summaryResolver, this._symbolResolver, symbolSummaries, typeSummaries), json = _a.json, exportAs = _a.exportAs;
	        exportAs.forEach(function (entry) {
	            targetStatements.push(variable(entry.exportAs).set(importExpr({ reference: entry.symbol })).toDeclStmt());
	            targetExportedVars.push(entry.exportAs);
	        });
	        return new GeneratedFile(srcFileUrl, summaryFileName(srcFileUrl), json);
	    };
	    /**
	     * @param {?} ngModuleType
	     * @param {?} targetStatements
	     * @return {?}
	     */
	    AotCompiler.prototype._compileModule = function (ngModuleType, targetStatements) {
	        var /** @type {?} */ ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
	        var /** @type {?} */ providers = [];
	        if (this._localeId) {
	            providers.push({
	                token: createIdentifierToken(Identifiers.LOCALE_ID),
	                useValue: this._localeId,
	            });
	        }
	        if (this._translationFormat) {
	            providers.push({
	                token: createIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
	                useValue: this._translationFormat
	            });
	        }
	        var /** @type {?} */ appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);
	        targetStatements.push.apply(targetStatements, appCompileResult.statements);
	        return appCompileResult.ngModuleFactoryVar;
	    };
	    /**
	     * @param {?} compMeta
	     * @param {?} ngModule
	     * @param {?} fileSuffix
	     * @param {?} targetStatements
	     * @return {?}
	     */
	    AotCompiler.prototype._compileComponentFactory = function (compMeta, ngModule, fileSuffix, targetStatements) {
	        var /** @type {?} */ hostType = this._metadataResolver.getHostComponentType(compMeta.type.reference);
	        var /** @type {?} */ hostMeta = createHostComponentMeta(hostType, compMeta, this._metadataResolver.getHostComponentViewClass(hostType));
	        var /** @type {?} */ hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [compMeta.type], null, fileSuffix, targetStatements)
	            .viewClassVar;
	        var /** @type {?} */ compFactoryVar = componentFactoryName(compMeta.type.reference);
	        var /** @type {?} */ inputsExprs = [];
	        for (var /** @type {?} */ propName in compMeta.inputs) {
	            var /** @type {?} */ templateName = compMeta.inputs[propName];
	            // Don't quote so that the key gets minified...
	            inputsExprs.push(new LiteralMapEntry(propName, literal(templateName), false));
	        }
	        var /** @type {?} */ outputsExprs = [];
	        for (var /** @type {?} */ propName in compMeta.outputs) {
	            var /** @type {?} */ templateName = compMeta.outputs[propName];
	            // Don't quote so that the key gets minified...
	            outputsExprs.push(new LiteralMapEntry(propName, literal(templateName), false));
	        }
	        targetStatements.push(variable(compFactoryVar)
	            .set(importExpr(createIdentifier(Identifiers.createComponentFactory)).callFn([
	            literal(compMeta.selector), importExpr(compMeta.type),
	            variable(hostViewFactoryVar), new LiteralMapExpr(inputsExprs),
	            new LiteralMapExpr(outputsExprs),
	            literalArr(compMeta.template.ngContentSelectors.map(function (selector) { return literal(selector); }))
	        ]))
	            .toDeclStmt(importType(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const]), [StmtModifier.Final]));
	        return compFactoryVar;
	    };
	    /**
	     * @param {?} compMeta
	     * @param {?} ngModule
	     * @param {?} directiveIdentifiers
	     * @param {?} componentStyles
	     * @param {?} fileSuffix
	     * @param {?} targetStatements
	     * @return {?}
	     */
	    AotCompiler.prototype._compileComponent = function (compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) {
	        var _this = this;
	        var /** @type {?} */ directives = directiveIdentifiers.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });
	        var /** @type {?} */ pipes = ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });
	        var _a = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, compMeta.template)), parsedTemplate = _a.template, usedPipes = _a.pipes;
	        var /** @type {?} */ stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);
	        var /** @type {?} */ viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, usedPipes);
	        if (componentStyles) {
	            targetStatements.push.apply(targetStatements, _resolveStyleStatements(this._symbolResolver, componentStyles, fileSuffix));
	        }
	        targetStatements.push.apply(targetStatements, viewResult.statements);
	        return { viewClassVar: viewResult.viewClassVar, compRenderTypeVar: viewResult.rendererTypeVar };
	    };
	    /**
	     * @param {?} fileUrl
	     * @param {?} stylesCompileResult
	     * @param {?} fileSuffix
	     * @return {?}
	     */
	    AotCompiler.prototype._codgenStyles = function (fileUrl, stylesCompileResult, fileSuffix) {
	        _resolveStyleStatements(this._symbolResolver, stylesCompileResult, fileSuffix);
	        return this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
	    };
	    /**
	     * @param {?} srcFileUrl
	     * @param {?} genFileUrl
	     * @param {?} statements
	     * @param {?} exportedVars
	     * @return {?}
	     */
	    AotCompiler.prototype._codegenSourceModule = function (srcFileUrl, genFileUrl, statements, exportedVars) {
	        return new GeneratedFile(srcFileUrl, genFileUrl, this._outputEmitter.emitStatements(sourceUrl(srcFileUrl), genFileUrl, statements, exportedVars, this._genFilePreamble));
	    };
	    return AotCompiler;
	}());
	/**
	 * @param {?} reflector
	 * @param {?} compileResult
	 * @param {?} fileSuffix
	 * @return {?}
	 */
	function _resolveStyleStatements(reflector, compileResult, fileSuffix) {
	    compileResult.dependencies.forEach(function (dep) {
	        dep.valuePlaceholder.reference = reflector.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix), dep.name);
	    });
	    return compileResult.statements;
	}
	/**
	 * @param {?} stylesheetUrl
	 * @param {?} shim
	 * @param {?} suffix
	 * @return {?}
	 */
	function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
	    return "" + stylesheetUrl + (shim ? '.shim' : '') + ".ngstyle" + suffix;
	}
	/**
	 * @param {?} meta
	 * @return {?}
	 */
	function _assertComponent(meta) {
	    if (!meta.isComponent) {
	        throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
	    }
	}
	/**
	 * @param {?} programStaticSymbols
	 * @param {?} host
	 * @param {?} metadataResolver
	 * @return {?}
	 */
	function analyzeNgModules(programStaticSymbols, host, metadataResolver) {
	    var _a = _createNgModules(programStaticSymbols, host, metadataResolver), ngModules = _a.ngModules, symbolsMissingModule = _a.symbolsMissingModule;
	    return _analyzeNgModules(programStaticSymbols, ngModules, symbolsMissingModule, metadataResolver);
	}
	/**
	 * @param {?} programStaticSymbols
	 * @param {?} host
	 * @param {?} metadataResolver
	 * @return {?}
	 */
	function analyzeAndValidateNgModules(programStaticSymbols, host, metadataResolver) {
	    var /** @type {?} */ result = analyzeNgModules(programStaticSymbols, host, metadataResolver);
	    if (result.symbolsMissingModule && result.symbolsMissingModule.length) {
	        var /** @type {?} */ messages = result.symbolsMissingModule.map(function (s) { return "Cannot determine the module for class " + s.name + " in " + s.filePath + "! Add " + s.name + " to the NgModule to fix it."; });
	        throw syntaxError(messages.join('\n'));
	    }
	    return result;
	}
	/**
	 * @param {?} programSymbols
	 * @param {?} ngModuleMetas
	 * @param {?} symbolsMissingModule
	 * @param {?} metadataResolver
	 * @return {?}
	 */
	function _analyzeNgModules(programSymbols, ngModuleMetas, symbolsMissingModule, metadataResolver) {
	    var /** @type {?} */ moduleMetasByRef = new Map();
	    ngModuleMetas.forEach(function (ngModule) { return moduleMetasByRef.set(ngModule.type.reference, ngModule); });
	    var /** @type {?} */ ngModuleByPipeOrDirective = new Map();
	    var /** @type {?} */ ngModulesByFile = new Map();
	    var /** @type {?} */ ngDirectivesByFile = new Map();
	    var /** @type {?} */ ngPipesByFile = new Map();
	    var /** @type {?} */ ngInjectablesByFile = new Map();
	    var /** @type {?} */ filePaths = new Set();
	    // Make sure we produce an analyzed file for each input file
	    programSymbols.forEach(function (symbol) {
	        var /** @type {?} */ filePath = symbol.filePath;
	        filePaths.add(filePath);
	        if (metadataResolver.isInjectable(symbol)) {
	            ngInjectablesByFile.set(filePath, (ngInjectablesByFile.get(filePath) || []).concat(symbol));
	        }
	    });
	    // Looping over all modules to construct:
	    // - a map from file to modules `ngModulesByFile`,
	    // - a map from file to directives `ngDirectivesByFile`,
	    // - a map from file to pipes `ngPipesByFile`,
	    // - a map from directive/pipe to module `ngModuleByPipeOrDirective`.
	    ngModuleMetas.forEach(function (ngModuleMeta) {
	        var /** @type {?} */ srcFileUrl = ngModuleMeta.type.reference.filePath;
	        filePaths.add(srcFileUrl);
	        ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));
	        ngModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	            var /** @type {?} */ fileUrl = dirIdentifier.reference.filePath;
	            filePaths.add(fileUrl);
	            ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference));
	            ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);
	        });
	        ngModuleMeta.declaredPipes.forEach(function (pipeIdentifier) {
	            var /** @type {?} */ fileUrl = pipeIdentifier.reference.filePath;
	            filePaths.add(fileUrl);
	            ngPipesByFile.set(fileUrl, (ngPipesByFile.get(fileUrl) || []).concat(pipeIdentifier.reference));
	            ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);
	        });
	    });
	    var /** @type {?} */ files = [];
	    filePaths.forEach(function (srcUrl) {
	        var /** @type {?} */ directives = ngDirectivesByFile.get(srcUrl) || [];
	        var /** @type {?} */ pipes = ngPipesByFile.get(srcUrl) || [];
	        var /** @type {?} */ ngModules = ngModulesByFile.get(srcUrl) || [];
	        var /** @type {?} */ injectables = ngInjectablesByFile.get(srcUrl) || [];
	        files.push({ srcUrl: srcUrl, directives: directives, pipes: pipes, ngModules: ngModules, injectables: injectables });
	    });
	    return {
	        // map directive/pipe to module
	        ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,
	        // list modules and directives for every source file
	        files: files,
	        ngModules: ngModuleMetas, symbolsMissingModule: symbolsMissingModule
	    };
	}
	/**
	 * @param {?} staticSymbolResolver
	 * @param {?} files
	 * @param {?} host
	 * @return {?}
	 */
	function extractProgramSymbols(staticSymbolResolver, files, host) {
	    var /** @type {?} */ staticSymbols = [];
	    files.filter(function (fileName) { return host.isSourceFile(fileName); }).forEach(function (sourceFile) {
	        staticSymbolResolver.getSymbolsOf(sourceFile).forEach(function (symbol) {
	            var /** @type {?} */ resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);
	            var /** @type {?} */ symbolMeta = resolvedSymbol.metadata;
	            if (symbolMeta) {
	                if (symbolMeta.__symbolic != 'error') {
	                    // Ignore symbols that are only included to record error information.
	                    staticSymbols.push(resolvedSymbol.symbol);
	                }
	            }
	        });
	    });
	    return staticSymbols;
	}
	/**
	 * @param {?} programStaticSymbols
	 * @param {?} host
	 * @param {?} metadataResolver
	 * @return {?}
	 */
	function _createNgModules(programStaticSymbols, host, metadataResolver) {
	    var /** @type {?} */ ngModules = new Map();
	    var /** @type {?} */ programPipesAndDirectives = [];
	    var /** @type {?} */ ngModulePipesAndDirective = new Set();
	    var /** @type {?} */ addNgModule = function (staticSymbol) {
	        if (ngModules.has(staticSymbol) || !host.isSourceFile(staticSymbol.filePath)) {
	            return false;
	        }
	        var /** @type {?} */ ngModule = metadataResolver.getNgModuleMetadata(staticSymbol, false);
	        if (ngModule) {
	            ngModules.set(ngModule.type.reference, ngModule);
	            ngModule.declaredDirectives.forEach(function (dir) { return ngModulePipesAndDirective.add(dir.reference); });
	            ngModule.declaredPipes.forEach(function (pipe) { return ngModulePipesAndDirective.add(pipe.reference); });
	            // For every input module add the list of transitively included modules
	            ngModule.transitiveModule.modules.forEach(function (modMeta) { return addNgModule(modMeta.reference); });
	        }
	        return !!ngModule;
	    };
	    programStaticSymbols.forEach(function (staticSymbol) {
	        if (!addNgModule(staticSymbol) &&
	            (metadataResolver.isDirective(staticSymbol) || metadataResolver.isPipe(staticSymbol))) {
	            programPipesAndDirectives.push(staticSymbol);
	        }
	    });
	    // Throw an error if any of the program pipe or directives is not declared by a module
	    var /** @type {?} */ symbolsMissingModule = programPipesAndDirectives.filter(function (s) { return !ngModulePipesAndDirective.has(s); });
	    return { ngModules: Array.from(ngModules.values()), symbolsMissingModule: symbolsMissingModule };
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var StaticAndDynamicReflectionCapabilities = (function () {
	    /**
	     * @param {?} staticDelegate
	     */
	    function StaticAndDynamicReflectionCapabilities(staticDelegate) {
	        this.staticDelegate = staticDelegate;
	        this.dynamicDelegate = new _angular_core.ɵReflectionCapabilities();
	    }
	    /**
	     * @param {?} staticDelegate
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.install = function (staticDelegate) {
	        _angular_core.ɵreflector.updateCapabilities(new StaticAndDynamicReflectionCapabilities(staticDelegate));
	    };
	    /**
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.factory = function (type) { return this.dynamicDelegate.factory(type); };
	    /**
	     * @param {?} type
	     * @param {?} lcProperty
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
	        return isStaticType(type) ? this.staticDelegate.hasLifecycleHook(type, lcProperty) :
	            this.dynamicDelegate.hasLifecycleHook(type, lcProperty);
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.parameters = function (type) {
	        return isStaticType(type) ? this.staticDelegate.parameters(type) :
	            this.dynamicDelegate.parameters(type);
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.annotations = function (type) {
	        return isStaticType(type) ? this.staticDelegate.annotations(type) :
	            this.dynamicDelegate.annotations(type);
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	        return isStaticType(typeOrFunc) ? this.staticDelegate.propMetadata(typeOrFunc) :
	            this.dynamicDelegate.propMetadata(typeOrFunc);
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.getter = function (name) { return this.dynamicDelegate.getter(name); };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.setter = function (name) { return this.dynamicDelegate.setter(name); };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.method = function (name) { return this.dynamicDelegate.method(name); };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.importUri = function (type) { return this.staticDelegate.importUri(type); };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.resourceUri = function (type) { return this.staticDelegate.resourceUri(type); };
	    /**
	     * @param {?} name
	     * @param {?} moduleUrl
	     * @param {?} members
	     * @param {?} runtime
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
	        return this.staticDelegate.resolveIdentifier(name, moduleUrl, members);
	    };
	    /**
	     * @param {?} enumIdentifier
	     * @param {?} name
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) {
	        if (isStaticType(enumIdentifier)) {
	            return this.staticDelegate.resolveEnum(enumIdentifier, name);
	        }
	        else {
	            return null;
	        }
	    };
	    return StaticAndDynamicReflectionCapabilities;
	}());
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function isStaticType(type) {
	    return typeof type === 'object' && type.name && type.filePath;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ANGULAR_CORE = '@angular/core';
	var HIDDEN_KEY = /^\$.*\$$/;
	var IGNORE = {
	    __symbolic: 'ignore'
	};
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function shouldIgnore(value) {
	    return value && value.__symbolic == 'ignore';
	}
	/**
	 * A static reflector implements enough of the Reflector API that is necessary to compile
	 * templates statically.
	 */
	var StaticReflector = (function () {
	    /**
	     * @param {?} symbolResolver
	     * @param {?=} knownMetadataClasses
	     * @param {?=} knownMetadataFunctions
	     * @param {?=} errorRecorder
	     */
	    function StaticReflector(symbolResolver, knownMetadataClasses, knownMetadataFunctions, errorRecorder) {
	        if (knownMetadataClasses === void 0) { knownMetadataClasses = []; }
	        if (knownMetadataFunctions === void 0) { knownMetadataFunctions = []; }
	        var _this = this;
	        this.symbolResolver = symbolResolver;
	        this.errorRecorder = errorRecorder;
	        this.annotationCache = new Map();
	        this.propertyCache = new Map();
	        this.parameterCache = new Map();
	        this.methodCache = new Map();
	        this.conversionMap = new Map();
	        this.initializeConversionMap();
	        knownMetadataClasses.forEach(function (kc) { return _this._registerDecoratorOrConstructor(_this.getStaticSymbol(kc.filePath, kc.name), kc.ctor); });
	        knownMetadataFunctions.forEach(function (kf) { return _this._registerFunction(_this.getStaticSymbol(kf.filePath, kf.name), kf.fn); });
	    }
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    StaticReflector.prototype.importUri = function (typeOrFunc) {
	        var /** @type {?} */ staticSymbol = this.findSymbolDeclaration(typeOrFunc);
	        return staticSymbol ? staticSymbol.filePath : null;
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    StaticReflector.prototype.resourceUri = function (typeOrFunc) {
	        var /** @type {?} */ staticSymbol = this.findSymbolDeclaration(typeOrFunc);
	        return this.symbolResolver.getResourcePath(staticSymbol);
	    };
	    /**
	     * @param {?} name
	     * @param {?} moduleUrl
	     * @param {?} members
	     * @return {?}
	     */
	    StaticReflector.prototype.resolveIdentifier = function (name, moduleUrl, members) {
	        var /** @type {?} */ importSymbol = this.getStaticSymbol(moduleUrl, name);
	        var /** @type {?} */ rootSymbol = this.findDeclaration(moduleUrl, name);
	        if (importSymbol != rootSymbol) {
	            this.symbolResolver.recordImportAs(rootSymbol, importSymbol);
	        }
	        if (members && members.length) {
	            return this.getStaticSymbol(rootSymbol.filePath, rootSymbol.name, members);
	        }
	        return rootSymbol;
	    };
	    /**
	     * @param {?} moduleUrl
	     * @param {?} name
	     * @param {?=} containingFile
	     * @return {?}
	     */
	    StaticReflector.prototype.findDeclaration = function (moduleUrl, name, containingFile) {
	        return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));
	    };
	    /**
	     * @param {?} symbol
	     * @return {?}
	     */
	    StaticReflector.prototype.findSymbolDeclaration = function (symbol) {
	        var /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);
	        if (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {
	            return this.findSymbolDeclaration(resolvedSymbol.metadata);
	        }
	        else {
	            return symbol;
	        }
	    };
	    /**
	     * @param {?} enumIdentifier
	     * @param {?} name
	     * @return {?}
	     */
	    StaticReflector.prototype.resolveEnum = function (enumIdentifier, name) {
	        var /** @type {?} */ staticSymbol = enumIdentifier;
	        var /** @type {?} */ members = (staticSymbol.members || []).concat(name);
	        return this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name, members);
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticReflector.prototype.annotations = function (type) {
	        var /** @type {?} */ annotations = this.annotationCache.get(type);
	        if (!annotations) {
	            annotations = [];
	            var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	            if (classMetadata['extends']) {
	                var /** @type {?} */ parentType = this.trySimplify(type, classMetadata['extends']);
	                if (parentType && (parentType instanceof StaticSymbol)) {
	                    var /** @type {?} */ parentAnnotations = this.annotations(parentType);
	                    annotations.push.apply(annotations, parentAnnotations);
	                }
	            }
	            if (classMetadata['decorators']) {
	                var /** @type {?} */ ownAnnotations = this.simplify(type, classMetadata['decorators']);
	                annotations.push.apply(annotations, ownAnnotations);
	            }
	            this.annotationCache.set(type, annotations.filter(function (ann) { return !!ann; }));
	        }
	        return annotations;
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticReflector.prototype.propMetadata = function (type) {
	        var _this = this;
	        var /** @type {?} */ propMetadata = this.propertyCache.get(type);
	        if (!propMetadata) {
	            var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	            propMetadata = {};
	            if (classMetadata['extends']) {
	                var /** @type {?} */ parentType = this.simplify(type, classMetadata['extends']);
	                if (parentType instanceof StaticSymbol) {
	                    var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentType);
	                    Object.keys(parentPropMetadata_1).forEach(function (parentProp) {
	                        propMetadata[parentProp] = parentPropMetadata_1[parentProp];
	                    });
	                }
	            }
	            var /** @type {?} */ members_1 = classMetadata['members'] || {};
	            Object.keys(members_1).forEach(function (propName) {
	                var /** @type {?} */ propData = members_1[propName];
	                var /** @type {?} */ prop = ((propData))
	                    .find(function (a) { return a['__symbolic'] == 'property' || a['__symbolic'] == 'method'; });
	                var /** @type {?} */ decorators = [];
	                if (propMetadata[propName]) {
	                    decorators.push.apply(decorators, propMetadata[propName]);
	                }
	                propMetadata[propName] = decorators;
	                if (prop && prop['decorators']) {
	                    decorators.push.apply(decorators, _this.simplify(type, prop['decorators']));
	                }
	            });
	            this.propertyCache.set(type, propMetadata);
	        }
	        return propMetadata;
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticReflector.prototype.parameters = function (type) {
	        if (!(type instanceof StaticSymbol)) {
	            this.reportError(new Error("parameters received " + JSON.stringify(type) + " which is not a StaticSymbol"), type);
	            return [];
	        }
	        try {
	            var /** @type {?} */ parameters_1 = this.parameterCache.get(type);
	            if (!parameters_1) {
	                var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	                var /** @type {?} */ members = classMetadata ? classMetadata['members'] : null;
	                var /** @type {?} */ ctorData = members ? members['__ctor__'] : null;
	                if (ctorData) {
	                    var /** @type {?} */ ctor = ((ctorData)).find(function (a) { return a['__symbolic'] == 'constructor'; });
	                    var /** @type {?} */ parameterTypes = (this.simplify(type, ctor['parameters'] || []));
	                    var /** @type {?} */ parameterDecorators_1 = (this.simplify(type, ctor['parameterDecorators'] || []));
	                    parameters_1 = [];
	                    parameterTypes.forEach(function (paramType, index) {
	                        var /** @type {?} */ nestedResult = [];
	                        if (paramType) {
	                            nestedResult.push(paramType);
	                        }
	                        var /** @type {?} */ decorators = parameterDecorators_1 ? parameterDecorators_1[index] : null;
	                        if (decorators) {
	                            nestedResult.push.apply(nestedResult, decorators);
	                        }
	                        parameters_1.push(nestedResult);
	                    });
	                }
	                else if (classMetadata['extends']) {
	                    var /** @type {?} */ parentType = this.simplify(type, classMetadata['extends']);
	                    if (parentType instanceof StaticSymbol) {
	                        parameters_1 = this.parameters(parentType);
	                    }
	                }
	                if (!parameters_1) {
	                    parameters_1 = [];
	                }
	                this.parameterCache.set(type, parameters_1);
	            }
	            return parameters_1;
	        }
	        catch (e) {
	            console.error("Failed on type " + JSON.stringify(type) + " with error " + e);
	            throw e;
	        }
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticReflector.prototype._methodNames = function (type) {
	        var /** @type {?} */ methodNames = this.methodCache.get(type);
	        if (!methodNames) {
	            var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	            methodNames = {};
	            if (classMetadata['extends']) {
	                var /** @type {?} */ parentType = this.simplify(type, classMetadata['extends']);
	                if (parentType instanceof StaticSymbol) {
	                    var /** @type {?} */ parentMethodNames_1 = this._methodNames(parentType);
	                    Object.keys(parentMethodNames_1).forEach(function (parentProp) {
	                        methodNames[parentProp] = parentMethodNames_1[parentProp];
	                    });
	                }
	            }
	            var /** @type {?} */ members_2 = classMetadata['members'] || {};
	            Object.keys(members_2).forEach(function (propName) {
	                var /** @type {?} */ propData = members_2[propName];
	                var /** @type {?} */ isMethod = ((propData)).some(function (a) { return a['__symbolic'] == 'method'; });
	                methodNames[propName] = methodNames[propName] || isMethod;
	            });
	            this.methodCache.set(type, methodNames);
	        }
	        return methodNames;
	    };
	    /**
	     * @param {?} type
	     * @param {?} lcProperty
	     * @return {?}
	     */
	    StaticReflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	        if (!(type instanceof StaticSymbol)) {
	            this.reportError(new Error("hasLifecycleHook received " + JSON.stringify(type) + " which is not a StaticSymbol"), type);
	        }
	        try {
	            return !!this._methodNames(type)[lcProperty];
	        }
	        catch (e) {
	            console.error("Failed on type " + JSON.stringify(type) + " with error " + e);
	            throw e;
	        }
	    };
	    /**
	     * @param {?} type
	     * @param {?} ctor
	     * @return {?}
	     */
	    StaticReflector.prototype._registerDecoratorOrConstructor = function (type, ctor) {
	        this.conversionMap.set(type, function (context, args) { return new (ctor.bind.apply(ctor, [void 0].concat(args)))(); });
	    };
	    /**
	     * @param {?} type
	     * @param {?} fn
	     * @return {?}
	     */
	    StaticReflector.prototype._registerFunction = function (type, fn) {
	        this.conversionMap.set(type, function (context, args) { return fn.apply(undefined, args); });
	    };
	    /**
	     * @return {?}
	     */
	    StaticReflector.prototype.initializeConversionMap = function () {
	        this.injectionToken = this.findDeclaration(ANGULAR_CORE, 'InjectionToken');
	        this.opaqueToken = this.findDeclaration(ANGULAR_CORE, 'OpaqueToken');
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), _angular_core.Host);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Injectable'), _angular_core.Injectable);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), _angular_core.Self);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), _angular_core.SkipSelf);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Inject'), _angular_core.Inject);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), _angular_core.Optional);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Attribute'), _angular_core.Attribute);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChild'), _angular_core.ContentChild);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChildren'), _angular_core.ContentChildren);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChild'), _angular_core.ViewChild);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChildren'), _angular_core.ViewChildren);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Input'), _angular_core.Input);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Output'), _angular_core.Output);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Pipe'), _angular_core.Pipe);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostBinding'), _angular_core.HostBinding);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostListener'), _angular_core.HostListener);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Directive'), _angular_core.Directive);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Component'), _angular_core.Component);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'NgModule'), _angular_core.NgModule);
	        // Note: Some metadata classes can be used directly with Provider.deps.
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), _angular_core.Host);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), _angular_core.Self);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), _angular_core.SkipSelf);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), _angular_core.Optional);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'trigger'), _angular_core.trigger);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'state'), _angular_core.state);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'transition'), _angular_core.transition);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'style'), _angular_core.style);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'animate'), _angular_core.animate);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'keyframes'), _angular_core.keyframes);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'sequence'), _angular_core.sequence);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'group'), _angular_core.group);
	    };
	    /**
	     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
	     * All types passed to the StaticResolver should be pseudo-types returned by this method.
	     *
	     * @param {?} declarationFile the absolute path of the file where the symbol is declared
	     * @param {?} name the name of the type.
	     * @param {?=} members
	     * @return {?}
	     */
	    StaticReflector.prototype.getStaticSymbol = function (declarationFile, name, members) {
	        return this.symbolResolver.getStaticSymbol(declarationFile, name, members);
	    };
	    /**
	     * @param {?} error
	     * @param {?} context
	     * @param {?=} path
	     * @return {?}
	     */
	    StaticReflector.prototype.reportError = function (error, context, path) {
	        if (this.errorRecorder) {
	            this.errorRecorder(error, (context && context.filePath) || path);
	        }
	        else {
	            throw error;
	        }
	    };
	    /**
	     * Simplify but discard any errors
	     * @param {?} context
	     * @param {?} value
	     * @return {?}
	     */
	    StaticReflector.prototype.trySimplify = function (context, value) {
	        var /** @type {?} */ originalRecorder = this.errorRecorder;
	        this.errorRecorder = function (error, fileName) { };
	        var /** @type {?} */ result = this.simplify(context, value);
	        this.errorRecorder = originalRecorder;
	        return result;
	    };
	    /**
	     * \@internal
	     * @param {?} context
	     * @param {?} value
	     * @return {?}
	     */
	    StaticReflector.prototype.simplify = function (context, value) {
	        var _this = this;
	        var /** @type {?} */ self = this;
	        var /** @type {?} */ scope = BindingScope.empty;
	        var /** @type {?} */ calling = new Map();
	        /**
	         * @param {?} context
	         * @param {?} value
	         * @param {?} depth
	         * @return {?}
	         */
	        function simplifyInContext(context, value, depth) {
	            /**
	             * @param {?} staticSymbol
	             * @return {?}
	             */
	            function resolveReferenceValue(staticSymbol) {
	                var /** @type {?} */ resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);
	                return resolvedSymbol ? resolvedSymbol.metadata : null;
	            }
	            /**
	             * @param {?} functionSymbol
	             * @param {?} targetFunction
	             * @param {?} args
	             * @return {?}
	             */
	            function simplifyCall(functionSymbol, targetFunction, args) {
	                if (targetFunction && targetFunction['__symbolic'] == 'function') {
	                    if (calling.get(functionSymbol)) {
	                        throw new Error('Recursion not supported');
	                    }
	                    calling.set(functionSymbol, true);
	                    try {
	                        var /** @type {?} */ value_1 = targetFunction['value'];
	                        if (value_1 && (depth != 0 || value_1.__symbolic != 'error')) {
	                            var /** @type {?} */ parameters = targetFunction['parameters'];
	                            var /** @type {?} */ defaults = targetFunction.defaults;
	                            args = args.map(function (arg) { return simplifyInContext(context, arg, depth + 1); })
	                                .map(function (arg) { return shouldIgnore(arg) ? undefined : arg; });
	                            if (defaults && defaults.length > args.length) {
	                                args.push.apply(args, defaults.slice(args.length).map(function (value) { return simplify(value); }));
	                            }
	                            var /** @type {?} */ functionScope = BindingScope.build();
	                            for (var /** @type {?} */ i = 0; i < parameters.length; i++) {
	                                functionScope.define(parameters[i], args[i]);
	                            }
	                            var /** @type {?} */ oldScope = scope;
	                            var /** @type {?} */ result_1;
	                            try {
	                                scope = functionScope.done();
	                                result_1 = simplifyInContext(functionSymbol, value_1, depth + 1);
	                            }
	                            finally {
	                                scope = oldScope;
	                            }
	                            return result_1;
	                        }
	                    }
	                    finally {
	                        calling.delete(functionSymbol);
	                    }
	                }
	                if (depth === 0) {
	                    // If depth is 0 we are evaluating the top level expression that is describing element
	                    // decorator. In this case, it is a decorator we don't understand, such as a custom
	                    // non-angular decorator, and we should just ignore it.
	                    return IGNORE;
	                }
	                return simplify({ __symbolic: 'error', message: 'Function call not supported', context: functionSymbol });
	            }
	            /**
	             * @param {?} expression
	             * @return {?}
	             */
	            function simplify(expression) {
	                if (isPrimitive(expression)) {
	                    return expression;
	                }
	                if (expression instanceof Array) {
	                    var /** @type {?} */ result_2 = [];
	                    for (var _i = 0, _a = ((expression)); _i < _a.length; _i++) {
	                        var item = _a[_i];
	                        // Check for a spread expression
	                        if (item && item.__symbolic === 'spread') {
	                            var /** @type {?} */ spreadArray = simplify(item.expression);
	                            if (Array.isArray(spreadArray)) {
	                                for (var _b = 0, spreadArray_1 = spreadArray; _b < spreadArray_1.length; _b++) {
	                                    var spreadItem = spreadArray_1[_b];
	                                    result_2.push(spreadItem);
	                                }
	                                continue;
	                            }
	                        }
	                        var /** @type {?} */ value_2 = simplify(item);
	                        if (shouldIgnore(value_2)) {
	                            continue;
	                        }
	                        result_2.push(value_2);
	                    }
	                    return result_2;
	                }
	                if (expression instanceof StaticSymbol) {
	                    // Stop simplification at builtin symbols
	                    if (expression === self.injectionToken || expression === self.opaqueToken ||
	                        self.conversionMap.has(expression)) {
	                        return expression;
	                    }
	                    else {
	                        var /** @type {?} */ staticSymbol = expression;
	                        var /** @type {?} */ declarationValue = resolveReferenceValue(staticSymbol);
	                        if (declarationValue) {
	                            return simplifyInContext(staticSymbol, declarationValue, depth + 1);
	                        }
	                        else {
	                            return staticSymbol;
	                        }
	                    }
	                }
	                if (expression) {
	                    if (expression['__symbolic']) {
	                        var /** @type {?} */ staticSymbol = void 0;
	                        switch (expression['__symbolic']) {
	                            case 'binop':
	                                var /** @type {?} */ left = simplify(expression['left']);
	                                if (shouldIgnore(left))
	                                    return left;
	                                var /** @type {?} */ right = simplify(expression['right']);
	                                if (shouldIgnore(right))
	                                    return right;
	                                switch (expression['operator']) {
	                                    case '&&':
	                                        return left && right;
	                                    case '||':
	                                        return left || right;
	                                    case '|':
	                                        return left | right;
	                                    case '^':
	                                        return left ^ right;
	                                    case '&':
	                                        return left & right;
	                                    case '==':
	                                        return left == right;
	                                    case '!=':
	                                        return left != right;
	                                    case '===':
	                                        return left === right;
	                                    case '!==':
	                                        return left !== right;
	                                    case '<':
	                                        return left < right;
	                                    case '>':
	                                        return left > right;
	                                    case '<=':
	                                        return left <= right;
	                                    case '>=':
	                                        return left >= right;
	                                    case '<<':
	                                        return left << right;
	                                    case '>>':
	                                        return left >> right;
	                                    case '+':
	                                        return left + right;
	                                    case '-':
	                                        return left - right;
	                                    case '*':
	                                        return left * right;
	                                    case '/':
	                                        return left / right;
	                                    case '%':
	                                        return left % right;
	                                }
	                                return null;
	                            case 'if':
	                                var /** @type {?} */ condition = simplify(expression['condition']);
	                                return condition ? simplify(expression['thenExpression']) :
	                                    simplify(expression['elseExpression']);
	                            case 'pre':
	                                var /** @type {?} */ operand = simplify(expression['operand']);
	                                if (shouldIgnore(operand))
	                                    return operand;
	                                switch (expression['operator']) {
	                                    case '+':
	                                        return operand;
	                                    case '-':
	                                        return -operand;
	                                    case '!':
	                                        return !operand;
	                                    case '~':
	                                        return ~operand;
	                                }
	                                return null;
	                            case 'index':
	                                var /** @type {?} */ indexTarget = simplify(expression['expression']);
	                                var /** @type {?} */ index = simplify(expression['index']);
	                                if (indexTarget && isPrimitive(index))
	                                    return indexTarget[index];
	                                return null;
	                            case 'select':
	                                var /** @type {?} */ member = expression['member'];
	                                var /** @type {?} */ selectContext = context;
	                                var /** @type {?} */ selectTarget = simplify(expression['expression']);
	                                if (selectTarget instanceof StaticSymbol) {
	                                    var /** @type {?} */ members = selectTarget.members.concat(member);
	                                    selectContext =
	                                        self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);
	                                    var /** @type {?} */ declarationValue = resolveReferenceValue(selectContext);
	                                    if (declarationValue) {
	                                        return simplifyInContext(selectContext, declarationValue, depth + 1);
	                                    }
	                                    else {
	                                        return selectContext;
	                                    }
	                                }
	                                if (selectTarget && isPrimitive(member))
	                                    return simplifyInContext(selectContext, selectTarget[member], depth + 1);
	                                return null;
	                            case 'reference':
	                                // Note: This only has to deal with variable references,
	                                // as symbol references have been converted into StaticSymbols already
	                                // in the StaticSymbolResolver!
	                                var /** @type {?} */ name = expression['name'];
	                                var /** @type {?} */ localValue = scope.resolve(name);
	                                if (localValue != BindingScope.missing) {
	                                    return localValue;
	                                }
	                                break;
	                            case 'class':
	                                return context;
	                            case 'function':
	                                return context;
	                            case 'new':
	                            case 'call':
	                                // Determine if the function is a built-in conversion
	                                staticSymbol = simplifyInContext(context, expression['expression'], depth + 1);
	                                if (staticSymbol instanceof StaticSymbol) {
	                                    if (staticSymbol === self.injectionToken || staticSymbol === self.opaqueToken) {
	                                        // if somebody calls new InjectionToken, don't create an InjectionToken,
	                                        // but rather return the symbol to which the InjectionToken is assigned to.
	                                        return context;
	                                    }
	                                    var /** @type {?} */ argExpressions = expression['arguments'] || [];
	                                    var /** @type {?} */ converter = self.conversionMap.get(staticSymbol);
	                                    if (converter) {
	                                        var /** @type {?} */ args = argExpressions.map(function (arg) { return simplifyInContext(context, arg, depth + 1); })
	                                            .map(function (arg) { return shouldIgnore(arg) ? undefined : arg; });
	                                        return converter(context, args);
	                                    }
	                                    else {
	                                        // Determine if the function is one we can simplify.
	                                        var /** @type {?} */ targetFunction = resolveReferenceValue(staticSymbol);
	                                        return simplifyCall(staticSymbol, targetFunction, argExpressions);
	                                    }
	                                }
	                                break;
	                            case 'error':
	                                var /** @type {?} */ message = produceErrorMessage(expression);
	                                if (expression['line']) {
	                                    message =
	                                        message + " (position " + (expression['line'] + 1) + ":" + (expression['character'] + 1) + " in the original .ts file)";
	                                    self.reportError(positionalError(message, context.filePath, expression['line'], expression['character']), context);
	                                }
	                                else {
	                                    self.reportError(new Error(message), context);
	                                }
	                                return IGNORE;
	                            case 'ignore':
	                                return expression;
	                        }
	                        return null;
	                    }
	                    return mapStringMap(expression, function (value, name) { return simplify(value); });
	                }
	                return IGNORE;
	            }
	            try {
	                return simplify(value);
	            }
	            catch (e) {
	                var /** @type {?} */ members = context.members.length ? "." + context.members.join('.') : '';
	                var /** @type {?} */ message = e.message + ", resolving symbol " + context.name + members + " in " + context.filePath;
	                if (e.fileName) {
	                    throw positionalError(message, e.fileName, e.line, e.column);
	                }
	                throw syntaxError(message);
	            }
	        }
	        var /** @type {?} */ recordedSimplifyInContext = function (context, value, depth) {
	            try {
	                return simplifyInContext(context, value, depth);
	            }
	            catch (e) {
	                _this.reportError(e, context);
	            }
	        };
	        var /** @type {?} */ result = this.errorRecorder ? recordedSimplifyInContext(context, value, 0) :
	            simplifyInContext(context, value, 0);
	        if (shouldIgnore(result)) {
	            return undefined;
	        }
	        return result;
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticReflector.prototype.getTypeMetadata = function (type) {
	        var /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(type);
	        return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata :
	            { __symbolic: 'class' };
	    };
	    return StaticReflector;
	}());
	/**
	 * @param {?} error
	 * @return {?}
	 */
	function expandedMessage(error) {
	    switch (error.message) {
	        case 'Reference to non-exported class':
	            if (error.context && error.context.className) {
	                return "Reference to a non-exported class " + error.context.className + ". Consider exporting the class";
	            }
	            break;
	        case 'Variable not initialized':
	            return 'Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler';
	        case 'Destructuring not supported':
	            return 'Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring';
	        case 'Could not resolve type':
	            if (error.context && error.context.typeName) {
	                return "Could not resolve type " + error.context.typeName;
	            }
	            break;
	        case 'Function call not supported':
	            var /** @type {?} */ prefix = error.context && error.context.name ? "Calling function '" + error.context.name + "', f" : 'F';
	            return prefix +
	                'unction calls are not supported. Consider replacing the function or lambda with a reference to an exported function';
	        case 'Reference to a local symbol':
	            if (error.context && error.context.name) {
	                return "Reference to a local (non-exported) symbol '" + error.context.name + "'. Consider exporting the symbol";
	            }
	            break;
	    }
	    return error.message;
	}
	/**
	 * @param {?} error
	 * @return {?}
	 */
	function produceErrorMessage(error) {
	    return "Error encountered resolving symbol values statically. " + expandedMessage(error);
	}
	/**
	 * @param {?} input
	 * @param {?} transform
	 * @return {?}
	 */
	function mapStringMap(input, transform) {
	    if (!input)
	        return {};
	    var /** @type {?} */ result = {};
	    Object.keys(input).forEach(function (key) {
	        var /** @type {?} */ value = transform(input[key], key);
	        if (!shouldIgnore(value)) {
	            if (HIDDEN_KEY.test(key)) {
	                Object.defineProperty(result, key, { enumerable: false, configurable: true, value: value });
	            }
	            else {
	                result[key] = value;
	            }
	        }
	    });
	    return result;
	}
	/**
	 * @param {?} o
	 * @return {?}
	 */
	function isPrimitive(o) {
	    return o === null || (typeof o !== 'function' && typeof o !== 'object');
	}
	/**
	 * @abstract
	 */
	var BindingScope = (function () {
	    function BindingScope() {
	    }
	    /**
	     * @abstract
	     * @param {?} name
	     * @return {?}
	     */
	    BindingScope.prototype.resolve = function (name) { };
	    /**
	     * @return {?}
	     */
	    BindingScope.build = function () {
	        var /** @type {?} */ current = new Map();
	        return {
	            define: function (name, value) {
	                current.set(name, value);
	                return this;
	            },
	            done: function () {
	                return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;
	            }
	        };
	    };
	    return BindingScope;
	}());
	BindingScope.missing = {};
	BindingScope.empty = { resolve: function (name) { return BindingScope.missing; } };
	var PopulatedScope = (function (_super) {
	    __extends(PopulatedScope, _super);
	    /**
	     * @param {?} bindings
	     */
	    function PopulatedScope(bindings) {
	        var _this = _super.call(this) || this;
	        _this.bindings = bindings;
	        return _this;
	    }
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    PopulatedScope.prototype.resolve = function (name) {
	        return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;
	    };
	    return PopulatedScope;
	}(BindingScope));
	/**
	 * @param {?} message
	 * @param {?} fileName
	 * @param {?} line
	 * @param {?} column
	 * @return {?}
	 */
	function positionalError(message, fileName, line, column) {
	    var /** @type {?} */ result = new Error(message);
	    ((result)).fileName = fileName;
	    ((result)).line = line;
	    ((result)).column = column;
	    return result;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ResolvedStaticSymbol = (function () {
	    /**
	     * @param {?} symbol
	     * @param {?} metadata
	     */
	    function ResolvedStaticSymbol(symbol, metadata) {
	        this.symbol = symbol;
	        this.metadata = metadata;
	    }
	    return ResolvedStaticSymbol;
	}());
	var SUPPORTED_SCHEMA_VERSION = 3;
	/**
	 * This class is responsible for loading metadata per symbol,
	 * and normalizing references between symbols.
	 *
	 * Internally, it only uses symbols without members,
	 * and deduces the values for symbols with members based
	 * on these symbols.
	 */
	var StaticSymbolResolver = (function () {
	    /**
	     * @param {?} host
	     * @param {?} staticSymbolCache
	     * @param {?} summaryResolver
	     * @param {?=} errorRecorder
	     */
	    function StaticSymbolResolver(host, staticSymbolCache, summaryResolver, errorRecorder) {
	        this.host = host;
	        this.staticSymbolCache = staticSymbolCache;
	        this.summaryResolver = summaryResolver;
	        this.errorRecorder = errorRecorder;
	        this.metadataCache = new Map();
	        this.resolvedSymbols = new Map();
	        this.resolvedFilePaths = new Set();
	        this.importAs = new Map();
	        this.symbolResourcePaths = new Map();
	    }
	    /**
	     * @param {?} staticSymbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.resolveSymbol = function (staticSymbol) {
	        if (staticSymbol.members.length > 0) {
	            return this._resolveSymbolMembers(staticSymbol);
	        }
	        var /** @type {?} */ result = this.resolvedSymbols.get(staticSymbol);
	        if (result) {
	            return result;
	        }
	        result = this._resolveSymbolFromSummary(staticSymbol);
	        if (result) {
	            return result;
	        }
	        // Note: Some users use libraries that were not compiled with ngc, i.e. they don't
	        // have summaries, only .d.ts files. So we always need to check both, the summary
	        // and metadata.
	        this._createSymbolsOf(staticSymbol.filePath);
	        result = this.resolvedSymbols.get(staticSymbol);
	        return result;
	    };
	    /**
	     * getImportAs produces a symbol that can be used to import the given symbol.
	     * The import might be different than the symbol if the symbol is exported from
	     * a library with a summary; in which case we want to import the symbol from the
	     * ngfactory re-export instead of directly to avoid introducing a direct dependency
	     * on an otherwise indirect dependency.
	     *
	     * @param {?} staticSymbol the symbol for which to generate a import symbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.getImportAs = function (staticSymbol) {
	        if (staticSymbol.members.length) {
	            var /** @type {?} */ baseSymbol = this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name);
	            var /** @type {?} */ baseImportAs = this.getImportAs(baseSymbol);
	            return baseImportAs ?
	                this.getStaticSymbol(baseImportAs.filePath, baseImportAs.name, staticSymbol.members) :
	                null;
	        }
	        var /** @type {?} */ result = this.summaryResolver.getImportAs(staticSymbol);
	        if (!result) {
	            result = this.importAs.get(staticSymbol);
	        }
	        return result;
	    };
	    /**
	     * getResourcePath produces the path to the original location of the symbol and should
	     * be used to determine the relative location of resource references recorded in
	     * symbol metadata.
	     * @param {?} staticSymbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.getResourcePath = function (staticSymbol) {
	        return this.symbolResourcePaths.get(staticSymbol) || staticSymbol.filePath;
	    };
	    /**
	     * getTypeArity returns the number of generic type parameters the given symbol
	     * has. If the symbol is not a type the result is null.
	     * @param {?} staticSymbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.getTypeArity = function (staticSymbol) {
	        // If the file is a factory file, don't resolve the symbol as doing so would
	        // cause the metadata for an factory file to be loaded which doesn't exist.
	        // All references to generated classes must include the correct arity whenever
	        // generating code.
	        if (isNgFactoryFile(staticSymbol.filePath)) {
	            return null;
	        }
	        var /** @type {?} */ resolvedSymbol = this.resolveSymbol(staticSymbol);
	        while (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {
	            resolvedSymbol = this.resolveSymbol(resolvedSymbol.metadata);
	        }
	        return (resolvedSymbol && resolvedSymbol.metadata && resolvedSymbol.metadata.arity) || null;
	    };
	    /**
	     * @param {?} sourceSymbol
	     * @param {?} targetSymbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.recordImportAs = function (sourceSymbol, targetSymbol) {
	        sourceSymbol.assertNoMembers();
	        targetSymbol.assertNoMembers();
	        this.importAs.set(sourceSymbol, targetSymbol);
	    };
	    /**
	     * @param {?} staticSymbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype._resolveSymbolMembers = function (staticSymbol) {
	        var /** @type {?} */ members = staticSymbol.members;
	        var /** @type {?} */ baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));
	        if (!baseResolvedSymbol) {
	            return null;
	        }
	        var /** @type {?} */ baseMetadata = baseResolvedSymbol.metadata;
	        if (baseMetadata instanceof StaticSymbol) {
	            return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));
	        }
	        else if (baseMetadata && baseMetadata.__symbolic === 'class') {
	            if (baseMetadata.statics && members.length === 1) {
	                return new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]);
	            }
	        }
	        else {
	            var /** @type {?} */ value = baseMetadata;
	            for (var /** @type {?} */ i = 0; i < members.length && value; i++) {
	                value = value[members[i]];
	            }
	            return new ResolvedStaticSymbol(staticSymbol, value);
	        }
	        return null;
	    };
	    /**
	     * @param {?} staticSymbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype._resolveSymbolFromSummary = function (staticSymbol) {
	        var /** @type {?} */ summary = this.summaryResolver.resolveSummary(staticSymbol);
	        return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;
	    };
	    /**
	     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
	     * All types passed to the StaticResolver should be pseudo-types returned by this method.
	     *
	     * @param {?} declarationFile the absolute path of the file where the symbol is declared
	     * @param {?} name the name of the type.
	     * @param {?=} members a symbol for a static member of the named type
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.getStaticSymbol = function (declarationFile, name, members) {
	        return this.staticSymbolCache.get(declarationFile, name, members);
	    };
	    /**
	     * @param {?} filePath
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.getSymbolsOf = function (filePath) {
	        // Note: Some users use libraries that were not compiled with ngc, i.e. they don't
	        // have summaries, only .d.ts files. So we always need to check both, the summary
	        // and metadata.
	        var /** @type {?} */ symbols = new Set(this.summaryResolver.getSymbolsOf(filePath));
	        this._createSymbolsOf(filePath);
	        this.resolvedSymbols.forEach(function (resolvedSymbol) {
	            if (resolvedSymbol.symbol.filePath === filePath) {
	                symbols.add(resolvedSymbol.symbol);
	            }
	        });
	        return Array.from(symbols);
	    };
	    /**
	     * @param {?} filePath
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype._createSymbolsOf = function (filePath) {
	        var _this = this;
	        if (this.resolvedFilePaths.has(filePath)) {
	            return;
	        }
	        this.resolvedFilePaths.add(filePath);
	        var /** @type {?} */ resolvedSymbols = [];
	        var /** @type {?} */ metadata = this.getModuleMetadata(filePath);
	        if (metadata['metadata']) {
	            // handle direct declarations of the symbol
	            var /** @type {?} */ topLevelSymbolNames_1 = new Set(Object.keys(metadata['metadata']).map(unescapeIdentifier));
	            var /** @type {?} */ origins_1 = metadata['origins'] || {};
	            Object.keys(metadata['metadata']).forEach(function (metadataKey) {
	                var /** @type {?} */ symbolMeta = metadata['metadata'][metadataKey];
	                var /** @type {?} */ name = unescapeIdentifier(metadataKey);
	                var /** @type {?} */ symbol = _this.getStaticSymbol(filePath, name);
	                var /** @type {?} */ importSymbol = undefined;
	                if (metadata['importAs']) {
	                    // Index bundle indexes should use the importAs module name instead of a reference
	                    // to the .d.ts file directly.
	                    importSymbol = _this.getStaticSymbol(metadata['importAs'], name);
	                    _this.recordImportAs(symbol, importSymbol);
	                }
	                var /** @type {?} */ origin = origins_1.hasOwnProperty(metadataKey) && origins_1[metadataKey];
	                if (origin) {
	                    // If the symbol is from a bundled index, use the declaration location of the
	                    // symbol so relative references (such as './my.html') will be calculated
	                    // correctly.
	                    var /** @type {?} */ originFilePath = _this.resolveModule(origin, filePath);
	                    if (!originFilePath) {
	                        _this.reportError(new Error("Couldn't resolve original symbol for " + origin + " from " + filePath), null);
	                    }
	                    else {
	                        _this.symbolResourcePaths.set(symbol, originFilePath);
	                    }
	                }
	                resolvedSymbols.push(_this.createResolvedSymbol(symbol, filePath, topLevelSymbolNames_1, symbolMeta));
	            });
	        }
	        // handle the symbols in one of the re-export location
	        if (metadata['exports']) {
	            var _loop_1 = function (moduleExport) {
	                // handle the symbols in the list of explicitly re-exported symbols.
	                if (moduleExport.export) {
	                    moduleExport.export.forEach(function (exportSymbol) {
	                        var /** @type {?} */ symbolName;
	                        if (typeof exportSymbol === 'string') {
	                            symbolName = exportSymbol;
	                        }
	                        else {
	                            symbolName = exportSymbol.as;
	                        }
	                        symbolName = unescapeIdentifier(symbolName);
	                        var /** @type {?} */ symName = symbolName;
	                        if (typeof exportSymbol !== 'string') {
	                            symName = unescapeIdentifier(exportSymbol.name);
	                        }
	                        var /** @type {?} */ resolvedModule = _this.resolveModule(moduleExport.from, filePath);
	                        if (resolvedModule) {
	                            var /** @type {?} */ targetSymbol = _this.getStaticSymbol(resolvedModule, symName);
	                            var /** @type {?} */ sourceSymbol = _this.getStaticSymbol(filePath, symbolName);
	                            resolvedSymbols.push(_this.createExport(sourceSymbol, targetSymbol));
	                        }
	                    });
	                }
	                else {
	                    // handle the symbols via export * directives.
	                    var /** @type {?} */ resolvedModule = this_1.resolveModule(moduleExport.from, filePath);
	                    if (resolvedModule) {
	                        var /** @type {?} */ nestedExports = this_1.getSymbolsOf(resolvedModule);
	                        nestedExports.forEach(function (targetSymbol) {
	                            var /** @type {?} */ sourceSymbol = _this.getStaticSymbol(filePath, targetSymbol.name);
	                            resolvedSymbols.push(_this.createExport(sourceSymbol, targetSymbol));
	                        });
	                    }
	                }
	            };
	            var this_1 = this;
	            for (var _i = 0, _a = metadata['exports']; _i < _a.length; _i++) {
	                var moduleExport = _a[_i];
	                _loop_1(/** @type {?} */ moduleExport);
	            }
	        }
	        resolvedSymbols.forEach(function (resolvedSymbol) { return _this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol); });
	    };
	    /**
	     * @param {?} sourceSymbol
	     * @param {?} topLevelPath
	     * @param {?} topLevelSymbolNames
	     * @param {?} metadata
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.createResolvedSymbol = function (sourceSymbol, topLevelPath, topLevelSymbolNames, metadata) {
	        var /** @type {?} */ self = this;
	        var ReferenceTransformer = (function (_super) {
	            __extends(ReferenceTransformer, _super);
	            function ReferenceTransformer() {
	                return _super !== null && _super.apply(this, arguments) || this;
	            }
	            /**
	             * @param {?} map
	             * @param {?} functionParams
	             * @return {?}
	             */
	            ReferenceTransformer.prototype.visitStringMap = function (map, functionParams) {
	                var /** @type {?} */ symbolic = map['__symbolic'];
	                if (symbolic === 'function') {
	                    var /** @type {?} */ oldLen = functionParams.length;
	                    functionParams.push.apply(functionParams, (map['parameters'] || []));
	                    var /** @type {?} */ result = _super.prototype.visitStringMap.call(this, map, functionParams);
	                    functionParams.length = oldLen;
	                    return result;
	                }
	                else if (symbolic === 'reference') {
	                    var /** @type {?} */ module_1 = map['module'];
	                    var /** @type {?} */ name = map['name'] ? unescapeIdentifier(map['name']) : map['name'];
	                    if (!name) {
	                        return null;
	                    }
	                    var /** @type {?} */ filePath = void 0;
	                    if (module_1) {
	                        filePath = self.resolveModule(module_1, sourceSymbol.filePath);
	                        if (!filePath) {
	                            return {
	                                __symbolic: 'error',
	                                message: "Could not resolve " + module_1 + " relative to " + sourceSymbol.filePath + "."
	                            };
	                        }
	                        return self.getStaticSymbol(filePath, name);
	                    }
	                    else if (functionParams.indexOf(name) >= 0) {
	                        // reference to a function parameter
	                        return { __symbolic: 'reference', name: name };
	                    }
	                    else {
	                        if (topLevelSymbolNames.has(name)) {
	                            return self.getStaticSymbol(topLevelPath, name);
	                        }
	                        // ambient value
	                        null;
	                    }
	                }
	                else {
	                    return _super.prototype.visitStringMap.call(this, map, functionParams);
	                }
	            };
	            return ReferenceTransformer;
	        }(ValueTransformer));
	        var /** @type {?} */ transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);
	        if (transformedMeta instanceof StaticSymbol) {
	            return this.createExport(sourceSymbol, transformedMeta);
	        }
	        return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);
	    };
	    /**
	     * @param {?} sourceSymbol
	     * @param {?} targetSymbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.createExport = function (sourceSymbol, targetSymbol) {
	        sourceSymbol.assertNoMembers();
	        targetSymbol.assertNoMembers();
	        if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath)) {
	            // This case is for an ng library importing symbols from a plain ts library
	            // transitively.
	            // Note: We rely on the fact that we discover symbols in the direction
	            // from source files to library files
	            this.importAs.set(targetSymbol, this.getImportAs(sourceSymbol) || sourceSymbol);
	        }
	        return new ResolvedStaticSymbol(sourceSymbol, targetSymbol);
	    };
	    /**
	     * @param {?} error
	     * @param {?} context
	     * @param {?=} path
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.reportError = function (error, context, path) {
	        if (this.errorRecorder) {
	            this.errorRecorder(error, (context && context.filePath) || path);
	        }
	        else {
	            throw error;
	        }
	    };
	    /**
	     * @param {?} module an absolute path to a module file.
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.getModuleMetadata = function (module) {
	        var /** @type {?} */ moduleMetadata = this.metadataCache.get(module);
	        if (!moduleMetadata) {
	            var /** @type {?} */ moduleMetadatas = this.host.getMetadataFor(module);
	            if (moduleMetadatas) {
	                var /** @type {?} */ maxVersion_1 = -1;
	                moduleMetadatas.forEach(function (md) {
	                    if (md['version'] > maxVersion_1) {
	                        maxVersion_1 = md['version'];
	                        moduleMetadata = md;
	                    }
	                });
	            }
	            if (!moduleMetadata) {
	                moduleMetadata =
	                    { __symbolic: 'module', version: SUPPORTED_SCHEMA_VERSION, module: module, metadata: {} };
	            }
	            if (moduleMetadata['version'] != SUPPORTED_SCHEMA_VERSION) {
	                var /** @type {?} */ errorMessage = moduleMetadata['version'] == 2 ?
	                    "Unsupported metadata version " + moduleMetadata['version'] + " for module " + module + ". This module should be compiled with a newer version of ngc" :
	                    "Metadata version mismatch for module " + module + ", found version " + moduleMetadata['version'] + ", expected " + SUPPORTED_SCHEMA_VERSION;
	                this.reportError(new Error(errorMessage), null);
	            }
	            this.metadataCache.set(module, moduleMetadata);
	        }
	        return moduleMetadata;
	    };
	    /**
	     * @param {?} module
	     * @param {?} symbolName
	     * @param {?=} containingFile
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.getSymbolByModule = function (module, symbolName, containingFile) {
	        var /** @type {?} */ filePath = this.resolveModule(module, containingFile);
	        if (!filePath) {
	            this.reportError(new Error("Could not resolve module " + module + (containingFile ? " relative to $ {\n            containingFile\n          } " : '')), null);
	            return this.getStaticSymbol("ERROR:" + module, symbolName);
	        }
	        return this.getStaticSymbol(filePath, symbolName);
	    };
	    /**
	     * @param {?} module
	     * @param {?} containingFile
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.resolveModule = function (module, containingFile) {
	        try {
	            return this.host.moduleNameToFileName(module, containingFile);
	        }
	        catch (e) {
	            console.error("Could not resolve module '" + module + "' relative to file " + containingFile);
	            this.reportError(e, null, containingFile);
	        }
	    };
	    return StaticSymbolResolver;
	}());
	/**
	 * @param {?} identifier
	 * @return {?}
	 */
	function unescapeIdentifier(identifier) {
	    return identifier.startsWith('___') ? identifier.substr(1) : identifier;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var AotSummaryResolver = (function () {
	    /**
	     * @param {?} host
	     * @param {?} staticSymbolCache
	     */
	    function AotSummaryResolver(host, staticSymbolCache) {
	        this.host = host;
	        this.staticSymbolCache = staticSymbolCache;
	        this.summaryCache = new Map();
	        this.loadedFilePaths = new Set();
	        this.importAs = new Map();
	    }
	    /**
	     * @param {?} filePath
	     * @return {?}
	     */
	    AotSummaryResolver.prototype.isLibraryFile = function (filePath) {
	        // Note: We need to strip the .ngfactory. file path,
	        // so this method also works for generated files
	        // (for which host.isSourceFile will always return false).
	        return !this.host.isSourceFile(stripNgFactory(filePath));
	    };
	    /**
	     * @param {?} filePath
	     * @return {?}
	     */
	    AotSummaryResolver.prototype.getLibraryFileName = function (filePath) { return this.host.getOutputFileName(filePath); };
	    /**
	     * @param {?} staticSymbol
	     * @return {?}
	     */
	    AotSummaryResolver.prototype.resolveSummary = function (staticSymbol) {
	        staticSymbol.assertNoMembers();
	        var /** @type {?} */ summary = this.summaryCache.get(staticSymbol);
	        if (!summary) {
	            this._loadSummaryFile(staticSymbol.filePath);
	            summary = this.summaryCache.get(staticSymbol);
	        }
	        return summary;
	    };
	    /**
	     * @param {?} filePath
	     * @return {?}
	     */
	    AotSummaryResolver.prototype.getSymbolsOf = function (filePath) {
	        this._loadSummaryFile(filePath);
	        return Array.from(this.summaryCache.keys()).filter(function (symbol) { return symbol.filePath === filePath; });
	    };
	    /**
	     * @param {?} staticSymbol
	     * @return {?}
	     */
	    AotSummaryResolver.prototype.getImportAs = function (staticSymbol) {
	        staticSymbol.assertNoMembers();
	        return this.importAs.get(staticSymbol);
	    };
	    /**
	     * @param {?} filePath
	     * @return {?}
	     */
	    AotSummaryResolver.prototype._loadSummaryFile = function (filePath) {
	        var _this = this;
	        if (this.loadedFilePaths.has(filePath)) {
	            return;
	        }
	        this.loadedFilePaths.add(filePath);
	        if (this.isLibraryFile(filePath)) {
	            var /** @type {?} */ summaryFilePath = summaryFileName(filePath);
	            var /** @type {?} */ json = void 0;
	            try {
	                json = this.host.loadSummary(summaryFilePath);
	            }
	            catch (e) {
	                console.error("Error loading summary file " + summaryFilePath);
	                throw e;
	            }
	            if (json) {
	                var _a = deserializeSummaries(this.staticSymbolCache, json), summaries = _a.summaries, importAs = _a.importAs;
	                summaries.forEach(function (summary) { return _this.summaryCache.set(summary.symbol, summary); });
	                importAs.forEach(function (importAs) {
	                    _this.importAs.set(importAs.symbol, _this.staticSymbolCache.get(ngfactoryFilePath(filePath), importAs.importAs));
	                });
	            }
	        }
	    };
	    return AotSummaryResolver;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Creates a new AotCompiler based on options and a host.
	 * @param {?} compilerHost
	 * @param {?} options
	 * @return {?}
	 */
	function createAotCompiler(compilerHost, options) {
	    var /** @type {?} */ translations = options.translations || '';
	    var /** @type {?} */ urlResolver = createOfflineCompileUrlResolver();
	    var /** @type {?} */ symbolCache = new StaticSymbolCache();
	    var /** @type {?} */ summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);
	    var /** @type {?} */ symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);
	    var /** @type {?} */ staticReflector = new StaticReflector(symbolResolver);
	    StaticAndDynamicReflectionCapabilities.install(staticReflector);
	    var /** @type {?} */ console = new _angular_core.ɵConsole();
	    var /** @type {?} */ htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat, _angular_core.MissingTranslationStrategy.Warning, console);
	    var /** @type {?} */ config = new CompilerConfig({
	        defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,
	        useJit: false,
	        enableLegacyTemplate: options.enableLegacyTemplate !== false,
	    });
	    var /** @type {?} */ normalizer = new DirectiveNormalizer({ get: function (url) { return compilerHost.loadResource(url); } }, urlResolver, htmlParser, config);
	    var /** @type {?} */ expressionParser = new Parser(new Lexer());
	    var /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();
	    var /** @type {?} */ tmplParser = new TemplateParser(config, expressionParser, elementSchemaRegistry, htmlParser, console, []);
	    var /** @type {?} */ resolver = new CompileMetadataResolver(config, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector);
	    // TODO(vicb): do not pass options.i18nFormat here
	    var /** @type {?} */ importResolver = {
	        getImportAs: function (symbol) { return symbolResolver.getImportAs(symbol); },
	        fileNameToModuleName: function (fileName, containingFilePath) { return compilerHost.fileNameToModuleName(fileName, containingFilePath); },
	        getTypeArity: function (symbol) { return symbolResolver.getTypeArity(symbol); }
	    };
	    var /** @type {?} */ viewCompiler = new ViewCompiler(config, elementSchemaRegistry);
	    var /** @type {?} */ compiler = new AotCompiler(config, compilerHost, resolver, tmplParser, new StyleCompiler(urlResolver), viewCompiler, new NgModuleCompiler(), new TypeScriptEmitter(importResolver), summaryResolver, options.locale, options.i18nFormat, options.genFilePreamble, symbolResolver);
	    return { compiler: compiler, reflector: staticReflector };
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} statements
	 * @param {?} resultVars
	 * @return {?}
	 */
	function interpretStatements(statements, resultVars) {
	    var /** @type {?} */ stmtsWithReturn = statements.concat([new ReturnStatement(literalArr(resultVars.map(function (resultVar) { return variable(resultVar); })))]);
	    var /** @type {?} */ ctx = new _ExecutionContext(null, null, null, new Map());
	    var /** @type {?} */ visitor = new StatementInterpreter();
	    var /** @type {?} */ result = visitor.visitAllStatements(stmtsWithReturn, ctx);
	    return result != null ? result.value : null;
	}
	/**
	 * @param {?} varNames
	 * @param {?} varValues
	 * @param {?} statements
	 * @param {?} ctx
	 * @param {?} visitor
	 * @return {?}
	 */
	function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
	    var /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();
	    for (var /** @type {?} */ i = 0; i < varNames.length; i++) {
	        childCtx.vars.set(varNames[i], varValues[i]);
	    }
	    var /** @type {?} */ result = visitor.visitAllStatements(statements, childCtx);
	    return result ? result.value : null;
	}
	var _ExecutionContext = (function () {
	    /**
	     * @param {?} parent
	     * @param {?} instance
	     * @param {?} className
	     * @param {?} vars
	     */
	    function _ExecutionContext(parent, instance, className, vars) {
	        this.parent = parent;
	        this.instance = instance;
	        this.className = className;
	        this.vars = vars;
	    }
	    /**
	     * @return {?}
	     */
	    _ExecutionContext.prototype.createChildWihtLocalVars = function () {
	        return new _ExecutionContext(this, this.instance, this.className, new Map());
	    };
	    return _ExecutionContext;
	}());
	var ReturnValue = (function () {
	    /**
	     * @param {?} value
	     */
	    function ReturnValue(value) {
	        this.value = value;
	    }
	    return ReturnValue;
	}());
	/**
	 * @param {?} _classStmt
	 * @param {?} _ctx
	 * @param {?} _visitor
	 * @return {?}
	 */
	function createDynamicClass(_classStmt, _ctx, _visitor) {
	    var /** @type {?} */ propertyDescriptors = {};
	    _classStmt.getters.forEach(function (getter) {
	        // Note: use `function` instead of arrow function to capture `this`
	        propertyDescriptors[getter.name] = {
	            configurable: false,
	            get: function () {
	                var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
	            }
	        };
	    });
	    _classStmt.methods.forEach(function (method) {
	        var /** @type {?} */ paramNames = method.params.map(function (param) { return param.name; });
	        // Note: use `function` instead of arrow function to capture `this`
	        propertyDescriptors[method.name] = {
	            writable: false,
	            configurable: false,
	            value: function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
	            }
	        };
	    });
	    var /** @type {?} */ ctorParamNames = _classStmt.constructorMethod.params.map(function (param) { return param.name; });
	    // Note: use `function` instead of arrow function to capture `this`
	    var /** @type {?} */ ctor = function () {
	        var _this = this;
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	        _classStmt.fields.forEach(function (field) { _this[field.name] = undefined; });
	        _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
	    };
	    var /** @type {?} */ superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
	    ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
	    return ctor;
	}
	var StatementInterpreter = (function () {
	    function StatementInterpreter() {
	    }
	    /**
	     * @param {?} ast
	     * @return {?}
	     */
	    StatementInterpreter.prototype.debugAst = function (ast) { return debugOutputAstAsTypeScript(ast); };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	        ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
	        return null;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitWriteVarExpr = function (expr, ctx) {
	        var /** @type {?} */ value = expr.value.visitExpression(this, ctx);
	        var /** @type {?} */ currCtx = ctx;
	        while (currCtx != null) {
	            if (currCtx.vars.has(expr.name)) {
	                currCtx.vars.set(expr.name, value);
	                return value;
	            }
	            currCtx = currCtx.parent;
	        }
	        throw new Error("Not declared variable " + expr.name);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitReadVarExpr = function (ast, ctx) {
	        var /** @type {?} */ varName = ast.name;
	        if (ast.builtin != null) {
	            switch (ast.builtin) {
	                case BuiltinVar.Super:
	                    return ctx.instance.__proto__;
	                case BuiltinVar.This:
	                    return ctx.instance;
	                case BuiltinVar.CatchError:
	                    varName = CATCH_ERROR_VAR$2;
	                    break;
	                case BuiltinVar.CatchStack:
	                    varName = CATCH_STACK_VAR$2;
	                    break;
	                default:
	                    throw new Error("Unknown builtin variable " + ast.builtin);
	            }
	        }
	        var /** @type {?} */ currCtx = ctx;
	        while (currCtx != null) {
	            if (currCtx.vars.has(varName)) {
	                return currCtx.vars.get(varName);
	            }
	            currCtx = currCtx.parent;
	        }
	        throw new Error("Not declared variable " + varName);
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitWriteKeyExpr = function (expr, ctx) {
	        var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);
	        var /** @type {?} */ index = expr.index.visitExpression(this, ctx);
	        var /** @type {?} */ value = expr.value.visitExpression(this, ctx);
	        receiver[index] = value;
	        return value;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitWritePropExpr = function (expr, ctx) {
	        var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);
	        var /** @type {?} */ value = expr.value.visitExpression(this, ctx);
	        receiver[expr.name] = value;
	        return value;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	        var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);
	        var /** @type {?} */ args = this.visitAllExpressions(expr.args, ctx);
	        var /** @type {?} */ result;
	        if (expr.builtin != null) {
	            switch (expr.builtin) {
	                case BuiltinMethod.ConcatArray:
	                    result = receiver.concat.apply(receiver, args);
	                    break;
	                case BuiltinMethod.SubscribeObservable:
	                    result = receiver.subscribe({ next: args[0] });
	                    break;
	                case BuiltinMethod.Bind:
	                    result = receiver.bind.apply(receiver, args);
	                    break;
	                default:
	                    throw new Error("Unknown builtin method " + expr.builtin);
	            }
	        }
	        else {
	            result = receiver[expr.name].apply(receiver, args);
	        }
	        return result;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitInvokeFunctionExpr = function (stmt, ctx) {
	        var /** @type {?} */ args = this.visitAllExpressions(stmt.args, ctx);
	        var /** @type {?} */ fnExpr = stmt.fn;
	        if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	            ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
	            return null;
	        }
	        else {
	            var /** @type {?} */ fn$$1 = stmt.fn.visitExpression(this, ctx);
	            return fn$$1.apply(null, args);
	        }
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitReturnStmt = function (stmt, ctx) {
	        return new ReturnValue(stmt.value.visitExpression(this, ctx));
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	        var /** @type {?} */ clazz = createDynamicClass(stmt, ctx, this);
	        ctx.vars.set(stmt.name, clazz);
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitExpressionStmt = function (stmt, ctx) {
	        return stmt.expr.visitExpression(this, ctx);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitIfStmt = function (stmt, ctx) {
	        var /** @type {?} */ condition = stmt.condition.visitExpression(this, ctx);
	        if (condition) {
	            return this.visitAllStatements(stmt.trueCase, ctx);
	        }
	        else if (stmt.falseCase != null) {
	            return this.visitAllStatements(stmt.falseCase, ctx);
	        }
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitTryCatchStmt = function (stmt, ctx) {
	        try {
	            return this.visitAllStatements(stmt.bodyStmts, ctx);
	        }
	        catch (e) {
	            var /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();
	            childCtx.vars.set(CATCH_ERROR_VAR$2, e);
	            childCtx.vars.set(CATCH_STACK_VAR$2, e.stack);
	            return this.visitAllStatements(stmt.catchStmts, childCtx);
	        }
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitThrowStmt = function (stmt, ctx) {
	        throw stmt.error.visitExpression(this, ctx);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?=} context
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitCommentStmt = function (stmt, context) { return null; };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitInstantiateExpr = function (ast, ctx) {
	        var /** @type {?} */ args = this.visitAllExpressions(ast.args, ctx);
	        var /** @type {?} */ clazz = ast.classExpr.visitExpression(this, ctx);
	        return new (clazz.bind.apply(clazz, [void 0].concat(args)))();
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitLiteralExpr = function (ast, ctx) { return ast.value; };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitExternalExpr = function (ast, ctx) {
	        return ast.value.reference;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitConditionalExpr = function (ast, ctx) {
	        if (ast.condition.visitExpression(this, ctx)) {
	            return ast.trueCase.visitExpression(this, ctx);
	        }
	        else if (ast.falseCase != null) {
	            return ast.falseCase.visitExpression(this, ctx);
	        }
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitNotExpr = function (ast, ctx) {
	        return !ast.condition.visitExpression(this, ctx);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitCastExpr = function (ast, ctx) {
	        return ast.value.visitExpression(this, ctx);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitFunctionExpr = function (ast, ctx) {
	        var /** @type {?} */ paramNames = ast.params.map(function (param) { return param.name; });
	        return _declareFn(paramNames, ast.statements, ctx, this);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	        var /** @type {?} */ paramNames = stmt.params.map(function (param) { return param.name; });
	        ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	        var _this = this;
	        var /** @type {?} */ lhs = function () { return ast.lhs.visitExpression(_this, ctx); };
	        var /** @type {?} */ rhs = function () { return ast.rhs.visitExpression(_this, ctx); };
	        switch (ast.operator) {
	            case BinaryOperator.Equals:
	                return lhs() == rhs();
	            case BinaryOperator.Identical:
	                return lhs() === rhs();
	            case BinaryOperator.NotEquals:
	                return lhs() != rhs();
	            case BinaryOperator.NotIdentical:
	                return lhs() !== rhs();
	            case BinaryOperator.And:
	                return lhs() && rhs();
	            case BinaryOperator.Or:
	                return lhs() || rhs();
	            case BinaryOperator.Plus:
	                return lhs() + rhs();
	            case BinaryOperator.Minus:
	                return lhs() - rhs();
	            case BinaryOperator.Divide:
	                return lhs() / rhs();
	            case BinaryOperator.Multiply:
	                return lhs() * rhs();
	            case BinaryOperator.Modulo:
	                return lhs() % rhs();
	            case BinaryOperator.Lower:
	                return lhs() < rhs();
	            case BinaryOperator.LowerEquals:
	                return lhs() <= rhs();
	            case BinaryOperator.Bigger:
	                return lhs() > rhs();
	            case BinaryOperator.BiggerEquals:
	                return lhs() >= rhs();
	            default:
	                throw new Error("Unknown operator " + ast.operator);
	        }
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitReadPropExpr = function (ast, ctx) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);
	        result = receiver[ast.name];
	        return result;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitReadKeyExpr = function (ast, ctx) {
	        var /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);
	        var /** @type {?} */ prop = ast.index.visitExpression(this, ctx);
	        return receiver[prop];
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	        return this.visitAllExpressions(ast.entries, ctx);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitLiteralMapExpr = function (ast, ctx) {
	        var _this = this;
	        var /** @type {?} */ result = {};
	        ast.entries.forEach(function (entry) { return ((result))[entry.key] = entry.value.visitExpression(_this, ctx); });
	        return result;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitCommaExpr = function (ast, context) {
	        var /** @type {?} */ values = this.visitAllExpressions(ast.parts, context);
	        return values[values.length - 1];
	    };
	    /**
	     * @param {?} expressions
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitAllExpressions = function (expressions, ctx) {
	        var _this = this;
	        return expressions.map(function (expr) { return expr.visitExpression(_this, ctx); });
	    };
	    /**
	     * @param {?} statements
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitAllStatements = function (statements, ctx) {
	        for (var /** @type {?} */ i = 0; i < statements.length; i++) {
	            var /** @type {?} */ stmt = statements[i];
	            var /** @type {?} */ val = stmt.visitStatement(this, ctx);
	            if (val instanceof ReturnValue) {
	                return val;
	            }
	        }
	        return null;
	    };
	    return StatementInterpreter;
	}());
	/**
	 * @param {?} varNames
	 * @param {?} statements
	 * @param {?} ctx
	 * @param {?} visitor
	 * @return {?}
	 */
	function _declareFn(varNames, statements, ctx, visitor) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
	    };
	}
	var CATCH_ERROR_VAR$2 = 'error';
	var CATCH_STACK_VAR$2 = 'stack';
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @abstract
	 */
	var AbstractJsEmitterVisitor = (function (_super) {
	    __extends(AbstractJsEmitterVisitor, _super);
	    function AbstractJsEmitterVisitor() {
	        return _super.call(this, false) || this;
	    }
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	        var _this = this;
	        ctx.pushClass(stmt);
	        this._visitClassConstructor(stmt, ctx);
	        if (stmt.parent != null) {
	            ctx.print(stmt, stmt.name + ".prototype = Object.create(");
	            stmt.parent.visitExpression(this, ctx);
	            ctx.println(stmt, ".prototype);");
	        }
	        stmt.getters.forEach(function (getter) { return _this._visitClassGetter(stmt, getter, ctx); });
	        stmt.methods.forEach(function (method) { return _this._visitClassMethod(stmt, method, ctx); });
	        ctx.popClass();
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	        ctx.print(stmt, "function " + stmt.name + "(");
	        if (stmt.constructorMethod != null) {
	            this._visitParams(stmt.constructorMethod.params, ctx);
	        }
	        ctx.println(stmt, ") {");
	        ctx.incIndent();
	        if (stmt.constructorMethod != null) {
	            if (stmt.constructorMethod.body.length > 0) {
	                ctx.println(stmt, "var self = this;");
	                this.visitAllStatements(stmt.constructorMethod.body, ctx);
	            }
	        }
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} getter
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype._visitClassGetter = function (stmt, getter, ctx) {
	        ctx.println(stmt, "Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
	        ctx.incIndent();
	        if (getter.body.length > 0) {
	            ctx.println(stmt, "var self = this;");
	            this.visitAllStatements(getter.body, ctx);
	        }
	        ctx.decIndent();
	        ctx.println(stmt, "}});");
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} method
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype._visitClassMethod = function (stmt, method, ctx) {
	        ctx.print(stmt, stmt.name + ".prototype." + method.name + " = function(");
	        this._visitParams(method.params, ctx);
	        ctx.println(stmt, ") {");
	        ctx.incIndent();
	        if (method.body.length > 0) {
	            ctx.println(stmt, "var self = this;");
	            this.visitAllStatements(method.body, ctx);
	        }
	        ctx.decIndent();
	        ctx.println(stmt, "};");
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	        if (ast.builtin === BuiltinVar.This) {
	            ctx.print(ast, 'self');
	        }
	        else if (ast.builtin === BuiltinVar.Super) {
	            throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
	        }
	        else {
	            _super.prototype.visitReadVarExpr.call(this, ast, ctx);
	        }
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	        ctx.print(stmt, "var " + stmt.name + " = ");
	        stmt.value.visitExpression(this, ctx);
	        ctx.println(stmt, ";");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	        ast.value.visitExpression(this, ctx);
	        return null;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	        var /** @type {?} */ fnExpr = expr.fn;
	        if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	            ctx.currentClass.parent.visitExpression(this, ctx);
	            ctx.print(expr, ".call(this");
	            if (expr.args.length > 0) {
	                ctx.print(expr, ", ");
	                this.visitAllExpressions(expr.args, ctx, ',');
	            }
	            ctx.print(expr, ")");
	        }
	        else {
	            _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
	        }
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	        ctx.print(ast, "function(");
	        this._visitParams(ast.params, ctx);
	        ctx.println(ast, ") {");
	        ctx.incIndent();
	        this.visitAllStatements(ast.statements, ctx);
	        ctx.decIndent();
	        ctx.print(ast, "}");
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	        ctx.print(stmt, "function " + stmt.name + "(");
	        this._visitParams(stmt.params, ctx);
	        ctx.println(stmt, ") {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.statements, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	        ctx.println(stmt, "try {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.bodyStmts, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "} catch (" + CATCH_ERROR_VAR$1.name + ") {");
	        ctx.incIndent();
	        var /** @type {?} */ catchStmts = [/** @type {?} */ (CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [
	                StmtModifier.Final
	            ]))].concat(stmt.catchStmts);
	        this.visitAllStatements(catchStmts, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	        return null;
	    };
	    /**
	     * @param {?} params
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	        this.visitAllObjects(function (param) { return ctx.print(null, param.name); }, params, ctx, ',');
	    };
	    /**
	     * @param {?} method
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	        var /** @type {?} */ name;
	        switch (method) {
	            case BuiltinMethod.ConcatArray:
	                name = 'concat';
	                break;
	            case BuiltinMethod.SubscribeObservable:
	                name = 'subscribe';
	                break;
	            case BuiltinMethod.Bind:
	                name = 'bind';
	                break;
	            default:
	                throw new Error("Unknown builtin method: " + method);
	        }
	        return name;
	    };
	    return AbstractJsEmitterVisitor;
	}(AbstractEmitterVisitor));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} sourceUrl
	 * @param {?} ctx
	 * @param {?} vars
	 * @return {?}
	 */
	function evalExpression(sourceUrl$$1, ctx, vars) {
	    var /** @type {?} */ fnBody = ctx.toSource() + "\n//# sourceURL=" + sourceUrl$$1;
	    var /** @type {?} */ fnArgNames = [];
	    var /** @type {?} */ fnArgValues = [];
	    for (var /** @type {?} */ argName in vars) {
	        fnArgNames.push(argName);
	        fnArgValues.push(vars[argName]);
	    }
	    if (_angular_core.isDevMode()) {
	        // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise
	        // E.g. ```
	        // function anonymous(a,b,c
	        // /**/) { ... }```
	        // We don't want to hard code this fact, so we auto detect it via an empty function first.
	        var /** @type {?} */ emptyFn = new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat('return null;'))))().toString();
	        var /** @type {?} */ headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\n').length - 1;
	        fnBody += "\n" + ctx.toSourceMapGenerator(sourceUrl$$1, sourceUrl$$1, headerLines).toJsComment();
	    }
	    return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
	}
	/**
	 * @param {?} sourceUrl
	 * @param {?} statements
	 * @param {?} resultVars
	 * @return {?}
	 */
	function jitStatements(sourceUrl$$1, statements, resultVars) {
	    var /** @type {?} */ converter = new JitEmitterVisitor();
	    var /** @type {?} */ ctx = EmitterVisitorContext.createRoot(resultVars);
	    var /** @type {?} */ returnStmt = new ReturnStatement(literalArr(resultVars.map(function (resultVar) { return variable(resultVar); })));
	    converter.visitAllStatements(statements.concat([returnStmt]), ctx);
	    return evalExpression(sourceUrl$$1, ctx, converter.getArgs());
	}
	var JitEmitterVisitor = (function (_super) {
	    __extends(JitEmitterVisitor, _super);
	    function JitEmitterVisitor() {
	        var _this = _super.apply(this, arguments) || this;
	        _this._evalArgNames = [];
	        _this._evalArgValues = [];
	        return _this;
	    }
	    /**
	     * @return {?}
	     */
	    JitEmitterVisitor.prototype.getArgs = function () {
	        var /** @type {?} */ result = {};
	        for (var /** @type {?} */ i = 0; i < this._evalArgNames.length; i++) {
	            result[this._evalArgNames[i]] = this._evalArgValues[i];
	        }
	        return result;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    JitEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	        var /** @type {?} */ value = ast.value.reference;
	        var /** @type {?} */ id = this._evalArgValues.indexOf(value);
	        if (id === -1) {
	            id = this._evalArgValues.length;
	            this._evalArgValues.push(value);
	            var /** @type {?} */ name = identifierName(ast.value) || 'val';
	            this._evalArgNames.push("jit_" + name + id);
	        }
	        ctx.print(ast, this._evalArgNames[id]);
	        return null;
	    };
	    return JitEmitterVisitor;
	}(AbstractJsEmitterVisitor));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An internal module of the Angular compiler that begins with component types,
	 * extracts templates, and eventually produces a compiled version of the component
	 * ready for linking into an application.
	 *
	 * \@security When compiling templates at runtime, you must ensure that the entire template comes
	 * from a trusted source. Attacker-controlled data introduced by a template could expose your
	 * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).
	 */
	var JitCompiler = (function () {
	    /**
	     * @param {?} _injector
	     * @param {?} _metadataResolver
	     * @param {?} _templateParser
	     * @param {?} _styleCompiler
	     * @param {?} _viewCompiler
	     * @param {?} _ngModuleCompiler
	     * @param {?} _compilerConfig
	     * @param {?} _console
	     */
	    function JitCompiler(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _compilerConfig, _console) {
	        this._injector = _injector;
	        this._metadataResolver = _metadataResolver;
	        this._templateParser = _templateParser;
	        this._styleCompiler = _styleCompiler;
	        this._viewCompiler = _viewCompiler;
	        this._ngModuleCompiler = _ngModuleCompiler;
	        this._compilerConfig = _compilerConfig;
	        this._console = _console;
	        this._compiledTemplateCache = new Map();
	        this._compiledHostTemplateCache = new Map();
	        this._compiledDirectiveWrapperCache = new Map();
	        this._compiledNgModuleCache = new Map();
	        this._sharedStylesheetCount = 0;
	    }
	    Object.defineProperty(JitCompiler.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._injector; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    JitCompiler.prototype.compileModuleSync = function (moduleType) {
	        return this._compileModuleAndComponents(moduleType, true).syncResult;
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    JitCompiler.prototype.compileModuleAsync = function (moduleType) {
	        return this._compileModuleAndComponents(moduleType, false).asyncResult;
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    JitCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	        return this._compileModuleAndAllComponents(moduleType, true).syncResult;
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    JitCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	        return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
	    };
	    /**
	     * @param {?} component
	     * @return {?}
	     */
	    JitCompiler.prototype.getNgContentSelectors = function (component) {
	        this._console.warn('Compiler.getNgContentSelectors is deprecated. Use ComponentFactory.ngContentSelectors instead!');
	        var /** @type {?} */ template = this._compiledTemplateCache.get(component);
	        if (!template) {
	            throw new Error("The component " + _angular_core.ɵstringify(component) + " is not yet compiled!");
	        }
	        return template.compMeta.template.ngContentSelectors;
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @param {?} isSync
	     * @return {?}
	     */
	    JitCompiler.prototype._compileModuleAndComponents = function (moduleType, isSync) {
	        var _this = this;
	        var /** @type {?} */ loadingPromise = this._loadModules(moduleType, isSync);
	        var /** @type {?} */ createResult = function () {
	            _this._compileComponents(moduleType, null);
	            return _this._compileModule(moduleType);
	        };
	        if (isSync) {
	            return new SyncAsyncResult(createResult());
	        }
	        else {
	            return new SyncAsyncResult(null, loadingPromise.then(createResult));
	        }
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @param {?} isSync
	     * @return {?}
	     */
	    JitCompiler.prototype._compileModuleAndAllComponents = function (moduleType, isSync) {
	        var _this = this;
	        var /** @type {?} */ loadingPromise = this._loadModules(moduleType, isSync);
	        var /** @type {?} */ createResult = function () {
	            var /** @type {?} */ componentFactories = [];
	            _this._compileComponents(moduleType, componentFactories);
	            return new _angular_core.ModuleWithComponentFactories(_this._compileModule(moduleType), componentFactories);
	        };
	        if (isSync) {
	            return new SyncAsyncResult(createResult());
	        }
	        else {
	            return new SyncAsyncResult(null, loadingPromise.then(createResult));
	        }
	    };
	    /**
	     * @param {?} mainModule
	     * @param {?} isSync
	     * @return {?}
	     */
	    JitCompiler.prototype._loadModules = function (mainModule, isSync) {
	        var _this = this;
	        var /** @type {?} */ loadingPromises = [];
	        var /** @type {?} */ ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
	        // Note: the loadingPromise for a module only includes the loading of the exported directives
	        // of imported modules.
	        // However, for runtime compilation, we want to transitively compile all modules,
	        // so we also need to call loadNgModuleDirectiveAndPipeMetadata for all nested modules.
	        ngModule.transitiveModule.modules.forEach(function (localModuleMeta) {
	            loadingPromises.push(_this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(localModuleMeta.reference, isSync));
	        });
	        return Promise.all(loadingPromises);
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    JitCompiler.prototype._compileModule = function (moduleType) {
	        var _this = this;
	        var /** @type {?} */ ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
	        if (!ngModuleFactory) {
	            var /** @type {?} */ moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);
	            // Always provide a bound Compiler
	            var /** @type {?} */ extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, { useFactory: function () { return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference); } }))];
	            var /** @type {?} */ compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
	            if (!this._compilerConfig.useJit) {
	                ngModuleFactory =
	                    interpretStatements(compileResult.statements, [compileResult.ngModuleFactoryVar])[0];
	            }
	            else {
	                ngModuleFactory = jitStatements(ngModuleJitUrl(moduleMeta_1), compileResult.statements, [compileResult.ngModuleFactoryVar])[0];
	            }
	            this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);
	        }
	        return ngModuleFactory;
	    };
	    /**
	     * \@internal
	     * @param {?} mainModule
	     * @param {?} allComponentFactories
	     * @return {?}
	     */
	    JitCompiler.prototype._compileComponents = function (mainModule, allComponentFactories) {
	        var _this = this;
	        var /** @type {?} */ ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
	        var /** @type {?} */ moduleByDirective = new Map();
	        var /** @type {?} */ templates = new Set();
	        ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
	            var /** @type {?} */ localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
	            localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	                moduleByDirective.set(dirIdentifier.reference, localModuleMeta);
	                var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
	                if (dirMeta.isComponent) {
	                    templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
	                    if (allComponentFactories) {
	                        var /** @type {?} */ template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);
	                        templates.add(template);
	                        allComponentFactories.push(/** @type {?} */ (dirMeta.componentFactory));
	                    }
	                }
	            });
	        });
	        ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
	            var /** @type {?} */ localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
	            localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	                var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
	                if (dirMeta.isComponent) {
	                    dirMeta.entryComponents.forEach(function (entryComponentType) {
	                        var /** @type {?} */ moduleMeta = moduleByDirective.get(entryComponentType.componentType);
	                        templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
	                    });
	                }
	            });
	            localModuleMeta.entryComponents.forEach(function (entryComponentType) {
	                var /** @type {?} */ moduleMeta = moduleByDirective.get(entryComponentType.componentType);
	                templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
	            });
	        });
	        templates.forEach(function (template) { return _this._compileTemplate(template); });
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    JitCompiler.prototype.clearCacheFor = function (type) {
	        this._compiledNgModuleCache.delete(type);
	        this._metadataResolver.clearCacheFor(type);
	        this._compiledHostTemplateCache.delete(type);
	        var /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(type);
	        if (compiledTemplate) {
	            this._compiledTemplateCache.delete(type);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    JitCompiler.prototype.clearCache = function () {
	        this._metadataResolver.clearCache();
	        this._compiledTemplateCache.clear();
	        this._compiledHostTemplateCache.clear();
	        this._compiledNgModuleCache.clear();
	    };
	    /**
	     * @param {?} compType
	     * @param {?} ngModule
	     * @return {?}
	     */
	    JitCompiler.prototype._createCompiledHostTemplate = function (compType, ngModule) {
	        if (!ngModule) {
	            throw new Error("Component " + _angular_core.ɵstringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");
	        }
	        var /** @type {?} */ compiledTemplate = this._compiledHostTemplateCache.get(compType);
	        if (!compiledTemplate) {
	            var /** @type {?} */ compMeta = this._metadataResolver.getDirectiveMetadata(compType);
	            assertComponent(compMeta);
	            var /** @type {?} */ componentFactory = (compMeta.componentFactory);
	            var /** @type {?} */ hostClass = this._metadataResolver.getHostComponentType(compType);
	            var /** @type {?} */ hostMeta = createHostComponentMeta(hostClass, compMeta, /** @type {?} */ (_angular_core.ɵgetComponentViewDefinitionFactory(componentFactory)));
	            compiledTemplate =
	                new CompiledTemplate(true, compMeta.type, hostMeta, ngModule, [compMeta.type]);
	            this._compiledHostTemplateCache.set(compType, compiledTemplate);
	        }
	        return compiledTemplate;
	    };
	    /**
	     * @param {?} compMeta
	     * @param {?} ngModule
	     * @return {?}
	     */
	    JitCompiler.prototype._createCompiledTemplate = function (compMeta, ngModule) {
	        var /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
	        if (!compiledTemplate) {
	            assertComponent(compMeta);
	            compiledTemplate = new CompiledTemplate(false, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);
	            this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
	        }
	        return compiledTemplate;
	    };
	    /**
	     * @param {?} template
	     * @return {?}
	     */
	    JitCompiler.prototype._compileTemplate = function (template) {
	        var _this = this;
	        if (template.isCompiled) {
	            return;
	        }
	        var /** @type {?} */ compMeta = template.compMeta;
	        var /** @type {?} */ externalStylesheetsByModuleUrl = new Map();
	        var /** @type {?} */ stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
	        stylesCompileResult.externalStylesheets.forEach(function (r) { externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r); });
	        this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
	        var /** @type {?} */ directives = template.directives.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });
	        var /** @type {?} */ pipes = template.ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });
	        var _a = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, template.ngModule.schemas, templateSourceUrl(template.ngModule.type, template.compMeta, template.compMeta.template)), parsedTemplate = _a.template, usedPipes = _a.pipes;
	        var /** @type {?} */ compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), usedPipes);
	        var /** @type {?} */ statements = stylesCompileResult.componentStylesheet.statements.concat(compileResult.statements);
	        var /** @type {?} */ viewClassAndRendererTypeVars = compMeta.isHost ?
	            [compileResult.viewClassVar] :
	            [compileResult.viewClassVar, compileResult.rendererTypeVar];
	        var /** @type {?} */ viewClass;
	        var /** @type {?} */ rendererType;
	        if (!this._compilerConfig.useJit) {
	            _b = interpretStatements(statements, viewClassAndRendererTypeVars), viewClass = _b[0], rendererType = _b[1];
	        }
	        else {
	            _c = jitStatements(templateJitUrl(template.ngModule.type, template.compMeta), statements, viewClassAndRendererTypeVars), viewClass = _c[0], rendererType = _c[1];
	        }
	        template.compiled(viewClass, rendererType);
	        var _b, _c;
	    };
	    /**
	     * @param {?} result
	     * @param {?} externalStylesheetsByModuleUrl
	     * @return {?}
	     */
	    JitCompiler.prototype._resolveStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	        var _this = this;
	        result.dependencies.forEach(function (dep, i) {
	            var /** @type {?} */ nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
	            var /** @type {?} */ nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
	            dep.valuePlaceholder.reference = nestedStylesArr;
	        });
	    };
	    /**
	     * @param {?} result
	     * @param {?} externalStylesheetsByModuleUrl
	     * @return {?}
	     */
	    JitCompiler.prototype._resolveAndEvalStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	        this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
	        if (!this._compilerConfig.useJit) {
	            return interpretStatements(result.statements, [result.stylesVar])[0];
	        }
	        else {
	            return jitStatements(sharedStylesheetJitUrl(result.meta, this._sharedStylesheetCount++), result.statements, [result.stylesVar])[0];
	        }
	    };
	    return JitCompiler;
	}());
	JitCompiler.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	JitCompiler.ctorParameters = function () { return [
	    { type: _angular_core.Injector, },
	    { type: CompileMetadataResolver, },
	    { type: TemplateParser, },
	    { type: StyleCompiler, },
	    { type: ViewCompiler, },
	    { type: NgModuleCompiler, },
	    { type: CompilerConfig, },
	    { type: _angular_core.ɵConsole, },
	]; };
	var CompiledTemplate = (function () {
	    /**
	     * @param {?} isHost
	     * @param {?} compType
	     * @param {?} compMeta
	     * @param {?} ngModule
	     * @param {?} directives
	     */
	    function CompiledTemplate(isHost, compType, compMeta, ngModule, directives) {
	        this.isHost = isHost;
	        this.compType = compType;
	        this.compMeta = compMeta;
	        this.ngModule = ngModule;
	        this.directives = directives;
	        this._viewClass = null;
	        this.isCompiled = false;
	    }
	    /**
	     * @param {?} viewClass
	     * @param {?} rendererType
	     * @return {?}
	     */
	    CompiledTemplate.prototype.compiled = function (viewClass, rendererType) {
	        this._viewClass = viewClass;
	        ((this.compMeta.componentViewType)).setDelegate(viewClass);
	        for (var /** @type {?} */ prop in rendererType) {
	            ((this.compMeta.rendererType))[prop] = rendererType[prop];
	        }
	        this.isCompiled = true;
	    };
	    return CompiledTemplate;
	}());
	/**
	 * @param {?} meta
	 * @return {?}
	 */
	function assertComponent(meta) {
	    if (!meta.isComponent) {
	        throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
	    }
	}
	/**
	 * Implements `Compiler` by delegating to the JitCompiler using a known module.
	 */
	var ModuleBoundCompiler = (function () {
	    /**
	     * @param {?} _delegate
	     * @param {?} _ngModule
	     */
	    function ModuleBoundCompiler(_delegate, _ngModule) {
	        this._delegate = _delegate;
	        this._ngModule = _ngModule;
	    }
	    Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._delegate.injector; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    ModuleBoundCompiler.prototype.compileModuleSync = function (moduleType) {
	        return this._delegate.compileModuleSync(moduleType);
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    ModuleBoundCompiler.prototype.compileModuleAsync = function (moduleType) {
	        return this._delegate.compileModuleAsync(moduleType);
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	        return this._delegate.compileModuleAndAllComponentsSync(moduleType);
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	        return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
	    };
	    /**
	     * @param {?} component
	     * @return {?}
	     */
	    ModuleBoundCompiler.prototype.getNgContentSelectors = function (component) {
	        return this._delegate.getNgContentSelectors(component);
	    };
	    /**
	     * Clears all caches
	     * @return {?}
	     */
	    ModuleBoundCompiler.prototype.clearCache = function () { this._delegate.clearCache(); };
	    /**
	     * Clears the cache for the given component/ngModule.
	     * @param {?} type
	     * @return {?}
	     */
	    ModuleBoundCompiler.prototype.clearCacheFor = function (type) { this._delegate.clearCacheFor(type); };
	    return ModuleBoundCompiler;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A container for message extracted from the templates.
	 */
	var MessageBundle = (function () {
	    /**
	     * @param {?} _htmlParser
	     * @param {?} _implicitTags
	     * @param {?} _implicitAttrs
	     * @param {?=} _locale
	     */
	    function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs, _locale) {
	        if (_locale === void 0) { _locale = null; }
	        this._htmlParser = _htmlParser;
	        this._implicitTags = _implicitTags;
	        this._implicitAttrs = _implicitAttrs;
	        this._locale = _locale;
	        this._messages = [];
	    }
	    /**
	     * @param {?} html
	     * @param {?} url
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    MessageBundle.prototype.updateFromTemplate = function (html, url, interpolationConfig) {
	        var /** @type {?} */ htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
	        if (htmlParserResult.errors.length) {
	            return htmlParserResult.errors;
	        }
	        var /** @type {?} */ i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
	        if (i18nParserResult.errors.length) {
	            return i18nParserResult.errors;
	        }
	        (_a = this._messages).push.apply(_a, i18nParserResult.messages);
	        var _a;
	    };
	    /**
	     * @return {?}
	     */
	    MessageBundle.prototype.getMessages = function () { return this._messages; };
	    /**
	     * @param {?} serializer
	     * @return {?}
	     */
	    MessageBundle.prototype.write = function (serializer) {
	        var /** @type {?} */ messages = {};
	        var /** @type {?} */ mapperVisitor = new MapPlaceholderNames();
	        // Deduplicate messages based on their ID
	        this._messages.forEach(function (message) {
	            var /** @type {?} */ id = serializer.digest(message);
	            if (!messages.hasOwnProperty(id)) {
	                messages[id] = message;
	            }
	        });
	        // Transform placeholder names using the serializer mapping
	        var /** @type {?} */ msgList = Object.keys(messages).map(function (id) {
	            var /** @type {?} */ mapper = serializer.createNameMapper(messages[id]);
	            var /** @type {?} */ src = messages[id];
	            var /** @type {?} */ nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;
	            return new Message(nodes, {}, {}, src.meaning, src.description, id);
	        });
	        return serializer.write(msgList, this._locale);
	    };
	    return MessageBundle;
	}());
	var MapPlaceholderNames = (function (_super) {
	    __extends(MapPlaceholderNames, _super);
	    function MapPlaceholderNames() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} nodes
	     * @param {?} mapper
	     * @return {?}
	     */
	    MapPlaceholderNames.prototype.convert = function (nodes, mapper) {
	        var _this = this;
	        return mapper ? nodes.map(function (n) { return n.visit(_this, mapper); }) : nodes;
	    };
	    /**
	     * @param {?} ph
	     * @param {?} mapper
	     * @return {?}
	     */
	    MapPlaceholderNames.prototype.visitTagPlaceholder = function (ph, mapper) {
	        var _this = this;
	        var /** @type {?} */ startName = mapper.toPublicName(ph.startName);
	        var /** @type {?} */ closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;
	        var /** @type {?} */ children = ph.children.map(function (n) { return n.visit(_this, mapper); });
	        return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan);
	    };
	    /**
	     * @param {?} ph
	     * @param {?} mapper
	     * @return {?}
	     */
	    MapPlaceholderNames.prototype.visitPlaceholder = function (ph, mapper) {
	        return new Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
	    };
	    /**
	     * @param {?} ph
	     * @param {?} mapper
	     * @return {?}
	     */
	    MapPlaceholderNames.prototype.visitIcuPlaceholder = function (ph, mapper) {
	        return new IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
	    };
	    return MapPlaceholderNames;
	}(CloneVisitor));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Extract i18n messages from source code
	 */
	var Extractor = (function () {
	    /**
	     * @param {?} host
	     * @param {?} staticSymbolResolver
	     * @param {?} messageBundle
	     * @param {?} metadataResolver
	     */
	    function Extractor(host, staticSymbolResolver, messageBundle, metadataResolver) {
	        this.host = host;
	        this.staticSymbolResolver = staticSymbolResolver;
	        this.messageBundle = messageBundle;
	        this.metadataResolver = metadataResolver;
	    }
	    /**
	     * @param {?} rootFiles
	     * @return {?}
	     */
	    Extractor.prototype.extract = function (rootFiles) {
	        var _this = this;
	        var /** @type {?} */ programSymbols = extractProgramSymbols(this.staticSymbolResolver, rootFiles, this.host);
	        var _a = analyzeAndValidateNgModules(programSymbols, this.host, this.metadataResolver), files = _a.files, ngModules = _a.ngModules;
	        return Promise
	            .all(ngModules.map(function (ngModule) { return _this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false); }))
	            .then(function () {
	            var /** @type {?} */ errors = [];
	            files.forEach(function (file) {
	                var /** @type {?} */ compMetas = [];
	                file.directives.forEach(function (directiveType) {
	                    var /** @type {?} */ dirMeta = _this.metadataResolver.getDirectiveMetadata(directiveType);
	                    if (dirMeta && dirMeta.isComponent) {
	                        compMetas.push(dirMeta);
	                    }
	                });
	                compMetas.forEach(function (compMeta) {
	                    var /** @type {?} */ html = compMeta.template.template;
	                    var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);
	                    errors.push.apply(errors, _this.messageBundle.updateFromTemplate(html, file.srcUrl, interpolationConfig));
	                });
	            });
	            if (errors.length) {
	                throw new Error(errors.map(function (e) { return e.toString(); }).join('\n'));
	            }
	            return _this.messageBundle;
	        });
	    };
	    /**
	     * @param {?} host
	     * @param {?} locale
	     * @return {?}
	     */
	    Extractor.create = function (host, locale) {
	        var /** @type {?} */ htmlParser = new I18NHtmlParser(new HtmlParser());
	        var /** @type {?} */ urlResolver = createOfflineCompileUrlResolver();
	        var /** @type {?} */ symbolCache = new StaticSymbolCache();
	        var /** @type {?} */ summaryResolver = new AotSummaryResolver(host, symbolCache);
	        var /** @type {?} */ staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);
	        var /** @type {?} */ staticReflector = new StaticReflector(staticSymbolResolver);
	        StaticAndDynamicReflectionCapabilities.install(staticReflector);
	        var /** @type {?} */ config = new CompilerConfig({ defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated, useJit: false });
	        var /** @type {?} */ normalizer = new DirectiveNormalizer({ get: function (url) { return host.loadResource(url); } }, urlResolver, htmlParser, config);
	        var /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();
	        var /** @type {?} */ resolver = new CompileMetadataResolver(config, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, new _angular_core.ɵConsole(), symbolCache, staticReflector);
	        // TODO(vicb): implicit tags & attributes
	        var /** @type {?} */ messageBundle = new MessageBundle(htmlParser, [], {}, locale);
	        var /** @type {?} */ extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);
	        return { extractor: extractor, staticReflector: staticReflector };
	    };
	    return Extractor;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _NO_RESOURCE_LOADER = {
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    get: function (url) {
	        throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + "\"");
	    }
	};
	var baseHtmlParser = new _angular_core.InjectionToken('HtmlParser');
	/**
	 * A set of providers that provide `JitCompiler` and its dependencies to use for
	 * template compilation.
	 */
	var COMPILER_PROVIDERS = [
	    { provide: _angular_core.ɵReflector, useValue: _angular_core.ɵreflector },
	    { provide: _angular_core.ɵReflectorReader, useExisting: _angular_core.ɵReflector },
	    { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER },
	    SummaryResolver,
	    _angular_core.ɵConsole,
	    Lexer,
	    Parser,
	    {
	        provide: baseHtmlParser,
	        useClass: HtmlParser,
	    },
	    {
	        provide: I18NHtmlParser,
	        useFactory: function (parser, translations, format, config, console) { return new I18NHtmlParser(parser, translations, format, config.missingTranslation, console); },
	        deps: [
	            baseHtmlParser,
	            [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS)],
	            [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT)],
	            [CompilerConfig],
	            [_angular_core.ɵConsole],
	        ]
	    },
	    {
	        provide: HtmlParser,
	        useExisting: I18NHtmlParser,
	    },
	    TemplateParser,
	    DirectiveNormalizer,
	    CompileMetadataResolver,
	    DEFAULT_PACKAGE_URL_PROVIDER,
	    StyleCompiler,
	    ViewCompiler,
	    NgModuleCompiler,
	    { provide: CompilerConfig, useValue: new CompilerConfig() },
	    JitCompiler,
	    { provide: _angular_core.Compiler, useExisting: JitCompiler },
	    DomElementSchemaRegistry,
	    { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },
	    UrlResolver,
	    DirectiveResolver,
	    PipeResolver,
	    NgModuleResolver,
	];
	var JitCompilerFactory = (function () {
	    /**
	     * @param {?} defaultOptions
	     */
	    function JitCompilerFactory(defaultOptions) {
	        var compilerOptions = {
	            useDebug: _angular_core.isDevMode(),
	            useJit: true,
	            defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,
	            missingTranslation: _angular_core.MissingTranslationStrategy.Warning,
	            enableLegacyTemplate: true,
	        };
	        this._defaultOptions = [compilerOptions].concat(defaultOptions);
	    }
	    /**
	     * @param {?=} options
	     * @return {?}
	     */
	    JitCompilerFactory.prototype.createCompiler = function (options) {
	        if (options === void 0) { options = []; }
	        var /** @type {?} */ opts = _mergeOptions(this._defaultOptions.concat(options));
	        var /** @type {?} */ injector = _angular_core.ReflectiveInjector.resolveAndCreate([
	            COMPILER_PROVIDERS, {
	                provide: CompilerConfig,
	                useFactory: function () {
	                    return new CompilerConfig({
	                        // let explicit values from the compiler options overwrite options
	                        // from the app providers
	                        useJit: opts.useJit,
	                        // let explicit values from the compiler options overwrite options
	                        // from the app providers
	                        defaultEncapsulation: opts.defaultEncapsulation,
	                        missingTranslation: opts.missingTranslation,
	                        enableLegacyTemplate: opts.enableLegacyTemplate,
	                    });
	                },
	                deps: []
	            },
	            opts.providers
	        ]);
	        return injector.get(_angular_core.Compiler);
	    };
	    return JitCompilerFactory;
	}());
	JitCompilerFactory.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	JitCompilerFactory.ctorParameters = function () { return [
	    { type: Array, decorators: [{ type: _angular_core.Inject, args: [_angular_core.COMPILER_OPTIONS,] },] },
	]; };
	/**
	 * @return {?}
	 */
	function _initReflector() {
	    _angular_core.ɵreflector.reflectionCapabilities = new _angular_core.ɵReflectionCapabilities();
	}
	/**
	 * A platform that included corePlatform and the compiler.
	 *
	 * \@experimental
	 */
	var platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, 'coreDynamic', [
	    { provide: _angular_core.COMPILER_OPTIONS, useValue: {}, multi: true },
	    { provide: _angular_core.CompilerFactory, useClass: JitCompilerFactory },
	    { provide: _angular_core.PLATFORM_INITIALIZER, useValue: _initReflector, multi: true },
	]);
	/**
	 * @param {?} optionsArr
	 * @return {?}
	 */
	function _mergeOptions(optionsArr) {
	    return {
	        useJit: _lastDefined(optionsArr.map(function (options) { return options.useJit; })),
	        defaultEncapsulation: _lastDefined(optionsArr.map(function (options) { return options.defaultEncapsulation; })),
	        providers: _mergeArrays(optionsArr.map(function (options) { return options.providers; })),
	        missingTranslation: _lastDefined(optionsArr.map(function (options) { return options.missingTranslation; })),
	    };
	}
	/**
	 * @template T
	 * @param {?} args
	 * @return {?}
	 */
	function _lastDefined(args) {
	    for (var /** @type {?} */ i = args.length - 1; i >= 0; i--) {
	        if (args[i] !== undefined) {
	            return args[i];
	        }
	    }
	    return undefined;
	}
	/**
	 * @param {?} parts
	 * @return {?}
	 */
	function _mergeArrays(parts) {
	    var /** @type {?} */ result = [];
	    parts.forEach(function (part) { return part && result.push.apply(result, part); });
	    return result;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Interface that defines how import statements should be generated.
	 * @abstract
	 */
	var ImportResolver = (function () {
	    function ImportResolver() {
	    }
	    /**
	     * Converts a file path to a module name that can be used as an `import.
	     * I.e. `path/to/importedFile.ts` should be imported by `path/to/containingFile.ts`.
	     * @abstract
	     * @param {?} importedFilePath
	     * @param {?} containingFilePath
	     * @return {?}
	     */
	    ImportResolver.prototype.fileNameToModuleName = function (importedFilePath, containingFilePath) { };
	    /**
	     * Converts the given StaticSymbol into another StaticSymbol that should be used
	     * to generate the import from.
	     * @abstract
	     * @param {?} symbol
	     * @return {?}
	     */
	    ImportResolver.prototype.getImportAs = function (symbol) { };
	    /**
	     * Determine the arity of a type.
	     * @abstract
	     * @param {?} symbol
	     * @return {?}
	     */
	    ImportResolver.prototype.getTypeArity = function (symbol) { };
	    return ImportResolver;
	}());

	exports.VERSION = VERSION;
	exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS;
	exports.CompilerConfig = CompilerConfig;
	exports.JitCompiler = JitCompiler;
	exports.DirectiveResolver = DirectiveResolver;
	exports.PipeResolver = PipeResolver;
	exports.NgModuleResolver = NgModuleResolver;
	exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG;
	exports.InterpolationConfig = InterpolationConfig;
	exports.NgModuleCompiler = NgModuleCompiler;
	exports.ViewCompiler = ViewCompiler;
	exports.isSyntaxError = isSyntaxError;
	exports.syntaxError = syntaxError;
	exports.TextAst = TextAst;
	exports.BoundTextAst = BoundTextAst;
	exports.AttrAst = AttrAst;
	exports.BoundElementPropertyAst = BoundElementPropertyAst;
	exports.BoundEventAst = BoundEventAst;
	exports.ReferenceAst = ReferenceAst;
	exports.VariableAst = VariableAst;
	exports.ElementAst = ElementAst;
	exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
	exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
	exports.DirectiveAst = DirectiveAst;
	exports.ProviderAst = ProviderAst;
	exports.ProviderAstType = ProviderAstType;
	exports.NgContentAst = NgContentAst;
	exports.PropertyBindingType = PropertyBindingType;
	exports.templateVisitAll = templateVisitAll;
	exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata;
	exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata;
	exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata;
	exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata;
	exports.CompileAnimationMetadata = CompileAnimationMetadata;
	exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata;
	exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata;
	exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata;
	exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata;
	exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata;
	exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata;
	exports.identifierName = identifierName;
	exports.identifierModuleUrl = identifierModuleUrl;
	exports.viewClassName = viewClassName;
	exports.rendererTypeName = rendererTypeName;
	exports.hostViewClassName = hostViewClassName;
	exports.dirWrapperClassName = dirWrapperClassName;
	exports.componentFactoryName = componentFactoryName;
	exports.CompileSummaryKind = CompileSummaryKind;
	exports.tokenName = tokenName;
	exports.tokenReference = tokenReference;
	exports.CompileStylesheetMetadata = CompileStylesheetMetadata;
	exports.CompileTemplateMetadata = CompileTemplateMetadata;
	exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
	exports.createHostComponentMeta = createHostComponentMeta;
	exports.CompilePipeMetadata = CompilePipeMetadata;
	exports.CompileNgModuleMetadata = CompileNgModuleMetadata;
	exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata;
	exports.ProviderMeta = ProviderMeta;
	exports.flatten = flatten;
	exports.sourceUrl = sourceUrl;
	exports.templateSourceUrl = templateSourceUrl;
	exports.sharedStylesheetJitUrl = sharedStylesheetJitUrl;
	exports.ngModuleJitUrl = ngModuleJitUrl;
	exports.templateJitUrl = templateJitUrl;
	exports.createAotCompiler = createAotCompiler;
	exports.AotCompiler = AotCompiler;
	exports.analyzeNgModules = analyzeNgModules;
	exports.analyzeAndValidateNgModules = analyzeAndValidateNgModules;
	exports.extractProgramSymbols = extractProgramSymbols;
	exports.GeneratedFile = GeneratedFile;
	exports.StaticReflector = StaticReflector;
	exports.StaticAndDynamicReflectionCapabilities = StaticAndDynamicReflectionCapabilities;
	exports.StaticSymbol = StaticSymbol;
	exports.StaticSymbolCache = StaticSymbolCache;
	exports.ResolvedStaticSymbol = ResolvedStaticSymbol;
	exports.StaticSymbolResolver = StaticSymbolResolver;
	exports.unescapeIdentifier = unescapeIdentifier;
	exports.AotSummaryResolver = AotSummaryResolver;
	exports.SummaryResolver = SummaryResolver;
	exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS;
	exports.JitCompilerFactory = JitCompilerFactory;
	exports.platformCoreDynamic = platformCoreDynamic;
	exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix;
	exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
	exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER;
	exports.UrlResolver = UrlResolver;
	exports.getUrlScheme = getUrlScheme;
	exports.ResourceLoader = ResourceLoader;
	exports.ElementSchemaRegistry = ElementSchemaRegistry;
	exports.Extractor = Extractor;
	exports.I18NHtmlParser = I18NHtmlParser;
	exports.MessageBundle = MessageBundle;
	exports.Serializer = Serializer;
	exports.Xliff = Xliff;
	exports.Xmb = Xmb;
	exports.Xtb = Xtb;
	exports.DirectiveNormalizer = DirectiveNormalizer;
	exports.ParserError = ParserError;
	exports.ParseSpan = ParseSpan;
	exports.AST = AST;
	exports.Quote = Quote;
	exports.EmptyExpr = EmptyExpr;
	exports.ImplicitReceiver = ImplicitReceiver;
	exports.Chain = Chain;
	exports.Conditional = Conditional;
	exports.PropertyRead = PropertyRead;
	exports.PropertyWrite = PropertyWrite;
	exports.SafePropertyRead = SafePropertyRead;
	exports.KeyedRead = KeyedRead;
	exports.KeyedWrite = KeyedWrite;
	exports.BindingPipe = BindingPipe;
	exports.LiteralPrimitive = LiteralPrimitive;
	exports.LiteralArray = LiteralArray;
	exports.LiteralMap = LiteralMap;
	exports.Interpolation = Interpolation;
	exports.Binary = Binary;
	exports.PrefixNot = PrefixNot;
	exports.MethodCall = MethodCall;
	exports.SafeMethodCall = SafeMethodCall;
	exports.FunctionCall = FunctionCall;
	exports.ASTWithSource = ASTWithSource;
	exports.TemplateBinding = TemplateBinding;
	exports.RecursiveAstVisitor = RecursiveAstVisitor;
	exports.AstTransformer = AstTransformer;
	exports.TokenType = TokenType;
	exports.Lexer = Lexer;
	exports.Token = Token;
	exports.EOF = EOF;
	exports.isIdentifier = isIdentifier;
	exports.isQuote = isQuote;
	exports.SplitInterpolation = SplitInterpolation;
	exports.TemplateBindingParseResult = TemplateBindingParseResult;
	exports.Parser = Parser;
	exports._ParseAST = _ParseAST;
	exports.ERROR_COLLECTOR_TOKEN = ERROR_COLLECTOR_TOKEN;
	exports.CompileMetadataResolver = CompileMetadataResolver;
	exports.componentModuleUrl = componentModuleUrl;
	exports.Text = Text;
	exports.Expansion = Expansion;
	exports.ExpansionCase = ExpansionCase;
	exports.Attribute = Attribute$1;
	exports.Element = Element;
	exports.Comment = Comment;
	exports.visitAll = visitAll;
	exports.ParseTreeResult = ParseTreeResult;
	exports.TreeError = TreeError;
	exports.HtmlParser = HtmlParser;
	exports.HtmlTagDefinition = HtmlTagDefinition;
	exports.getHtmlTagDefinition = getHtmlTagDefinition;
	exports.TagContentType = TagContentType;
	exports.splitNsName = splitNsName;
	exports.getNsPrefix = getNsPrefix;
	exports.mergeNsAndName = mergeNsAndName;
	exports.NAMED_ENTITIES = NAMED_ENTITIES;
	exports.ImportResolver = ImportResolver;
	exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript;
	exports.TypeScriptEmitter = TypeScriptEmitter;
	exports.ParseLocation = ParseLocation;
	exports.ParseSourceFile = ParseSourceFile;
	exports.ParseSourceSpan = ParseSourceSpan;
	exports.ParseErrorLevel = ParseErrorLevel;
	exports.ParseError = ParseError;
	exports.typeSourceSpan = typeSourceSpan;
	exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
	exports.CssSelector = CssSelector;
	exports.SelectorMatcher = SelectorMatcher;
	exports.SelectorListContext = SelectorListContext;
	exports.SelectorContext = SelectorContext;
	exports.StylesCompileDependency = StylesCompileDependency;
	exports.StylesCompileResult = StylesCompileResult;
	exports.CompiledStylesheet = CompiledStylesheet;
	exports.StyleCompiler = StyleCompiler;
	exports.TemplateParseError = TemplateParseError;
	exports.TemplateParseResult = TemplateParseResult;
	exports.TemplateParser = TemplateParser;
	exports.splitClasses = splitClasses;
	exports.createElementCssSelector = createElementCssSelector;
	exports.removeSummaryDuplicates = removeSummaryDuplicates;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));
	//# sourceMappingURL=compiler.umd.js.map


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _d = __webpack_require__(245);

	var d3 = _interopRequireWildcard(_d);

	var _CollarView = __webpack_require__(5);

	var _CollarView2 = _interopRequireDefault(_CollarView);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	module.exports = function (selector, name) {
	  var counter = new _CollarView2.default(selector, name);

	  var viewState = { value: [0, 1, 6, 1, 3, 7, 8, 9] };

	  var margin = { top: 20, right: 20, bottom: 30, left: 50 };
	  var width = 800;
	  var height = 300;

	  var viewUpdater = function viewUpdater(state, done) {
	    // update state
	    viewState.value.push(state.count);

	    var chart = d3.select(selector).attr('width', width).attr('height', height);

	    var x = d3.scaleLinear().domain([0, viewState.value.length]).range([0, width]);
	    var y = d3.scaleLinear().domain([d3.min(viewState.value), d3.max(viewState.value)]).range([height, 0]);

	    var valueline = d3.line().x(function (d, i) {
	      return x(i);
	    }).y(function (d, i) {
	      return y(d);
	    });

	    x.domain(d3.extent(viewState.value, function (d, i) {
	      return i;
	    }));
	    y.domain([d3.min(viewState.value, function (d) {
	      return d;
	    }), d3.max(viewState.value, function (d) {
	      return d;
	    })]);

	    chart.selectAll("path.line").remove();

	    chart.append("path").data([viewState.value]).attr("class", "line").attr("d", valueline);

	    done();
	  };

	  counter.setRenderer(viewUpdater);
	  counter.setUpdater(viewUpdater);

	  return counter;
	};

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org Version 4.7.4. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var version = "4.7.4";

	var ascending = function(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	};

	var bisector = function(compare) {
	  if (compare.length === 1) compare = ascendingComparator(compare);
	  return {
	    left: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) < 0) lo = mid + 1;
	        else hi = mid;
	      }
	      return lo;
	    },
	    right: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) > 0) hi = mid;
	        else lo = mid + 1;
	      }
	      return lo;
	    }
	  };
	};

	function ascendingComparator(f) {
	  return function(d, x) {
	    return ascending(f(d), x);
	  };
	}

	var ascendingBisect = bisector(ascending);
	var bisectRight = ascendingBisect.right;
	var bisectLeft = ascendingBisect.left;

	var pairs = function(array, f) {
	  if (f == null) f = pair;
	  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
	  while (i < n) pairs[i] = f(p, p = array[++i]);
	  return pairs;
	};

	function pair(a, b) {
	  return [a, b];
	}

	var cross = function(a, b, f) {
	  var na = a.length, nb = b.length, c = new Array(na * nb), ia, ib, ic, va;
	  if (f == null) f = pair;
	  for (ia = ic = 0; ia < na; ++ia) for (va = a[ia], ib = 0; ib < nb; ++ib, ++ic) c[ic] = f(va, b[ib]);
	  return c;
	};

	var descending = function(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	};

	var number = function(x) {
	  return x === null ? NaN : +x;
	};

	var variance = function(array, f) {
	  var n = array.length,
	      m = 0,
	      a,
	      d,
	      s = 0,
	      i = -1,
	      j = 0;

	  if (f == null) {
	    while (++i < n) {
	      if (!isNaN(a = number(array[i]))) {
	        d = a - m;
	        m += d / ++j;
	        s += d * (a - m);
	      }
	    }
	  }

	  else {
	    while (++i < n) {
	      if (!isNaN(a = number(f(array[i], i, array)))) {
	        d = a - m;
	        m += d / ++j;
	        s += d * (a - m);
	      }
	    }
	  }

	  if (j > 1) return s / (j - 1);
	};

	var deviation = function(array, f) {
	  var v = variance(array, f);
	  return v ? Math.sqrt(v) : v;
	};

	var extent = function(array, f) {
	  var i = -1,
	      n = array.length,
	      a,
	      b,
	      c;

	  if (f == null) {
	    while (++i < n) if ((b = array[i]) != null && b >= b) { a = c = b; break; }
	    while (++i < n) if ((b = array[i]) != null) {
	      if (a > b) a = b;
	      if (c < b) c = b;
	    }
	  }

	  else {
	    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = c = b; break; }
	    while (++i < n) if ((b = f(array[i], i, array)) != null) {
	      if (a > b) a = b;
	      if (c < b) c = b;
	    }
	  }

	  return [a, c];
	};

	var array = Array.prototype;

	var slice = array.slice;
	var map = array.map;

	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};

	var identity = function(x) {
	  return x;
	};

	var sequence = function(start, stop, step) {
	  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

	  var i = -1,
	      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
	      range = new Array(n);

	  while (++i < n) {
	    range[i] = start + i * step;
	  }

	  return range;
	};

	var e10 = Math.sqrt(50);
	var e5 = Math.sqrt(10);
	var e2 = Math.sqrt(2);

	var ticks = function(start, stop, count) {
	  var step = tickStep(start, stop, count);
	  return sequence(
	    Math.ceil(start / step) * step,
	    Math.floor(stop / step) * step + step / 2, // inclusive
	    step
	  );
	};

	function tickStep(start, stop, count) {
	  var step0 = Math.abs(stop - start) / Math.max(0, count),
	      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
	      error = step0 / step1;
	  if (error >= e10) step1 *= 10;
	  else if (error >= e5) step1 *= 5;
	  else if (error >= e2) step1 *= 2;
	  return stop < start ? -step1 : step1;
	}

	var sturges = function(values) {
	  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
	};

	var histogram = function() {
	  var value = identity,
	      domain = extent,
	      threshold = sturges;

	  function histogram(data) {
	    var i,
	        n = data.length,
	        x,
	        values = new Array(n);

	    for (i = 0; i < n; ++i) {
	      values[i] = value(data[i], i, data);
	    }

	    var xz = domain(values),
	        x0 = xz[0],
	        x1 = xz[1],
	        tz = threshold(values, x0, x1);

	    // Convert number of thresholds into uniform thresholds.
	    if (!Array.isArray(tz)) tz = ticks(x0, x1, tz);

	    // Remove any thresholds outside the domain.
	    var m = tz.length;
	    while (tz[0] <= x0) tz.shift(), --m;
	    while (tz[m - 1] >= x1) tz.pop(), --m;

	    var bins = new Array(m + 1),
	        bin;

	    // Initialize bins.
	    for (i = 0; i <= m; ++i) {
	      bin = bins[i] = [];
	      bin.x0 = i > 0 ? tz[i - 1] : x0;
	      bin.x1 = i < m ? tz[i] : x1;
	    }

	    // Assign data to bins by value, ignoring any outside the domain.
	    for (i = 0; i < n; ++i) {
	      x = values[i];
	      if (x0 <= x && x <= x1) {
	        bins[bisectRight(tz, x, 0, m)].push(data[i]);
	      }
	    }

	    return bins;
	  }

	  histogram.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
	  };

	  histogram.domain = function(_) {
	    return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
	  };

	  histogram.thresholds = function(_) {
	    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
	  };

	  return histogram;
	};

	var threshold = function(array, p, f) {
	  if (f == null) f = number;
	  if (!(n = array.length)) return;
	  if ((p = +p) <= 0 || n < 2) return +f(array[0], 0, array);
	  if (p >= 1) return +f(array[n - 1], n - 1, array);
	  var n,
	      h = (n - 1) * p,
	      i = Math.floor(h),
	      a = +f(array[i], i, array),
	      b = +f(array[i + 1], i + 1, array);
	  return a + (b - a) * (h - i);
	};

	var freedmanDiaconis = function(values, min, max) {
	  values = map.call(values, number).sort(ascending);
	  return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));
	};

	var scott = function(values, min, max) {
	  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
	};

	var max = function(array, f) {
	  var i = -1,
	      n = array.length,
	      a,
	      b;

	  if (f == null) {
	    while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }
	    while (++i < n) if ((b = array[i]) != null && b > a) a = b;
	  }

	  else {
	    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }
	    while (++i < n) if ((b = f(array[i], i, array)) != null && b > a) a = b;
	  }

	  return a;
	};

	var mean = function(array, f) {
	  var s = 0,
	      n = array.length,
	      a,
	      i = -1,
	      j = n;

	  if (f == null) {
	    while (++i < n) if (!isNaN(a = number(array[i]))) s += a; else --j;
	  }

	  else {
	    while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) s += a; else --j;
	  }

	  if (j) return s / j;
	};

	var median = function(array, f) {
	  var numbers = [],
	      n = array.length,
	      a,
	      i = -1;

	  if (f == null) {
	    while (++i < n) if (!isNaN(a = number(array[i]))) numbers.push(a);
	  }

	  else {
	    while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) numbers.push(a);
	  }

	  return threshold(numbers.sort(ascending), 0.5);
	};

	var merge = function(arrays) {
	  var n = arrays.length,
	      m,
	      i = -1,
	      j = 0,
	      merged,
	      array;

	  while (++i < n) j += arrays[i].length;
	  merged = new Array(j);

	  while (--n >= 0) {
	    array = arrays[n];
	    m = array.length;
	    while (--m >= 0) {
	      merged[--j] = array[m];
	    }
	  }

	  return merged;
	};

	var min = function(array, f) {
	  var i = -1,
	      n = array.length,
	      a,
	      b;

	  if (f == null) {
	    while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }
	    while (++i < n) if ((b = array[i]) != null && a > b) a = b;
	  }

	  else {
	    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }
	    while (++i < n) if ((b = f(array[i], i, array)) != null && a > b) a = b;
	  }

	  return a;
	};

	var permute = function(array, indexes) {
	  var i = indexes.length, permutes = new Array(i);
	  while (i--) permutes[i] = array[indexes[i]];
	  return permutes;
	};

	var scan = function(array, compare) {
	  if (!(n = array.length)) return;
	  var i = 0,
	      n,
	      j = 0,
	      xi,
	      xj = array[j];

	  if (!compare) compare = ascending;

	  while (++i < n) if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0) xj = xi, j = i;

	  if (compare(xj, xj) === 0) return j;
	};

	var shuffle = function(array, i0, i1) {
	  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
	      t,
	      i;

	  while (m) {
	    i = Math.random() * m-- | 0;
	    t = array[m + i0];
	    array[m + i0] = array[i + i0];
	    array[i + i0] = t;
	  }

	  return array;
	};

	var sum = function(array, f) {
	  var s = 0,
	      n = array.length,
	      a,
	      i = -1;

	  if (f == null) {
	    while (++i < n) if (a = +array[i]) s += a; // Note: zero and null are equivalent.
	  }

	  else {
	    while (++i < n) if (a = +f(array[i], i, array)) s += a;
	  }

	  return s;
	};

	var transpose = function(matrix) {
	  if (!(n = matrix.length)) return [];
	  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
	    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
	      row[j] = matrix[j][i];
	    }
	  }
	  return transpose;
	};

	function length(d) {
	  return d.length;
	}

	var zip = function() {
	  return transpose(arguments);
	};

	var slice$1 = Array.prototype.slice;

	var identity$1 = function(x) {
	  return x;
	};

	var top = 1;
	var right = 2;
	var bottom = 3;
	var left = 4;
	var epsilon = 1e-6;

	function translateX(x) {
	  return "translate(" + x + ",0)";
	}

	function translateY(y) {
	  return "translate(0," + y + ")";
	}

	function center(scale) {
	  var offset = scale.bandwidth() / 2;
	  if (scale.round()) offset = Math.round(offset);
	  return function(d) {
	    return scale(d) + offset;
	  };
	}

	function entering() {
	  return !this.__axis;
	}

	function axis(orient, scale) {
	  var tickArguments = [],
	      tickValues = null,
	      tickFormat = null,
	      tickSizeInner = 6,
	      tickSizeOuter = 6,
	      tickPadding = 3,
	      k = orient === top || orient === left ? -1 : 1,
	      x, y = orient === left || orient === right ? (x = "x", "y") : (x = "y", "x"),
	      transform = orient === top || orient === bottom ? translateX : translateY;

	  function axis(context) {
	    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
	        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$1) : tickFormat,
	        spacing = Math.max(tickSizeInner, 0) + tickPadding,
	        range = scale.range(),
	        range0 = range[0] + 0.5,
	        range1 = range[range.length - 1] + 0.5,
	        position = (scale.bandwidth ? center : identity$1)(scale.copy()),
	        selection = context.selection ? context.selection() : context,
	        path = selection.selectAll(".domain").data([null]),
	        tick = selection.selectAll(".tick").data(values, scale).order(),
	        tickExit = tick.exit(),
	        tickEnter = tick.enter().append("g").attr("class", "tick"),
	        line = tick.select("line"),
	        text = tick.select("text");

	    path = path.merge(path.enter().insert("path", ".tick")
	        .attr("class", "domain")
	        .attr("stroke", "#000"));

	    tick = tick.merge(tickEnter);

	    line = line.merge(tickEnter.append("line")
	        .attr("stroke", "#000")
	        .attr(x + "2", k * tickSizeInner)
	        .attr(y + "1", 0.5)
	        .attr(y + "2", 0.5));

	    text = text.merge(tickEnter.append("text")
	        .attr("fill", "#000")
	        .attr(x, k * spacing)
	        .attr(y, 0.5)
	        .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

	    if (context !== selection) {
	      path = path.transition(context);
	      tick = tick.transition(context);
	      line = line.transition(context);
	      text = text.transition(context);

	      tickExit = tickExit.transition(context)
	          .attr("opacity", epsilon)
	          .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform"); });

	      tickEnter
	          .attr("opacity", epsilon)
	          .attr("transform", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });
	    }

	    tickExit.remove();

	    path
	        .attr("d", orient === left || orient == right
	            ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter
	            : "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter);

	    tick
	        .attr("opacity", 1)
	        .attr("transform", function(d) { return transform(position(d)); });

	    line
	        .attr(x + "2", k * tickSizeInner);

	    text
	        .attr(x, k * spacing)
	        .text(format);

	    selection.filter(entering)
	        .attr("fill", "none")
	        .attr("font-size", 10)
	        .attr("font-family", "sans-serif")
	        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

	    selection
	        .each(function() { this.__axis = position; });
	  }

	  axis.scale = function(_) {
	    return arguments.length ? (scale = _, axis) : scale;
	  };

	  axis.ticks = function() {
	    return tickArguments = slice$1.call(arguments), axis;
	  };

	  axis.tickArguments = function(_) {
	    return arguments.length ? (tickArguments = _ == null ? [] : slice$1.call(_), axis) : tickArguments.slice();
	  };

	  axis.tickValues = function(_) {
	    return arguments.length ? (tickValues = _ == null ? null : slice$1.call(_), axis) : tickValues && tickValues.slice();
	  };

	  axis.tickFormat = function(_) {
	    return arguments.length ? (tickFormat = _, axis) : tickFormat;
	  };

	  axis.tickSize = function(_) {
	    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
	  };

	  axis.tickSizeInner = function(_) {
	    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
	  };

	  axis.tickSizeOuter = function(_) {
	    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
	  };

	  axis.tickPadding = function(_) {
	    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
	  };

	  return axis;
	}

	function axisTop(scale) {
	  return axis(top, scale);
	}

	function axisRight(scale) {
	  return axis(right, scale);
	}

	function axisBottom(scale) {
	  return axis(bottom, scale);
	}

	function axisLeft(scale) {
	  return axis(left, scale);
	}

	var noop = {value: function() {}};

	function dispatch() {
	  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
	    if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
	    _[t] = [];
	  }
	  return new Dispatch(_);
	}

	function Dispatch(_) {
	  this._ = _;
	}

	function parseTypenames(typenames, types) {
	  return typenames.trim().split(/^|\s+/).map(function(t) {
	    var name = "", i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
	    return {type: t, name: name};
	  });
	}

	Dispatch.prototype = dispatch.prototype = {
	  constructor: Dispatch,
	  on: function(typename, callback) {
	    var _ = this._,
	        T = parseTypenames(typename + "", _),
	        t,
	        i = -1,
	        n = T.length;

	    // If no callback was specified, return the callback of the given type and name.
	    if (arguments.length < 2) {
	      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
	      return;
	    }

	    // If a type was specified, set the callback for the given type and name.
	    // Otherwise, if a null callback was specified, remove callbacks of the given name.
	    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
	    while (++i < n) {
	      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
	      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
	    }

	    return this;
	  },
	  copy: function() {
	    var copy = {}, _ = this._;
	    for (var t in _) copy[t] = _[t].slice();
	    return new Dispatch(copy);
	  },
	  call: function(type, that) {
	    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
	  },
	  apply: function(type, that, args) {
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
	  }
	};

	function get(type, name) {
	  for (var i = 0, n = type.length, c; i < n; ++i) {
	    if ((c = type[i]).name === name) {
	      return c.value;
	    }
	  }
	}

	function set(type, name, callback) {
	  for (var i = 0, n = type.length; i < n; ++i) {
	    if (type[i].name === name) {
	      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
	      break;
	    }
	  }
	  if (callback != null) type.push({name: name, value: callback});
	  return type;
	}

	var xhtml = "http://www.w3.org/1999/xhtml";

	var namespaces = {
	  svg: "http://www.w3.org/2000/svg",
	  xhtml: xhtml,
	  xlink: "http://www.w3.org/1999/xlink",
	  xml: "http://www.w3.org/XML/1998/namespace",
	  xmlns: "http://www.w3.org/2000/xmlns/"
	};

	var namespace = function(name) {
	  var prefix = name += "", i = prefix.indexOf(":");
	  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
	};

	function creatorInherit(name) {
	  return function() {
	    var document = this.ownerDocument,
	        uri = this.namespaceURI;
	    return uri === xhtml && document.documentElement.namespaceURI === xhtml
	        ? document.createElement(name)
	        : document.createElementNS(uri, name);
	  };
	}

	function creatorFixed(fullname) {
	  return function() {
	    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
	  };
	}

	var creator = function(name) {
	  var fullname = namespace(name);
	  return (fullname.local
	      ? creatorFixed
	      : creatorInherit)(fullname);
	};

	var nextId = 0;

	function local$1() {
	  return new Local;
	}

	function Local() {
	  this._ = "@" + (++nextId).toString(36);
	}

	Local.prototype = local$1.prototype = {
	  constructor: Local,
	  get: function(node) {
	    var id = this._;
	    while (!(id in node)) if (!(node = node.parentNode)) return;
	    return node[id];
	  },
	  set: function(node, value) {
	    return node[this._] = value;
	  },
	  remove: function(node) {
	    return this._ in node && delete node[this._];
	  },
	  toString: function() {
	    return this._;
	  }
	};

	var matcher = function(selector) {
	  return function() {
	    return this.matches(selector);
	  };
	};

	if (typeof document !== "undefined") {
	  var element = document.documentElement;
	  if (!element.matches) {
	    var vendorMatches = element.webkitMatchesSelector
	        || element.msMatchesSelector
	        || element.mozMatchesSelector
	        || element.oMatchesSelector;
	    matcher = function(selector) {
	      return function() {
	        return vendorMatches.call(this, selector);
	      };
	    };
	  }
	}

	var matcher$1 = matcher;

	var filterEvents = {};

	exports.event = null;

	if (typeof document !== "undefined") {
	  var element$1 = document.documentElement;
	  if (!("onmouseenter" in element$1)) {
	    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
	  }
	}

	function filterContextListener(listener, index, group) {
	  listener = contextListener(listener, index, group);
	  return function(event) {
	    var related = event.relatedTarget;
	    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
	      listener.call(this, event);
	    }
	  };
	}

	function contextListener(listener, index, group) {
	  return function(event1) {
	    var event0 = exports.event; // Events can be reentrant (e.g., focus).
	    exports.event = event1;
	    try {
	      listener.call(this, this.__data__, index, group);
	    } finally {
	      exports.event = event0;
	    }
	  };
	}

	function parseTypenames$1(typenames) {
	  return typenames.trim().split(/^|\s+/).map(function(t) {
	    var name = "", i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    return {type: t, name: name};
	  });
	}

	function onRemove(typename) {
	  return function() {
	    var on = this.__on;
	    if (!on) return;
	    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
	      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	      } else {
	        on[++i] = o;
	      }
	    }
	    if (++i) on.length = i;
	    else delete this.__on;
	  };
	}

	function onAdd(typename, value, capture) {
	  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
	  return function(d, i, group) {
	    var on = this.__on, o, listener = wrap(value, i, group);
	    if (on) for (var j = 0, m = on.length; j < m; ++j) {
	      if ((o = on[j]).type === typename.type && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
	        o.value = value;
	        return;
	      }
	    }
	    this.addEventListener(typename.type, listener, capture);
	    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
	    if (!on) this.__on = [o];
	    else on.push(o);
	  };
	}

	var selection_on = function(typename, value, capture) {
	  var typenames = parseTypenames$1(typename + ""), i, n = typenames.length, t;

	  if (arguments.length < 2) {
	    var on = this.node().__on;
	    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
	      for (i = 0, o = on[j]; i < n; ++i) {
	        if ((t = typenames[i]).type === o.type && t.name === o.name) {
	          return o.value;
	        }
	      }
	    }
	    return;
	  }

	  on = value ? onAdd : onRemove;
	  if (capture == null) capture = false;
	  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
	  return this;
	};

	function customEvent(event1, listener, that, args) {
	  var event0 = exports.event;
	  event1.sourceEvent = exports.event;
	  exports.event = event1;
	  try {
	    return listener.apply(that, args);
	  } finally {
	    exports.event = event0;
	  }
	}

	var sourceEvent = function() {
	  var current = exports.event, source;
	  while (source = current.sourceEvent) current = source;
	  return current;
	};

	var point = function(node, event) {
	  var svg = node.ownerSVGElement || node;

	  if (svg.createSVGPoint) {
	    var point = svg.createSVGPoint();
	    point.x = event.clientX, point.y = event.clientY;
	    point = point.matrixTransform(node.getScreenCTM().inverse());
	    return [point.x, point.y];
	  }

	  var rect = node.getBoundingClientRect();
	  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
	};

	var mouse = function(node) {
	  var event = sourceEvent();
	  if (event.changedTouches) event = event.changedTouches[0];
	  return point(node, event);
	};

	function none() {}

	var selector = function(selector) {
	  return selector == null ? none : function() {
	    return this.querySelector(selector);
	  };
	};

	var selection_select = function(select) {
	  if (typeof select !== "function") select = selector(select);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	      }
	    }
	  }

	  return new Selection(subgroups, this._parents);
	};

	function empty$1() {
	  return [];
	}

	var selectorAll = function(selector) {
	  return selector == null ? empty$1 : function() {
	    return this.querySelectorAll(selector);
	  };
	};

	var selection_selectAll = function(select) {
	  if (typeof select !== "function") select = selectorAll(select);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        subgroups.push(select.call(node, node.__data__, i, group));
	        parents.push(node);
	      }
	    }
	  }

	  return new Selection(subgroups, parents);
	};

	var selection_filter = function(match) {
	  if (typeof match !== "function") match = matcher$1(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new Selection(subgroups, this._parents);
	};

	var sparse = function(update) {
	  return new Array(update.length);
	};

	var selection_enter = function() {
	  return new Selection(this._enter || this._groups.map(sparse), this._parents);
	};

	function EnterNode(parent, datum) {
	  this.ownerDocument = parent.ownerDocument;
	  this.namespaceURI = parent.namespaceURI;
	  this._next = null;
	  this._parent = parent;
	  this.__data__ = datum;
	}

	EnterNode.prototype = {
	  constructor: EnterNode,
	  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
	  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
	  querySelector: function(selector) { return this._parent.querySelector(selector); },
	  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
	};

	var constant$1 = function(x) {
	  return function() {
	    return x;
	  };
	};

	var keyPrefix = "$"; // Protect against keys like “__proto__”.

	function bindIndex(parent, group, enter, update, exit, data) {
	  var i = 0,
	      node,
	      groupLength = group.length,
	      dataLength = data.length;

	  // Put any non-null nodes that fit into update.
	  // Put any null nodes into enter.
	  // Put any remaining data into enter.
	  for (; i < dataLength; ++i) {
	    if (node = group[i]) {
	      node.__data__ = data[i];
	      update[i] = node;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  }

	  // Put any non-null nodes that don’t fit into exit.
	  for (; i < groupLength; ++i) {
	    if (node = group[i]) {
	      exit[i] = node;
	    }
	  }
	}

	function bindKey(parent, group, enter, update, exit, data, key) {
	  var i,
	      node,
	      nodeByKeyValue = {},
	      groupLength = group.length,
	      dataLength = data.length,
	      keyValues = new Array(groupLength),
	      keyValue;

	  // Compute the key for each node.
	  // If multiple nodes have the same key, the duplicates are added to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if (node = group[i]) {
	      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
	      if (keyValue in nodeByKeyValue) {
	        exit[i] = node;
	      } else {
	        nodeByKeyValue[keyValue] = node;
	      }
	    }
	  }

	  // Compute the key for each datum.
	  // If there a node associated with this key, join and add it to update.
	  // If there is not (or the key is a duplicate), add it to enter.
	  for (i = 0; i < dataLength; ++i) {
	    keyValue = keyPrefix + key.call(parent, data[i], i, data);
	    if (node = nodeByKeyValue[keyValue]) {
	      update[i] = node;
	      node.__data__ = data[i];
	      nodeByKeyValue[keyValue] = null;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  }

	  // Add any remaining nodes that were not bound to data to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
	      exit[i] = node;
	    }
	  }
	}

	var selection_data = function(value, key) {
	  if (!value) {
	    data = new Array(this.size()), j = -1;
	    this.each(function(d) { data[++j] = d; });
	    return data;
	  }

	  var bind = key ? bindKey : bindIndex,
	      parents = this._parents,
	      groups = this._groups;

	  if (typeof value !== "function") value = constant$1(value);

	  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
	    var parent = parents[j],
	        group = groups[j],
	        groupLength = group.length,
	        data = value.call(parent, parent && parent.__data__, j, parents),
	        dataLength = data.length,
	        enterGroup = enter[j] = new Array(dataLength),
	        updateGroup = update[j] = new Array(dataLength),
	        exitGroup = exit[j] = new Array(groupLength);

	    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

	    // Now connect the enter nodes to their following update node, such that
	    // appendChild can insert the materialized enter node before this node,
	    // rather than at the end of the parent node.
	    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
	      if (previous = enterGroup[i0]) {
	        if (i0 >= i1) i1 = i0 + 1;
	        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
	        previous._next = next || null;
	      }
	    }
	  }

	  update = new Selection(update, parents);
	  update._enter = enter;
	  update._exit = exit;
	  return update;
	};

	var selection_exit = function() {
	  return new Selection(this._exit || this._groups.map(sparse), this._parents);
	};

	var selection_merge = function(selection) {

	  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new Selection(merges, this._parents);
	};

	var selection_order = function() {

	  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
	    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
	      if (node = group[i]) {
	        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	        next = node;
	      }
	    }
	  }

	  return this;
	};

	var selection_sort = function(compare) {
	  if (!compare) compare = ascending$1;

	  function compareNode(a, b) {
	    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
	  }

	  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        sortgroup[i] = node;
	      }
	    }
	    sortgroup.sort(compareNode);
	  }

	  return new Selection(sortgroups, this._parents).order();
	};

	function ascending$1(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}

	var selection_call = function() {
	  var callback = arguments[0];
	  arguments[0] = this;
	  callback.apply(null, arguments);
	  return this;
	};

	var selection_nodes = function() {
	  var nodes = new Array(this.size()), i = -1;
	  this.each(function() { nodes[++i] = this; });
	  return nodes;
	};

	var selection_node = function() {

	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
	      var node = group[i];
	      if (node) return node;
	    }
	  }

	  return null;
	};

	var selection_size = function() {
	  var size = 0;
	  this.each(function() { ++size; });
	  return size;
	};

	var selection_empty = function() {
	  return !this.node();
	};

	var selection_each = function(callback) {

	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
	      if (node = group[i]) callback.call(node, node.__data__, i, group);
	    }
	  }

	  return this;
	};

	function attrRemove(name) {
	  return function() {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS(fullname) {
	  return function() {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant(name, value) {
	  return function() {
	    this.setAttribute(name, value);
	  };
	}

	function attrConstantNS(fullname, value) {
	  return function() {
	    this.setAttributeNS(fullname.space, fullname.local, value);
	  };
	}

	function attrFunction(name, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttribute(name);
	    else this.setAttribute(name, v);
	  };
	}

	function attrFunctionNS(fullname, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
	    else this.setAttributeNS(fullname.space, fullname.local, v);
	  };
	}

	var selection_attr = function(name, value) {
	  var fullname = namespace(name);

	  if (arguments.length < 2) {
	    var node = this.node();
	    return fullname.local
	        ? node.getAttributeNS(fullname.space, fullname.local)
	        : node.getAttribute(fullname);
	  }

	  return this.each((value == null
	      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
	      ? (fullname.local ? attrFunctionNS : attrFunction)
	      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
	};

	var window = function(node) {
	  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
	      || (node.document && node) // node is a Window
	      || node.defaultView; // node is a Document
	};

	function styleRemove(name) {
	  return function() {
	    this.style.removeProperty(name);
	  };
	}

	function styleConstant(name, value, priority) {
	  return function() {
	    this.style.setProperty(name, value, priority);
	  };
	}

	function styleFunction(name, value, priority) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.style.removeProperty(name);
	    else this.style.setProperty(name, v, priority);
	  };
	}

	var selection_style = function(name, value, priority) {
	  var node;
	  return arguments.length > 1
	      ? this.each((value == null
	            ? styleRemove : typeof value === "function"
	            ? styleFunction
	            : styleConstant)(name, value, priority == null ? "" : priority))
	      : window(node = this.node())
	          .getComputedStyle(node, null)
	          .getPropertyValue(name);
	};

	function propertyRemove(name) {
	  return function() {
	    delete this[name];
	  };
	}

	function propertyConstant(name, value) {
	  return function() {
	    this[name] = value;
	  };
	}

	function propertyFunction(name, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) delete this[name];
	    else this[name] = v;
	  };
	}

	var selection_property = function(name, value) {
	  return arguments.length > 1
	      ? this.each((value == null
	          ? propertyRemove : typeof value === "function"
	          ? propertyFunction
	          : propertyConstant)(name, value))
	      : this.node()[name];
	};

	function classArray(string) {
	  return string.trim().split(/^|\s+/);
	}

	function classList(node) {
	  return node.classList || new ClassList(node);
	}

	function ClassList(node) {
	  this._node = node;
	  this._names = classArray(node.getAttribute("class") || "");
	}

	ClassList.prototype = {
	  add: function(name) {
	    var i = this._names.indexOf(name);
	    if (i < 0) {
	      this._names.push(name);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  remove: function(name) {
	    var i = this._names.indexOf(name);
	    if (i >= 0) {
	      this._names.splice(i, 1);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  contains: function(name) {
	    return this._names.indexOf(name) >= 0;
	  }
	};

	function classedAdd(node, names) {
	  var list = classList(node), i = -1, n = names.length;
	  while (++i < n) list.add(names[i]);
	}

	function classedRemove(node, names) {
	  var list = classList(node), i = -1, n = names.length;
	  while (++i < n) list.remove(names[i]);
	}

	function classedTrue(names) {
	  return function() {
	    classedAdd(this, names);
	  };
	}

	function classedFalse(names) {
	  return function() {
	    classedRemove(this, names);
	  };
	}

	function classedFunction(names, value) {
	  return function() {
	    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
	  };
	}

	var selection_classed = function(name, value) {
	  var names = classArray(name + "");

	  if (arguments.length < 2) {
	    var list = classList(this.node()), i = -1, n = names.length;
	    while (++i < n) if (!list.contains(names[i])) return false;
	    return true;
	  }

	  return this.each((typeof value === "function"
	      ? classedFunction : value
	      ? classedTrue
	      : classedFalse)(names, value));
	};

	function textRemove() {
	  this.textContent = "";
	}

	function textConstant(value) {
	  return function() {
	    this.textContent = value;
	  };
	}

	function textFunction(value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    this.textContent = v == null ? "" : v;
	  };
	}

	var selection_text = function(value) {
	  return arguments.length
	      ? this.each(value == null
	          ? textRemove : (typeof value === "function"
	          ? textFunction
	          : textConstant)(value))
	      : this.node().textContent;
	};

	function htmlRemove() {
	  this.innerHTML = "";
	}

	function htmlConstant(value) {
	  return function() {
	    this.innerHTML = value;
	  };
	}

	function htmlFunction(value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    this.innerHTML = v == null ? "" : v;
	  };
	}

	var selection_html = function(value) {
	  return arguments.length
	      ? this.each(value == null
	          ? htmlRemove : (typeof value === "function"
	          ? htmlFunction
	          : htmlConstant)(value))
	      : this.node().innerHTML;
	};

	function raise() {
	  if (this.nextSibling) this.parentNode.appendChild(this);
	}

	var selection_raise = function() {
	  return this.each(raise);
	};

	function lower() {
	  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
	}

	var selection_lower = function() {
	  return this.each(lower);
	};

	var selection_append = function(name) {
	  var create = typeof name === "function" ? name : creator(name);
	  return this.select(function() {
	    return this.appendChild(create.apply(this, arguments));
	  });
	};

	function constantNull() {
	  return null;
	}

	var selection_insert = function(name, before) {
	  var create = typeof name === "function" ? name : creator(name),
	      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
	  return this.select(function() {
	    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
	  });
	};

	function remove() {
	  var parent = this.parentNode;
	  if (parent) parent.removeChild(this);
	}

	var selection_remove = function() {
	  return this.each(remove);
	};

	var selection_datum = function(value) {
	  return arguments.length
	      ? this.property("__data__", value)
	      : this.node().__data__;
	};

	function dispatchEvent(node, type, params) {
	  var window$$1 = window(node),
	      event = window$$1.CustomEvent;

	  if (event) {
	    event = new event(type, params);
	  } else {
	    event = window$$1.document.createEvent("Event");
	    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
	    else event.initEvent(type, false, false);
	  }

	  node.dispatchEvent(event);
	}

	function dispatchConstant(type, params) {
	  return function() {
	    return dispatchEvent(this, type, params);
	  };
	}

	function dispatchFunction(type, params) {
	  return function() {
	    return dispatchEvent(this, type, params.apply(this, arguments));
	  };
	}

	var selection_dispatch = function(type, params) {
	  return this.each((typeof params === "function"
	      ? dispatchFunction
	      : dispatchConstant)(type, params));
	};

	var root = [null];

	function Selection(groups, parents) {
	  this._groups = groups;
	  this._parents = parents;
	}

	function selection() {
	  return new Selection([[document.documentElement]], root);
	}

	Selection.prototype = selection.prototype = {
	  constructor: Selection,
	  select: selection_select,
	  selectAll: selection_selectAll,
	  filter: selection_filter,
	  data: selection_data,
	  enter: selection_enter,
	  exit: selection_exit,
	  merge: selection_merge,
	  order: selection_order,
	  sort: selection_sort,
	  call: selection_call,
	  nodes: selection_nodes,
	  node: selection_node,
	  size: selection_size,
	  empty: selection_empty,
	  each: selection_each,
	  attr: selection_attr,
	  style: selection_style,
	  property: selection_property,
	  classed: selection_classed,
	  text: selection_text,
	  html: selection_html,
	  raise: selection_raise,
	  lower: selection_lower,
	  append: selection_append,
	  insert: selection_insert,
	  remove: selection_remove,
	  datum: selection_datum,
	  on: selection_on,
	  dispatch: selection_dispatch
	};

	var select = function(selector) {
	  return typeof selector === "string"
	      ? new Selection([[document.querySelector(selector)]], [document.documentElement])
	      : new Selection([[selector]], root);
	};

	var selectAll = function(selector) {
	  return typeof selector === "string"
	      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
	      : new Selection([selector == null ? [] : selector], root);
	};

	var touch = function(node, touches, identifier) {
	  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;

	  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
	    if ((touch = touches[i]).identifier === identifier) {
	      return point(node, touch);
	    }
	  }

	  return null;
	};

	var touches = function(node, touches) {
	  if (touches == null) touches = sourceEvent().touches;

	  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
	    points[i] = point(node, touches[i]);
	  }

	  return points;
	};

	function nopropagation() {
	  exports.event.stopImmediatePropagation();
	}

	var noevent = function() {
	  exports.event.preventDefault();
	  exports.event.stopImmediatePropagation();
	};

	var dragDisable = function(view) {
	  var root = view.document.documentElement,
	      selection$$1 = select(view).on("dragstart.drag", noevent, true);
	  if ("onselectstart" in root) {
	    selection$$1.on("selectstart.drag", noevent, true);
	  } else {
	    root.__noselect = root.style.MozUserSelect;
	    root.style.MozUserSelect = "none";
	  }
	};

	function yesdrag(view, noclick) {
	  var root = view.document.documentElement,
	      selection$$1 = select(view).on("dragstart.drag", null);
	  if (noclick) {
	    selection$$1.on("click.drag", noevent, true);
	    setTimeout(function() { selection$$1.on("click.drag", null); }, 0);
	  }
	  if ("onselectstart" in root) {
	    selection$$1.on("selectstart.drag", null);
	  } else {
	    root.style.MozUserSelect = root.__noselect;
	    delete root.__noselect;
	  }
	}

	var constant$2 = function(x) {
	  return function() {
	    return x;
	  };
	};

	function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
	  this.target = target;
	  this.type = type;
	  this.subject = subject;
	  this.identifier = id;
	  this.active = active;
	  this.x = x;
	  this.y = y;
	  this.dx = dx;
	  this.dy = dy;
	  this._ = dispatch;
	}

	DragEvent.prototype.on = function() {
	  var value = this._.on.apply(this._, arguments);
	  return value === this._ ? this : value;
	};

	// Ignore right-click, since that should open the context menu.
	function defaultFilter$1() {
	  return !exports.event.button;
	}

	function defaultContainer() {
	  return this.parentNode;
	}

	function defaultSubject(d) {
	  return d == null ? {x: exports.event.x, y: exports.event.y} : d;
	}

	var drag = function() {
	  var filter = defaultFilter$1,
	      container = defaultContainer,
	      subject = defaultSubject,
	      gestures = {},
	      listeners = dispatch("start", "drag", "end"),
	      active = 0,
	      mousemoving,
	      touchending;

	  function drag(selection$$1) {
	    selection$$1
	        .on("mousedown.drag", mousedowned)
	        .on("touchstart.drag", touchstarted)
	        .on("touchmove.drag", touchmoved)
	        .on("touchend.drag touchcancel.drag", touchended)
	        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
	  }

	  function mousedowned() {
	    if (touchending || !filter.apply(this, arguments)) return;
	    var gesture = beforestart("mouse", container.apply(this, arguments), mouse, this, arguments);
	    if (!gesture) return;
	    select(exports.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
	    dragDisable(exports.event.view);
	    nopropagation();
	    mousemoving = false;
	    gesture("start");
	  }

	  function mousemoved() {
	    noevent();
	    mousemoving = true;
	    gestures.mouse("drag");
	  }

	  function mouseupped() {
	    select(exports.event.view).on("mousemove.drag mouseup.drag", null);
	    yesdrag(exports.event.view, mousemoving);
	    noevent();
	    gestures.mouse("end");
	  }

	  function touchstarted() {
	    if (!filter.apply(this, arguments)) return;
	    var touches$$1 = exports.event.changedTouches,
	        c = container.apply(this, arguments),
	        n = touches$$1.length, i, gesture;

	    for (i = 0; i < n; ++i) {
	      if (gesture = beforestart(touches$$1[i].identifier, c, touch, this, arguments)) {
	        nopropagation();
	        gesture("start");
	      }
	    }
	  }

	  function touchmoved() {
	    var touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, gesture;

	    for (i = 0; i < n; ++i) {
	      if (gesture = gestures[touches$$1[i].identifier]) {
	        noevent();
	        gesture("drag");
	      }
	    }
	  }

	  function touchended() {
	    var touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, gesture;

	    if (touchending) clearTimeout(touchending);
	    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
	    for (i = 0; i < n; ++i) {
	      if (gesture = gestures[touches$$1[i].identifier]) {
	        nopropagation();
	        gesture("end");
	      }
	    }
	  }

	  function beforestart(id, container, point, that, args) {
	    var p = point(container, id), s, dx, dy,
	        sublisteners = listeners.copy();

	    if (!customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {
	      if ((exports.event.subject = s = subject.apply(that, args)) == null) return false;
	      dx = s.x - p[0] || 0;
	      dy = s.y - p[1] || 0;
	      return true;
	    })) return;

	    return function gesture(type) {
	      var p0 = p, n;
	      switch (type) {
	        case "start": gestures[id] = gesture, n = active++; break;
	        case "end": delete gestures[id], --active; // nobreak
	        case "drag": p = point(container, id), n = active; break;
	      }
	      customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
	    };
	  }

	  drag.filter = function(_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$2(!!_), drag) : filter;
	  };

	  drag.container = function(_) {
	    return arguments.length ? (container = typeof _ === "function" ? _ : constant$2(_), drag) : container;
	  };

	  drag.subject = function(_) {
	    return arguments.length ? (subject = typeof _ === "function" ? _ : constant$2(_), drag) : subject;
	  };

	  drag.on = function() {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? drag : value;
	  };

	  return drag;
	};

	var define = function(constructor, factory, prototype) {
	  constructor.prototype = factory.prototype = prototype;
	  prototype.constructor = constructor;
	};

	function extend(parent, definition) {
	  var prototype = Object.create(parent.prototype);
	  for (var key in definition) prototype[key] = definition[key];
	  return prototype;
	}

	function Color() {}

	var darker = 0.7;
	var brighter = 1 / darker;

	var reI = "\\s*([+-]?\\d+)\\s*";
	var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
	var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
	var reHex3 = /^#([0-9a-f]{3})$/;
	var reHex6 = /^#([0-9a-f]{6})$/;
	var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
	var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
	var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
	var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
	var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
	var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

	var named = {
	  aliceblue: 0xf0f8ff,
	  antiquewhite: 0xfaebd7,
	  aqua: 0x00ffff,
	  aquamarine: 0x7fffd4,
	  azure: 0xf0ffff,
	  beige: 0xf5f5dc,
	  bisque: 0xffe4c4,
	  black: 0x000000,
	  blanchedalmond: 0xffebcd,
	  blue: 0x0000ff,
	  blueviolet: 0x8a2be2,
	  brown: 0xa52a2a,
	  burlywood: 0xdeb887,
	  cadetblue: 0x5f9ea0,
	  chartreuse: 0x7fff00,
	  chocolate: 0xd2691e,
	  coral: 0xff7f50,
	  cornflowerblue: 0x6495ed,
	  cornsilk: 0xfff8dc,
	  crimson: 0xdc143c,
	  cyan: 0x00ffff,
	  darkblue: 0x00008b,
	  darkcyan: 0x008b8b,
	  darkgoldenrod: 0xb8860b,
	  darkgray: 0xa9a9a9,
	  darkgreen: 0x006400,
	  darkgrey: 0xa9a9a9,
	  darkkhaki: 0xbdb76b,
	  darkmagenta: 0x8b008b,
	  darkolivegreen: 0x556b2f,
	  darkorange: 0xff8c00,
	  darkorchid: 0x9932cc,
	  darkred: 0x8b0000,
	  darksalmon: 0xe9967a,
	  darkseagreen: 0x8fbc8f,
	  darkslateblue: 0x483d8b,
	  darkslategray: 0x2f4f4f,
	  darkslategrey: 0x2f4f4f,
	  darkturquoise: 0x00ced1,
	  darkviolet: 0x9400d3,
	  deeppink: 0xff1493,
	  deepskyblue: 0x00bfff,
	  dimgray: 0x696969,
	  dimgrey: 0x696969,
	  dodgerblue: 0x1e90ff,
	  firebrick: 0xb22222,
	  floralwhite: 0xfffaf0,
	  forestgreen: 0x228b22,
	  fuchsia: 0xff00ff,
	  gainsboro: 0xdcdcdc,
	  ghostwhite: 0xf8f8ff,
	  gold: 0xffd700,
	  goldenrod: 0xdaa520,
	  gray: 0x808080,
	  green: 0x008000,
	  greenyellow: 0xadff2f,
	  grey: 0x808080,
	  honeydew: 0xf0fff0,
	  hotpink: 0xff69b4,
	  indianred: 0xcd5c5c,
	  indigo: 0x4b0082,
	  ivory: 0xfffff0,
	  khaki: 0xf0e68c,
	  lavender: 0xe6e6fa,
	  lavenderblush: 0xfff0f5,
	  lawngreen: 0x7cfc00,
	  lemonchiffon: 0xfffacd,
	  lightblue: 0xadd8e6,
	  lightcoral: 0xf08080,
	  lightcyan: 0xe0ffff,
	  lightgoldenrodyellow: 0xfafad2,
	  lightgray: 0xd3d3d3,
	  lightgreen: 0x90ee90,
	  lightgrey: 0xd3d3d3,
	  lightpink: 0xffb6c1,
	  lightsalmon: 0xffa07a,
	  lightseagreen: 0x20b2aa,
	  lightskyblue: 0x87cefa,
	  lightslategray: 0x778899,
	  lightslategrey: 0x778899,
	  lightsteelblue: 0xb0c4de,
	  lightyellow: 0xffffe0,
	  lime: 0x00ff00,
	  limegreen: 0x32cd32,
	  linen: 0xfaf0e6,
	  magenta: 0xff00ff,
	  maroon: 0x800000,
	  mediumaquamarine: 0x66cdaa,
	  mediumblue: 0x0000cd,
	  mediumorchid: 0xba55d3,
	  mediumpurple: 0x9370db,
	  mediumseagreen: 0x3cb371,
	  mediumslateblue: 0x7b68ee,
	  mediumspringgreen: 0x00fa9a,
	  mediumturquoise: 0x48d1cc,
	  mediumvioletred: 0xc71585,
	  midnightblue: 0x191970,
	  mintcream: 0xf5fffa,
	  mistyrose: 0xffe4e1,
	  moccasin: 0xffe4b5,
	  navajowhite: 0xffdead,
	  navy: 0x000080,
	  oldlace: 0xfdf5e6,
	  olive: 0x808000,
	  olivedrab: 0x6b8e23,
	  orange: 0xffa500,
	  orangered: 0xff4500,
	  orchid: 0xda70d6,
	  palegoldenrod: 0xeee8aa,
	  palegreen: 0x98fb98,
	  paleturquoise: 0xafeeee,
	  palevioletred: 0xdb7093,
	  papayawhip: 0xffefd5,
	  peachpuff: 0xffdab9,
	  peru: 0xcd853f,
	  pink: 0xffc0cb,
	  plum: 0xdda0dd,
	  powderblue: 0xb0e0e6,
	  purple: 0x800080,
	  rebeccapurple: 0x663399,
	  red: 0xff0000,
	  rosybrown: 0xbc8f8f,
	  royalblue: 0x4169e1,
	  saddlebrown: 0x8b4513,
	  salmon: 0xfa8072,
	  sandybrown: 0xf4a460,
	  seagreen: 0x2e8b57,
	  seashell: 0xfff5ee,
	  sienna: 0xa0522d,
	  silver: 0xc0c0c0,
	  skyblue: 0x87ceeb,
	  slateblue: 0x6a5acd,
	  slategray: 0x708090,
	  slategrey: 0x708090,
	  snow: 0xfffafa,
	  springgreen: 0x00ff7f,
	  steelblue: 0x4682b4,
	  tan: 0xd2b48c,
	  teal: 0x008080,
	  thistle: 0xd8bfd8,
	  tomato: 0xff6347,
	  turquoise: 0x40e0d0,
	  violet: 0xee82ee,
	  wheat: 0xf5deb3,
	  white: 0xffffff,
	  whitesmoke: 0xf5f5f5,
	  yellow: 0xffff00,
	  yellowgreen: 0x9acd32
	};

	define(Color, color, {
	  displayable: function() {
	    return this.rgb().displayable();
	  },
	  toString: function() {
	    return this.rgb() + "";
	  }
	});

	function color(format) {
	  var m;
	  format = (format + "").trim().toLowerCase();
	  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
	      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
	      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	      : named.hasOwnProperty(format) ? rgbn(named[format])
	      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
	      : null;
	}

	function rgbn(n) {
	  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	}

	function rgba(r, g, b, a) {
	  if (a <= 0) r = g = b = NaN;
	  return new Rgb(r, g, b, a);
	}

	function rgbConvert(o) {
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Rgb;
	  o = o.rgb();
	  return new Rgb(o.r, o.g, o.b, o.opacity);
	}

	function rgb(r, g, b, opacity) {
	  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	}

	function Rgb(r, g, b, opacity) {
	  this.r = +r;
	  this.g = +g;
	  this.b = +b;
	  this.opacity = +opacity;
	}

	define(Rgb, rgb, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  rgb: function() {
	    return this;
	  },
	  displayable: function() {
	    return (0 <= this.r && this.r <= 255)
	        && (0 <= this.g && this.g <= 255)
	        && (0 <= this.b && this.b <= 255)
	        && (0 <= this.opacity && this.opacity <= 1);
	  },
	  toString: function() {
	    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	    return (a === 1 ? "rgb(" : "rgba(")
	        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.b) || 0))
	        + (a === 1 ? ")" : ", " + a + ")");
	  }
	}));

	function hsla(h, s, l, a) {
	  if (a <= 0) h = s = l = NaN;
	  else if (l <= 0 || l >= 1) h = s = NaN;
	  else if (s <= 0) h = NaN;
	  return new Hsl(h, s, l, a);
	}

	function hslConvert(o) {
	  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Hsl;
	  if (o instanceof Hsl) return o;
	  o = o.rgb();
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      h = NaN,
	      s = max - min,
	      l = (max + min) / 2;
	  if (s) {
	    if (r === max) h = (g - b) / s + (g < b) * 6;
	    else if (g === max) h = (b - r) / s + 2;
	    else h = (r - g) / s + 4;
	    s /= l < 0.5 ? max + min : 2 - max - min;
	    h *= 60;
	  } else {
	    s = l > 0 && l < 1 ? 0 : h;
	  }
	  return new Hsl(h, s, l, o.opacity);
	}

	function hsl(h, s, l, opacity) {
	  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	}

	function Hsl(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Hsl, hsl, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = this.h % 360 + (this.h < 0) * 360,
	        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	        l = this.l,
	        m2 = l + (l < 0.5 ? l : 1 - l) * s,
	        m1 = 2 * l - m2;
	    return new Rgb(
	      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
	      hsl2rgb(h, m1, m2),
	      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
	      this.opacity
	    );
	  },
	  displayable: function() {
	    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
	        && (0 <= this.l && this.l <= 1)
	        && (0 <= this.opacity && this.opacity <= 1);
	  }
	}));

	/* From FvD 13.37, CSS Color Module Level 3 */
	function hsl2rgb(h, m1, m2) {
	  return (h < 60 ? m1 + (m2 - m1) * h / 60
	      : h < 180 ? m2
	      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
	      : m1) * 255;
	}

	var deg2rad = Math.PI / 180;
	var rad2deg = 180 / Math.PI;

	var Kn = 18;
	var Xn = 0.950470;
	var Yn = 1;
	var Zn = 1.088830;
	var t0 = 4 / 29;
	var t1 = 6 / 29;
	var t2 = 3 * t1 * t1;
	var t3 = t1 * t1 * t1;

	function labConvert(o) {
	  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
	  if (o instanceof Hcl) {
	    var h = o.h * deg2rad;
	    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
	  }
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var b = rgb2xyz(o.r),
	      a = rgb2xyz(o.g),
	      l = rgb2xyz(o.b),
	      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
	      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
	      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
	  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
	}

	function lab(l, a, b, opacity) {
	  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
	}

	function Lab(l, a, b, opacity) {
	  this.l = +l;
	  this.a = +a;
	  this.b = +b;
	  this.opacity = +opacity;
	}

	define(Lab, lab, extend(Color, {
	  brighter: function(k) {
	    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  darker: function(k) {
	    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  rgb: function() {
	    var y = (this.l + 16) / 116,
	        x = isNaN(this.a) ? y : y + this.a / 500,
	        z = isNaN(this.b) ? y : y - this.b / 200;
	    y = Yn * lab2xyz(y);
	    x = Xn * lab2xyz(x);
	    z = Zn * lab2xyz(z);
	    return new Rgb(
	      xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
	      xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),
	      xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),
	      this.opacity
	    );
	  }
	}));

	function xyz2lab(t) {
	  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
	}

	function lab2xyz(t) {
	  return t > t1 ? t * t * t : t2 * (t - t0);
	}

	function xyz2rgb(x) {
	  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
	}

	function rgb2xyz(x) {
	  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
	}

	function hclConvert(o) {
	  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
	  if (!(o instanceof Lab)) o = labConvert(o);
	  var h = Math.atan2(o.b, o.a) * rad2deg;
	  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
	}

	function hcl(h, c, l, opacity) {
	  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	}

	function Hcl(h, c, l, opacity) {
	  this.h = +h;
	  this.c = +c;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Hcl, hcl, extend(Color, {
	  brighter: function(k) {
	    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
	  },
	  darker: function(k) {
	    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
	  },
	  rgb: function() {
	    return labConvert(this).rgb();
	  }
	}));

	var A = -0.14861;
	var B = +1.78277;
	var C = -0.29227;
	var D = -0.90649;
	var E = +1.97294;
	var ED = E * D;
	var EB = E * B;
	var BC_DA = B * C - D * A;

	function cubehelixConvert(o) {
	  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
	      bl = b - l,
	      k = (E * (g - l) - C * bl) / D,
	      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
	      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
	  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
	}

	function cubehelix(h, s, l, opacity) {
	  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
	}

	function Cubehelix(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Cubehelix, cubehelix, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
	        l = +this.l,
	        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
	        cosh = Math.cos(h),
	        sinh = Math.sin(h);
	    return new Rgb(
	      255 * (l + a * (A * cosh + B * sinh)),
	      255 * (l + a * (C * cosh + D * sinh)),
	      255 * (l + a * (E * cosh)),
	      this.opacity
	    );
	  }
	}));

	function basis(t1, v0, v1, v2, v3) {
	  var t2 = t1 * t1, t3 = t2 * t1;
	  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
	      + (4 - 6 * t2 + 3 * t3) * v1
	      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
	      + t3 * v3) / 6;
	}

	var basis$1 = function(values) {
	  var n = values.length - 1;
	  return function(t) {
	    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
	        v1 = values[i],
	        v2 = values[i + 1],
	        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
	        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	};

	var basisClosed = function(values) {
	  var n = values.length;
	  return function(t) {
	    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
	        v0 = values[(i + n - 1) % n],
	        v1 = values[i % n],
	        v2 = values[(i + 1) % n],
	        v3 = values[(i + 2) % n];
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	};

	var constant$3 = function(x) {
	  return function() {
	    return x;
	  };
	};

	function linear(a, d) {
	  return function(t) {
	    return a + t * d;
	  };
	}

	function exponential(a, b, y) {
	  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
	    return Math.pow(a + t * b, y);
	  };
	}

	function hue(a, b) {
	  var d = b - a;
	  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$3(isNaN(a) ? b : a);
	}

	function gamma(y) {
	  return (y = +y) === 1 ? nogamma : function(a, b) {
	    return b - a ? exponential(a, b, y) : constant$3(isNaN(a) ? b : a);
	  };
	}

	function nogamma(a, b) {
	  var d = b - a;
	  return d ? linear(a, d) : constant$3(isNaN(a) ? b : a);
	}

	var interpolateRgb = ((function rgbGamma(y) {
	  var color$$1 = gamma(y);

	  function rgb$$1(start, end) {
	    var r = color$$1((start = rgb(start)).r, (end = rgb(end)).r),
	        g = color$$1(start.g, end.g),
	        b = color$$1(start.b, end.b),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.r = r(t);
	      start.g = g(t);
	      start.b = b(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }

	  rgb$$1.gamma = rgbGamma;

	  return rgb$$1;
	}))(1);

	function rgbSpline(spline) {
	  return function(colors) {
	    var n = colors.length,
	        r = new Array(n),
	        g = new Array(n),
	        b = new Array(n),
	        i, color$$1;
	    for (i = 0; i < n; ++i) {
	      color$$1 = rgb(colors[i]);
	      r[i] = color$$1.r || 0;
	      g[i] = color$$1.g || 0;
	      b[i] = color$$1.b || 0;
	    }
	    r = spline(r);
	    g = spline(g);
	    b = spline(b);
	    color$$1.opacity = 1;
	    return function(t) {
	      color$$1.r = r(t);
	      color$$1.g = g(t);
	      color$$1.b = b(t);
	      return color$$1 + "";
	    };
	  };
	}

	var rgbBasis = rgbSpline(basis$1);
	var rgbBasisClosed = rgbSpline(basisClosed);

	var array$1 = function(a, b) {
	  var nb = b ? b.length : 0,
	      na = a ? Math.min(nb, a.length) : 0,
	      x = new Array(nb),
	      c = new Array(nb),
	      i;

	  for (i = 0; i < na; ++i) x[i] = interpolateValue(a[i], b[i]);
	  for (; i < nb; ++i) c[i] = b[i];

	  return function(t) {
	    for (i = 0; i < na; ++i) c[i] = x[i](t);
	    return c;
	  };
	};

	var date = function(a, b) {
	  var d = new Date;
	  return a = +a, b -= a, function(t) {
	    return d.setTime(a + b * t), d;
	  };
	};

	var reinterpolate = function(a, b) {
	  return a = +a, b -= a, function(t) {
	    return a + b * t;
	  };
	};

	var object = function(a, b) {
	  var i = {},
	      c = {},
	      k;

	  if (a === null || typeof a !== "object") a = {};
	  if (b === null || typeof b !== "object") b = {};

	  for (k in b) {
	    if (k in a) {
	      i[k] = interpolateValue(a[k], b[k]);
	    } else {
	      c[k] = b[k];
	    }
	  }

	  return function(t) {
	    for (k in i) c[k] = i[k](t);
	    return c;
	  };
	};

	var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
	var reB = new RegExp(reA.source, "g");

	function zero(b) {
	  return function() {
	    return b;
	  };
	}

	function one(b) {
	  return function(t) {
	    return b(t) + "";
	  };
	}

	var interpolateString = function(a, b) {
	  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
	      am, // current match in a
	      bm, // current match in b
	      bs, // string preceding current number in b, if any
	      i = -1, // index in s
	      s = [], // string constants and placeholders
	      q = []; // number interpolators

	  // Coerce inputs to strings.
	  a = a + "", b = b + "";

	  // Interpolate pairs of numbers in a & b.
	  while ((am = reA.exec(a))
	      && (bm = reB.exec(b))) {
	    if ((bs = bm.index) > bi) { // a string precedes the next number in b
	      bs = b.slice(bi, bs);
	      if (s[i]) s[i] += bs; // coalesce with previous string
	      else s[++i] = bs;
	    }
	    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
	      if (s[i]) s[i] += bm; // coalesce with previous string
	      else s[++i] = bm;
	    } else { // interpolate non-matching numbers
	      s[++i] = null;
	      q.push({i: i, x: reinterpolate(am, bm)});
	    }
	    bi = reB.lastIndex;
	  }

	  // Add remains of b.
	  if (bi < b.length) {
	    bs = b.slice(bi);
	    if (s[i]) s[i] += bs; // coalesce with previous string
	    else s[++i] = bs;
	  }

	  // Special optimization for only a single match.
	  // Otherwise, interpolate each of the numbers and rejoin the string.
	  return s.length < 2 ? (q[0]
	      ? one(q[0].x)
	      : zero(b))
	      : (b = q.length, function(t) {
	          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	          return s.join("");
	        });
	};

	var interpolateValue = function(a, b) {
	  var t = typeof b, c;
	  return b == null || t === "boolean" ? constant$3(b)
	      : (t === "number" ? reinterpolate
	      : t === "string" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)
	      : b instanceof color ? interpolateRgb
	      : b instanceof Date ? date
	      : Array.isArray(b) ? array$1
	      : isNaN(b) ? object
	      : reinterpolate)(a, b);
	};

	var interpolateRound = function(a, b) {
	  return a = +a, b -= a, function(t) {
	    return Math.round(a + b * t);
	  };
	};

	var degrees = 180 / Math.PI;

	var identity$2 = {
	  translateX: 0,
	  translateY: 0,
	  rotate: 0,
	  skewX: 0,
	  scaleX: 1,
	  scaleY: 1
	};

	var decompose = function(a, b, c, d, e, f) {
	  var scaleX, scaleY, skewX;
	  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
	  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
	  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
	  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
	  return {
	    translateX: e,
	    translateY: f,
	    rotate: Math.atan2(b, a) * degrees,
	    skewX: Math.atan(skewX) * degrees,
	    scaleX: scaleX,
	    scaleY: scaleY
	  };
	};

	var cssNode;
	var cssRoot;
	var cssView;
	var svgNode;

	function parseCss(value) {
	  if (value === "none") return identity$2;
	  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
	  cssNode.style.transform = value;
	  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
	  cssRoot.removeChild(cssNode);
	  value = value.slice(7, -1).split(",");
	  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
	}

	function parseSvg(value) {
	  if (value == null) return identity$2;
	  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
	  svgNode.setAttribute("transform", value);
	  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;
	  value = value.matrix;
	  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
	}

	function interpolateTransform(parse, pxComma, pxParen, degParen) {

	  function pop(s) {
	    return s.length ? s.pop() + " " : "";
	  }

	  function translate(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push("translate(", null, pxComma, null, pxParen);
	      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});
	    } else if (xb || yb) {
	      s.push("translate(" + xb + pxComma + yb + pxParen);
	    }
	  }

	  function rotate(a, b, s, q) {
	    if (a !== b) {
	      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
	      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: reinterpolate(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "rotate(" + b + degParen);
	    }
	  }

	  function skewX(a, b, s, q) {
	    if (a !== b) {
	      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: reinterpolate(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "skewX(" + b + degParen);
	    }
	  }

	  function scale(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
	      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});
	    } else if (xb !== 1 || yb !== 1) {
	      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
	    }
	  }

	  return function(a, b) {
	    var s = [], // string constants and placeholders
	        q = []; // number interpolators
	    a = parse(a), b = parse(b);
	    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
	    rotate(a.rotate, b.rotate, s, q);
	    skewX(a.skewX, b.skewX, s, q);
	    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
	    a = b = null; // gc
	    return function(t) {
	      var i = -1, n = q.length, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  };
	}

	var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
	var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

	var rho = Math.SQRT2;
	var rho2 = 2;
	var rho4 = 4;
	var epsilon2 = 1e-12;

	function cosh(x) {
	  return ((x = Math.exp(x)) + 1 / x) / 2;
	}

	function sinh(x) {
	  return ((x = Math.exp(x)) - 1 / x) / 2;
	}

	function tanh(x) {
	  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	}

	// p0 = [ux0, uy0, w0]
	// p1 = [ux1, uy1, w1]
	var interpolateZoom = function(p0, p1) {
	  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
	      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
	      dx = ux1 - ux0,
	      dy = uy1 - uy0,
	      d2 = dx * dx + dy * dy,
	      i,
	      S;

	  // Special case for u0 ≅ u1.
	  if (d2 < epsilon2) {
	    S = Math.log(w1 / w0) / rho;
	    i = function(t) {
	      return [
	        ux0 + t * dx,
	        uy0 + t * dy,
	        w0 * Math.exp(rho * t * S)
	      ];
	    };
	  }

	  // General case.
	  else {
	    var d1 = Math.sqrt(d2),
	        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
	        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
	        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
	        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	    S = (r1 - r0) / rho;
	    i = function(t) {
	      var s = t * S,
	          coshr0 = cosh(r0),
	          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
	      return [
	        ux0 + u * dx,
	        uy0 + u * dy,
	        w0 * coshr0 / cosh(rho * s + r0)
	      ];
	    };
	  }

	  i.duration = S * 1000;

	  return i;
	};

	function hsl$1(hue$$1) {
	  return function(start, end) {
	    var h = hue$$1((start = hsl(start)).h, (end = hsl(end)).h),
	        s = nogamma(start.s, end.s),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.s = s(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}

	var hsl$2 = hsl$1(hue);
	var hslLong = hsl$1(nogamma);

	function lab$1(start, end) {
	  var l = nogamma((start = lab(start)).l, (end = lab(end)).l),
	      a = nogamma(start.a, end.a),
	      b = nogamma(start.b, end.b),
	      opacity = nogamma(start.opacity, end.opacity);
	  return function(t) {
	    start.l = l(t);
	    start.a = a(t);
	    start.b = b(t);
	    start.opacity = opacity(t);
	    return start + "";
	  };
	}

	function hcl$1(hue$$1) {
	  return function(start, end) {
	    var h = hue$$1((start = hcl(start)).h, (end = hcl(end)).h),
	        c = nogamma(start.c, end.c),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.c = c(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}

	var hcl$2 = hcl$1(hue);
	var hclLong = hcl$1(nogamma);

	function cubehelix$1(hue$$1) {
	  return (function cubehelixGamma(y) {
	    y = +y;

	    function cubehelix$$1(start, end) {
	      var h = hue$$1((start = cubehelix(start)).h, (end = cubehelix(end)).h),
	          s = nogamma(start.s, end.s),
	          l = nogamma(start.l, end.l),
	          opacity = nogamma(start.opacity, end.opacity);
	      return function(t) {
	        start.h = h(t);
	        start.s = s(t);
	        start.l = l(Math.pow(t, y));
	        start.opacity = opacity(t);
	        return start + "";
	      };
	    }

	    cubehelix$$1.gamma = cubehelixGamma;

	    return cubehelix$$1;
	  })(1);
	}

	var cubehelix$2 = cubehelix$1(hue);
	var cubehelixLong = cubehelix$1(nogamma);

	var quantize = function(interpolator, n) {
	  var samples = new Array(n);
	  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
	  return samples;
	};

	var frame = 0;
	var timeout = 0;
	var interval = 0;
	var pokeDelay = 1000;
	var taskHead;
	var taskTail;
	var clockLast = 0;
	var clockNow = 0;
	var clockSkew = 0;
	var clock = typeof performance === "object" && performance.now ? performance : Date;
	var setFrame = typeof requestAnimationFrame === "function" ? requestAnimationFrame : function(f) { setTimeout(f, 17); };

	function now() {
	  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
	}

	function clearNow() {
	  clockNow = 0;
	}

	function Timer() {
	  this._call =
	  this._time =
	  this._next = null;
	}

	Timer.prototype = timer.prototype = {
	  constructor: Timer,
	  restart: function(callback, delay, time) {
	    if (typeof callback !== "function") throw new TypeError("callback is not a function");
	    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
	    if (!this._next && taskTail !== this) {
	      if (taskTail) taskTail._next = this;
	      else taskHead = this;
	      taskTail = this;
	    }
	    this._call = callback;
	    this._time = time;
	    sleep();
	  },
	  stop: function() {
	    if (this._call) {
	      this._call = null;
	      this._time = Infinity;
	      sleep();
	    }
	  }
	};

	function timer(callback, delay, time) {
	  var t = new Timer;
	  t.restart(callback, delay, time);
	  return t;
	}

	function timerFlush() {
	  now(); // Get the current time, if not already set.
	  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
	  var t = taskHead, e;
	  while (t) {
	    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
	    t = t._next;
	  }
	  --frame;
	}

	function wake() {
	  clockNow = (clockLast = clock.now()) + clockSkew;
	  frame = timeout = 0;
	  try {
	    timerFlush();
	  } finally {
	    frame = 0;
	    nap();
	    clockNow = 0;
	  }
	}

	function poke() {
	  var now = clock.now(), delay = now - clockLast;
	  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
	}

	function nap() {
	  var t0, t1 = taskHead, t2, time = Infinity;
	  while (t1) {
	    if (t1._call) {
	      if (time > t1._time) time = t1._time;
	      t0 = t1, t1 = t1._next;
	    } else {
	      t2 = t1._next, t1._next = null;
	      t1 = t0 ? t0._next = t2 : taskHead = t2;
	    }
	  }
	  taskTail = t0;
	  sleep(time);
	}

	function sleep(time) {
	  if (frame) return; // Soonest alarm already set, or will be.
	  if (timeout) timeout = clearTimeout(timeout);
	  var delay = time - clockNow;
	  if (delay > 24) {
	    if (time < Infinity) timeout = setTimeout(wake, delay);
	    if (interval) interval = clearInterval(interval);
	  } else {
	    if (!interval) clockLast = clockNow, interval = setInterval(poke, pokeDelay);
	    frame = 1, setFrame(wake);
	  }
	}

	var timeout$1 = function(callback, delay, time) {
	  var t = new Timer;
	  delay = delay == null ? 0 : +delay;
	  t.restart(function(elapsed) {
	    t.stop();
	    callback(elapsed + delay);
	  }, delay, time);
	  return t;
	};

	var interval$1 = function(callback, delay, time) {
	  var t = new Timer, total = delay;
	  if (delay == null) return t.restart(callback, delay, time), t;
	  delay = +delay, time = time == null ? now() : +time;
	  t.restart(function tick(elapsed) {
	    elapsed += total;
	    t.restart(tick, total += delay, time);
	    callback(elapsed);
	  }, delay, time);
	  return t;
	};

	var emptyOn = dispatch("start", "end", "interrupt");
	var emptyTween = [];

	var CREATED = 0;
	var SCHEDULED = 1;
	var STARTING = 2;
	var STARTED = 3;
	var RUNNING = 4;
	var ENDING = 5;
	var ENDED = 6;

	var schedule = function(node, name, id, index, group, timing) {
	  var schedules = node.__transition;
	  if (!schedules) node.__transition = {};
	  else if (id in schedules) return;
	  create(node, id, {
	    name: name,
	    index: index, // For context during callback.
	    group: group, // For context during callback.
	    on: emptyOn,
	    tween: emptyTween,
	    time: timing.time,
	    delay: timing.delay,
	    duration: timing.duration,
	    ease: timing.ease,
	    timer: null,
	    state: CREATED
	  });
	};

	function init(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error("too late");
	  return schedule;
	}

	function set$1(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error("too late");
	  return schedule;
	}

	function get$1(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id])) throw new Error("too late");
	  return schedule;
	}

	function create(node, id, self) {
	  var schedules = node.__transition,
	      tween;

	  // Initialize the self timer when the transition is created.
	  // Note the actual delay is not known until the first callback!
	  schedules[id] = self;
	  self.timer = timer(schedule, 0, self.time);

	  function schedule(elapsed) {
	    self.state = SCHEDULED;
	    self.timer.restart(start, self.delay, self.time);

	    // If the elapsed delay is less than our first sleep, start immediately.
	    if (self.delay <= elapsed) start(elapsed - self.delay);
	  }

	  function start(elapsed) {
	    var i, j, n, o;

	    // If the state is not SCHEDULED, then we previously errored on start.
	    if (self.state !== SCHEDULED) return stop();

	    for (i in schedules) {
	      o = schedules[i];
	      if (o.name !== self.name) continue;

	      // While this element already has a starting transition during this frame,
	      // defer starting an interrupting transition until that transition has a
	      // chance to tick (and possibly end); see d3/d3-transition#54!
	      if (o.state === STARTED) return timeout$1(start);

	      // Interrupt the active transition, if any.
	      // Dispatch the interrupt event.
	      if (o.state === RUNNING) {
	        o.state = ENDED;
	        o.timer.stop();
	        o.on.call("interrupt", node, node.__data__, o.index, o.group);
	        delete schedules[i];
	      }

	      // Cancel any pre-empted transitions. No interrupt event is dispatched
	      // because the cancelled transitions never started. Note that this also
	      // removes this transition from the pending list!
	      else if (+i < id) {
	        o.state = ENDED;
	        o.timer.stop();
	        delete schedules[i];
	      }
	    }

	    // Defer the first tick to end of the current frame; see d3/d3#1576.
	    // Note the transition may be canceled after start and before the first tick!
	    // Note this must be scheduled before the start event; see d3/d3-transition#16!
	    // Assuming this is successful, subsequent callbacks go straight to tick.
	    timeout$1(function() {
	      if (self.state === STARTED) {
	        self.state = RUNNING;
	        self.timer.restart(tick, self.delay, self.time);
	        tick(elapsed);
	      }
	    });

	    // Dispatch the start event.
	    // Note this must be done before the tween are initialized.
	    self.state = STARTING;
	    self.on.call("start", node, node.__data__, self.index, self.group);
	    if (self.state !== STARTING) return; // interrupted
	    self.state = STARTED;

	    // Initialize the tween, deleting null tween.
	    tween = new Array(n = self.tween.length);
	    for (i = 0, j = -1; i < n; ++i) {
	      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
	        tween[++j] = o;
	      }
	    }
	    tween.length = j + 1;
	  }

	  function tick(elapsed) {
	    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
	        i = -1,
	        n = tween.length;

	    while (++i < n) {
	      tween[i].call(null, t);
	    }

	    // Dispatch the end event.
	    if (self.state === ENDING) {
	      self.on.call("end", node, node.__data__, self.index, self.group);
	      stop();
	    }
	  }

	  function stop() {
	    self.state = ENDED;
	    self.timer.stop();
	    delete schedules[id];
	    for (var i in schedules) return; // eslint-disable-line no-unused-vars
	    delete node.__transition;
	  }
	}

	var interrupt = function(node, name) {
	  var schedules = node.__transition,
	      schedule,
	      active,
	      empty = true,
	      i;

	  if (!schedules) return;

	  name = name == null ? null : name + "";

	  for (i in schedules) {
	    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
	    active = schedule.state > STARTING && schedule.state < ENDING;
	    schedule.state = ENDED;
	    schedule.timer.stop();
	    if (active) schedule.on.call("interrupt", node, node.__data__, schedule.index, schedule.group);
	    delete schedules[i];
	  }

	  if (empty) delete node.__transition;
	};

	var selection_interrupt = function(name) {
	  return this.each(function() {
	    interrupt(this, name);
	  });
	};

	function tweenRemove(id, name) {
	  var tween0, tween1;
	  return function() {
	    var schedule = set$1(this, id),
	        tween = schedule.tween;

	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = tween0 = tween;
	      for (var i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1 = tween1.slice();
	          tween1.splice(i, 1);
	          break;
	        }
	      }
	    }

	    schedule.tween = tween1;
	  };
	}

	function tweenFunction(id, name, value) {
	  var tween0, tween1;
	  if (typeof value !== "function") throw new Error;
	  return function() {
	    var schedule = set$1(this, id),
	        tween = schedule.tween;

	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = (tween0 = tween).slice();
	      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1[i] = t;
	          break;
	        }
	      }
	      if (i === n) tween1.push(t);
	    }

	    schedule.tween = tween1;
	  };
	}

	var transition_tween = function(name, value) {
	  var id = this._id;

	  name += "";

	  if (arguments.length < 2) {
	    var tween = get$1(this.node(), id).tween;
	    for (var i = 0, n = tween.length, t; i < n; ++i) {
	      if ((t = tween[i]).name === name) {
	        return t.value;
	      }
	    }
	    return null;
	  }

	  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
	};

	function tweenValue(transition, name, value) {
	  var id = transition._id;

	  transition.each(function() {
	    var schedule = set$1(this, id);
	    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
	  });

	  return function(node) {
	    return get$1(node, id).value[name];
	  };
	}

	var interpolate$$1 = function(a, b) {
	  var c;
	  return (typeof b === "number" ? reinterpolate
	      : b instanceof color ? interpolateRgb
	      : (c = color(b)) ? (b = c, interpolateRgb)
	      : interpolateString)(a, b);
	};

	function attrRemove$1(name) {
	  return function() {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS$1(fullname) {
	  return function() {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant$1(name, interpolate$$1, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = this.getAttribute(name);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value1);
	  };
	}

	function attrConstantNS$1(fullname, interpolate$$1, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value1);
	  };
	}

	function attrFunction$1(name, interpolate$$1, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0, value1 = value(this);
	    if (value1 == null) return void this.removeAttribute(name);
	    value0 = this.getAttribute(name);
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}

	function attrFunctionNS$1(fullname, interpolate$$1, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0, value1 = value(this);
	    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
	    value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}

	var transition_attr = function(name, value) {
	  var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate$$1;
	  return this.attrTween(name, typeof value === "function"
	      ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value))
	      : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)
	      : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value + ""));
	};

	function attrTweenNS(fullname, value) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.setAttributeNS(fullname.space, fullname.local, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	function attrTween(name, value) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.setAttribute(name, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	var transition_attrTween = function(name, value) {
	  var key = "attr." + name;
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error;
	  var fullname = namespace(name);
	  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
	};

	function delayFunction(id, value) {
	  return function() {
	    init(this, id).delay = +value.apply(this, arguments);
	  };
	}

	function delayConstant(id, value) {
	  return value = +value, function() {
	    init(this, id).delay = value;
	  };
	}

	var transition_delay = function(value) {
	  var id = this._id;

	  return arguments.length
	      ? this.each((typeof value === "function"
	          ? delayFunction
	          : delayConstant)(id, value))
	      : get$1(this.node(), id).delay;
	};

	function durationFunction(id, value) {
	  return function() {
	    set$1(this, id).duration = +value.apply(this, arguments);
	  };
	}

	function durationConstant(id, value) {
	  return value = +value, function() {
	    set$1(this, id).duration = value;
	  };
	}

	var transition_duration = function(value) {
	  var id = this._id;

	  return arguments.length
	      ? this.each((typeof value === "function"
	          ? durationFunction
	          : durationConstant)(id, value))
	      : get$1(this.node(), id).duration;
	};

	function easeConstant(id, value) {
	  if (typeof value !== "function") throw new Error;
	  return function() {
	    set$1(this, id).ease = value;
	  };
	}

	var transition_ease = function(value) {
	  var id = this._id;

	  return arguments.length
	      ? this.each(easeConstant(id, value))
	      : get$1(this.node(), id).ease;
	};

	var transition_filter = function(match) {
	  if (typeof match !== "function") match = matcher$1(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new Transition(subgroups, this._parents, this._name, this._id);
	};

	var transition_merge = function(transition) {
	  if (transition._id !== this._id) throw new Error;

	  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new Transition(merges, this._parents, this._name, this._id);
	};

	function start(name) {
	  return (name + "").trim().split(/^|\s+/).every(function(t) {
	    var i = t.indexOf(".");
	    if (i >= 0) t = t.slice(0, i);
	    return !t || t === "start";
	  });
	}

	function onFunction(id, name, listener) {
	  var on0, on1, sit = start(name) ? init : set$1;
	  return function() {
	    var schedule = sit(this, id),
	        on = schedule.on;

	    // If this node shared a dispatch with the previous node,
	    // just assign the updated shared dispatch and we’re done!
	    // Otherwise, copy-on-write.
	    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

	    schedule.on = on1;
	  };
	}

	var transition_on = function(name, listener) {
	  var id = this._id;

	  return arguments.length < 2
	      ? get$1(this.node(), id).on.on(name)
	      : this.each(onFunction(id, name, listener));
	};

	function removeFunction(id) {
	  return function() {
	    var parent = this.parentNode;
	    for (var i in this.__transition) if (+i !== id) return;
	    if (parent) parent.removeChild(this);
	  };
	}

	var transition_remove = function() {
	  return this.on("end.remove", removeFunction(this._id));
	};

	var transition_select = function(select$$1) {
	  var name = this._name,
	      id = this._id;

	  if (typeof select$$1 !== "function") select$$1 = selector(select$$1);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select$$1.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	        schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
	      }
	    }
	  }

	  return new Transition(subgroups, this._parents, name, id);
	};

	var transition_selectAll = function(select$$1) {
	  var name = this._name,
	      id = this._id;

	  if (typeof select$$1 !== "function") select$$1 = selectorAll(select$$1);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        for (var children = select$$1.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
	          if (child = children[k]) {
	            schedule(child, name, id, k, children, inherit);
	          }
	        }
	        subgroups.push(children);
	        parents.push(node);
	      }
	    }
	  }

	  return new Transition(subgroups, parents, name, id);
	};

	var Selection$1 = selection.prototype.constructor;

	var transition_selection = function() {
	  return new Selection$1(this._groups, this._parents);
	};

	function styleRemove$1(name, interpolate$$2) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var style = window(this).getComputedStyle(this, null),
	        value0 = style.getPropertyValue(name),
	        value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$2(value00 = value0, value10 = value1);
	  };
	}

	function styleRemoveEnd(name) {
	  return function() {
	    this.style.removeProperty(name);
	  };
	}

	function styleConstant$1(name, interpolate$$2, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = window(this).getComputedStyle(this, null).getPropertyValue(name);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$2(value00 = value0, value1);
	  };
	}

	function styleFunction$1(name, interpolate$$2, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var style = window(this).getComputedStyle(this, null),
	        value0 = style.getPropertyValue(name),
	        value1 = value(this);
	    if (value1 == null) value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$2(value00 = value0, value10 = value1);
	  };
	}

	var transition_style = function(name, value, priority) {
	  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate$$1;
	  return value == null ? this
	          .styleTween(name, styleRemove$1(name, i))
	          .on("end.style." + name, styleRemoveEnd(name))
	      : this.styleTween(name, typeof value === "function"
	          ? styleFunction$1(name, i, tweenValue(this, "style." + name, value))
	          : styleConstant$1(name, i, value + ""), priority);
	};

	function styleTween(name, value, priority) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.style.setProperty(name, i(t), priority);
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	var transition_styleTween = function(name, value, priority) {
	  var key = "style." + (name += "");
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error;
	  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
	};

	function textConstant$1(value) {
	  return function() {
	    this.textContent = value;
	  };
	}

	function textFunction$1(value) {
	  return function() {
	    var value1 = value(this);
	    this.textContent = value1 == null ? "" : value1;
	  };
	}

	var transition_text = function(value) {
	  return this.tween("text", typeof value === "function"
	      ? textFunction$1(tweenValue(this, "text", value))
	      : textConstant$1(value == null ? "" : value + ""));
	};

	var transition_transition = function() {
	  var name = this._name,
	      id0 = this._id,
	      id1 = newId();

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        var inherit = get$1(node, id0);
	        schedule(node, name, id1, i, group, {
	          time: inherit.time + inherit.delay + inherit.duration,
	          delay: 0,
	          duration: inherit.duration,
	          ease: inherit.ease
	        });
	      }
	    }
	  }

	  return new Transition(groups, this._parents, name, id1);
	};

	var id = 0;

	function Transition(groups, parents, name, id) {
	  this._groups = groups;
	  this._parents = parents;
	  this._name = name;
	  this._id = id;
	}

	function transition(name) {
	  return selection().transition(name);
	}

	function newId() {
	  return ++id;
	}

	var selection_prototype = selection.prototype;

	Transition.prototype = transition.prototype = {
	  constructor: Transition,
	  select: transition_select,
	  selectAll: transition_selectAll,
	  filter: transition_filter,
	  merge: transition_merge,
	  selection: transition_selection,
	  transition: transition_transition,
	  call: selection_prototype.call,
	  nodes: selection_prototype.nodes,
	  node: selection_prototype.node,
	  size: selection_prototype.size,
	  empty: selection_prototype.empty,
	  each: selection_prototype.each,
	  on: transition_on,
	  attr: transition_attr,
	  attrTween: transition_attrTween,
	  style: transition_style,
	  styleTween: transition_styleTween,
	  text: transition_text,
	  remove: transition_remove,
	  tween: transition_tween,
	  delay: transition_delay,
	  duration: transition_duration,
	  ease: transition_ease
	};

	function linear$1(t) {
	  return +t;
	}

	function quadIn(t) {
	  return t * t;
	}

	function quadOut(t) {
	  return t * (2 - t);
	}

	function quadInOut(t) {
	  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
	}

	function cubicIn(t) {
	  return t * t * t;
	}

	function cubicOut(t) {
	  return --t * t * t + 1;
	}

	function cubicInOut(t) {
	  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
	}

	var exponent = 3;

	var polyIn = (function custom(e) {
	  e = +e;

	  function polyIn(t) {
	    return Math.pow(t, e);
	  }

	  polyIn.exponent = custom;

	  return polyIn;
	})(exponent);

	var polyOut = (function custom(e) {
	  e = +e;

	  function polyOut(t) {
	    return 1 - Math.pow(1 - t, e);
	  }

	  polyOut.exponent = custom;

	  return polyOut;
	})(exponent);

	var polyInOut = (function custom(e) {
	  e = +e;

	  function polyInOut(t) {
	    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
	  }

	  polyInOut.exponent = custom;

	  return polyInOut;
	})(exponent);

	var pi = Math.PI;
	var halfPi = pi / 2;

	function sinIn(t) {
	  return 1 - Math.cos(t * halfPi);
	}

	function sinOut(t) {
	  return Math.sin(t * halfPi);
	}

	function sinInOut(t) {
	  return (1 - Math.cos(pi * t)) / 2;
	}

	function expIn(t) {
	  return Math.pow(2, 10 * t - 10);
	}

	function expOut(t) {
	  return 1 - Math.pow(2, -10 * t);
	}

	function expInOut(t) {
	  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
	}

	function circleIn(t) {
	  return 1 - Math.sqrt(1 - t * t);
	}

	function circleOut(t) {
	  return Math.sqrt(1 - --t * t);
	}

	function circleInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
	}

	var b1 = 4 / 11;
	var b2 = 6 / 11;
	var b3 = 8 / 11;
	var b4 = 3 / 4;
	var b5 = 9 / 11;
	var b6 = 10 / 11;
	var b7 = 15 / 16;
	var b8 = 21 / 22;
	var b9 = 63 / 64;
	var b0 = 1 / b1 / b1;

	function bounceIn(t) {
	  return 1 - bounceOut(1 - t);
	}

	function bounceOut(t) {
	  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
	}

	function bounceInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
	}

	var overshoot = 1.70158;

	var backIn = (function custom(s) {
	  s = +s;

	  function backIn(t) {
	    return t * t * ((s + 1) * t - s);
	  }

	  backIn.overshoot = custom;

	  return backIn;
	})(overshoot);

	var backOut = (function custom(s) {
	  s = +s;

	  function backOut(t) {
	    return --t * t * ((s + 1) * t + s) + 1;
	  }

	  backOut.overshoot = custom;

	  return backOut;
	})(overshoot);

	var backInOut = (function custom(s) {
	  s = +s;

	  function backInOut(t) {
	    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
	  }

	  backInOut.overshoot = custom;

	  return backInOut;
	})(overshoot);

	var tau = 2 * Math.PI;
	var amplitude = 1;
	var period = 0.3;

	var elasticIn = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	  function elasticIn(t) {
	    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
	  }

	  elasticIn.amplitude = function(a) { return custom(a, p * tau); };
	  elasticIn.period = function(p) { return custom(a, p); };

	  return elasticIn;
	})(amplitude, period);

	var elasticOut = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	  function elasticOut(t) {
	    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
	  }

	  elasticOut.amplitude = function(a) { return custom(a, p * tau); };
	  elasticOut.period = function(p) { return custom(a, p); };

	  return elasticOut;
	})(amplitude, period);

	var elasticInOut = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	  function elasticInOut(t) {
	    return ((t = t * 2 - 1) < 0
	        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)
	        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
	  }

	  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };
	  elasticInOut.period = function(p) { return custom(a, p); };

	  return elasticInOut;
	})(amplitude, period);

	var defaultTiming = {
	  time: null, // Set on use.
	  delay: 0,
	  duration: 250,
	  ease: cubicInOut
	};

	function inherit(node, id) {
	  var timing;
	  while (!(timing = node.__transition) || !(timing = timing[id])) {
	    if (!(node = node.parentNode)) {
	      return defaultTiming.time = now(), defaultTiming;
	    }
	  }
	  return timing;
	}

	var selection_transition = function(name) {
	  var id,
	      timing;

	  if (name instanceof Transition) {
	    id = name._id, name = name._name;
	  } else {
	    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
	  }

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        schedule(node, name, id, i, group, timing || inherit(node, id));
	      }
	    }
	  }

	  return new Transition(groups, this._parents, name, id);
	};

	selection.prototype.interrupt = selection_interrupt;
	selection.prototype.transition = selection_transition;

	var root$1 = [null];

	var active = function(node, name) {
	  var schedules = node.__transition,
	      schedule,
	      i;

	  if (schedules) {
	    name = name == null ? null : name + "";
	    for (i in schedules) {
	      if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
	        return new Transition([[node]], root$1, name, +i);
	      }
	    }
	  }

	  return null;
	};

	var constant$4 = function(x) {
	  return function() {
	    return x;
	  };
	};

	var BrushEvent = function(target, type, selection) {
	  this.target = target;
	  this.type = type;
	  this.selection = selection;
	};

	function nopropagation$1() {
	  exports.event.stopImmediatePropagation();
	}

	var noevent$1 = function() {
	  exports.event.preventDefault();
	  exports.event.stopImmediatePropagation();
	};

	var MODE_DRAG = {name: "drag"};
	var MODE_SPACE = {name: "space"};
	var MODE_HANDLE = {name: "handle"};
	var MODE_CENTER = {name: "center"};

	var X = {
	  name: "x",
	  handles: ["e", "w"].map(type),
	  input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },
	  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }
	};

	var Y = {
	  name: "y",
	  handles: ["n", "s"].map(type),
	  input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },
	  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }
	};

	var XY = {
	  name: "xy",
	  handles: ["n", "e", "s", "w", "nw", "ne", "se", "sw"].map(type),
	  input: function(xy) { return xy; },
	  output: function(xy) { return xy; }
	};

	var cursors = {
	  overlay: "crosshair",
	  selection: "move",
	  n: "ns-resize",
	  e: "ew-resize",
	  s: "ns-resize",
	  w: "ew-resize",
	  nw: "nwse-resize",
	  ne: "nesw-resize",
	  se: "nwse-resize",
	  sw: "nesw-resize"
	};

	var flipX = {
	  e: "w",
	  w: "e",
	  nw: "ne",
	  ne: "nw",
	  se: "sw",
	  sw: "se"
	};

	var flipY = {
	  n: "s",
	  s: "n",
	  nw: "sw",
	  ne: "se",
	  se: "ne",
	  sw: "nw"
	};

	var signsX = {
	  overlay: +1,
	  selection: +1,
	  n: null,
	  e: +1,
	  s: null,
	  w: -1,
	  nw: -1,
	  ne: +1,
	  se: +1,
	  sw: -1
	};

	var signsY = {
	  overlay: +1,
	  selection: +1,
	  n: -1,
	  e: null,
	  s: +1,
	  w: null,
	  nw: -1,
	  ne: -1,
	  se: +1,
	  sw: +1
	};

	function type(t) {
	  return {type: t};
	}

	// Ignore right-click, since that should open the context menu.
	function defaultFilter() {
	  return !exports.event.button;
	}

	function defaultExtent() {
	  var svg = this.ownerSVGElement || this;
	  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
	}

	// Like d3.local, but with the name “__brush” rather than auto-generated.
	function local$$1(node) {
	  while (!node.__brush) if (!(node = node.parentNode)) return;
	  return node.__brush;
	}

	function empty(extent) {
	  return extent[0][0] === extent[1][0]
	      || extent[0][1] === extent[1][1];
	}

	function brushSelection(node) {
	  var state = node.__brush;
	  return state ? state.dim.output(state.selection) : null;
	}

	function brushX() {
	  return brush$1(X);
	}

	function brushY() {
	  return brush$1(Y);
	}

	var brush = function() {
	  return brush$1(XY);
	};

	function brush$1(dim) {
	  var extent = defaultExtent,
	      filter = defaultFilter,
	      listeners = dispatch(brush, "start", "brush", "end"),
	      handleSize = 6,
	      touchending;

	  function brush(group) {
	    var overlay = group
	        .property("__brush", initialize)
	      .selectAll(".overlay")
	      .data([type("overlay")]);

	    overlay.enter().append("rect")
	        .attr("class", "overlay")
	        .attr("pointer-events", "all")
	        .attr("cursor", cursors.overlay)
	      .merge(overlay)
	        .each(function() {
	          var extent = local$$1(this).extent;
	          select(this)
	              .attr("x", extent[0][0])
	              .attr("y", extent[0][1])
	              .attr("width", extent[1][0] - extent[0][0])
	              .attr("height", extent[1][1] - extent[0][1]);
	        });

	    group.selectAll(".selection")
	      .data([type("selection")])
	      .enter().append("rect")
	        .attr("class", "selection")
	        .attr("cursor", cursors.selection)
	        .attr("fill", "#777")
	        .attr("fill-opacity", 0.3)
	        .attr("stroke", "#fff")
	        .attr("shape-rendering", "crispEdges");

	    var handle = group.selectAll(".handle")
	      .data(dim.handles, function(d) { return d.type; });

	    handle.exit().remove();

	    handle.enter().append("rect")
	        .attr("class", function(d) { return "handle handle--" + d.type; })
	        .attr("cursor", function(d) { return cursors[d.type]; });

	    group
	        .each(redraw)
	        .attr("fill", "none")
	        .attr("pointer-events", "all")
	        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
	        .on("mousedown.brush touchstart.brush", started);
	  }

	  brush.move = function(group, selection$$1) {
	    if (group.selection) {
	      group
	          .on("start.brush", function() { emitter(this, arguments).beforestart().start(); })
	          .on("interrupt.brush end.brush", function() { emitter(this, arguments).end(); })
	          .tween("brush", function() {
	            var that = this,
	                state = that.__brush,
	                emit = emitter(that, arguments),
	                selection0 = state.selection,
	                selection1 = dim.input(typeof selection$$1 === "function" ? selection$$1.apply(this, arguments) : selection$$1, state.extent),
	                i = interpolateValue(selection0, selection1);

	            function tween(t) {
	              state.selection = t === 1 && empty(selection1) ? null : i(t);
	              redraw.call(that);
	              emit.brush();
	            }

	            return selection0 && selection1 ? tween : tween(1);
	          });
	    } else {
	      group
	          .each(function() {
	            var that = this,
	                args = arguments,
	                state = that.__brush,
	                selection1 = dim.input(typeof selection$$1 === "function" ? selection$$1.apply(that, args) : selection$$1, state.extent),
	                emit = emitter(that, args).beforestart();

	            interrupt(that);
	            state.selection = selection1 == null || empty(selection1) ? null : selection1;
	            redraw.call(that);
	            emit.start().brush().end();
	          });
	    }
	  };

	  function redraw() {
	    var group = select(this),
	        selection$$1 = local$$1(this).selection;

	    if (selection$$1) {
	      group.selectAll(".selection")
	          .style("display", null)
	          .attr("x", selection$$1[0][0])
	          .attr("y", selection$$1[0][1])
	          .attr("width", selection$$1[1][0] - selection$$1[0][0])
	          .attr("height", selection$$1[1][1] - selection$$1[0][1]);

	      group.selectAll(".handle")
	          .style("display", null)
	          .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection$$1[1][0] - handleSize / 2 : selection$$1[0][0] - handleSize / 2; })
	          .attr("y", function(d) { return d.type[0] === "s" ? selection$$1[1][1] - handleSize / 2 : selection$$1[0][1] - handleSize / 2; })
	          .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection$$1[1][0] - selection$$1[0][0] + handleSize : handleSize; })
	          .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection$$1[1][1] - selection$$1[0][1] + handleSize : handleSize; });
	    }

	    else {
	      group.selectAll(".selection,.handle")
	          .style("display", "none")
	          .attr("x", null)
	          .attr("y", null)
	          .attr("width", null)
	          .attr("height", null);
	    }
	  }

	  function emitter(that, args) {
	    return that.__brush.emitter || new Emitter(that, args);
	  }

	  function Emitter(that, args) {
	    this.that = that;
	    this.args = args;
	    this.state = that.__brush;
	    this.active = 0;
	  }

	  Emitter.prototype = {
	    beforestart: function() {
	      if (++this.active === 1) this.state.emitter = this, this.starting = true;
	      return this;
	    },
	    start: function() {
	      if (this.starting) this.starting = false, this.emit("start");
	      return this;
	    },
	    brush: function() {
	      this.emit("brush");
	      return this;
	    },
	    end: function() {
	      if (--this.active === 0) delete this.state.emitter, this.emit("end");
	      return this;
	    },
	    emit: function(type) {
	      customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
	    }
	  };

	  function started() {
	    if (exports.event.touches) { if (exports.event.changedTouches.length < exports.event.touches.length) return noevent$1(); }
	    else if (touchending) return;
	    if (!filter.apply(this, arguments)) return;

	    var that = this,
	        type = exports.event.target.__data__.type,
	        mode = (exports.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (exports.event.altKey ? MODE_CENTER : MODE_HANDLE),
	        signX = dim === Y ? null : signsX[type],
	        signY = dim === X ? null : signsY[type],
	        state = local$$1(that),
	        extent = state.extent,
	        selection$$1 = state.selection,
	        W = extent[0][0], w0, w1,
	        N = extent[0][1], n0, n1,
	        E = extent[1][0], e0, e1,
	        S = extent[1][1], s0, s1,
	        dx,
	        dy,
	        moving,
	        shifting = signX && signY && exports.event.shiftKey,
	        lockX,
	        lockY,
	        point0 = mouse(that),
	        point = point0,
	        emit = emitter(that, arguments).beforestart();

	    if (type === "overlay") {
	      state.selection = selection$$1 = [
	        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],
	        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]
	      ];
	    } else {
	      w0 = selection$$1[0][0];
	      n0 = selection$$1[0][1];
	      e0 = selection$$1[1][0];
	      s0 = selection$$1[1][1];
	    }

	    w1 = w0;
	    n1 = n0;
	    e1 = e0;
	    s1 = s0;

	    var group = select(that)
	        .attr("pointer-events", "none");

	    var overlay = group.selectAll(".overlay")
	        .attr("cursor", cursors[type]);

	    if (exports.event.touches) {
	      group
	          .on("touchmove.brush", moved, true)
	          .on("touchend.brush touchcancel.brush", ended, true);
	    } else {
	      var view = select(exports.event.view)
	          .on("keydown.brush", keydowned, true)
	          .on("keyup.brush", keyupped, true)
	          .on("mousemove.brush", moved, true)
	          .on("mouseup.brush", ended, true);

	      dragDisable(exports.event.view);
	    }

	    nopropagation$1();
	    interrupt(that);
	    redraw.call(that);
	    emit.start();

	    function moved() {
	      var point1 = mouse(that);
	      if (shifting && !lockX && !lockY) {
	        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;
	        else lockX = true;
	      }
	      point = point1;
	      moving = true;
	      noevent$1();
	      move();
	    }

	    function move() {
	      var t;

	      dx = point[0] - point0[0];
	      dy = point[1] - point0[1];

	      switch (mode) {
	        case MODE_SPACE:
	        case MODE_DRAG: {
	          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
	          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
	          break;
	        }
	        case MODE_HANDLE: {
	          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
	          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
	          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
	          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
	          break;
	        }
	        case MODE_CENTER: {
	          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
	          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
	          break;
	        }
	      }

	      if (e1 < w1) {
	        signX *= -1;
	        t = w0, w0 = e0, e0 = t;
	        t = w1, w1 = e1, e1 = t;
	        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
	      }

	      if (s1 < n1) {
	        signY *= -1;
	        t = n0, n0 = s0, s0 = t;
	        t = n1, n1 = s1, s1 = t;
	        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
	      }

	      if (state.selection) selection$$1 = state.selection; // May be set by brush.move!
	      if (lockX) w1 = selection$$1[0][0], e1 = selection$$1[1][0];
	      if (lockY) n1 = selection$$1[0][1], s1 = selection$$1[1][1];

	      if (selection$$1[0][0] !== w1
	          || selection$$1[0][1] !== n1
	          || selection$$1[1][0] !== e1
	          || selection$$1[1][1] !== s1) {
	        state.selection = [[w1, n1], [e1, s1]];
	        redraw.call(that);
	        emit.brush();
	      }
	    }

	    function ended() {
	      nopropagation$1();
	      if (exports.event.touches) {
	        if (exports.event.touches.length) return;
	        if (touchending) clearTimeout(touchending);
	        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
	        group.on("touchmove.brush touchend.brush touchcancel.brush", null);
	      } else {
	        yesdrag(exports.event.view, moving);
	        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
	      }
	      group.attr("pointer-events", "all");
	      overlay.attr("cursor", cursors.overlay);
	      if (state.selection) selection$$1 = state.selection; // May be set by brush.move (on start)!
	      if (empty(selection$$1)) state.selection = null, redraw.call(that);
	      emit.end();
	    }

	    function keydowned() {
	      switch (exports.event.keyCode) {
	        case 16: { // SHIFT
	          shifting = signX && signY;
	          break;
	        }
	        case 18: { // ALT
	          if (mode === MODE_HANDLE) {
	            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
	            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
	            mode = MODE_CENTER;
	            move();
	          }
	          break;
	        }
	        case 32: { // SPACE; takes priority over ALT
	          if (mode === MODE_HANDLE || mode === MODE_CENTER) {
	            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;
	            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;
	            mode = MODE_SPACE;
	            overlay.attr("cursor", cursors.selection);
	            move();
	          }
	          break;
	        }
	        default: return;
	      }
	      noevent$1();
	    }

	    function keyupped() {
	      switch (exports.event.keyCode) {
	        case 16: { // SHIFT
	          if (shifting) {
	            lockX = lockY = shifting = false;
	            move();
	          }
	          break;
	        }
	        case 18: { // ALT
	          if (mode === MODE_CENTER) {
	            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
	            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
	            mode = MODE_HANDLE;
	            move();
	          }
	          break;
	        }
	        case 32: { // SPACE
	          if (mode === MODE_SPACE) {
	            if (exports.event.altKey) {
	              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
	              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
	              mode = MODE_CENTER;
	            } else {
	              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
	              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
	              mode = MODE_HANDLE;
	            }
	            overlay.attr("cursor", cursors[type]);
	            move();
	          }
	          break;
	        }
	        default: return;
	      }
	      noevent$1();
	    }
	  }

	  function initialize() {
	    var state = this.__brush || {selection: null};
	    state.extent = extent.apply(this, arguments);
	    state.dim = dim;
	    return state;
	  }

	  brush.extent = function(_) {
	    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$4([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;
	  };

	  brush.filter = function(_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$4(!!_), brush) : filter;
	  };

	  brush.handleSize = function(_) {
	    return arguments.length ? (handleSize = +_, brush) : handleSize;
	  };

	  brush.on = function() {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? brush : value;
	  };

	  return brush;
	}

	var cos = Math.cos;
	var sin = Math.sin;
	var pi$1 = Math.PI;
	var halfPi$1 = pi$1 / 2;
	var tau$1 = pi$1 * 2;
	var max$1 = Math.max;

	function compareValue(compare) {
	  return function(a, b) {
	    return compare(
	      a.source.value + a.target.value,
	      b.source.value + b.target.value
	    );
	  };
	}

	var chord = function() {
	  var padAngle = 0,
	      sortGroups = null,
	      sortSubgroups = null,
	      sortChords = null;

	  function chord(matrix) {
	    var n = matrix.length,
	        groupSums = [],
	        groupIndex = sequence(n),
	        subgroupIndex = [],
	        chords = [],
	        groups = chords.groups = new Array(n),
	        subgroups = new Array(n * n),
	        k,
	        x,
	        x0,
	        dx,
	        i,
	        j;

	    // Compute the sum.
	    k = 0, i = -1; while (++i < n) {
	      x = 0, j = -1; while (++j < n) {
	        x += matrix[i][j];
	      }
	      groupSums.push(x);
	      subgroupIndex.push(sequence(n));
	      k += x;
	    }

	    // Sort groups…
	    if (sortGroups) groupIndex.sort(function(a, b) {
	      return sortGroups(groupSums[a], groupSums[b]);
	    });

	    // Sort subgroups…
	    if (sortSubgroups) subgroupIndex.forEach(function(d, i) {
	      d.sort(function(a, b) {
	        return sortSubgroups(matrix[i][a], matrix[i][b]);
	      });
	    });

	    // Convert the sum to scaling factor for [0, 2pi].
	    // TODO Allow start and end angle to be specified?
	    // TODO Allow padding to be specified as percentage?
	    k = max$1(0, tau$1 - padAngle * n) / k;
	    dx = k ? padAngle : tau$1 / n;

	    // Compute the start and end angle for each group and subgroup.
	    // Note: Opera has a bug reordering object literal properties!
	    x = 0, i = -1; while (++i < n) {
	      x0 = x, j = -1; while (++j < n) {
	        var di = groupIndex[i],
	            dj = subgroupIndex[di][j],
	            v = matrix[di][dj],
	            a0 = x,
	            a1 = x += v * k;
	        subgroups[dj * n + di] = {
	          index: di,
	          subindex: dj,
	          startAngle: a0,
	          endAngle: a1,
	          value: v
	        };
	      }
	      groups[di] = {
	        index: di,
	        startAngle: x0,
	        endAngle: x,
	        value: groupSums[di]
	      };
	      x += dx;
	    }

	    // Generate chords for each (non-empty) subgroup-subgroup link.
	    i = -1; while (++i < n) {
	      j = i - 1; while (++j < n) {
	        var source = subgroups[j * n + i],
	            target = subgroups[i * n + j];
	        if (source.value || target.value) {
	          chords.push(source.value < target.value
	              ? {source: target, target: source}
	              : {source: source, target: target});
	        }
	      }
	    }

	    return sortChords ? chords.sort(sortChords) : chords;
	  }

	  chord.padAngle = function(_) {
	    return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;
	  };

	  chord.sortGroups = function(_) {
	    return arguments.length ? (sortGroups = _, chord) : sortGroups;
	  };

	  chord.sortSubgroups = function(_) {
	    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
	  };

	  chord.sortChords = function(_) {
	    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
	  };

	  return chord;
	};

	var slice$2 = Array.prototype.slice;

	var constant$5 = function(x) {
	  return function() {
	    return x;
	  };
	};

	var pi$2 = Math.PI;
	var tau$2 = 2 * pi$2;
	var epsilon$1 = 1e-6;
	var tauEpsilon = tau$2 - epsilon$1;

	function Path() {
	  this._x0 = this._y0 = // start of current subpath
	  this._x1 = this._y1 = null; // end of current subpath
	  this._ = "";
	}

	function path() {
	  return new Path;
	}

	Path.prototype = path.prototype = {
	  constructor: Path,
	  moveTo: function(x, y) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
	  },
	  closePath: function() {
	    if (this._x1 !== null) {
	      this._x1 = this._x0, this._y1 = this._y0;
	      this._ += "Z";
	    }
	  },
	  lineTo: function(x, y) {
	    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  quadraticCurveTo: function(x1, y1, x, y) {
	    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
	    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  arcTo: function(x1, y1, x2, y2, r) {
	    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
	    var x0 = this._x1,
	        y0 = this._y1,
	        x21 = x2 - x1,
	        y21 = y2 - y1,
	        x01 = x0 - x1,
	        y01 = y0 - y1,
	        l01_2 = x01 * x01 + y01 * y01;

	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);

	    // Is this path empty? Move to (x1,y1).
	    if (this._x1 === null) {
	      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }

	    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
	    else if (!(l01_2 > epsilon$1)) {}

	    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
	    // Equivalently, is (x1,y1) coincident with (x2,y2)?
	    // Or, is the radius zero? Line to (x1,y1).
	    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {
	      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }

	    // Otherwise, draw an arc!
	    else {
	      var x20 = x2 - x0,
	          y20 = y2 - y0,
	          l21_2 = x21 * x21 + y21 * y21,
	          l20_2 = x20 * x20 + y20 * y20,
	          l21 = Math.sqrt(l21_2),
	          l01 = Math.sqrt(l01_2),
	          l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
	          t01 = l / l01,
	          t21 = l / l21;

	      // If the start tangent is not coincident with (x0,y0), line to.
	      if (Math.abs(t01 - 1) > epsilon$1) {
	        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
	      }

	      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
	    }
	  },
	  arc: function(x, y, r, a0, a1, ccw) {
	    x = +x, y = +y, r = +r;
	    var dx = r * Math.cos(a0),
	        dy = r * Math.sin(a0),
	        x0 = x + dx,
	        y0 = y + dy,
	        cw = 1 ^ ccw,
	        da = ccw ? a0 - a1 : a1 - a0;

	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);

	    // Is this path empty? Move to (x0,y0).
	    if (this._x1 === null) {
	      this._ += "M" + x0 + "," + y0;
	    }

	    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
	    else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {
	      this._ += "L" + x0 + "," + y0;
	    }

	    // Is this arc empty? We’re done.
	    if (!r) return;

	    // Does the angle go the wrong way? Flip the direction.
	    if (da < 0) da = da % tau$2 + tau$2;

	    // Is this a complete circle? Draw two arcs to complete the circle.
	    if (da > tauEpsilon) {
	      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
	    }

	    // Is this arc non-empty? Draw an arc!
	    else if (da > epsilon$1) {
	      this._ += "A" + r + "," + r + ",0," + (+(da >= pi$2)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
	    }
	  },
	  rect: function(x, y, w, h) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
	  },
	  toString: function() {
	    return this._;
	  }
	};

	function defaultSource(d) {
	  return d.source;
	}

	function defaultTarget(d) {
	  return d.target;
	}

	function defaultRadius(d) {
	  return d.radius;
	}

	function defaultStartAngle(d) {
	  return d.startAngle;
	}

	function defaultEndAngle(d) {
	  return d.endAngle;
	}

	var ribbon = function() {
	  var source = defaultSource,
	      target = defaultTarget,
	      radius = defaultRadius,
	      startAngle = defaultStartAngle,
	      endAngle = defaultEndAngle,
	      context = null;

	  function ribbon() {
	    var buffer,
	        argv = slice$2.call(arguments),
	        s = source.apply(this, argv),
	        t = target.apply(this, argv),
	        sr = +radius.apply(this, (argv[0] = s, argv)),
	        sa0 = startAngle.apply(this, argv) - halfPi$1,
	        sa1 = endAngle.apply(this, argv) - halfPi$1,
	        sx0 = sr * cos(sa0),
	        sy0 = sr * sin(sa0),
	        tr = +radius.apply(this, (argv[0] = t, argv)),
	        ta0 = startAngle.apply(this, argv) - halfPi$1,
	        ta1 = endAngle.apply(this, argv) - halfPi$1;

	    if (!context) context = buffer = path();

	    context.moveTo(sx0, sy0);
	    context.arc(0, 0, sr, sa0, sa1);
	    if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?
	      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
	      context.arc(0, 0, tr, ta0, ta1);
	    }
	    context.quadraticCurveTo(0, 0, sx0, sy0);
	    context.closePath();

	    if (buffer) return context = null, buffer + "" || null;
	  }

	  ribbon.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$5(+_), ribbon) : radius;
	  };

	  ribbon.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : startAngle;
	  };

	  ribbon.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : endAngle;
	  };

	  ribbon.source = function(_) {
	    return arguments.length ? (source = _, ribbon) : source;
	  };

	  ribbon.target = function(_) {
	    return arguments.length ? (target = _, ribbon) : target;
	  };

	  ribbon.context = function(_) {
	    return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;
	  };

	  return ribbon;
	};

	var prefix = "$";

	function Map() {}

	Map.prototype = map$1.prototype = {
	  constructor: Map,
	  has: function(key) {
	    return (prefix + key) in this;
	  },
	  get: function(key) {
	    return this[prefix + key];
	  },
	  set: function(key, value) {
	    this[prefix + key] = value;
	    return this;
	  },
	  remove: function(key) {
	    var property = prefix + key;
	    return property in this && delete this[property];
	  },
	  clear: function() {
	    for (var property in this) if (property[0] === prefix) delete this[property];
	  },
	  keys: function() {
	    var keys = [];
	    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
	    return keys;
	  },
	  values: function() {
	    var values = [];
	    for (var property in this) if (property[0] === prefix) values.push(this[property]);
	    return values;
	  },
	  entries: function() {
	    var entries = [];
	    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
	    return entries;
	  },
	  size: function() {
	    var size = 0;
	    for (var property in this) if (property[0] === prefix) ++size;
	    return size;
	  },
	  empty: function() {
	    for (var property in this) if (property[0] === prefix) return false;
	    return true;
	  },
	  each: function(f) {
	    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
	  }
	};

	function map$1(object, f) {
	  var map = new Map;

	  // Copy constructor.
	  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });

	  // Index array by numeric index or specified key function.
	  else if (Array.isArray(object)) {
	    var i = -1,
	        n = object.length,
	        o;

	    if (f == null) while (++i < n) map.set(i, object[i]);
	    else while (++i < n) map.set(f(o = object[i], i, object), o);
	  }

	  // Convert object to map.
	  else if (object) for (var key in object) map.set(key, object[key]);

	  return map;
	}

	var nest = function() {
	  var keys = [],
	      sortKeys = [],
	      sortValues,
	      rollup,
	      nest;

	  function apply(array, depth, createResult, setResult) {
	    if (depth >= keys.length) return rollup != null
	        ? rollup(array) : (sortValues != null
	        ? array.sort(sortValues)
	        : array);

	    var i = -1,
	        n = array.length,
	        key = keys[depth++],
	        keyValue,
	        value,
	        valuesByKey = map$1(),
	        values,
	        result = createResult();

	    while (++i < n) {
	      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
	        values.push(value);
	      } else {
	        valuesByKey.set(keyValue, [value]);
	      }
	    }

	    valuesByKey.each(function(values, key) {
	      setResult(result, key, apply(values, depth, createResult, setResult));
	    });

	    return result;
	  }

	  function entries(map, depth) {
	    if (++depth > keys.length) return map;
	    var array, sortKey = sortKeys[depth - 1];
	    if (rollup != null && depth >= keys.length) array = map.entries();
	    else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
	    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
	  }

	  return nest = {
	    object: function(array) { return apply(array, 0, createObject, setObject); },
	    map: function(array) { return apply(array, 0, createMap, setMap); },
	    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
	    key: function(d) { keys.push(d); return nest; },
	    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
	    sortValues: function(order) { sortValues = order; return nest; },
	    rollup: function(f) { rollup = f; return nest; }
	  };
	};

	function createObject() {
	  return {};
	}

	function setObject(object, key, value) {
	  object[key] = value;
	}

	function createMap() {
	  return map$1();
	}

	function setMap(map, key, value) {
	  map.set(key, value);
	}

	function Set() {}

	var proto = map$1.prototype;

	Set.prototype = set$2.prototype = {
	  constructor: Set,
	  has: proto.has,
	  add: function(value) {
	    value += "";
	    this[prefix + value] = value;
	    return this;
	  },
	  remove: proto.remove,
	  clear: proto.clear,
	  values: proto.keys,
	  size: proto.size,
	  empty: proto.empty,
	  each: proto.each
	};

	function set$2(object, f) {
	  var set = new Set;

	  // Copy constructor.
	  if (object instanceof Set) object.each(function(value) { set.add(value); });

	  // Otherwise, assume it’s an array.
	  else if (object) {
	    var i = -1, n = object.length;
	    if (f == null) while (++i < n) set.add(object[i]);
	    else while (++i < n) set.add(f(object[i], i, object));
	  }

	  return set;
	}

	var keys = function(map) {
	  var keys = [];
	  for (var key in map) keys.push(key);
	  return keys;
	};

	var values = function(map) {
	  var values = [];
	  for (var key in map) values.push(map[key]);
	  return values;
	};

	var entries = function(map) {
	  var entries = [];
	  for (var key in map) entries.push({key: key, value: map[key]});
	  return entries;
	};

	function objectConverter(columns) {
	  return new Function("d", "return {" + columns.map(function(name, i) {
	    return JSON.stringify(name) + ": d[" + i + "]";
	  }).join(",") + "}");
	}

	function customConverter(columns, f) {
	  var object = objectConverter(columns);
	  return function(row, i) {
	    return f(object(row), i, columns);
	  };
	}

	// Compute unique columns in order of discovery.
	function inferColumns(rows) {
	  var columnSet = Object.create(null),
	      columns = [];

	  rows.forEach(function(row) {
	    for (var column in row) {
	      if (!(column in columnSet)) {
	        columns.push(columnSet[column] = column);
	      }
	    }
	  });

	  return columns;
	}

	var dsv = function(delimiter) {
	  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
	      delimiterCode = delimiter.charCodeAt(0);

	  function parse(text, f) {
	    var convert, columns, rows = parseRows(text, function(row, i) {
	      if (convert) return convert(row, i - 1);
	      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
	    });
	    rows.columns = columns;
	    return rows;
	  }

	  function parseRows(text, f) {
	    var EOL = {}, // sentinel value for end-of-line
	        EOF = {}, // sentinel value for end-of-file
	        rows = [], // output rows
	        N = text.length,
	        I = 0, // current character index
	        n = 0, // the current line number
	        t, // the current token
	        eol; // is the current token followed by EOL?

	    function token() {
	      if (I >= N) return EOF; // special case: end of file
	      if (eol) return eol = false, EOL; // special case: end of line

	      // special case: quotes
	      var j = I, c;
	      if (text.charCodeAt(j) === 34) {
	        var i = j;
	        while (i++ < N) {
	          if (text.charCodeAt(i) === 34) {
	            if (text.charCodeAt(i + 1) !== 34) break;
	            ++i;
	          }
	        }
	        I = i + 2;
	        c = text.charCodeAt(i + 1);
	        if (c === 13) {
	          eol = true;
	          if (text.charCodeAt(i + 2) === 10) ++I;
	        } else if (c === 10) {
	          eol = true;
	        }
	        return text.slice(j + 1, i).replace(/""/g, "\"");
	      }

	      // common case: find next delimiter or newline
	      while (I < N) {
	        var k = 1;
	        c = text.charCodeAt(I++);
	        if (c === 10) eol = true; // \n
	        else if (c === 13) { eol = true; if (text.charCodeAt(I) === 10) ++I, ++k; } // \r|\r\n
	        else if (c !== delimiterCode) continue;
	        return text.slice(j, I - k);
	      }

	      // special case: last token before EOF
	      return text.slice(j);
	    }

	    while ((t = token()) !== EOF) {
	      var a = [];
	      while (t !== EOL && t !== EOF) {
	        a.push(t);
	        t = token();
	      }
	      if (f && (a = f(a, n++)) == null) continue;
	      rows.push(a);
	    }

	    return rows;
	  }

	  function format(rows, columns) {
	    if (columns == null) columns = inferColumns(rows);
	    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {
	      return columns.map(function(column) {
	        return formatValue(row[column]);
	      }).join(delimiter);
	    })).join("\n");
	  }

	  function formatRows(rows) {
	    return rows.map(formatRow).join("\n");
	  }

	  function formatRow(row) {
	    return row.map(formatValue).join(delimiter);
	  }

	  function formatValue(text) {
	    return text == null ? ""
	        : reFormat.test(text += "") ? "\"" + text.replace(/\"/g, "\"\"") + "\""
	        : text;
	  }

	  return {
	    parse: parse,
	    parseRows: parseRows,
	    format: format,
	    formatRows: formatRows
	  };
	};

	var csv = dsv(",");

	var csvParse = csv.parse;
	var csvParseRows = csv.parseRows;
	var csvFormat = csv.format;
	var csvFormatRows = csv.formatRows;

	var tsv = dsv("\t");

	var tsvParse = tsv.parse;
	var tsvParseRows = tsv.parseRows;
	var tsvFormat = tsv.format;
	var tsvFormatRows = tsv.formatRows;

	var center$1 = function(x, y) {
	  var nodes;

	  if (x == null) x = 0;
	  if (y == null) y = 0;

	  function force() {
	    var i,
	        n = nodes.length,
	        node,
	        sx = 0,
	        sy = 0;

	    for (i = 0; i < n; ++i) {
	      node = nodes[i], sx += node.x, sy += node.y;
	    }

	    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
	      node = nodes[i], node.x -= sx, node.y -= sy;
	    }
	  }

	  force.initialize = function(_) {
	    nodes = _;
	  };

	  force.x = function(_) {
	    return arguments.length ? (x = +_, force) : x;
	  };

	  force.y = function(_) {
	    return arguments.length ? (y = +_, force) : y;
	  };

	  return force;
	};

	var constant$6 = function(x) {
	  return function() {
	    return x;
	  };
	};

	var jiggle = function() {
	  return (Math.random() - 0.5) * 1e-6;
	};

	var tree_add = function(d) {
	  var x = +this._x.call(null, d),
	      y = +this._y.call(null, d);
	  return add(this.cover(x, y), x, y, d);
	};

	function add(tree, x, y, d) {
	  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

	  var parent,
	      node = tree._root,
	      leaf = {data: d},
	      x0 = tree._x0,
	      y0 = tree._y0,
	      x1 = tree._x1,
	      y1 = tree._y1,
	      xm,
	      ym,
	      xp,
	      yp,
	      right,
	      bottom,
	      i,
	      j;

	  // If the tree is empty, initialize the root as a leaf.
	  if (!node) return tree._root = leaf, tree;

	  // Find the existing leaf for the new point, or add it.
	  while (node.length) {
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
	  }

	  // Is the new point is exactly coincident with the existing point?
	  xp = +tree._x.call(null, node.data);
	  yp = +tree._y.call(null, node.data);
	  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

	  // Otherwise, split the leaf node until the old and new point are separated.
	  do {
	    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
	  return parent[j] = node, parent[i] = leaf, tree;
	}

	function addAll(data) {
	  var d, i, n = data.length,
	      x,
	      y,
	      xz = new Array(n),
	      yz = new Array(n),
	      x0 = Infinity,
	      y0 = Infinity,
	      x1 = -Infinity,
	      y1 = -Infinity;

	  // Compute the points and their extent.
	  for (i = 0; i < n; ++i) {
	    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
	    xz[i] = x;
	    yz[i] = y;
	    if (x < x0) x0 = x;
	    if (x > x1) x1 = x;
	    if (y < y0) y0 = y;
	    if (y > y1) y1 = y;
	  }

	  // If there were no (valid) points, inherit the existing extent.
	  if (x1 < x0) x0 = this._x0, x1 = this._x1;
	  if (y1 < y0) y0 = this._y0, y1 = this._y1;

	  // Expand the tree to cover the new points.
	  this.cover(x0, y0).cover(x1, y1);

	  // Add the new points.
	  for (i = 0; i < n; ++i) {
	    add(this, xz[i], yz[i], data[i]);
	  }

	  return this;
	}

	var tree_cover = function(x, y) {
	  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

	  var x0 = this._x0,
	      y0 = this._y0,
	      x1 = this._x1,
	      y1 = this._y1;

	  // If the quadtree has no extent, initialize them.
	  // Integer extent are necessary so that if we later double the extent,
	  // the existing quadrant boundaries don’t change due to floating point error!
	  if (isNaN(x0)) {
	    x1 = (x0 = Math.floor(x)) + 1;
	    y1 = (y0 = Math.floor(y)) + 1;
	  }

	  // Otherwise, double repeatedly to cover.
	  else if (x0 > x || x > x1 || y0 > y || y > y1) {
	    var z = x1 - x0,
	        node = this._root,
	        parent,
	        i;

	    switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {
	      case 0: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);
	        break;
	      }
	      case 1: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);
	        break;
	      }
	      case 2: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);
	        break;
	      }
	      case 3: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);
	        break;
	      }
	    }

	    if (this._root && this._root.length) this._root = node;
	  }

	  // If the quadtree covers the point already, just return.
	  else return this;

	  this._x0 = x0;
	  this._y0 = y0;
	  this._x1 = x1;
	  this._y1 = y1;
	  return this;
	};

	var tree_data = function() {
	  var data = [];
	  this.visit(function(node) {
	    if (!node.length) do data.push(node.data); while (node = node.next)
	  });
	  return data;
	};

	var tree_extent = function(_) {
	  return arguments.length
	      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
	      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
	};

	var Quad = function(node, x0, y0, x1, y1) {
	  this.node = node;
	  this.x0 = x0;
	  this.y0 = y0;
	  this.x1 = x1;
	  this.y1 = y1;
	};

	var tree_find = function(x, y, radius) {
	  var data,
	      x0 = this._x0,
	      y0 = this._y0,
	      x1,
	      y1,
	      x2,
	      y2,
	      x3 = this._x1,
	      y3 = this._y1,
	      quads = [],
	      node = this._root,
	      q,
	      i;

	  if (node) quads.push(new Quad(node, x0, y0, x3, y3));
	  if (radius == null) radius = Infinity;
	  else {
	    x0 = x - radius, y0 = y - radius;
	    x3 = x + radius, y3 = y + radius;
	    radius *= radius;
	  }

	  while (q = quads.pop()) {

	    // Stop searching if this quadrant can’t contain a closer node.
	    if (!(node = q.node)
	        || (x1 = q.x0) > x3
	        || (y1 = q.y0) > y3
	        || (x2 = q.x1) < x0
	        || (y2 = q.y1) < y0) continue;

	    // Bisect the current quadrant.
	    if (node.length) {
	      var xm = (x1 + x2) / 2,
	          ym = (y1 + y2) / 2;

	      quads.push(
	        new Quad(node[3], xm, ym, x2, y2),
	        new Quad(node[2], x1, ym, xm, y2),
	        new Quad(node[1], xm, y1, x2, ym),
	        new Quad(node[0], x1, y1, xm, ym)
	      );

	      // Visit the closest quadrant first.
	      if (i = (y >= ym) << 1 | (x >= xm)) {
	        q = quads[quads.length - 1];
	        quads[quads.length - 1] = quads[quads.length - 1 - i];
	        quads[quads.length - 1 - i] = q;
	      }
	    }

	    // Visit this point. (Visiting coincident points isn’t necessary!)
	    else {
	      var dx = x - +this._x.call(null, node.data),
	          dy = y - +this._y.call(null, node.data),
	          d2 = dx * dx + dy * dy;
	      if (d2 < radius) {
	        var d = Math.sqrt(radius = d2);
	        x0 = x - d, y0 = y - d;
	        x3 = x + d, y3 = y + d;
	        data = node.data;
	      }
	    }
	  }

	  return data;
	};

	var tree_remove = function(d) {
	  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

	  var parent,
	      node = this._root,
	      retainer,
	      previous,
	      next,
	      x0 = this._x0,
	      y0 = this._y0,
	      x1 = this._x1,
	      y1 = this._y1,
	      x,
	      y,
	      xm,
	      ym,
	      right,
	      bottom,
	      i,
	      j;

	  // If the tree is empty, initialize the root as a leaf.
	  if (!node) return this;

	  // Find the leaf node for the point.
	  // While descending, also retain the deepest parent with a non-removed sibling.
	  if (node.length) while (true) {
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
	    if (!node.length) break;
	    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
	  }

	  // Find the point to remove.
	  while (node.data !== d) if (!(previous = node, node = node.next)) return this;
	  if (next = node.next) delete node.next;

	  // If there are multiple coincident points, remove just the point.
	  if (previous) return (next ? previous.next = next : delete previous.next), this;

	  // If this is the root point, remove it.
	  if (!parent) return this._root = next, this;

	  // Remove this leaf.
	  next ? parent[i] = next : delete parent[i];

	  // If the parent now contains exactly one leaf, collapse superfluous parents.
	  if ((node = parent[0] || parent[1] || parent[2] || parent[3])
	      && node === (parent[3] || parent[2] || parent[1] || parent[0])
	      && !node.length) {
	    if (retainer) retainer[j] = node;
	    else this._root = node;
	  }

	  return this;
	};

	function removeAll(data) {
	  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
	  return this;
	}

	var tree_root = function() {
	  return this._root;
	};

	var tree_size = function() {
	  var size = 0;
	  this.visit(function(node) {
	    if (!node.length) do ++size; while (node = node.next)
	  });
	  return size;
	};

	var tree_visit = function(callback) {
	  var quads = [], q, node = this._root, child, x0, y0, x1, y1;
	  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
	  while (q = quads.pop()) {
	    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
	      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
	      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
	      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
	      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
	      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
	    }
	  }
	  return this;
	};

	var tree_visitAfter = function(callback) {
	  var quads = [], next = [], q;
	  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
	  while (q = quads.pop()) {
	    var node = q.node;
	    if (node.length) {
	      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
	      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
	      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
	      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
	      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
	    }
	    next.push(q);
	  }
	  while (q = next.pop()) {
	    callback(q.node, q.x0, q.y0, q.x1, q.y1);
	  }
	  return this;
	};

	function defaultX(d) {
	  return d[0];
	}

	var tree_x = function(_) {
	  return arguments.length ? (this._x = _, this) : this._x;
	};

	function defaultY(d) {
	  return d[1];
	}

	var tree_y = function(_) {
	  return arguments.length ? (this._y = _, this) : this._y;
	};

	function quadtree(nodes, x, y) {
	  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
	  return nodes == null ? tree : tree.addAll(nodes);
	}

	function Quadtree(x, y, x0, y0, x1, y1) {
	  this._x = x;
	  this._y = y;
	  this._x0 = x0;
	  this._y0 = y0;
	  this._x1 = x1;
	  this._y1 = y1;
	  this._root = undefined;
	}

	function leaf_copy(leaf) {
	  var copy = {data: leaf.data}, next = copy;
	  while (leaf = leaf.next) next = next.next = {data: leaf.data};
	  return copy;
	}

	var treeProto = quadtree.prototype = Quadtree.prototype;

	treeProto.copy = function() {
	  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
	      node = this._root,
	      nodes,
	      child;

	  if (!node) return copy;

	  if (!node.length) return copy._root = leaf_copy(node), copy;

	  nodes = [{source: node, target: copy._root = new Array(4)}];
	  while (node = nodes.pop()) {
	    for (var i = 0; i < 4; ++i) {
	      if (child = node.source[i]) {
	        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
	        else node.target[i] = leaf_copy(child);
	      }
	    }
	  }

	  return copy;
	};

	treeProto.add = tree_add;
	treeProto.addAll = addAll;
	treeProto.cover = tree_cover;
	treeProto.data = tree_data;
	treeProto.extent = tree_extent;
	treeProto.find = tree_find;
	treeProto.remove = tree_remove;
	treeProto.removeAll = removeAll;
	treeProto.root = tree_root;
	treeProto.size = tree_size;
	treeProto.visit = tree_visit;
	treeProto.visitAfter = tree_visitAfter;
	treeProto.x = tree_x;
	treeProto.y = tree_y;

	function x(d) {
	  return d.x + d.vx;
	}

	function y(d) {
	  return d.y + d.vy;
	}

	var collide = function(radius) {
	  var nodes,
	      radii,
	      strength = 1,
	      iterations = 1;

	  if (typeof radius !== "function") radius = constant$6(radius == null ? 1 : +radius);

	  function force() {
	    var i, n = nodes.length,
	        tree,
	        node,
	        xi,
	        yi,
	        ri,
	        ri2;

	    for (var k = 0; k < iterations; ++k) {
	      tree = quadtree(nodes, x, y).visitAfter(prepare);
	      for (i = 0; i < n; ++i) {
	        node = nodes[i];
	        ri = radii[node.index], ri2 = ri * ri;
	        xi = node.x + node.vx;
	        yi = node.y + node.vy;
	        tree.visit(apply);
	      }
	    }

	    function apply(quad, x0, y0, x1, y1) {
	      var data = quad.data, rj = quad.r, r = ri + rj;
	      if (data) {
	        if (data.index > node.index) {
	          var x = xi - data.x - data.vx,
	              y = yi - data.y - data.vy,
	              l = x * x + y * y;
	          if (l < r * r) {
	            if (x === 0) x = jiggle(), l += x * x;
	            if (y === 0) y = jiggle(), l += y * y;
	            l = (r - (l = Math.sqrt(l))) / l * strength;
	            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
	            node.vy += (y *= l) * r;
	            data.vx -= x * (r = 1 - r);
	            data.vy -= y * r;
	          }
	        }
	        return;
	      }
	      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
	    }
	  }

	  function prepare(quad) {
	    if (quad.data) return quad.r = radii[quad.data.index];
	    for (var i = quad.r = 0; i < 4; ++i) {
	      if (quad[i] && quad[i].r > quad.r) {
	        quad.r = quad[i].r;
	      }
	    }
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length, node;
	    radii = new Array(n);
	    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
	  }

	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };

	  force.iterations = function(_) {
	    return arguments.length ? (iterations = +_, force) : iterations;
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = +_, force) : strength;
	  };

	  force.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : radius;
	  };

	  return force;
	};

	function index(d) {
	  return d.index;
	}

	function find(nodeById, nodeId) {
	  var node = nodeById.get(nodeId);
	  if (!node) throw new Error("missing: " + nodeId);
	  return node;
	}

	var link = function(links) {
	  var id = index,
	      strength = defaultStrength,
	      strengths,
	      distance = constant$6(30),
	      distances,
	      nodes,
	      count,
	      bias,
	      iterations = 1;

	  if (links == null) links = [];

	  function defaultStrength(link) {
	    return 1 / Math.min(count[link.source.index], count[link.target.index]);
	  }

	  function force(alpha) {
	    for (var k = 0, n = links.length; k < iterations; ++k) {
	      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
	        link = links[i], source = link.source, target = link.target;
	        x = target.x + target.vx - source.x - source.vx || jiggle();
	        y = target.y + target.vy - source.y - source.vy || jiggle();
	        l = Math.sqrt(x * x + y * y);
	        l = (l - distances[i]) / l * alpha * strengths[i];
	        x *= l, y *= l;
	        target.vx -= x * (b = bias[i]);
	        target.vy -= y * b;
	        source.vx += x * (b = 1 - b);
	        source.vy += y * b;
	      }
	    }
	  }

	  function initialize() {
	    if (!nodes) return;

	    var i,
	        n = nodes.length,
	        m = links.length,
	        nodeById = map$1(nodes, id),
	        link;

	    for (i = 0, count = new Array(n); i < m; ++i) {
	      link = links[i], link.index = i;
	      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
	      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
	      count[link.source.index] = (count[link.source.index] || 0) + 1;
	      count[link.target.index] = (count[link.target.index] || 0) + 1;
	    }

	    for (i = 0, bias = new Array(m); i < m; ++i) {
	      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
	    }

	    strengths = new Array(m), initializeStrength();
	    distances = new Array(m), initializeDistance();
	  }

	  function initializeStrength() {
	    if (!nodes) return;

	    for (var i = 0, n = links.length; i < n; ++i) {
	      strengths[i] = +strength(links[i], i, links);
	    }
	  }

	  function initializeDistance() {
	    if (!nodes) return;

	    for (var i = 0, n = links.length; i < n; ++i) {
	      distances[i] = +distance(links[i], i, links);
	    }
	  }

	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };

	  force.links = function(_) {
	    return arguments.length ? (links = _, initialize(), force) : links;
	  };

	  force.id = function(_) {
	    return arguments.length ? (id = _, force) : id;
	  };

	  force.iterations = function(_) {
	    return arguments.length ? (iterations = +_, force) : iterations;
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initializeStrength(), force) : strength;
	  };

	  force.distance = function(_) {
	    return arguments.length ? (distance = typeof _ === "function" ? _ : constant$6(+_), initializeDistance(), force) : distance;
	  };

	  return force;
	};

	function x$1(d) {
	  return d.x;
	}

	function y$1(d) {
	  return d.y;
	}

	var initialRadius = 10;
	var initialAngle = Math.PI * (3 - Math.sqrt(5));

	var simulation = function(nodes) {
	  var simulation,
	      alpha = 1,
	      alphaMin = 0.001,
	      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
	      alphaTarget = 0,
	      velocityDecay = 0.6,
	      forces = map$1(),
	      stepper = timer(step),
	      event = dispatch("tick", "end");

	  if (nodes == null) nodes = [];

	  function step() {
	    tick();
	    event.call("tick", simulation);
	    if (alpha < alphaMin) {
	      stepper.stop();
	      event.call("end", simulation);
	    }
	  }

	  function tick() {
	    var i, n = nodes.length, node;

	    alpha += (alphaTarget - alpha) * alphaDecay;

	    forces.each(function(force) {
	      force(alpha);
	    });

	    for (i = 0; i < n; ++i) {
	      node = nodes[i];
	      if (node.fx == null) node.x += node.vx *= velocityDecay;
	      else node.x = node.fx, node.vx = 0;
	      if (node.fy == null) node.y += node.vy *= velocityDecay;
	      else node.y = node.fy, node.vy = 0;
	    }
	  }

	  function initializeNodes() {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.index = i;
	      if (isNaN(node.x) || isNaN(node.y)) {
	        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
	        node.x = radius * Math.cos(angle);
	        node.y = radius * Math.sin(angle);
	      }
	      if (isNaN(node.vx) || isNaN(node.vy)) {
	        node.vx = node.vy = 0;
	      }
	    }
	  }

	  function initializeForce(force) {
	    if (force.initialize) force.initialize(nodes);
	    return force;
	  }

	  initializeNodes();

	  return simulation = {
	    tick: tick,

	    restart: function() {
	      return stepper.restart(step), simulation;
	    },

	    stop: function() {
	      return stepper.stop(), simulation;
	    },

	    nodes: function(_) {
	      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
	    },

	    alpha: function(_) {
	      return arguments.length ? (alpha = +_, simulation) : alpha;
	    },

	    alphaMin: function(_) {
	      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
	    },

	    alphaDecay: function(_) {
	      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
	    },

	    alphaTarget: function(_) {
	      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
	    },

	    velocityDecay: function(_) {
	      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
	    },

	    force: function(name, _) {
	      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
	    },

	    find: function(x, y, radius) {
	      var i = 0,
	          n = nodes.length,
	          dx,
	          dy,
	          d2,
	          node,
	          closest;

	      if (radius == null) radius = Infinity;
	      else radius *= radius;

	      for (i = 0; i < n; ++i) {
	        node = nodes[i];
	        dx = x - node.x;
	        dy = y - node.y;
	        d2 = dx * dx + dy * dy;
	        if (d2 < radius) closest = node, radius = d2;
	      }

	      return closest;
	    },

	    on: function(name, _) {
	      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
	    }
	  };
	};

	var manyBody = function() {
	  var nodes,
	      node,
	      alpha,
	      strength = constant$6(-30),
	      strengths,
	      distanceMin2 = 1,
	      distanceMax2 = Infinity,
	      theta2 = 0.81;

	  function force(_) {
	    var i, n = nodes.length, tree = quadtree(nodes, x$1, y$1).visitAfter(accumulate);
	    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length, node;
	    strengths = new Array(n);
	    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
	  }

	  function accumulate(quad) {
	    var strength = 0, q, c, x$$1, y$$1, i;

	    // For internal nodes, accumulate forces from child quadrants.
	    if (quad.length) {
	      for (x$$1 = y$$1 = i = 0; i < 4; ++i) {
	        if ((q = quad[i]) && (c = q.value)) {
	          strength += c, x$$1 += c * q.x, y$$1 += c * q.y;
	        }
	      }
	      quad.x = x$$1 / strength;
	      quad.y = y$$1 / strength;
	    }

	    // For leaf nodes, accumulate forces from coincident quadrants.
	    else {
	      q = quad;
	      q.x = q.data.x;
	      q.y = q.data.y;
	      do strength += strengths[q.data.index];
	      while (q = q.next);
	    }

	    quad.value = strength;
	  }

	  function apply(quad, x1, _, x2) {
	    if (!quad.value) return true;

	    var x$$1 = quad.x - node.x,
	        y$$1 = quad.y - node.y,
	        w = x2 - x1,
	        l = x$$1 * x$$1 + y$$1 * y$$1;

	    // Apply the Barnes-Hut approximation if possible.
	    // Limit forces for very close nodes; randomize direction if coincident.
	    if (w * w / theta2 < l) {
	      if (l < distanceMax2) {
	        if (x$$1 === 0) x$$1 = jiggle(), l += x$$1 * x$$1;
	        if (y$$1 === 0) y$$1 = jiggle(), l += y$$1 * y$$1;
	        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
	        node.vx += x$$1 * quad.value * alpha / l;
	        node.vy += y$$1 * quad.value * alpha / l;
	      }
	      return true;
	    }

	    // Otherwise, process points directly.
	    else if (quad.length || l >= distanceMax2) return;

	    // Limit forces for very close nodes; randomize direction if coincident.
	    if (quad.data !== node || quad.next) {
	      if (x$$1 === 0) x$$1 = jiggle(), l += x$$1 * x$$1;
	      if (y$$1 === 0) y$$1 = jiggle(), l += y$$1 * y$$1;
	      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
	    }

	    do if (quad.data !== node) {
	      w = strengths[quad.data.index] * alpha / l;
	      node.vx += x$$1 * w;
	      node.vy += y$$1 * w;
	    } while (quad = quad.next);
	  }

	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
	  };

	  force.distanceMin = function(_) {
	    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
	  };

	  force.distanceMax = function(_) {
	    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
	  };

	  force.theta = function(_) {
	    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
	  };

	  return force;
	};

	var x$2 = function(x) {
	  var strength = constant$6(0.1),
	      nodes,
	      strengths,
	      xz;

	  if (typeof x !== "function") x = constant$6(x == null ? 0 : +x);

	  function force(alpha) {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
	    }
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length;
	    strengths = new Array(n);
	    xz = new Array(n);
	    for (i = 0; i < n; ++i) {
	      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
	    }
	  }

	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
	  };

	  force.x = function(_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : x;
	  };

	  return force;
	};

	var y$2 = function(y) {
	  var strength = constant$6(0.1),
	      nodes,
	      strengths,
	      yz;

	  if (typeof y !== "function") y = constant$6(y == null ? 0 : +y);

	  function force(alpha) {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
	    }
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length;
	    strengths = new Array(n);
	    yz = new Array(n);
	    for (i = 0; i < n; ++i) {
	      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
	    }
	  }

	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
	  };

	  force.y = function(_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : y;
	  };

	  return force;
	};

	// Computes the decimal coefficient and exponent of the specified number x with
	// significant digits p, where x is positive and p is in [1, 21] or undefined.
	// For example, formatDecimal(1.23) returns ["123", 0].
	var formatDecimal = function(x, p) {
	  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
	  var i, coefficient = x.slice(0, i);

	  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
	  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
	  return [
	    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
	    +x.slice(i + 1)
	  ];
	};

	var exponent$1 = function(x) {
	  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
	};

	var formatGroup = function(grouping, thousands) {
	  return function(value, width) {
	    var i = value.length,
	        t = [],
	        j = 0,
	        g = grouping[0],
	        length = 0;

	    while (i > 0 && g > 0) {
	      if (length + g + 1 > width) g = Math.max(1, width - length);
	      t.push(value.substring(i -= g, i + g));
	      if ((length += g + 1) > width) break;
	      g = grouping[j = (j + 1) % grouping.length];
	    }

	    return t.reverse().join(thousands);
	  };
	};

	var formatNumerals = function(numerals) {
	  return function(value) {
	    return value.replace(/[0-9]/g, function(i) {
	      return numerals[+i];
	    });
	  };
	};

	var formatDefault = function(x, p) {
	  x = x.toPrecision(p);

	  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
	    switch (x[i]) {
	      case ".": i0 = i1 = i; break;
	      case "0": if (i0 === 0) i0 = i; i1 = i; break;
	      case "e": break out;
	      default: if (i0 > 0) i0 = 0; break;
	    }
	  }

	  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
	};

	var prefixExponent;

	var formatPrefixAuto = function(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1],
	      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
	      n = coefficient.length;
	  return i === n ? coefficient
	      : i > n ? coefficient + new Array(i - n + 1).join("0")
	      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
	      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
	};

	var formatRounded = function(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1];
	  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
	      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
	      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
	};

	var formatTypes = {
	  "": formatDefault,
	  "%": function(x, p) { return (x * 100).toFixed(p); },
	  "b": function(x) { return Math.round(x).toString(2); },
	  "c": function(x) { return x + ""; },
	  "d": function(x) { return Math.round(x).toString(10); },
	  "e": function(x, p) { return x.toExponential(p); },
	  "f": function(x, p) { return x.toFixed(p); },
	  "g": function(x, p) { return x.toPrecision(p); },
	  "o": function(x) { return Math.round(x).toString(8); },
	  "p": function(x, p) { return formatRounded(x * 100, p); },
	  "r": formatRounded,
	  "s": formatPrefixAuto,
	  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
	  "x": function(x) { return Math.round(x).toString(16); }
	};

	// [[fill]align][sign][symbol][0][width][,][.precision][type]
	var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;

	function formatSpecifier(specifier) {
	  return new FormatSpecifier(specifier);
	}

	formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

	function FormatSpecifier(specifier) {
	  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);

	  var match,
	      fill = match[1] || " ",
	      align = match[2] || ">",
	      sign = match[3] || "-",
	      symbol = match[4] || "",
	      zero = !!match[5],
	      width = match[6] && +match[6],
	      comma = !!match[7],
	      precision = match[8] && +match[8].slice(1),
	      type = match[9] || "";

	  // The "n" type is an alias for ",g".
	  if (type === "n") comma = true, type = "g";

	  // Map invalid types to the default format.
	  else if (!formatTypes[type]) type = "";

	  // If zero fill is specified, padding goes after sign and before digits.
	  if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

	  this.fill = fill;
	  this.align = align;
	  this.sign = sign;
	  this.symbol = symbol;
	  this.zero = zero;
	  this.width = width;
	  this.comma = comma;
	  this.precision = precision;
	  this.type = type;
	}

	FormatSpecifier.prototype.toString = function() {
	  return this.fill
	      + this.align
	      + this.sign
	      + this.symbol
	      + (this.zero ? "0" : "")
	      + (this.width == null ? "" : Math.max(1, this.width | 0))
	      + (this.comma ? "," : "")
	      + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
	      + this.type;
	};

	var identity$3 = function(x) {
	  return x;
	};

	var prefixes = ["y","z","a","f","p","n","\xB5","m","","k","M","G","T","P","E","Z","Y"];

	var formatLocale = function(locale) {
	  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3,
	      currency = locale.currency,
	      decimal = locale.decimal,
	      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity$3;

	  function newFormat(specifier) {
	    specifier = formatSpecifier(specifier);

	    var fill = specifier.fill,
	        align = specifier.align,
	        sign = specifier.sign,
	        symbol = specifier.symbol,
	        zero = specifier.zero,
	        width = specifier.width,
	        comma = specifier.comma,
	        precision = specifier.precision,
	        type = specifier.type;

	    // Compute the prefix and suffix.
	    // For SI-prefix, the suffix is lazily computed.
	    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
	        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? "%" : "";

	    // What format function should we use?
	    // Is this an integer type?
	    // Can this type generate exponential notation?
	    var formatType = formatTypes[type],
	        maybeSuffix = !type || /[defgprs%]/.test(type);

	    // Set the default precision if not specified,
	    // or clamp the specified precision to the supported range.
	    // For significant precision, it must be in [1, 21].
	    // For fixed precision, it must be in [0, 20].
	    precision = precision == null ? (type ? 6 : 12)
	        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
	        : Math.max(0, Math.min(20, precision));

	    function format(value) {
	      var valuePrefix = prefix,
	          valueSuffix = suffix,
	          i, n, c;

	      if (type === "c") {
	        valueSuffix = formatType(value) + valueSuffix;
	        value = "";
	      } else {
	        value = +value;

	        // Perform the initial formatting.
	        var valueNegative = value < 0;
	        value = formatType(Math.abs(value), precision);

	        // If a negative value rounds to zero during formatting, treat as positive.
	        if (valueNegative && +value === 0) valueNegative = false;

	        // Compute the prefix and suffix.
	        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
	        valueSuffix = valueSuffix + (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + (valueNegative && sign === "(" ? ")" : "");

	        // Break the formatted value into the integer “value” part that can be
	        // grouped, and fractional or exponential “suffix” part that is not.
	        if (maybeSuffix) {
	          i = -1, n = value.length;
	          while (++i < n) {
	            if (c = value.charCodeAt(i), 48 > c || c > 57) {
	              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
	              value = value.slice(0, i);
	              break;
	            }
	          }
	        }
	      }

	      // If the fill character is not "0", grouping is applied before padding.
	      if (comma && !zero) value = group(value, Infinity);

	      // Compute the padding.
	      var length = valuePrefix.length + value.length + valueSuffix.length,
	          padding = length < width ? new Array(width - length + 1).join(fill) : "";

	      // If the fill character is "0", grouping is applied after padding.
	      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

	      // Reconstruct the final output based on the desired alignment.
	      switch (align) {
	        case "<": value = valuePrefix + value + valueSuffix + padding; break;
	        case "=": value = valuePrefix + padding + value + valueSuffix; break;
	        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
	        default: value = padding + valuePrefix + value + valueSuffix; break;
	      }

	      return numerals(value);
	    }

	    format.toString = function() {
	      return specifier + "";
	    };

	    return format;
	  }

	  function formatPrefix(specifier, value) {
	    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
	        e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,
	        k = Math.pow(10, -e),
	        prefix = prefixes[8 + e / 3];
	    return function(value) {
	      return f(k * value) + prefix;
	    };
	  }

	  return {
	    format: newFormat,
	    formatPrefix: formatPrefix
	  };
	};

	var locale$1;



	defaultLocale({
	  decimal: ".",
	  thousands: ",",
	  grouping: [3],
	  currency: ["$", ""]
	});

	function defaultLocale(definition) {
	  locale$1 = formatLocale(definition);
	  exports.format = locale$1.format;
	  exports.formatPrefix = locale$1.formatPrefix;
	  return locale$1;
	}

	var precisionFixed = function(step) {
	  return Math.max(0, -exponent$1(Math.abs(step)));
	};

	var precisionPrefix = function(step, value) {
	  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));
	};

	var precisionRound = function(step, max) {
	  step = Math.abs(step), max = Math.abs(max) - step;
	  return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;
	};

	// Adds floating point numbers with twice the normal precision.
	// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
	// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
	// 305–363 (1997).
	// Code adapted from GeographicLib by Charles F. F. Karney,
	// http://geographiclib.sourceforge.net/

	var adder = function() {
	  return new Adder;
	};

	function Adder() {
	  this.reset();
	}

	Adder.prototype = {
	  constructor: Adder,
	  reset: function() {
	    this.s = // rounded value
	    this.t = 0; // exact error
	  },
	  add: function(y) {
	    add$1(temp, y, this.t);
	    add$1(this, temp.s, this.s);
	    if (this.s) this.t += temp.t;
	    else this.s = temp.t;
	  },
	  valueOf: function() {
	    return this.s;
	  }
	};

	var temp = new Adder;

	function add$1(adder, a, b) {
	  var x = adder.s = a + b,
	      bv = x - a,
	      av = x - bv;
	  adder.t = (a - av) + (b - bv);
	}

	var epsilon$2 = 1e-6;
	var epsilon2$1 = 1e-12;
	var pi$3 = Math.PI;
	var halfPi$2 = pi$3 / 2;
	var quarterPi = pi$3 / 4;
	var tau$3 = pi$3 * 2;

	var degrees$1 = 180 / pi$3;
	var radians = pi$3 / 180;

	var abs = Math.abs;
	var atan = Math.atan;
	var atan2 = Math.atan2;
	var cos$1 = Math.cos;
	var ceil = Math.ceil;
	var exp = Math.exp;

	var log = Math.log;
	var pow = Math.pow;
	var sin$1 = Math.sin;
	var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
	var sqrt = Math.sqrt;
	var tan = Math.tan;

	function acos(x) {
	  return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x);
	}

	function asin(x) {
	  return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x);
	}

	function haversin(x) {
	  return (x = sin$1(x / 2)) * x;
	}

	function noop$1() {}

	function streamGeometry(geometry, stream) {
	  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
	    streamGeometryType[geometry.type](geometry, stream);
	  }
	}

	var streamObjectType = {
	  Feature: function(object, stream) {
	    streamGeometry(object.geometry, stream);
	  },
	  FeatureCollection: function(object, stream) {
	    var features = object.features, i = -1, n = features.length;
	    while (++i < n) streamGeometry(features[i].geometry, stream);
	  }
	};

	var streamGeometryType = {
	  Sphere: function(object, stream) {
	    stream.sphere();
	  },
	  Point: function(object, stream) {
	    object = object.coordinates;
	    stream.point(object[0], object[1], object[2]);
	  },
	  MultiPoint: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
	  },
	  LineString: function(object, stream) {
	    streamLine(object.coordinates, stream, 0);
	  },
	  MultiLineString: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamLine(coordinates[i], stream, 0);
	  },
	  Polygon: function(object, stream) {
	    streamPolygon(object.coordinates, stream);
	  },
	  MultiPolygon: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamPolygon(coordinates[i], stream);
	  },
	  GeometryCollection: function(object, stream) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) streamGeometry(geometries[i], stream);
	  }
	};

	function streamLine(coordinates, stream, closed) {
	  var i = -1, n = coordinates.length - closed, coordinate;
	  stream.lineStart();
	  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
	  stream.lineEnd();
	}

	function streamPolygon(coordinates, stream) {
	  var i = -1, n = coordinates.length;
	  stream.polygonStart();
	  while (++i < n) streamLine(coordinates[i], stream, 1);
	  stream.polygonEnd();
	}

	var geoStream = function(object, stream) {
	  if (object && streamObjectType.hasOwnProperty(object.type)) {
	    streamObjectType[object.type](object, stream);
	  } else {
	    streamGeometry(object, stream);
	  }
	};

	var areaRingSum = adder();

	var areaSum = adder();
	var lambda00;
	var phi00;
	var lambda0;
	var cosPhi0;
	var sinPhi0;

	var areaStream = {
	  point: noop$1,
	  lineStart: noop$1,
	  lineEnd: noop$1,
	  polygonStart: function() {
	    areaRingSum.reset();
	    areaStream.lineStart = areaRingStart;
	    areaStream.lineEnd = areaRingEnd;
	  },
	  polygonEnd: function() {
	    var areaRing = +areaRingSum;
	    areaSum.add(areaRing < 0 ? tau$3 + areaRing : areaRing);
	    this.lineStart = this.lineEnd = this.point = noop$1;
	  },
	  sphere: function() {
	    areaSum.add(tau$3);
	  }
	};

	function areaRingStart() {
	  areaStream.point = areaPointFirst;
	}

	function areaRingEnd() {
	  areaPoint(lambda00, phi00);
	}

	function areaPointFirst(lambda, phi) {
	  areaStream.point = areaPoint;
	  lambda00 = lambda, phi00 = phi;
	  lambda *= radians, phi *= radians;
	  lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);
	}

	function areaPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  phi = phi / 2 + quarterPi; // half the angular distance from south pole

	  // Spherical excess E for a spherical triangle with vertices: south pole,
	  // previous point, current point.  Uses a formula derived from Cagnoli’s
	  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
	  var dLambda = lambda - lambda0,
	      sdLambda = dLambda >= 0 ? 1 : -1,
	      adLambda = sdLambda * dLambda,
	      cosPhi = cos$1(phi),
	      sinPhi = sin$1(phi),
	      k = sinPhi0 * sinPhi,
	      u = cosPhi0 * cosPhi + k * cos$1(adLambda),
	      v = k * sdLambda * sin$1(adLambda);
	  areaRingSum.add(atan2(v, u));

	  // Advance the previous points.
	  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
	}

	var area = function(object) {
	  areaSum.reset();
	  geoStream(object, areaStream);
	  return areaSum * 2;
	};

	function spherical(cartesian) {
	  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
	}

	function cartesian(spherical) {
	  var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);
	  return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];
	}

	function cartesianDot(a, b) {
	  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	}

	function cartesianCross(a, b) {
	  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
	}

	// TODO return a
	function cartesianAddInPlace(a, b) {
	  a[0] += b[0], a[1] += b[1], a[2] += b[2];
	}

	function cartesianScale(vector, k) {
	  return [vector[0] * k, vector[1] * k, vector[2] * k];
	}

	// TODO return d
	function cartesianNormalizeInPlace(d) {
	  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	  d[0] /= l, d[1] /= l, d[2] /= l;
	}

	var lambda0$1;
	var phi0;
	var lambda1;
	var phi1;
	var lambda2;
	var lambda00$1;
	var phi00$1;
	var p0;
	var deltaSum = adder();
	var ranges;
	var range;

	var boundsStream = {
	  point: boundsPoint,
	  lineStart: boundsLineStart,
	  lineEnd: boundsLineEnd,
	  polygonStart: function() {
	    boundsStream.point = boundsRingPoint;
	    boundsStream.lineStart = boundsRingStart;
	    boundsStream.lineEnd = boundsRingEnd;
	    deltaSum.reset();
	    areaStream.polygonStart();
	  },
	  polygonEnd: function() {
	    areaStream.polygonEnd();
	    boundsStream.point = boundsPoint;
	    boundsStream.lineStart = boundsLineStart;
	    boundsStream.lineEnd = boundsLineEnd;
	    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
	    else if (deltaSum > epsilon$2) phi1 = 90;
	    else if (deltaSum < -epsilon$2) phi0 = -90;
	    range[0] = lambda0$1, range[1] = lambda1;
	  }
	};

	function boundsPoint(lambda, phi) {
	  ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
	  if (phi < phi0) phi0 = phi;
	  if (phi > phi1) phi1 = phi;
	}

	function linePoint(lambda, phi) {
	  var p = cartesian([lambda * radians, phi * radians]);
	  if (p0) {
	    var normal = cartesianCross(p0, p),
	        equatorial = [normal[1], -normal[0], 0],
	        inflection = cartesianCross(equatorial, normal);
	    cartesianNormalizeInPlace(inflection);
	    inflection = spherical(inflection);
	    var delta = lambda - lambda2,
	        sign$$1 = delta > 0 ? 1 : -1,
	        lambdai = inflection[0] * degrees$1 * sign$$1,
	        phii,
	        antimeridian = abs(delta) > 180;
	    if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
	      phii = inflection[1] * degrees$1;
	      if (phii > phi1) phi1 = phii;
	    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
	      phii = -inflection[1] * degrees$1;
	      if (phii < phi0) phi0 = phii;
	    } else {
	      if (phi < phi0) phi0 = phi;
	      if (phi > phi1) phi1 = phi;
	    }
	    if (antimeridian) {
	      if (lambda < lambda2) {
	        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	      } else {
	        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	      }
	    } else {
	      if (lambda1 >= lambda0$1) {
	        if (lambda < lambda0$1) lambda0$1 = lambda;
	        if (lambda > lambda1) lambda1 = lambda;
	      } else {
	        if (lambda > lambda2) {
	          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	        } else {
	          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	        }
	      }
	    }
	  } else {
	    ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
	  }
	  if (phi < phi0) phi0 = phi;
	  if (phi > phi1) phi1 = phi;
	  p0 = p, lambda2 = lambda;
	}

	function boundsLineStart() {
	  boundsStream.point = linePoint;
	}

	function boundsLineEnd() {
	  range[0] = lambda0$1, range[1] = lambda1;
	  boundsStream.point = boundsPoint;
	  p0 = null;
	}

	function boundsRingPoint(lambda, phi) {
	  if (p0) {
	    var delta = lambda - lambda2;
	    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
	  } else {
	    lambda00$1 = lambda, phi00$1 = phi;
	  }
	  areaStream.point(lambda, phi);
	  linePoint(lambda, phi);
	}

	function boundsRingStart() {
	  areaStream.lineStart();
	}

	function boundsRingEnd() {
	  boundsRingPoint(lambda00$1, phi00$1);
	  areaStream.lineEnd();
	  if (abs(deltaSum) > epsilon$2) lambda0$1 = -(lambda1 = 180);
	  range[0] = lambda0$1, range[1] = lambda1;
	  p0 = null;
	}

	// Finds the left-right distance between two longitudes.
	// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
	// the distance between ±180° to be 360°.
	function angle(lambda0, lambda1) {
	  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
	}

	function rangeCompare(a, b) {
	  return a[0] - b[0];
	}

	function rangeContains(range, x) {
	  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
	}

	var bounds = function(feature) {
	  var i, n, a, b, merged, deltaMax, delta;

	  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
	  ranges = [];
	  geoStream(feature, boundsStream);

	  // First, sort ranges by their minimum longitudes.
	  if (n = ranges.length) {
	    ranges.sort(rangeCompare);

	    // Then, merge any ranges that overlap.
	    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
	      b = ranges[i];
	      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
	        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	      } else {
	        merged.push(a = b);
	      }
	    }

	    // Finally, find the largest gap between the merged ranges.
	    // The final bounding box will be the inverse of this gap.
	    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
	      b = merged[i];
	      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
	    }
	  }

	  ranges = range = null;

	  return lambda0$1 === Infinity || phi0 === Infinity
	      ? [[NaN, NaN], [NaN, NaN]]
	      : [[lambda0$1, phi0], [lambda1, phi1]];
	};

	var W0;
	var W1;
	var X0;
	var Y0;
	var Z0;
	var X1;
	var Y1;
	var Z1;
	var X2;
	var Y2;
	var Z2;
	var lambda00$2;
	var phi00$2;
	var x0;
	var y0;
	var z0; // previous point

	var centroidStream = {
	  sphere: noop$1,
	  point: centroidPoint,
	  lineStart: centroidLineStart,
	  lineEnd: centroidLineEnd,
	  polygonStart: function() {
	    centroidStream.lineStart = centroidRingStart;
	    centroidStream.lineEnd = centroidRingEnd;
	  },
	  polygonEnd: function() {
	    centroidStream.lineStart = centroidLineStart;
	    centroidStream.lineEnd = centroidLineEnd;
	  }
	};

	// Arithmetic mean of Cartesian vectors.
	function centroidPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi);
	  centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));
	}

	function centroidPointCartesian(x, y, z) {
	  ++W0;
	  X0 += (x - X0) / W0;
	  Y0 += (y - Y0) / W0;
	  Z0 += (z - Z0) / W0;
	}

	function centroidLineStart() {
	  centroidStream.point = centroidLinePointFirst;
	}

	function centroidLinePointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi);
	  x0 = cosPhi * cos$1(lambda);
	  y0 = cosPhi * sin$1(lambda);
	  z0 = sin$1(phi);
	  centroidStream.point = centroidLinePoint;
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidLinePoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi),
	      x = cosPhi * cos$1(lambda),
	      y = cosPhi * sin$1(lambda),
	      z = sin$1(phi),
	      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidLineEnd() {
	  centroidStream.point = centroidPoint;
	}

	// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
	// J. Applied Mechanics 42, 239 (1975).
	function centroidRingStart() {
	  centroidStream.point = centroidRingPointFirst;
	}

	function centroidRingEnd() {
	  centroidRingPoint(lambda00$2, phi00$2);
	  centroidStream.point = centroidPoint;
	}

	function centroidRingPointFirst(lambda, phi) {
	  lambda00$2 = lambda, phi00$2 = phi;
	  lambda *= radians, phi *= radians;
	  centroidStream.point = centroidRingPoint;
	  var cosPhi = cos$1(phi);
	  x0 = cosPhi * cos$1(lambda);
	  y0 = cosPhi * sin$1(lambda);
	  z0 = sin$1(phi);
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidRingPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi),
	      x = cosPhi * cos$1(lambda),
	      y = cosPhi * sin$1(lambda),
	      z = sin$1(phi),
	      cx = y0 * z - z0 * y,
	      cy = z0 * x - x0 * z,
	      cz = x0 * y - y0 * x,
	      m = sqrt(cx * cx + cy * cy + cz * cz),
	      w = asin(m), // line weight = angle
	      v = m && -w / m; // area weight multiplier
	  X2 += v * cx;
	  Y2 += v * cy;
	  Z2 += v * cz;
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}

	var centroid = function(object) {
	  W0 = W1 =
	  X0 = Y0 = Z0 =
	  X1 = Y1 = Z1 =
	  X2 = Y2 = Z2 = 0;
	  geoStream(object, centroidStream);

	  var x = X2,
	      y = Y2,
	      z = Z2,
	      m = x * x + y * y + z * z;

	  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
	  if (m < epsilon2$1) {
	    x = X1, y = Y1, z = Z1;
	    // If the feature has zero length, fall back to arithmetic mean of point vectors.
	    if (W1 < epsilon$2) x = X0, y = Y0, z = Z0;
	    m = x * x + y * y + z * z;
	    // If the feature still has an undefined ccentroid, then return.
	    if (m < epsilon2$1) return [NaN, NaN];
	  }

	  return [atan2(y, x) * degrees$1, asin(z / sqrt(m)) * degrees$1];
	};

	var constant$7 = function(x) {
	  return function() {
	    return x;
	  };
	};

	var compose = function(a, b) {

	  function compose(x, y) {
	    return x = a(x, y), b(x[0], x[1]);
	  }

	  if (a.invert && b.invert) compose.invert = function(x, y) {
	    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	  };

	  return compose;
	};

	function rotationIdentity(lambda, phi) {
	  return [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];
	}

	rotationIdentity.invert = rotationIdentity;

	function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
	  return (deltaLambda %= tau$3) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
	    : rotationLambda(deltaLambda))
	    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
	    : rotationIdentity);
	}

	function forwardRotationLambda(deltaLambda) {
	  return function(lambda, phi) {
	    return lambda += deltaLambda, [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];
	  };
	}

	function rotationLambda(deltaLambda) {
	  var rotation = forwardRotationLambda(deltaLambda);
	  rotation.invert = forwardRotationLambda(-deltaLambda);
	  return rotation;
	}

	function rotationPhiGamma(deltaPhi, deltaGamma) {
	  var cosDeltaPhi = cos$1(deltaPhi),
	      sinDeltaPhi = sin$1(deltaPhi),
	      cosDeltaGamma = cos$1(deltaGamma),
	      sinDeltaGamma = sin$1(deltaGamma);

	  function rotation(lambda, phi) {
	    var cosPhi = cos$1(phi),
	        x = cos$1(lambda) * cosPhi,
	        y = sin$1(lambda) * cosPhi,
	        z = sin$1(phi),
	        k = z * cosDeltaPhi + x * sinDeltaPhi;
	    return [
	      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
	      asin(k * cosDeltaGamma + y * sinDeltaGamma)
	    ];
	  }

	  rotation.invert = function(lambda, phi) {
	    var cosPhi = cos$1(phi),
	        x = cos$1(lambda) * cosPhi,
	        y = sin$1(lambda) * cosPhi,
	        z = sin$1(phi),
	        k = z * cosDeltaGamma - y * sinDeltaGamma;
	    return [
	      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
	      asin(k * cosDeltaPhi - x * sinDeltaPhi)
	    ];
	  };

	  return rotation;
	}

	var rotation = function(rotate) {
	  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

	  function forward(coordinates) {
	    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
	  }

	  forward.invert = function(coordinates) {
	    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
	  };

	  return forward;
	};

	// Generates a circle centered at [0°, 0°], with a given radius and precision.
	function circleStream(stream, radius, delta, direction, t0, t1) {
	  if (!delta) return;
	  var cosRadius = cos$1(radius),
	      sinRadius = sin$1(radius),
	      step = direction * delta;
	  if (t0 == null) {
	    t0 = radius + direction * tau$3;
	    t1 = radius - step / 2;
	  } else {
	    t0 = circleRadius(cosRadius, t0);
	    t1 = circleRadius(cosRadius, t1);
	    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$3;
	  }
	  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
	    point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);
	    stream.point(point[0], point[1]);
	  }
	}

	// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
	function circleRadius(cosRadius, point) {
	  point = cartesian(point), point[0] -= cosRadius;
	  cartesianNormalizeInPlace(point);
	  var radius = acos(-point[1]);
	  return ((-point[2] < 0 ? -radius : radius) + tau$3 - epsilon$2) % tau$3;
	}

	var circle = function() {
	  var center = constant$7([0, 0]),
	      radius = constant$7(90),
	      precision = constant$7(6),
	      ring,
	      rotate,
	      stream = {point: point};

	  function point(x, y) {
	    ring.push(x = rotate(x, y));
	    x[0] *= degrees$1, x[1] *= degrees$1;
	  }

	  function circle() {
	    var c = center.apply(this, arguments),
	        r = radius.apply(this, arguments) * radians,
	        p = precision.apply(this, arguments) * radians;
	    ring = [];
	    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
	    circleStream(stream, r, p, 1);
	    c = {type: "Polygon", coordinates: [ring]};
	    ring = rotate = null;
	    return c;
	  }

	  circle.center = function(_) {
	    return arguments.length ? (center = typeof _ === "function" ? _ : constant$7([+_[0], +_[1]]), circle) : center;
	  };

	  circle.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$7(+_), circle) : radius;
	  };

	  circle.precision = function(_) {
	    return arguments.length ? (precision = typeof _ === "function" ? _ : constant$7(+_), circle) : precision;
	  };

	  return circle;
	};

	var clipBuffer = function() {
	  var lines = [],
	      line;
	  return {
	    point: function(x, y) {
	      line.push([x, y]);
	    },
	    lineStart: function() {
	      lines.push(line = []);
	    },
	    lineEnd: noop$1,
	    rejoin: function() {
	      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	    },
	    result: function() {
	      var result = lines;
	      lines = [];
	      line = null;
	      return result;
	    }
	  };
	};

	var clipLine = function(a, b, x0, y0, x1, y1) {
	  var ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;

	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
	  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
	  return true;
	};

	var pointEqual = function(a, b) {
	  return abs(a[0] - b[0]) < epsilon$2 && abs(a[1] - b[1]) < epsilon$2;
	};

	function Intersection(point, points, other, entry) {
	  this.x = point;
	  this.z = points;
	  this.o = other; // another intersection
	  this.e = entry; // is an entry?
	  this.v = false; // visited
	  this.n = this.p = null; // next & previous
	}

	// A generalized polygon clipping algorithm: given a polygon that has been cut
	// into its visible line segments, and rejoins the segments by interpolating
	// along the clip edge.
	var clipPolygon = function(segments, compareIntersection, startInside, interpolate, stream) {
	  var subject = [],
	      clip = [],
	      i,
	      n;

	  segments.forEach(function(segment) {
	    if ((n = segment.length - 1) <= 0) return;
	    var n, p0 = segment[0], p1 = segment[n], x;

	    // If the first and last points of a segment are coincident, then treat as a
	    // closed ring. TODO if all rings are closed, then the winding order of the
	    // exterior ring should be checked.
	    if (pointEqual(p0, p1)) {
	      stream.lineStart();
	      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
	      stream.lineEnd();
	      return;
	    }

	    subject.push(x = new Intersection(p0, segment, null, true));
	    clip.push(x.o = new Intersection(p0, null, x, false));
	    subject.push(x = new Intersection(p1, segment, null, false));
	    clip.push(x.o = new Intersection(p1, null, x, true));
	  });

	  if (!subject.length) return;

	  clip.sort(compareIntersection);
	  link$1(subject);
	  link$1(clip);

	  for (i = 0, n = clip.length; i < n; ++i) {
	    clip[i].e = startInside = !startInside;
	  }

	  var start = subject[0],
	      points,
	      point;

	  while (1) {
	    // Find first unvisited intersection.
	    var current = start,
	        isSubject = true;
	    while (current.v) if ((current = current.n) === start) return;
	    points = current.z;
	    stream.lineStart();
	    do {
	      current.v = current.o.v = true;
	      if (current.e) {
	        if (isSubject) {
	          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.n.x, 1, stream);
	        }
	        current = current.n;
	      } else {
	        if (isSubject) {
	          points = current.p.z;
	          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.p.x, -1, stream);
	        }
	        current = current.p;
	      }
	      current = current.o;
	      points = current.z;
	      isSubject = !isSubject;
	    } while (!current.v);
	    stream.lineEnd();
	  }
	};

	function link$1(array) {
	  if (!(n = array.length)) return;
	  var n,
	      i = 0,
	      a = array[0],
	      b;
	  while (++i < n) {
	    a.n = b = array[i];
	    b.p = a;
	    a = b;
	  }
	  a.n = b = array[0];
	  b.p = a;
	}

	var clipMax = 1e9;
	var clipMin = -clipMax;

	// TODO Use d3-polygon’s polygonContains here for the ring check?
	// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

	function clipExtent(x0, y0, x1, y1) {

	  function visible(x, y) {
	    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	  }

	  function interpolate(from, to, direction, stream) {
	    var a = 0, a1 = 0;
	    if (from == null
	        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
	        || comparePoint(from, to) < 0 ^ direction > 0) {
	      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	      while ((a = (a + direction + 4) % 4) !== a1);
	    } else {
	      stream.point(to[0], to[1]);
	    }
	  }

	  function corner(p, direction) {
	    return abs(p[0] - x0) < epsilon$2 ? direction > 0 ? 0 : 3
	        : abs(p[0] - x1) < epsilon$2 ? direction > 0 ? 2 : 1
	        : abs(p[1] - y0) < epsilon$2 ? direction > 0 ? 1 : 0
	        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
	  }

	  function compareIntersection(a, b) {
	    return comparePoint(a.x, b.x);
	  }

	  function comparePoint(a, b) {
	    var ca = corner(a, 1),
	        cb = corner(b, 1);
	    return ca !== cb ? ca - cb
	        : ca === 0 ? b[1] - a[1]
	        : ca === 1 ? a[0] - b[0]
	        : ca === 2 ? a[1] - b[1]
	        : b[0] - a[0];
	  }

	  return function(stream) {
	    var activeStream = stream,
	        bufferStream = clipBuffer(),
	        segments,
	        polygon,
	        ring,
	        x__, y__, v__, // first point
	        x_, y_, v_, // previous point
	        first,
	        clean;

	    var clipStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: polygonStart,
	      polygonEnd: polygonEnd
	    };

	    function point(x, y) {
	      if (visible(x, y)) activeStream.point(x, y);
	    }

	    function polygonInside() {
	      var winding = 0;

	      for (var i = 0, n = polygon.length; i < n; ++i) {
	        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
	          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
	          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
	          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
	        }
	      }

	      return winding;
	    }

	    // Buffer geometry within a polygon and then clip it en masse.
	    function polygonStart() {
	      activeStream = bufferStream, segments = [], polygon = [], clean = true;
	    }

	    function polygonEnd() {
	      var startInside = polygonInside(),
	          cleanInside = clean && startInside,
	          visible = (segments = merge(segments)).length;
	      if (cleanInside || visible) {
	        stream.polygonStart();
	        if (cleanInside) {
	          stream.lineStart();
	          interpolate(null, null, 1, stream);
	          stream.lineEnd();
	        }
	        if (visible) {
	          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);
	        }
	        stream.polygonEnd();
	      }
	      activeStream = stream, segments = polygon = ring = null;
	    }

	    function lineStart() {
	      clipStream.point = linePoint;
	      if (polygon) polygon.push(ring = []);
	      first = true;
	      v_ = false;
	      x_ = y_ = NaN;
	    }

	    // TODO rather than special-case polygons, simply handle them separately.
	    // Ideally, coincident intersection points should be jittered to avoid
	    // clipping issues.
	    function lineEnd() {
	      if (segments) {
	        linePoint(x__, y__);
	        if (v__ && v_) bufferStream.rejoin();
	        segments.push(bufferStream.result());
	      }
	      clipStream.point = point;
	      if (v_) activeStream.lineEnd();
	    }

	    function linePoint(x, y) {
	      var v = visible(x, y);
	      if (polygon) ring.push([x, y]);
	      if (first) {
	        x__ = x, y__ = y, v__ = v;
	        first = false;
	        if (v) {
	          activeStream.lineStart();
	          activeStream.point(x, y);
	        }
	      } else {
	        if (v && v_) activeStream.point(x, y);
	        else {
	          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
	              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
	          if (clipLine(a, b, x0, y0, x1, y1)) {
	            if (!v_) {
	              activeStream.lineStart();
	              activeStream.point(a[0], a[1]);
	            }
	            activeStream.point(b[0], b[1]);
	            if (!v) activeStream.lineEnd();
	            clean = false;
	          } else if (v) {
	            activeStream.lineStart();
	            activeStream.point(x, y);
	            clean = false;
	          }
	        }
	      }
	      x_ = x, y_ = y, v_ = v;
	    }

	    return clipStream;
	  };
	}

	var extent$1 = function() {
	  var x0 = 0,
	      y0 = 0,
	      x1 = 960,
	      y1 = 500,
	      cache,
	      cacheStream,
	      clip;

	  return clip = {
	    stream: function(stream) {
	      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);
	    },
	    extent: function(_) {
	      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
	    }
	  };
	};

	var sum$1 = adder();

	var polygonContains = function(polygon, point) {
	  var lambda = point[0],
	      phi = point[1],
	      normal = [sin$1(lambda), -cos$1(lambda), 0],
	      angle = 0,
	      winding = 0;

	  sum$1.reset();

	  for (var i = 0, n = polygon.length; i < n; ++i) {
	    if (!(m = (ring = polygon[i]).length)) continue;
	    var ring,
	        m,
	        point0 = ring[m - 1],
	        lambda0 = point0[0],
	        phi0 = point0[1] / 2 + quarterPi,
	        sinPhi0 = sin$1(phi0),
	        cosPhi0 = cos$1(phi0);

	    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
	      var point1 = ring[j],
	          lambda1 = point1[0],
	          phi1 = point1[1] / 2 + quarterPi,
	          sinPhi1 = sin$1(phi1),
	          cosPhi1 = cos$1(phi1),
	          delta = lambda1 - lambda0,
	          sign$$1 = delta >= 0 ? 1 : -1,
	          absDelta = sign$$1 * delta,
	          antimeridian = absDelta > pi$3,
	          k = sinPhi0 * sinPhi1;

	      sum$1.add(atan2(k * sign$$1 * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
	      angle += antimeridian ? delta + sign$$1 * tau$3 : delta;

	      // Are the longitudes either side of the point’s meridian (lambda),
	      // and are the latitudes smaller than the parallel (phi)?
	      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
	        var arc = cartesianCross(cartesian(point0), cartesian(point1));
	        cartesianNormalizeInPlace(arc);
	        var intersection = cartesianCross(normal, arc);
	        cartesianNormalizeInPlace(intersection);
	        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
	        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
	          winding += antimeridian ^ delta >= 0 ? 1 : -1;
	        }
	      }
	    }
	  }

	  // First, determine whether the South pole is inside or outside:
	  //
	  // It is inside if:
	  // * the polygon winds around it in a clockwise direction.
	  // * the polygon does not (cumulatively) wind around it, but has a negative
	  //   (counter-clockwise) area.
	  //
	  // Second, count the (signed) number of times a segment crosses a lambda
	  // from the point to the South pole.  If it is zero, then the point is the
	  // same side as the South pole.

	  return (angle < -epsilon$2 || angle < epsilon$2 && sum$1 < -epsilon$2) ^ (winding & 1);
	};

	var lengthSum = adder();
	var lambda0$2;
	var sinPhi0$1;
	var cosPhi0$1;

	var lengthStream = {
	  sphere: noop$1,
	  point: noop$1,
	  lineStart: lengthLineStart,
	  lineEnd: noop$1,
	  polygonStart: noop$1,
	  polygonEnd: noop$1
	};

	function lengthLineStart() {
	  lengthStream.point = lengthPointFirst;
	  lengthStream.lineEnd = lengthLineEnd;
	}

	function lengthLineEnd() {
	  lengthStream.point = lengthStream.lineEnd = noop$1;
	}

	function lengthPointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);
	  lengthStream.point = lengthPoint;
	}

	function lengthPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var sinPhi = sin$1(phi),
	      cosPhi = cos$1(phi),
	      delta = abs(lambda - lambda0$2),
	      cosDelta = cos$1(delta),
	      sinDelta = sin$1(delta),
	      x = cosPhi * sinDelta,
	      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
	      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
	  lengthSum.add(atan2(sqrt(x * x + y * y), z));
	  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
	}

	var length$1 = function(object) {
	  lengthSum.reset();
	  geoStream(object, lengthStream);
	  return +lengthSum;
	};

	var coordinates = [null, null];
	var object$1 = {type: "LineString", coordinates: coordinates};

	var distance = function(a, b) {
	  coordinates[0] = a;
	  coordinates[1] = b;
	  return length$1(object$1);
	};

	var containsObjectType = {
	  Feature: function(object, point) {
	    return containsGeometry(object.geometry, point);
	  },
	  FeatureCollection: function(object, point) {
	    var features = object.features, i = -1, n = features.length;
	    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
	    return false;
	  }
	};

	var containsGeometryType = {
	  Sphere: function() {
	    return true;
	  },
	  Point: function(object, point) {
	    return containsPoint(object.coordinates, point);
	  },
	  MultiPoint: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsPoint(coordinates[i], point)) return true;
	    return false;
	  },
	  LineString: function(object, point) {
	    return containsLine(object.coordinates, point);
	  },
	  MultiLineString: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsLine(coordinates[i], point)) return true;
	    return false;
	  },
	  Polygon: function(object, point) {
	    return containsPolygon(object.coordinates, point);
	  },
	  MultiPolygon: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
	    return false;
	  },
	  GeometryCollection: function(object, point) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) if (containsGeometry(geometries[i], point)) return true;
	    return false;
	  }
	};

	function containsGeometry(geometry, point) {
	  return geometry && containsGeometryType.hasOwnProperty(geometry.type)
	      ? containsGeometryType[geometry.type](geometry, point)
	      : false;
	}

	function containsPoint(coordinates, point) {
	  return distance(coordinates, point) === 0;
	}

	function containsLine(coordinates, point) {
	  var ab = distance(coordinates[0], coordinates[1]),
	      ao = distance(coordinates[0], point),
	      ob = distance(point, coordinates[1]);
	  return ao + ob <= ab + epsilon$2;
	}

	function containsPolygon(coordinates, point) {
	  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
	}

	function ringRadians(ring) {
	  return ring = ring.map(pointRadians), ring.pop(), ring;
	}

	function pointRadians(point) {
	  return [point[0] * radians, point[1] * radians];
	}

	var contains = function(object, point) {
	  return (object && containsObjectType.hasOwnProperty(object.type)
	      ? containsObjectType[object.type]
	      : containsGeometry)(object, point);
	};

	function graticuleX(y0, y1, dy) {
	  var y = sequence(y0, y1 - epsilon$2, dy).concat(y1);
	  return function(x) { return y.map(function(y) { return [x, y]; }); };
	}

	function graticuleY(x0, x1, dx) {
	  var x = sequence(x0, x1 - epsilon$2, dx).concat(x1);
	  return function(y) { return x.map(function(x) { return [x, y]; }); };
	}

	function graticule() {
	  var x1, x0, X1, X0,
	      y1, y0, Y1, Y0,
	      dx = 10, dy = dx, DX = 90, DY = 360,
	      x, y, X, Y,
	      precision = 2.5;

	  function graticule() {
	    return {type: "MultiLineString", coordinates: lines()};
	  }

	  function lines() {
	    return sequence(ceil(X0 / DX) * DX, X1, DX).map(X)
	        .concat(sequence(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
	        .concat(sequence(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$2; }).map(x))
	        .concat(sequence(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$2; }).map(y));
	  }

	  graticule.lines = function() {
	    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
	  };

	  graticule.outline = function() {
	    return {
	      type: "Polygon",
	      coordinates: [
	        X(X0).concat(
	        Y(Y1).slice(1),
	        X(X1).reverse().slice(1),
	        Y(Y0).reverse().slice(1))
	      ]
	    };
	  };

	  graticule.extent = function(_) {
	    if (!arguments.length) return graticule.extentMinor();
	    return graticule.extentMajor(_).extentMinor(_);
	  };

	  graticule.extentMajor = function(_) {
	    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
	    X0 = +_[0][0], X1 = +_[1][0];
	    Y0 = +_[0][1], Y1 = +_[1][1];
	    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	    return graticule.precision(precision);
	  };

	  graticule.extentMinor = function(_) {
	    if (!arguments.length) return [[x0, y0], [x1, y1]];
	    x0 = +_[0][0], x1 = +_[1][0];
	    y0 = +_[0][1], y1 = +_[1][1];
	    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	    return graticule.precision(precision);
	  };

	  graticule.step = function(_) {
	    if (!arguments.length) return graticule.stepMinor();
	    return graticule.stepMajor(_).stepMinor(_);
	  };

	  graticule.stepMajor = function(_) {
	    if (!arguments.length) return [DX, DY];
	    DX = +_[0], DY = +_[1];
	    return graticule;
	  };

	  graticule.stepMinor = function(_) {
	    if (!arguments.length) return [dx, dy];
	    dx = +_[0], dy = +_[1];
	    return graticule;
	  };

	  graticule.precision = function(_) {
	    if (!arguments.length) return precision;
	    precision = +_;
	    x = graticuleX(y0, y1, 90);
	    y = graticuleY(x0, x1, precision);
	    X = graticuleX(Y0, Y1, 90);
	    Y = graticuleY(X0, X1, precision);
	    return graticule;
	  };

	  return graticule
	      .extentMajor([[-180, -90 + epsilon$2], [180, 90 - epsilon$2]])
	      .extentMinor([[-180, -80 - epsilon$2], [180, 80 + epsilon$2]]);
	}

	function graticule10() {
	  return graticule()();
	}

	var interpolate$1 = function(a, b) {
	  var x0 = a[0] * radians,
	      y0 = a[1] * radians,
	      x1 = b[0] * radians,
	      y1 = b[1] * radians,
	      cy0 = cos$1(y0),
	      sy0 = sin$1(y0),
	      cy1 = cos$1(y1),
	      sy1 = sin$1(y1),
	      kx0 = cy0 * cos$1(x0),
	      ky0 = cy0 * sin$1(x0),
	      kx1 = cy1 * cos$1(x1),
	      ky1 = cy1 * sin$1(x1),
	      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
	      k = sin$1(d);

	  var interpolate = d ? function(t) {
	    var B = sin$1(t *= d) / k,
	        A = sin$1(d - t) / k,
	        x = A * kx0 + B * kx1,
	        y = A * ky0 + B * ky1,
	        z = A * sy0 + B * sy1;
	    return [
	      atan2(y, x) * degrees$1,
	      atan2(z, sqrt(x * x + y * y)) * degrees$1
	    ];
	  } : function() {
	    return [x0 * degrees$1, y0 * degrees$1];
	  };

	  interpolate.distance = d;

	  return interpolate;
	};

	var identity$4 = function(x) {
	  return x;
	};

	var areaSum$1 = adder();
	var areaRingSum$1 = adder();
	var x00;
	var y00;
	var x0$1;
	var y0$1;

	var areaStream$1 = {
	  point: noop$1,
	  lineStart: noop$1,
	  lineEnd: noop$1,
	  polygonStart: function() {
	    areaStream$1.lineStart = areaRingStart$1;
	    areaStream$1.lineEnd = areaRingEnd$1;
	  },
	  polygonEnd: function() {
	    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$1;
	    areaSum$1.add(abs(areaRingSum$1));
	    areaRingSum$1.reset();
	  },
	  result: function() {
	    var area = areaSum$1 / 2;
	    areaSum$1.reset();
	    return area;
	  }
	};

	function areaRingStart$1() {
	  areaStream$1.point = areaPointFirst$1;
	}

	function areaPointFirst$1(x, y) {
	  areaStream$1.point = areaPoint$1;
	  x00 = x0$1 = x, y00 = y0$1 = y;
	}

	function areaPoint$1(x, y) {
	  areaRingSum$1.add(y0$1 * x - x0$1 * y);
	  x0$1 = x, y0$1 = y;
	}

	function areaRingEnd$1() {
	  areaPoint$1(x00, y00);
	}

	var x0$2 = Infinity;
	var y0$2 = x0$2;
	var x1 = -x0$2;
	var y1 = x1;

	var boundsStream$1 = {
	  point: boundsPoint$1,
	  lineStart: noop$1,
	  lineEnd: noop$1,
	  polygonStart: noop$1,
	  polygonEnd: noop$1,
	  result: function() {
	    var bounds = [[x0$2, y0$2], [x1, y1]];
	    x1 = y1 = -(y0$2 = x0$2 = Infinity);
	    return bounds;
	  }
	};

	function boundsPoint$1(x, y) {
	  if (x < x0$2) x0$2 = x;
	  if (x > x1) x1 = x;
	  if (y < y0$2) y0$2 = y;
	  if (y > y1) y1 = y;
	}

	// TODO Enforce positive area for exterior, negative area for interior?

	var X0$1 = 0;
	var Y0$1 = 0;
	var Z0$1 = 0;
	var X1$1 = 0;
	var Y1$1 = 0;
	var Z1$1 = 0;
	var X2$1 = 0;
	var Y2$1 = 0;
	var Z2$1 = 0;
	var x00$1;
	var y00$1;
	var x0$3;
	var y0$3;

	var centroidStream$1 = {
	  point: centroidPoint$1,
	  lineStart: centroidLineStart$1,
	  lineEnd: centroidLineEnd$1,
	  polygonStart: function() {
	    centroidStream$1.lineStart = centroidRingStart$1;
	    centroidStream$1.lineEnd = centroidRingEnd$1;
	  },
	  polygonEnd: function() {
	    centroidStream$1.point = centroidPoint$1;
	    centroidStream$1.lineStart = centroidLineStart$1;
	    centroidStream$1.lineEnd = centroidLineEnd$1;
	  },
	  result: function() {
	    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
	        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
	        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
	        : [NaN, NaN];
	    X0$1 = Y0$1 = Z0$1 =
	    X1$1 = Y1$1 = Z1$1 =
	    X2$1 = Y2$1 = Z2$1 = 0;
	    return centroid;
	  }
	};

	function centroidPoint$1(x, y) {
	  X0$1 += x;
	  Y0$1 += y;
	  ++Z0$1;
	}

	function centroidLineStart$1() {
	  centroidStream$1.point = centroidPointFirstLine;
	}

	function centroidPointFirstLine(x, y) {
	  centroidStream$1.point = centroidPointLine;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function centroidPointLine(x, y) {
	  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function centroidLineEnd$1() {
	  centroidStream$1.point = centroidPoint$1;
	}

	function centroidRingStart$1() {
	  centroidStream$1.point = centroidPointFirstRing;
	}

	function centroidRingEnd$1() {
	  centroidPointRing(x00$1, y00$1);
	}

	function centroidPointFirstRing(x, y) {
	  centroidStream$1.point = centroidPointRing;
	  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
	}

	function centroidPointRing(x, y) {
	  var dx = x - x0$3,
	      dy = y - y0$3,
	      z = sqrt(dx * dx + dy * dy);

	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;

	  z = y0$3 * x - x0$3 * y;
	  X2$1 += z * (x0$3 + x);
	  Y2$1 += z * (y0$3 + y);
	  Z2$1 += z * 3;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function PathContext(context) {
	  this._context = context;
	}

	PathContext.prototype = {
	  _radius: 4.5,
	  pointRadius: function(_) {
	    return this._radius = _, this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._context.closePath();
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._context.moveTo(x, y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._context.lineTo(x, y);
	        break;
	      }
	      default: {
	        this._context.moveTo(x + this._radius, y);
	        this._context.arc(x, y, this._radius, 0, tau$3);
	        break;
	      }
	    }
	  },
	  result: noop$1
	};

	var lengthSum$1 = adder();
	var lengthRing;
	var x00$2;
	var y00$2;
	var x0$4;
	var y0$4;

	var lengthStream$1 = {
	  point: noop$1,
	  lineStart: function() {
	    lengthStream$1.point = lengthPointFirst$1;
	  },
	  lineEnd: function() {
	    if (lengthRing) lengthPoint$1(x00$2, y00$2);
	    lengthStream$1.point = noop$1;
	  },
	  polygonStart: function() {
	    lengthRing = true;
	  },
	  polygonEnd: function() {
	    lengthRing = null;
	  },
	  result: function() {
	    var length = +lengthSum$1;
	    lengthSum$1.reset();
	    return length;
	  }
	};

	function lengthPointFirst$1(x, y) {
	  lengthStream$1.point = lengthPoint$1;
	  x00$2 = x0$4 = x, y00$2 = y0$4 = y;
	}

	function lengthPoint$1(x, y) {
	  x0$4 -= x, y0$4 -= y;
	  lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));
	  x0$4 = x, y0$4 = y;
	}

	function PathString() {
	  this._string = [];
	}

	PathString.prototype = {
	  _circle: circle$1(4.5),
	  pointRadius: function(_) {
	    return this._circle = circle$1(_), this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._string.push("Z");
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._string.push("M", x, ",", y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._string.push("L", x, ",", y);
	        break;
	      }
	      default: {
	        this._string.push("M", x, ",", y, this._circle);
	        break;
	      }
	    }
	  },
	  result: function() {
	    if (this._string.length) {
	      var result = this._string.join("");
	      this._string = [];
	      return result;
	    }
	  }
	};

	function circle$1(radius) {
	  return "m0," + radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
	      + "z";
	}

	var index$1 = function(projection, context) {
	  var pointRadius = 4.5,
	      projectionStream,
	      contextStream;

	  function path(object) {
	    if (object) {
	      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	      geoStream(object, projectionStream(contextStream));
	    }
	    return contextStream.result();
	  }

	  path.area = function(object) {
	    geoStream(object, projectionStream(areaStream$1));
	    return areaStream$1.result();
	  };

	  path.measure = function(object) {
	    geoStream(object, projectionStream(lengthStream$1));
	    return lengthStream$1.result();
	  };

	  path.bounds = function(object) {
	    geoStream(object, projectionStream(boundsStream$1));
	    return boundsStream$1.result();
	  };

	  path.centroid = function(object) {
	    geoStream(object, projectionStream(centroidStream$1));
	    return centroidStream$1.result();
	  };

	  path.projection = function(_) {
	    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$4) : (projection = _).stream, path) : projection;
	  };

	  path.context = function(_) {
	    if (!arguments.length) return context;
	    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
	    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	    return path;
	  };

	  path.pointRadius = function(_) {
	    if (!arguments.length) return pointRadius;
	    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	    return path;
	  };

	  return path.projection(projection).context(context);
	};

	var clip = function(pointVisible, clipLine, interpolate, start) {
	  return function(rotate, sink) {
	    var line = clipLine(sink),
	        rotatedStart = rotate.invert(start[0], start[1]),
	        ringBuffer = clipBuffer(),
	        ringSink = clipLine(ringBuffer),
	        polygonStarted = false,
	        polygon,
	        segments,
	        ring;

	    var clip = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        clip.point = pointRing;
	        clip.lineStart = ringStart;
	        clip.lineEnd = ringEnd;
	        segments = [];
	        polygon = [];
	      },
	      polygonEnd: function() {
	        clip.point = point;
	        clip.lineStart = lineStart;
	        clip.lineEnd = lineEnd;
	        segments = merge(segments);
	        var startInside = polygonContains(polygon, rotatedStart);
	        if (segments.length) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);
	        } else if (startInside) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          interpolate(null, null, 1, sink);
	          sink.lineEnd();
	        }
	        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
	        segments = polygon = null;
	      },
	      sphere: function() {
	        sink.polygonStart();
	        sink.lineStart();
	        interpolate(null, null, 1, sink);
	        sink.lineEnd();
	        sink.polygonEnd();
	      }
	    };

	    function point(lambda, phi) {
	      var point = rotate(lambda, phi);
	      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);
	    }

	    function pointLine(lambda, phi) {
	      var point = rotate(lambda, phi);
	      line.point(point[0], point[1]);
	    }

	    function lineStart() {
	      clip.point = pointLine;
	      line.lineStart();
	    }

	    function lineEnd() {
	      clip.point = point;
	      line.lineEnd();
	    }

	    function pointRing(lambda, phi) {
	      ring.push([lambda, phi]);
	      var point = rotate(lambda, phi);
	      ringSink.point(point[0], point[1]);
	    }

	    function ringStart() {
	      ringSink.lineStart();
	      ring = [];
	    }

	    function ringEnd() {
	      pointRing(ring[0][0], ring[0][1]);
	      ringSink.lineEnd();

	      var clean = ringSink.clean(),
	          ringSegments = ringBuffer.result(),
	          i, n = ringSegments.length, m,
	          segment,
	          point;

	      ring.pop();
	      polygon.push(ring);
	      ring = null;

	      if (!n) return;

	      // No intersections.
	      if (clean & 1) {
	        segment = ringSegments[0];
	        if ((m = segment.length - 1) > 0) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
	          sink.lineEnd();
	        }
	        return;
	      }

	      // Rejoin connected segments.
	      // TODO reuse ringBuffer.rejoin()?
	      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

	      segments.push(ringSegments.filter(validSegment));
	    }

	    return clip;
	  };
	};

	function validSegment(segment) {
	  return segment.length > 1;
	}

	// Intersections are sorted along the clip edge. For both antimeridian cutting
	// and circle clipping, the same comparison is used.
	function compareIntersection(a, b) {
	  return ((a = a.x)[0] < 0 ? a[1] - halfPi$2 - epsilon$2 : halfPi$2 - a[1])
	       - ((b = b.x)[0] < 0 ? b[1] - halfPi$2 - epsilon$2 : halfPi$2 - b[1]);
	}

	var clipAntimeridian = clip(
	  function() { return true; },
	  clipAntimeridianLine,
	  clipAntimeridianInterpolate,
	  [-pi$3, -halfPi$2]
	);

	// Takes a line and cuts into visible segments. Return values: 0 - there were
	// intersections or the line was empty; 1 - no intersections; 2 - there were
	// intersections, and the first and last segments should be rejoined.
	function clipAntimeridianLine(stream) {
	  var lambda0 = NaN,
	      phi0 = NaN,
	      sign0 = NaN,
	      clean; // no intersections

	  return {
	    lineStart: function() {
	      stream.lineStart();
	      clean = 1;
	    },
	    point: function(lambda1, phi1) {
	      var sign1 = lambda1 > 0 ? pi$3 : -pi$3,
	          delta = abs(lambda1 - lambda0);
	      if (abs(delta - pi$3) < epsilon$2) { // line crosses a pole
	        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$2 : -halfPi$2);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        stream.point(lambda1, phi0);
	        clean = 0;
	      } else if (sign0 !== sign1 && delta >= pi$3) { // line crosses antimeridian
	        if (abs(lambda0 - sign0) < epsilon$2) lambda0 -= sign0 * epsilon$2; // handle degeneracies
	        if (abs(lambda1 - sign1) < epsilon$2) lambda1 -= sign1 * epsilon$2;
	        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        clean = 0;
	      }
	      stream.point(lambda0 = lambda1, phi0 = phi1);
	      sign0 = sign1;
	    },
	    lineEnd: function() {
	      stream.lineEnd();
	      lambda0 = phi0 = NaN;
	    },
	    clean: function() {
	      return 2 - clean; // if intersections, rejoin first and last segments
	    }
	  };
	}

	function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
	  var cosPhi0,
	      cosPhi1,
	      sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
	  return abs(sinLambda0Lambda1) > epsilon$2
	      ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)
	          - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))
	          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
	      : (phi0 + phi1) / 2;
	}

	function clipAntimeridianInterpolate(from, to, direction, stream) {
	  var phi;
	  if (from == null) {
	    phi = direction * halfPi$2;
	    stream.point(-pi$3, phi);
	    stream.point(0, phi);
	    stream.point(pi$3, phi);
	    stream.point(pi$3, 0);
	    stream.point(pi$3, -phi);
	    stream.point(0, -phi);
	    stream.point(-pi$3, -phi);
	    stream.point(-pi$3, 0);
	    stream.point(-pi$3, phi);
	  } else if (abs(from[0] - to[0]) > epsilon$2) {
	    var lambda = from[0] < to[0] ? pi$3 : -pi$3;
	    phi = direction * lambda / 2;
	    stream.point(-lambda, phi);
	    stream.point(0, phi);
	    stream.point(lambda, phi);
	  } else {
	    stream.point(to[0], to[1]);
	  }
	}

	var clipCircle = function(radius, delta) {
	  var cr = cos$1(radius),
	      smallRadius = cr > 0,
	      notHemisphere = abs(cr) > epsilon$2; // TODO optimise for this common case

	  function interpolate(from, to, direction, stream) {
	    circleStream(stream, radius, delta, direction, from, to);
	  }

	  function visible(lambda, phi) {
	    return cos$1(lambda) * cos$1(phi) > cr;
	  }

	  // Takes a line and cuts into visible segments. Return values used for polygon
	  // clipping: 0 - there were intersections or the line was empty; 1 - no
	  // intersections 2 - there were intersections, and the first and last segments
	  // should be rejoined.
	  function clipLine(stream) {
	    var point0, // previous point
	        c0, // code for previous point
	        v0, // visibility of previous point
	        v00, // visibility of first point
	        clean; // no intersections
	    return {
	      lineStart: function() {
	        v00 = v0 = false;
	        clean = 1;
	      },
	      point: function(lambda, phi) {
	        var point1 = [lambda, phi],
	            point2,
	            v = visible(lambda, phi),
	            c = smallRadius
	              ? v ? 0 : code(lambda, phi)
	              : v ? code(lambda + (lambda < 0 ? pi$3 : -pi$3), phi) : 0;
	        if (!point0 && (v00 = v0 = v)) stream.lineStart();
	        // Handle degeneracies.
	        // TODO ignore if not clipping polygons.
	        if (v !== v0) {
	          point2 = intersect(point0, point1);
	          if (pointEqual(point0, point2) || pointEqual(point1, point2)) {
	            point1[0] += epsilon$2;
	            point1[1] += epsilon$2;
	            v = visible(point1[0], point1[1]);
	          }
	        }
	        if (v !== v0) {
	          clean = 0;
	          if (v) {
	            // outside going in
	            stream.lineStart();
	            point2 = intersect(point1, point0);
	            stream.point(point2[0], point2[1]);
	          } else {
	            // inside going out
	            point2 = intersect(point0, point1);
	            stream.point(point2[0], point2[1]);
	            stream.lineEnd();
	          }
	          point0 = point2;
	        } else if (notHemisphere && point0 && smallRadius ^ v) {
	          var t;
	          // If the codes for two points are different, or are both zero,
	          // and there this segment intersects with the small circle.
	          if (!(c & c0) && (t = intersect(point1, point0, true))) {
	            clean = 0;
	            if (smallRadius) {
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	            } else {
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	            }
	          }
	        }
	        if (v && (!point0 || !pointEqual(point0, point1))) {
	          stream.point(point1[0], point1[1]);
	        }
	        point0 = point1, v0 = v, c0 = c;
	      },
	      lineEnd: function() {
	        if (v0) stream.lineEnd();
	        point0 = null;
	      },
	      // Rejoin first and last segments if there were intersections and the first
	      // and last points were visible.
	      clean: function() {
	        return clean | ((v00 && v0) << 1);
	      }
	    };
	  }

	  // Intersects the great circle between a and b with the clip circle.
	  function intersect(a, b, two) {
	    var pa = cartesian(a),
	        pb = cartesian(b);

	    // We have two planes, n1.p = d1 and n2.p = d2.
	    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
	    var n1 = [1, 0, 0], // normal
	        n2 = cartesianCross(pa, pb),
	        n2n2 = cartesianDot(n2, n2),
	        n1n2 = n2[0], // cartesianDot(n1, n2),
	        determinant = n2n2 - n1n2 * n1n2;

	    // Two polar points.
	    if (!determinant) return !two && a;

	    var c1 =  cr * n2n2 / determinant,
	        c2 = -cr * n1n2 / determinant,
	        n1xn2 = cartesianCross(n1, n2),
	        A = cartesianScale(n1, c1),
	        B = cartesianScale(n2, c2);
	    cartesianAddInPlace(A, B);

	    // Solve |p(t)|^2 = 1.
	    var u = n1xn2,
	        w = cartesianDot(A, u),
	        uu = cartesianDot(u, u),
	        t2 = w * w - uu * (cartesianDot(A, A) - 1);

	    if (t2 < 0) return;

	    var t = sqrt(t2),
	        q = cartesianScale(u, (-w - t) / uu);
	    cartesianAddInPlace(q, A);
	    q = spherical(q);

	    if (!two) return q;

	    // Two intersection points.
	    var lambda0 = a[0],
	        lambda1 = b[0],
	        phi0 = a[1],
	        phi1 = b[1],
	        z;

	    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

	    var delta = lambda1 - lambda0,
	        polar = abs(delta - pi$3) < epsilon$2,
	        meridian = polar || delta < epsilon$2;

	    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

	    // Check that the first point is between a and b.
	    if (meridian
	        ? polar
	          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$2 ? phi0 : phi1)
	          : phi0 <= q[1] && q[1] <= phi1
	        : delta > pi$3 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
	      var q1 = cartesianScale(u, (-w + t) / uu);
	      cartesianAddInPlace(q1, A);
	      return [q, spherical(q1)];
	    }
	  }

	  // Generates a 4-bit vector representing the location of a point relative to
	  // the small circle's bounding box.
	  function code(lambda, phi) {
	    var r = smallRadius ? radius : pi$3 - radius,
	        code = 0;
	    if (lambda < -r) code |= 1; // left
	    else if (lambda > r) code |= 2; // right
	    if (phi < -r) code |= 4; // below
	    else if (phi > r) code |= 8; // above
	    return code;
	  }

	  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$3, radius - pi$3]);
	};

	var transform = function(methods) {
	  return {
	    stream: transformer(methods)
	  };
	};

	function transformer(methods) {
	  return function(stream) {
	    var s = new TransformStream;
	    for (var key in methods) s[key] = methods[key];
	    s.stream = stream;
	    return s;
	  };
	}

	function TransformStream() {}

	TransformStream.prototype = {
	  constructor: TransformStream,
	  point: function(x, y) { this.stream.point(x, y); },
	  sphere: function() { this.stream.sphere(); },
	  lineStart: function() { this.stream.lineStart(); },
	  lineEnd: function() { this.stream.lineEnd(); },
	  polygonStart: function() { this.stream.polygonStart(); },
	  polygonEnd: function() { this.stream.polygonEnd(); }
	};

	function fitExtent(projection, extent, object) {
	  var w = extent[1][0] - extent[0][0],
	      h = extent[1][1] - extent[0][1],
	      clip = projection.clipExtent && projection.clipExtent();

	  projection
	      .scale(150)
	      .translate([0, 0]);

	  if (clip != null) projection.clipExtent(null);

	  geoStream(object, projection.stream(boundsStream$1));

	  var b = boundsStream$1.result(),
	      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
	      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
	      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;

	  if (clip != null) projection.clipExtent(clip);

	  return projection
	      .scale(k * 150)
	      .translate([x, y]);
	}

	function fitSize(projection, size, object) {
	  return fitExtent(projection, [[0, 0], size], object);
	}

	var maxDepth = 16;
	var cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)

	var resample = function(project, delta2) {
	  return +delta2 ? resample$1(project, delta2) : resampleNone(project);
	};

	function resampleNone(project) {
	  return transformer({
	    point: function(x, y) {
	      x = project(x, y);
	      this.stream.point(x[0], x[1]);
	    }
	  });
	}

	function resample$1(project, delta2) {

	  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
	    var dx = x1 - x0,
	        dy = y1 - y0,
	        d2 = dx * dx + dy * dy;
	    if (d2 > 4 * delta2 && depth--) {
	      var a = a0 + a1,
	          b = b0 + b1,
	          c = c0 + c1,
	          m = sqrt(a * a + b * b + c * c),
	          phi2 = asin(c /= m),
	          lambda2 = abs(abs(c) - 1) < epsilon$2 || abs(lambda0 - lambda1) < epsilon$2 ? (lambda0 + lambda1) / 2 : atan2(b, a),
	          p = project(lambda2, phi2),
	          x2 = p[0],
	          y2 = p[1],
	          dx2 = x2 - x0,
	          dy2 = y2 - y0,
	          dz = dy * dx2 - dx * dy2;
	      if (dz * dz / d2 > delta2 // perpendicular projected distance
	          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
	          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
	        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
	        stream.point(x2, y2);
	        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
	      }
	    }
	  }
	  return function(stream) {
	    var lambda00, x00, y00, a00, b00, c00, // first point
	        lambda0, x0, y0, a0, b0, c0; // previous point

	    var resampleStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
	      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
	    };

	    function point(x, y) {
	      x = project(x, y);
	      stream.point(x[0], x[1]);
	    }

	    function lineStart() {
	      x0 = NaN;
	      resampleStream.point = linePoint;
	      stream.lineStart();
	    }

	    function linePoint(lambda, phi) {
	      var c = cartesian([lambda, phi]), p = project(lambda, phi);
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	      stream.point(x0, y0);
	    }

	    function lineEnd() {
	      resampleStream.point = point;
	      stream.lineEnd();
	    }

	    function ringStart() {
	      lineStart();
	      resampleStream.point = ringPoint;
	      resampleStream.lineEnd = ringEnd;
	    }

	    function ringPoint(lambda, phi) {
	      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	      resampleStream.point = linePoint;
	    }

	    function ringEnd() {
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
	      resampleStream.lineEnd = lineEnd;
	      lineEnd();
	    }

	    return resampleStream;
	  };
	}

	var transformRadians = transformer({
	  point: function(x, y) {
	    this.stream.point(x * radians, y * radians);
	  }
	});

	function projection(project) {
	  return projectionMutator(function() { return project; })();
	}

	function projectionMutator(projectAt) {
	  var project,
	      k = 150, // scale
	      x = 480, y = 250, // translate
	      dx, dy, lambda = 0, phi = 0, // center
	      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate
	      theta = null, preclip = clipAntimeridian, // clip angle
	      x0 = null, y0, x1, y1, postclip = identity$4, // clip extent
	      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision
	      cache,
	      cacheStream;

	  function projection(point) {
	    point = projectRotate(point[0] * radians, point[1] * radians);
	    return [point[0] * k + dx, dy - point[1] * k];
	  }

	  function invert(point) {
	    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
	    return point && [point[0] * degrees$1, point[1] * degrees$1];
	  }

	  function projectTransform(x, y) {
	    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
	  }

	  projection.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
	  };

	  projection.clipAngle = function(_) {
	    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
	  };

	  projection.clipExtent = function(_) {
	    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };

	  projection.scale = function(_) {
	    return arguments.length ? (k = +_, recenter()) : k;
	  };

	  projection.translate = function(_) {
	    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
	  };

	  projection.center = function(_) {
	    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];
	  };

	  projection.rotate = function(_) {
	    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];
	  };

	  projection.precision = function(_) {
	    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
	  };

	  projection.fitExtent = function(extent, object) {
	    return fitExtent(projection, extent, object);
	  };

	  projection.fitSize = function(size, object) {
	    return fitSize(projection, size, object);
	  };

	  function recenter() {
	    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
	    var center = project(lambda, phi);
	    dx = x - center[0] * k;
	    dy = y + center[1] * k;
	    return reset();
	  }

	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }

	  return function() {
	    project = projectAt.apply(this, arguments);
	    projection.invert = project.invert && invert;
	    return recenter();
	  };
	}

	function conicProjection(projectAt) {
	  var phi0 = 0,
	      phi1 = pi$3 / 3,
	      m = projectionMutator(projectAt),
	      p = m(phi0, phi1);

	  p.parallels = function(_) {
	    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];
	  };

	  return p;
	}

	function cylindricalEqualAreaRaw(phi0) {
	  var cosPhi0 = cos$1(phi0);

	  function forward(lambda, phi) {
	    return [lambda * cosPhi0, sin$1(phi) / cosPhi0];
	  }

	  forward.invert = function(x, y) {
	    return [x / cosPhi0, asin(y * cosPhi0)];
	  };

	  return forward;
	}

	function conicEqualAreaRaw(y0, y1) {
	  var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2;

	  // Are the parallels symmetrical around the Equator?
	  if (abs(n) < epsilon$2) return cylindricalEqualAreaRaw(y0);

	  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;

	  function project(x, y) {
	    var r = sqrt(c - 2 * n * sin$1(y)) / n;
	    return [r * sin$1(x *= n), r0 - r * cos$1(x)];
	  }

	  project.invert = function(x, y) {
	    var r0y = r0 - y;
	    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
	  };

	  return project;
	}

	var conicEqualArea = function() {
	  return conicProjection(conicEqualAreaRaw)
	      .scale(155.424)
	      .center([0, 33.6442]);
	};

	var albers = function() {
	  return conicEqualArea()
	      .parallels([29.5, 45.5])
	      .scale(1070)
	      .translate([480, 250])
	      .rotate([96, 0])
	      .center([-0.6, 38.7]);
	};

	// The projections must have mutually exclusive clip regions on the sphere,
	// as this will avoid emitting interleaving lines and polygons.
	function multiplex(streams) {
	  var n = streams.length;
	  return {
	    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
	    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
	    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
	    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
	    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
	    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
	  };
	}

	// A composite projection for the United States, configured by default for
	// 960×500. The projection also works quite well at 960×600 if you change the
	// scale to 1285 and adjust the translate accordingly. The set of standard
	// parallels for each region comes from USGS, which is published here:
	// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
	var albersUsa = function() {
	  var cache,
	      cacheStream,
	      lower48 = albers(), lower48Point,
	      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
	      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
	      point, pointStream = {point: function(x, y) { point = [x, y]; }};

	  function albersUsa(coordinates) {
	    var x = coordinates[0], y = coordinates[1];
	    return point = null,
	        (lower48Point.point(x, y), point)
	        || (alaskaPoint.point(x, y), point)
	        || (hawaiiPoint.point(x, y), point);
	  }

	  albersUsa.invert = function(coordinates) {
	    var k = lower48.scale(),
	        t = lower48.translate(),
	        x = (coordinates[0] - t[0]) / k,
	        y = (coordinates[1] - t[1]) / k;
	    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
	        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
	        : lower48).invert(coordinates);
	  };

	  albersUsa.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
	  };

	  albersUsa.precision = function(_) {
	    if (!arguments.length) return lower48.precision();
	    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
	    return reset();
	  };

	  albersUsa.scale = function(_) {
	    if (!arguments.length) return lower48.scale();
	    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
	    return albersUsa.translate(lower48.translate());
	  };

	  albersUsa.translate = function(_) {
	    if (!arguments.length) return lower48.translate();
	    var k = lower48.scale(), x = +_[0], y = +_[1];

	    lower48Point = lower48
	        .translate(_)
	        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
	        .stream(pointStream);

	    alaskaPoint = alaska
	        .translate([x - 0.307 * k, y + 0.201 * k])
	        .clipExtent([[x - 0.425 * k + epsilon$2, y + 0.120 * k + epsilon$2], [x - 0.214 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
	        .stream(pointStream);

	    hawaiiPoint = hawaii
	        .translate([x - 0.205 * k, y + 0.212 * k])
	        .clipExtent([[x - 0.214 * k + epsilon$2, y + 0.166 * k + epsilon$2], [x - 0.115 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
	        .stream(pointStream);

	    return reset();
	  };

	  albersUsa.fitExtent = function(extent, object) {
	    return fitExtent(albersUsa, extent, object);
	  };

	  albersUsa.fitSize = function(size, object) {
	    return fitSize(albersUsa, size, object);
	  };

	  function reset() {
	    cache = cacheStream = null;
	    return albersUsa;
	  }

	  return albersUsa.scale(1070);
	};

	function azimuthalRaw(scale) {
	  return function(x, y) {
	    var cx = cos$1(x),
	        cy = cos$1(y),
	        k = scale(cx * cy);
	    return [
	      k * cy * sin$1(x),
	      k * sin$1(y)
	    ];
	  }
	}

	function azimuthalInvert(angle) {
	  return function(x, y) {
	    var z = sqrt(x * x + y * y),
	        c = angle(z),
	        sc = sin$1(c),
	        cc = cos$1(c);
	    return [
	      atan2(x * sc, z * cc),
	      asin(z && y * sc / z)
	    ];
	  }
	}

	var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
	  return sqrt(2 / (1 + cxcy));
	});

	azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
	  return 2 * asin(z / 2);
	});

	var azimuthalEqualArea = function() {
	  return projection(azimuthalEqualAreaRaw)
	      .scale(124.75)
	      .clipAngle(180 - 1e-3);
	};

	var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
	  return (c = acos(c)) && c / sin$1(c);
	});

	azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
	  return z;
	});

	var azimuthalEquidistant = function() {
	  return projection(azimuthalEquidistantRaw)
	      .scale(79.4188)
	      .clipAngle(180 - 1e-3);
	};

	function mercatorRaw(lambda, phi) {
	  return [lambda, log(tan((halfPi$2 + phi) / 2))];
	}

	mercatorRaw.invert = function(x, y) {
	  return [x, 2 * atan(exp(y)) - halfPi$2];
	};

	var mercator = function() {
	  return mercatorProjection(mercatorRaw)
	      .scale(961 / tau$3);
	};

	function mercatorProjection(project) {
	  var m = projection(project),
	      center = m.center,
	      scale = m.scale,
	      translate = m.translate,
	      clipExtent = m.clipExtent,
	      x0 = null, y0, x1, y1; // clip extent

	  m.scale = function(_) {
	    return arguments.length ? (scale(_), reclip()) : scale();
	  };

	  m.translate = function(_) {
	    return arguments.length ? (translate(_), reclip()) : translate();
	  };

	  m.center = function(_) {
	    return arguments.length ? (center(_), reclip()) : center();
	  };

	  m.clipExtent = function(_) {
	    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };

	  function reclip() {
	    var k = pi$3 * scale(),
	        t = m(rotation(m.rotate()).invert([0, 0]));
	    return clipExtent(x0 == null
	        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
	        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
	        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
	  }

	  return reclip();
	}

	function tany(y) {
	  return tan((halfPi$2 + y) / 2);
	}

	function conicConformalRaw(y0, y1) {
	  var cy0 = cos$1(y0),
	      n = y0 === y1 ? sin$1(y0) : log(cy0 / cos$1(y1)) / log(tany(y1) / tany(y0)),
	      f = cy0 * pow(tany(y0), n) / n;

	  if (!n) return mercatorRaw;

	  function project(x, y) {
	    if (f > 0) { if (y < -halfPi$2 + epsilon$2) y = -halfPi$2 + epsilon$2; }
	    else { if (y > halfPi$2 - epsilon$2) y = halfPi$2 - epsilon$2; }
	    var r = f / pow(tany(y), n);
	    return [r * sin$1(n * x), f - r * cos$1(n * x)];
	  }

	  project.invert = function(x, y) {
	    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);
	    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi$2];
	  };

	  return project;
	}

	var conicConformal = function() {
	  return conicProjection(conicConformalRaw)
	      .scale(109.5)
	      .parallels([30, 30]);
	};

	function equirectangularRaw(lambda, phi) {
	  return [lambda, phi];
	}

	equirectangularRaw.invert = equirectangularRaw;

	var equirectangular = function() {
	  return projection(equirectangularRaw)
	      .scale(152.63);
	};

	function conicEquidistantRaw(y0, y1) {
	  var cy0 = cos$1(y0),
	      n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),
	      g = cy0 / n + y0;

	  if (abs(n) < epsilon$2) return equirectangularRaw;

	  function project(x, y) {
	    var gy = g - y, nx = n * x;
	    return [gy * sin$1(nx), g - gy * cos$1(nx)];
	  }

	  project.invert = function(x, y) {
	    var gy = g - y;
	    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];
	  };

	  return project;
	}

	var conicEquidistant = function() {
	  return conicProjection(conicEquidistantRaw)
	      .scale(131.154)
	      .center([0, 13.9389]);
	};

	function gnomonicRaw(x, y) {
	  var cy = cos$1(y), k = cos$1(x) * cy;
	  return [cy * sin$1(x) / k, sin$1(y) / k];
	}

	gnomonicRaw.invert = azimuthalInvert(atan);

	var gnomonic = function() {
	  return projection(gnomonicRaw)
	      .scale(144.049)
	      .clipAngle(60);
	};

	function scaleTranslate(kx, ky, tx, ty) {
	  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity$4 : transformer({
	    point: function(x, y) {
	      this.stream.point(x * kx + tx, y * ky + ty);
	    }
	  });
	}

	var identity$5 = function() {
	  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity$4, // scale, translate and reflect
	      x0 = null, y0, x1, y1, clip = identity$4, // clip extent
	      cache,
	      cacheStream,
	      projection;

	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }

	  return projection = {
	    stream: function(stream) {
	      return cache && cacheStream === stream ? cache : cache = transform(clip(cacheStream = stream));
	    },
	    clipExtent: function(_) {
	      return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	    },
	    scale: function(_) {
	      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;
	    },
	    translate: function(_) {
	      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
	    },
	    reflectX: function(_) {
	      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
	    },
	    reflectY: function(_) {
	      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
	    },
	    fitExtent: function(extent, object) {
	      return fitExtent(projection, extent, object);
	    },
	    fitSize: function(size, object) {
	      return fitSize(projection, size, object);
	    }
	  };
	};

	function orthographicRaw(x, y) {
	  return [cos$1(y) * sin$1(x), sin$1(y)];
	}

	orthographicRaw.invert = azimuthalInvert(asin);

	var orthographic = function() {
	  return projection(orthographicRaw)
	      .scale(249.5)
	      .clipAngle(90 + epsilon$2);
	};

	function stereographicRaw(x, y) {
	  var cy = cos$1(y), k = 1 + cos$1(x) * cy;
	  return [cy * sin$1(x) / k, sin$1(y) / k];
	}

	stereographicRaw.invert = azimuthalInvert(function(z) {
	  return 2 * atan(z);
	});

	var stereographic = function() {
	  return projection(stereographicRaw)
	      .scale(250)
	      .clipAngle(142);
	};

	function transverseMercatorRaw(lambda, phi) {
	  return [log(tan((halfPi$2 + phi) / 2)), -lambda];
	}

	transverseMercatorRaw.invert = function(x, y) {
	  return [-y, 2 * atan(exp(x)) - halfPi$2];
	};

	var transverseMercator = function() {
	  var m = mercatorProjection(transverseMercatorRaw),
	      center = m.center,
	      rotate = m.rotate;

	  m.center = function(_) {
	    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
	  };

	  m.rotate = function(_) {
	    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
	  };

	  return rotate([0, 0, 90])
	      .scale(159.155);
	};

	function defaultSeparation(a, b) {
	  return a.parent === b.parent ? 1 : 2;
	}

	function meanX(children) {
	  return children.reduce(meanXReduce, 0) / children.length;
	}

	function meanXReduce(x, c) {
	  return x + c.x;
	}

	function maxY(children) {
	  return 1 + children.reduce(maxYReduce, 0);
	}

	function maxYReduce(y, c) {
	  return Math.max(y, c.y);
	}

	function leafLeft(node) {
	  var children;
	  while (children = node.children) node = children[0];
	  return node;
	}

	function leafRight(node) {
	  var children;
	  while (children = node.children) node = children[children.length - 1];
	  return node;
	}

	var cluster = function() {
	  var separation = defaultSeparation,
	      dx = 1,
	      dy = 1,
	      nodeSize = false;

	  function cluster(root) {
	    var previousNode,
	        x = 0;

	    // First walk, computing the initial x & y values.
	    root.eachAfter(function(node) {
	      var children = node.children;
	      if (children) {
	        node.x = meanX(children);
	        node.y = maxY(children);
	      } else {
	        node.x = previousNode ? x += separation(node, previousNode) : 0;
	        node.y = 0;
	        previousNode = node;
	      }
	    });

	    var left = leafLeft(root),
	        right = leafRight(root),
	        x0 = left.x - separation(left, right) / 2,
	        x1 = right.x + separation(right, left) / 2;

	    // Second walk, normalizing x & y to the desired size.
	    return root.eachAfter(nodeSize ? function(node) {
	      node.x = (node.x - root.x) * dx;
	      node.y = (root.y - node.y) * dy;
	    } : function(node) {
	      node.x = (node.x - x0) / (x1 - x0) * dx;
	      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
	    });
	  }

	  cluster.separation = function(x) {
	    return arguments.length ? (separation = x, cluster) : separation;
	  };

	  cluster.size = function(x) {
	    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
	  };

	  cluster.nodeSize = function(x) {
	    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
	  };

	  return cluster;
	};

	function count(node) {
	  var sum = 0,
	      children = node.children,
	      i = children && children.length;
	  if (!i) sum = 1;
	  else while (--i >= 0) sum += children[i].value;
	  node.value = sum;
	}

	var node_count = function() {
	  return this.eachAfter(count);
	};

	var node_each = function(callback) {
	  var node = this, current, next = [node], children, i, n;
	  do {
	    current = next.reverse(), next = [];
	    while (node = current.pop()) {
	      callback(node), children = node.children;
	      if (children) for (i = 0, n = children.length; i < n; ++i) {
	        next.push(children[i]);
	      }
	    }
	  } while (next.length);
	  return this;
	};

	var node_eachBefore = function(callback) {
	  var node = this, nodes = [node], children, i;
	  while (node = nodes.pop()) {
	    callback(node), children = node.children;
	    if (children) for (i = children.length - 1; i >= 0; --i) {
	      nodes.push(children[i]);
	    }
	  }
	  return this;
	};

	var node_eachAfter = function(callback) {
	  var node = this, nodes = [node], next = [], children, i, n;
	  while (node = nodes.pop()) {
	    next.push(node), children = node.children;
	    if (children) for (i = 0, n = children.length; i < n; ++i) {
	      nodes.push(children[i]);
	    }
	  }
	  while (node = next.pop()) {
	    callback(node);
	  }
	  return this;
	};

	var node_sum = function(value) {
	  return this.eachAfter(function(node) {
	    var sum = +value(node.data) || 0,
	        children = node.children,
	        i = children && children.length;
	    while (--i >= 0) sum += children[i].value;
	    node.value = sum;
	  });
	};

	var node_sort = function(compare) {
	  return this.eachBefore(function(node) {
	    if (node.children) {
	      node.children.sort(compare);
	    }
	  });
	};

	var node_path = function(end) {
	  var start = this,
	      ancestor = leastCommonAncestor(start, end),
	      nodes = [start];
	  while (start !== ancestor) {
	    start = start.parent;
	    nodes.push(start);
	  }
	  var k = nodes.length;
	  while (end !== ancestor) {
	    nodes.splice(k, 0, end);
	    end = end.parent;
	  }
	  return nodes;
	};

	function leastCommonAncestor(a, b) {
	  if (a === b) return a;
	  var aNodes = a.ancestors(),
	      bNodes = b.ancestors(),
	      c = null;
	  a = aNodes.pop();
	  b = bNodes.pop();
	  while (a === b) {
	    c = a;
	    a = aNodes.pop();
	    b = bNodes.pop();
	  }
	  return c;
	}

	var node_ancestors = function() {
	  var node = this, nodes = [node];
	  while (node = node.parent) {
	    nodes.push(node);
	  }
	  return nodes;
	};

	var node_descendants = function() {
	  var nodes = [];
	  this.each(function(node) {
	    nodes.push(node);
	  });
	  return nodes;
	};

	var node_leaves = function() {
	  var leaves = [];
	  this.eachBefore(function(node) {
	    if (!node.children) {
	      leaves.push(node);
	    }
	  });
	  return leaves;
	};

	var node_links = function() {
	  var root = this, links = [];
	  root.each(function(node) {
	    if (node !== root) { // Don’t include the root’s parent, if any.
	      links.push({source: node.parent, target: node});
	    }
	  });
	  return links;
	};

	function hierarchy(data, children) {
	  var root = new Node(data),
	      valued = +data.value && (root.value = data.value),
	      node,
	      nodes = [root],
	      child,
	      childs,
	      i,
	      n;

	  if (children == null) children = defaultChildren;

	  while (node = nodes.pop()) {
	    if (valued) node.value = +node.data.value;
	    if ((childs = children(node.data)) && (n = childs.length)) {
	      node.children = new Array(n);
	      for (i = n - 1; i >= 0; --i) {
	        nodes.push(child = node.children[i] = new Node(childs[i]));
	        child.parent = node;
	        child.depth = node.depth + 1;
	      }
	    }
	  }

	  return root.eachBefore(computeHeight);
	}

	function node_copy() {
	  return hierarchy(this).eachBefore(copyData);
	}

	function defaultChildren(d) {
	  return d.children;
	}

	function copyData(node) {
	  node.data = node.data.data;
	}

	function computeHeight(node) {
	  var height = 0;
	  do node.height = height;
	  while ((node = node.parent) && (node.height < ++height));
	}

	function Node(data) {
	  this.data = data;
	  this.depth =
	  this.height = 0;
	  this.parent = null;
	}

	Node.prototype = hierarchy.prototype = {
	  constructor: Node,
	  count: node_count,
	  each: node_each,
	  eachAfter: node_eachAfter,
	  eachBefore: node_eachBefore,
	  sum: node_sum,
	  sort: node_sort,
	  path: node_path,
	  ancestors: node_ancestors,
	  descendants: node_descendants,
	  leaves: node_leaves,
	  links: node_links,
	  copy: node_copy
	};

	function Node$2(value) {
	  this._ = value;
	  this.next = null;
	}

	var shuffle$1 = function(array) {
	  var i,
	      n = (array = array.slice()).length,
	      head = null,
	      node = head;

	  while (n) {
	    var next = new Node$2(array[n - 1]);
	    if (node) node = node.next = next;
	    else node = head = next;
	    array[i] = array[--n];
	  }

	  return {
	    head: head,
	    tail: node
	  };
	};

	var enclose = function(circles) {
	  return encloseN(shuffle$1(circles), []);
	};

	function encloses(a, b) {
	  var dx = b.x - a.x,
	      dy = b.y - a.y,
	      dr = a.r - b.r;
	  return dr * dr + 1e-6 > dx * dx + dy * dy;
	}

	// Returns the smallest circle that contains circles L and intersects circles B.
	function encloseN(L, B) {
	  var circle,
	      l0 = null,
	      l1 = L.head,
	      l2,
	      p1;

	  switch (B.length) {
	    case 1: circle = enclose1(B[0]); break;
	    case 2: circle = enclose2(B[0], B[1]); break;
	    case 3: circle = enclose3(B[0], B[1], B[2]); break;
	  }

	  while (l1) {
	    p1 = l1._, l2 = l1.next;
	    if (!circle || !encloses(circle, p1)) {

	      // Temporarily truncate L before l1.
	      if (l0) L.tail = l0, l0.next = null;
	      else L.head = L.tail = null;

	      B.push(p1);
	      circle = encloseN(L, B); // Note: reorders L!
	      B.pop();

	      // Move l1 to the front of L and reconnect the truncated list L.
	      if (L.head) l1.next = L.head, L.head = l1;
	      else l1.next = null, L.head = L.tail = l1;
	      l0 = L.tail, l0.next = l2;

	    } else {
	      l0 = l1;
	    }
	    l1 = l2;
	  }

	  L.tail = l0;
	  return circle;
	}

	function enclose1(a) {
	  return {
	    x: a.x,
	    y: a.y,
	    r: a.r
	  };
	}

	function enclose2(a, b) {
	  var x1 = a.x, y1 = a.y, r1 = a.r,
	      x2 = b.x, y2 = b.y, r2 = b.r,
	      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
	      l = Math.sqrt(x21 * x21 + y21 * y21);
	  return {
	    x: (x1 + x2 + x21 / l * r21) / 2,
	    y: (y1 + y2 + y21 / l * r21) / 2,
	    r: (l + r1 + r2) / 2
	  };
	}

	function enclose3(a, b, c) {
	  var x1 = a.x, y1 = a.y, r1 = a.r,
	      x2 = b.x, y2 = b.y, r2 = b.r,
	      x3 = c.x, y3 = c.y, r3 = c.r,
	      a2 = 2 * (x1 - x2),
	      b2 = 2 * (y1 - y2),
	      c2 = 2 * (r2 - r1),
	      d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2,
	      a3 = 2 * (x1 - x3),
	      b3 = 2 * (y1 - y3),
	      c3 = 2 * (r3 - r1),
	      d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3,
	      ab = a3 * b2 - a2 * b3,
	      xa = (b2 * d3 - b3 * d2) / ab - x1,
	      xb = (b3 * c2 - b2 * c3) / ab,
	      ya = (a3 * d2 - a2 * d3) / ab - y1,
	      yb = (a2 * c3 - a3 * c2) / ab,
	      A = xb * xb + yb * yb - 1,
	      B = 2 * (xa * xb + ya * yb + r1),
	      C = xa * xa + ya * ya - r1 * r1,
	      r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);
	  return {
	    x: xa + xb * r + x1,
	    y: ya + yb * r + y1,
	    r: r
	  };
	}

	function place(a, b, c) {
	  var ax = a.x,
	      ay = a.y,
	      da = b.r + c.r,
	      db = a.r + c.r,
	      dx = b.x - ax,
	      dy = b.y - ay,
	      dc = dx * dx + dy * dy;
	  if (dc) {
	    var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),
	        y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
	    c.x = ax + x * dx + y * dy;
	    c.y = ay + x * dy - y * dx;
	  } else {
	    c.x = ax + db;
	    c.y = ay;
	  }
	}

	function intersects(a, b) {
	  var dx = b.x - a.x,
	      dy = b.y - a.y,
	      dr = a.r + b.r;
	  return dr * dr - 1e-6 > dx * dx + dy * dy;
	}

	function distance2(node, x, y) {
	  var a = node._,
	      b = node.next._,
	      ab = a.r + b.r,
	      dx = (a.x * b.r + b.x * a.r) / ab - x,
	      dy = (a.y * b.r + b.y * a.r) / ab - y;
	  return dx * dx + dy * dy;
	}

	function Node$1(circle) {
	  this._ = circle;
	  this.next = null;
	  this.previous = null;
	}

	function packEnclose(circles) {
	  if (!(n = circles.length)) return 0;

	  var a, b, c, n;

	  // Place the first circle.
	  a = circles[0], a.x = 0, a.y = 0;
	  if (!(n > 1)) return a.r;

	  // Place the second circle.
	  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
	  if (!(n > 2)) return a.r + b.r;

	  // Place the third circle.
	  place(b, a, c = circles[2]);

	  // Initialize the weighted centroid.
	  var aa = a.r * a.r,
	      ba = b.r * b.r,
	      ca = c.r * c.r,
	      oa = aa + ba + ca,
	      ox = aa * a.x + ba * b.x + ca * c.x,
	      oy = aa * a.y + ba * b.y + ca * c.y,
	      cx, cy, i, j, k, sj, sk;

	  // Initialize the front-chain using the first three circles a, b and c.
	  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
	  a.next = c.previous = b;
	  b.next = a.previous = c;
	  c.next = b.previous = a;

	  // Attempt to place each remaining circle…
	  pack: for (i = 3; i < n; ++i) {
	    place(a._, b._, c = circles[i]), c = new Node$1(c);

	    // Find the closest intersecting circle on the front-chain, if any.
	    // “Closeness” is determined by linear distance along the front-chain.
	    // “Ahead” or “behind” is likewise determined by linear distance.
	    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
	    do {
	      if (sj <= sk) {
	        if (intersects(j._, c._)) {
	          b = j, a.next = b, b.previous = a, --i;
	          continue pack;
	        }
	        sj += j._.r, j = j.next;
	      } else {
	        if (intersects(k._, c._)) {
	          a = k, a.next = b, b.previous = a, --i;
	          continue pack;
	        }
	        sk += k._.r, k = k.previous;
	      }
	    } while (j !== k.next);

	    // Success! Insert the new circle c between a and b.
	    c.previous = a, c.next = b, a.next = b.previous = b = c;

	    // Update the weighted centroid.
	    oa += ca = c._.r * c._.r;
	    ox += ca * c._.x;
	    oy += ca * c._.y;

	    // Compute the new closest circle pair to the centroid.
	    aa = distance2(a, cx = ox / oa, cy = oy / oa);
	    while ((c = c.next) !== b) {
	      if ((ca = distance2(c, cx, cy)) < aa) {
	        a = c, aa = ca;
	      }
	    }
	    b = a.next;
	  }

	  // Compute the enclosing circle of the front chain.
	  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);

	  // Translate the circles to put the enclosing circle around the origin.
	  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

	  return c.r;
	}

	var siblings = function(circles) {
	  packEnclose(circles);
	  return circles;
	};

	function optional(f) {
	  return f == null ? null : required(f);
	}

	function required(f) {
	  if (typeof f !== "function") throw new Error;
	  return f;
	}

	function constantZero() {
	  return 0;
	}

	var constant$8 = function(x) {
	  return function() {
	    return x;
	  };
	};

	function defaultRadius$1(d) {
	  return Math.sqrt(d.value);
	}

	var index$2 = function() {
	  var radius = null,
	      dx = 1,
	      dy = 1,
	      padding = constantZero;

	  function pack(root) {
	    root.x = dx / 2, root.y = dy / 2;
	    if (radius) {
	      root.eachBefore(radiusLeaf(radius))
	          .eachAfter(packChildren(padding, 0.5))
	          .eachBefore(translateChild(1));
	    } else {
	      root.eachBefore(radiusLeaf(defaultRadius$1))
	          .eachAfter(packChildren(constantZero, 1))
	          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
	          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
	    }
	    return root;
	  }

	  pack.radius = function(x) {
	    return arguments.length ? (radius = optional(x), pack) : radius;
	  };

	  pack.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
	  };

	  pack.padding = function(x) {
	    return arguments.length ? (padding = typeof x === "function" ? x : constant$8(+x), pack) : padding;
	  };

	  return pack;
	};

	function radiusLeaf(radius) {
	  return function(node) {
	    if (!node.children) {
	      node.r = Math.max(0, +radius(node) || 0);
	    }
	  };
	}

	function packChildren(padding, k) {
	  return function(node) {
	    if (children = node.children) {
	      var children,
	          i,
	          n = children.length,
	          r = padding(node) * k || 0,
	          e;

	      if (r) for (i = 0; i < n; ++i) children[i].r += r;
	      e = packEnclose(children);
	      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
	      node.r = e + r;
	    }
	  };
	}

	function translateChild(k) {
	  return function(node) {
	    var parent = node.parent;
	    node.r *= k;
	    if (parent) {
	      node.x = parent.x + k * node.x;
	      node.y = parent.y + k * node.y;
	    }
	  };
	}

	var roundNode = function(node) {
	  node.x0 = Math.round(node.x0);
	  node.y0 = Math.round(node.y0);
	  node.x1 = Math.round(node.x1);
	  node.y1 = Math.round(node.y1);
	};

	var treemapDice = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      node,
	      i = -1,
	      n = nodes.length,
	      k = parent.value && (x1 - x0) / parent.value;

	  while (++i < n) {
	    node = nodes[i], node.y0 = y0, node.y1 = y1;
	    node.x0 = x0, node.x1 = x0 += node.value * k;
	  }
	};

	var partition = function() {
	  var dx = 1,
	      dy = 1,
	      padding = 0,
	      round = false;

	  function partition(root) {
	    var n = root.height + 1;
	    root.x0 =
	    root.y0 = padding;
	    root.x1 = dx;
	    root.y1 = dy / n;
	    root.eachBefore(positionNode(dy, n));
	    if (round) root.eachBefore(roundNode);
	    return root;
	  }

	  function positionNode(dy, n) {
	    return function(node) {
	      if (node.children) {
	        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
	      }
	      var x0 = node.x0,
	          y0 = node.y0,
	          x1 = node.x1 - padding,
	          y1 = node.y1 - padding;
	      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	      node.x0 = x0;
	      node.y0 = y0;
	      node.x1 = x1;
	      node.y1 = y1;
	    };
	  }

	  partition.round = function(x) {
	    return arguments.length ? (round = !!x, partition) : round;
	  };

	  partition.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
	  };

	  partition.padding = function(x) {
	    return arguments.length ? (padding = +x, partition) : padding;
	  };

	  return partition;
	};

	var keyPrefix$1 = "$";
	var preroot = {depth: -1};
	var ambiguous = {};

	function defaultId(d) {
	  return d.id;
	}

	function defaultParentId(d) {
	  return d.parentId;
	}

	var stratify = function() {
	  var id = defaultId,
	      parentId = defaultParentId;

	  function stratify(data) {
	    var d,
	        i,
	        n = data.length,
	        root,
	        parent,
	        node,
	        nodes = new Array(n),
	        nodeId,
	        nodeKey,
	        nodeByKey = {};

	    for (i = 0; i < n; ++i) {
	      d = data[i], node = nodes[i] = new Node(d);
	      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
	        nodeKey = keyPrefix$1 + (node.id = nodeId);
	        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
	      }
	    }

	    for (i = 0; i < n; ++i) {
	      node = nodes[i], nodeId = parentId(data[i], i, data);
	      if (nodeId == null || !(nodeId += "")) {
	        if (root) throw new Error("multiple roots");
	        root = node;
	      } else {
	        parent = nodeByKey[keyPrefix$1 + nodeId];
	        if (!parent) throw new Error("missing: " + nodeId);
	        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
	        if (parent.children) parent.children.push(node);
	        else parent.children = [node];
	        node.parent = parent;
	      }
	    }

	    if (!root) throw new Error("no root");
	    root.parent = preroot;
	    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
	    root.parent = null;
	    if (n > 0) throw new Error("cycle");

	    return root;
	  }

	  stratify.id = function(x) {
	    return arguments.length ? (id = required(x), stratify) : id;
	  };

	  stratify.parentId = function(x) {
	    return arguments.length ? (parentId = required(x), stratify) : parentId;
	  };

	  return stratify;
	};

	function defaultSeparation$1(a, b) {
	  return a.parent === b.parent ? 1 : 2;
	}

	// function radialSeparation(a, b) {
	//   return (a.parent === b.parent ? 1 : 2) / a.depth;
	// }

	// This function is used to traverse the left contour of a subtree (or
	// subforest). It returns the successor of v on this contour. This successor is
	// either given by the leftmost child of v or by the thread of v. The function
	// returns null if and only if v is on the highest level of its subtree.
	function nextLeft(v) {
	  var children = v.children;
	  return children ? children[0] : v.t;
	}

	// This function works analogously to nextLeft.
	function nextRight(v) {
	  var children = v.children;
	  return children ? children[children.length - 1] : v.t;
	}

	// Shifts the current subtree rooted at w+. This is done by increasing
	// prelim(w+) and mod(w+) by shift.
	function moveSubtree(wm, wp, shift) {
	  var change = shift / (wp.i - wm.i);
	  wp.c -= change;
	  wp.s += shift;
	  wm.c += change;
	  wp.z += shift;
	  wp.m += shift;
	}

	// All other shifts, applied to the smaller subtrees between w- and w+, are
	// performed by this function. To prepare the shifts, we have to adjust
	// change(w+), shift(w+), and change(w-).
	function executeShifts(v) {
	  var shift = 0,
	      change = 0,
	      children = v.children,
	      i = children.length,
	      w;
	  while (--i >= 0) {
	    w = children[i];
	    w.z += shift;
	    w.m += shift;
	    shift += w.s + (change += w.c);
	  }
	}

	// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
	// returns the specified (default) ancestor.
	function nextAncestor(vim, v, ancestor) {
	  return vim.a.parent === v.parent ? vim.a : ancestor;
	}

	function TreeNode(node, i) {
	  this._ = node;
	  this.parent = null;
	  this.children = null;
	  this.A = null; // default ancestor
	  this.a = this; // ancestor
	  this.z = 0; // prelim
	  this.m = 0; // mod
	  this.c = 0; // change
	  this.s = 0; // shift
	  this.t = null; // thread
	  this.i = i; // number
	}

	TreeNode.prototype = Object.create(Node.prototype);

	function treeRoot(root) {
	  var tree = new TreeNode(root, 0),
	      node,
	      nodes = [tree],
	      child,
	      children,
	      i,
	      n;

	  while (node = nodes.pop()) {
	    if (children = node._.children) {
	      node.children = new Array(n = children.length);
	      for (i = n - 1; i >= 0; --i) {
	        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
	        child.parent = node;
	      }
	    }
	  }

	  (tree.parent = new TreeNode(null, 0)).children = [tree];
	  return tree;
	}

	// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
	var tree = function() {
	  var separation = defaultSeparation$1,
	      dx = 1,
	      dy = 1,
	      nodeSize = null;

	  function tree(root) {
	    var t = treeRoot(root);

	    // Compute the layout using Buchheim et al.’s algorithm.
	    t.eachAfter(firstWalk), t.parent.m = -t.z;
	    t.eachBefore(secondWalk);

	    // If a fixed node size is specified, scale x and y.
	    if (nodeSize) root.eachBefore(sizeNode);

	    // If a fixed tree size is specified, scale x and y based on the extent.
	    // Compute the left-most, right-most, and depth-most nodes for extents.
	    else {
	      var left = root,
	          right = root,
	          bottom = root;
	      root.eachBefore(function(node) {
	        if (node.x < left.x) left = node;
	        if (node.x > right.x) right = node;
	        if (node.depth > bottom.depth) bottom = node;
	      });
	      var s = left === right ? 1 : separation(left, right) / 2,
	          tx = s - left.x,
	          kx = dx / (right.x + s + tx),
	          ky = dy / (bottom.depth || 1);
	      root.eachBefore(function(node) {
	        node.x = (node.x + tx) * kx;
	        node.y = node.depth * ky;
	      });
	    }

	    return root;
	  }

	  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
	  // applied recursively to the children of v, as well as the function
	  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
	  // node v is placed to the midpoint of its outermost children.
	  function firstWalk(v) {
	    var children = v.children,
	        siblings = v.parent.children,
	        w = v.i ? siblings[v.i - 1] : null;
	    if (children) {
	      executeShifts(v);
	      var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	      if (w) {
	        v.z = w.z + separation(v._, w._);
	        v.m = v.z - midpoint;
	      } else {
	        v.z = midpoint;
	      }
	    } else if (w) {
	      v.z = w.z + separation(v._, w._);
	    }
	    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	  }

	  // Computes all real x-coordinates by summing up the modifiers recursively.
	  function secondWalk(v) {
	    v._.x = v.z + v.parent.m;
	    v.m += v.parent.m;
	  }

	  // The core of the algorithm. Here, a new subtree is combined with the
	  // previous subtrees. Threads are used to traverse the inside and outside
	  // contours of the left and right subtree up to the highest common level. The
	  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
	  // superscript o means outside and i means inside, the subscript - means left
	  // subtree and + means right subtree. For summing up the modifiers along the
	  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
	  // nodes of the inside contours conflict, we compute the left one of the
	  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
	  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
	  // Finally, we add a new thread (if necessary).
	  function apportion(v, w, ancestor) {
	    if (w) {
	      var vip = v,
	          vop = v,
	          vim = w,
	          vom = vip.parent.children[0],
	          sip = vip.m,
	          sop = vop.m,
	          sim = vim.m,
	          som = vom.m,
	          shift;
	      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
	        vom = nextLeft(vom);
	        vop = nextRight(vop);
	        vop.a = v;
	        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	        if (shift > 0) {
	          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
	          sip += shift;
	          sop += shift;
	        }
	        sim += vim.m;
	        sip += vip.m;
	        som += vom.m;
	        sop += vop.m;
	      }
	      if (vim && !nextRight(vop)) {
	        vop.t = vim;
	        vop.m += sim - sop;
	      }
	      if (vip && !nextLeft(vom)) {
	        vom.t = vip;
	        vom.m += sip - som;
	        ancestor = v;
	      }
	    }
	    return ancestor;
	  }

	  function sizeNode(node) {
	    node.x *= dx;
	    node.y = node.depth * dy;
	  }

	  tree.separation = function(x) {
	    return arguments.length ? (separation = x, tree) : separation;
	  };

	  tree.size = function(x) {
	    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
	  };

	  tree.nodeSize = function(x) {
	    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
	  };

	  return tree;
	};

	var treemapSlice = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      node,
	      i = -1,
	      n = nodes.length,
	      k = parent.value && (y1 - y0) / parent.value;

	  while (++i < n) {
	    node = nodes[i], node.x0 = x0, node.x1 = x1;
	    node.y0 = y0, node.y1 = y0 += node.value * k;
	  }
	};

	var phi = (1 + Math.sqrt(5)) / 2;

	function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
	  var rows = [],
	      nodes = parent.children,
	      row,
	      nodeValue,
	      i0 = 0,
	      i1 = 0,
	      n = nodes.length,
	      dx, dy,
	      value = parent.value,
	      sumValue,
	      minValue,
	      maxValue,
	      newRatio,
	      minRatio,
	      alpha,
	      beta;

	  while (i0 < n) {
	    dx = x1 - x0, dy = y1 - y0;

	    // Find the next non-empty node.
	    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
	    minValue = maxValue = sumValue;
	    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
	    beta = sumValue * sumValue * alpha;
	    minRatio = Math.max(maxValue / beta, beta / minValue);

	    // Keep adding nodes while the aspect ratio maintains or improves.
	    for (; i1 < n; ++i1) {
	      sumValue += nodeValue = nodes[i1].value;
	      if (nodeValue < minValue) minValue = nodeValue;
	      if (nodeValue > maxValue) maxValue = nodeValue;
	      beta = sumValue * sumValue * alpha;
	      newRatio = Math.max(maxValue / beta, beta / minValue);
	      if (newRatio > minRatio) { sumValue -= nodeValue; break; }
	      minRatio = newRatio;
	    }

	    // Position and record the row orientation.
	    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
	    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
	    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
	    value -= sumValue, i0 = i1;
	  }

	  return rows;
	}

	var squarify = ((function custom(ratio) {

	  function squarify(parent, x0, y0, x1, y1) {
	    squarifyRatio(ratio, parent, x0, y0, x1, y1);
	  }

	  squarify.ratio = function(x) {
	    return custom((x = +x) > 1 ? x : 1);
	  };

	  return squarify;
	}))(phi);

	var index$3 = function() {
	  var tile = squarify,
	      round = false,
	      dx = 1,
	      dy = 1,
	      paddingStack = [0],
	      paddingInner = constantZero,
	      paddingTop = constantZero,
	      paddingRight = constantZero,
	      paddingBottom = constantZero,
	      paddingLeft = constantZero;

	  function treemap(root) {
	    root.x0 =
	    root.y0 = 0;
	    root.x1 = dx;
	    root.y1 = dy;
	    root.eachBefore(positionNode);
	    paddingStack = [0];
	    if (round) root.eachBefore(roundNode);
	    return root;
	  }

	  function positionNode(node) {
	    var p = paddingStack[node.depth],
	        x0 = node.x0 + p,
	        y0 = node.y0 + p,
	        x1 = node.x1 - p,
	        y1 = node.y1 - p;
	    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	    node.x0 = x0;
	    node.y0 = y0;
	    node.x1 = x1;
	    node.y1 = y1;
	    if (node.children) {
	      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
	      x0 += paddingLeft(node) - p;
	      y0 += paddingTop(node) - p;
	      x1 -= paddingRight(node) - p;
	      y1 -= paddingBottom(node) - p;
	      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	      tile(node, x0, y0, x1, y1);
	    }
	  }

	  treemap.round = function(x) {
	    return arguments.length ? (round = !!x, treemap) : round;
	  };

	  treemap.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
	  };

	  treemap.tile = function(x) {
	    return arguments.length ? (tile = required(x), treemap) : tile;
	  };

	  treemap.padding = function(x) {
	    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
	  };

	  treemap.paddingInner = function(x) {
	    return arguments.length ? (paddingInner = typeof x === "function" ? x : constant$8(+x), treemap) : paddingInner;
	  };

	  treemap.paddingOuter = function(x) {
	    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
	  };

	  treemap.paddingTop = function(x) {
	    return arguments.length ? (paddingTop = typeof x === "function" ? x : constant$8(+x), treemap) : paddingTop;
	  };

	  treemap.paddingRight = function(x) {
	    return arguments.length ? (paddingRight = typeof x === "function" ? x : constant$8(+x), treemap) : paddingRight;
	  };

	  treemap.paddingBottom = function(x) {
	    return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant$8(+x), treemap) : paddingBottom;
	  };

	  treemap.paddingLeft = function(x) {
	    return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant$8(+x), treemap) : paddingLeft;
	  };

	  return treemap;
	};

	var binary = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      i, n = nodes.length,
	      sum, sums = new Array(n + 1);

	  for (sums[0] = sum = i = 0; i < n; ++i) {
	    sums[i + 1] = sum += nodes[i].value;
	  }

	  partition(0, n, parent.value, x0, y0, x1, y1);

	  function partition(i, j, value, x0, y0, x1, y1) {
	    if (i >= j - 1) {
	      var node = nodes[i];
	      node.x0 = x0, node.y0 = y0;
	      node.x1 = x1, node.y1 = y1;
	      return;
	    }

	    var valueOffset = sums[i],
	        valueTarget = (value / 2) + valueOffset,
	        k = i + 1,
	        hi = j - 1;

	    while (k < hi) {
	      var mid = k + hi >>> 1;
	      if (sums[mid] < valueTarget) k = mid + 1;
	      else hi = mid;
	    }

	    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;

	    var valueLeft = sums[k] - valueOffset,
	        valueRight = value - valueLeft;

	    if ((x1 - x0) > (y1 - y0)) {
	      var xk = (x0 * valueRight + x1 * valueLeft) / value;
	      partition(i, k, valueLeft, x0, y0, xk, y1);
	      partition(k, j, valueRight, xk, y0, x1, y1);
	    } else {
	      var yk = (y0 * valueRight + y1 * valueLeft) / value;
	      partition(i, k, valueLeft, x0, y0, x1, yk);
	      partition(k, j, valueRight, x0, yk, x1, y1);
	    }
	  }
	};

	var sliceDice = function(parent, x0, y0, x1, y1) {
	  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
	};

	var resquarify = ((function custom(ratio) {

	  function resquarify(parent, x0, y0, x1, y1) {
	    if ((rows = parent._squarify) && (rows.ratio === ratio)) {
	      var rows,
	          row,
	          nodes,
	          i,
	          j = -1,
	          n,
	          m = rows.length,
	          value = parent.value;

	      while (++j < m) {
	        row = rows[j], nodes = row.children;
	        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
	        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
	        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
	        value -= row.value;
	      }
	    } else {
	      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
	      rows.ratio = ratio;
	    }
	  }

	  resquarify.ratio = function(x) {
	    return custom((x = +x) > 1 ? x : 1);
	  };

	  return resquarify;
	}))(phi);

	var area$1 = function(polygon) {
	  var i = -1,
	      n = polygon.length,
	      a,
	      b = polygon[n - 1],
	      area = 0;

	  while (++i < n) {
	    a = b;
	    b = polygon[i];
	    area += a[1] * b[0] - a[0] * b[1];
	  }

	  return area / 2;
	};

	var centroid$1 = function(polygon) {
	  var i = -1,
	      n = polygon.length,
	      x = 0,
	      y = 0,
	      a,
	      b = polygon[n - 1],
	      c,
	      k = 0;

	  while (++i < n) {
	    a = b;
	    b = polygon[i];
	    k += c = a[0] * b[1] - b[0] * a[1];
	    x += (a[0] + b[0]) * c;
	    y += (a[1] + b[1]) * c;
	  }

	  return k *= 3, [x / k, y / k];
	};

	// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
	// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
	// right, +y is up). Returns a positive value if ABC is counter-clockwise,
	// negative if clockwise, and zero if the points are collinear.
	var cross$1 = function(a, b, c) {
	  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
	};

	function lexicographicOrder(a, b) {
	  return a[0] - b[0] || a[1] - b[1];
	}

	// Computes the upper convex hull per the monotone chain algorithm.
	// Assumes points.length >= 3, is sorted by x, unique in y.
	// Returns an array of indices into points in left-to-right order.
	function computeUpperHullIndexes(points) {
	  var n = points.length,
	      indexes = [0, 1],
	      size = 2;

	  for (var i = 2; i < n; ++i) {
	    while (size > 1 && cross$1(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
	    indexes[size++] = i;
	  }

	  return indexes.slice(0, size); // remove popped points
	}

	var hull = function(points) {
	  if ((n = points.length) < 3) return null;

	  var i,
	      n,
	      sortedPoints = new Array(n),
	      flippedPoints = new Array(n);

	  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
	  sortedPoints.sort(lexicographicOrder);
	  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

	  var upperIndexes = computeUpperHullIndexes(sortedPoints),
	      lowerIndexes = computeUpperHullIndexes(flippedPoints);

	  // Construct the hull polygon, removing possible duplicate endpoints.
	  var skipLeft = lowerIndexes[0] === upperIndexes[0],
	      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
	      hull = [];

	  // Add upper hull in right-to-l order.
	  // Then add lower hull in left-to-right order.
	  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
	  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

	  return hull;
	};

	var contains$1 = function(polygon, point) {
	  var n = polygon.length,
	      p = polygon[n - 1],
	      x = point[0], y = point[1],
	      x0 = p[0], y0 = p[1],
	      x1, y1,
	      inside = false;

	  for (var i = 0; i < n; ++i) {
	    p = polygon[i], x1 = p[0], y1 = p[1];
	    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;
	    x0 = x1, y0 = y1;
	  }

	  return inside;
	};

	var length$2 = function(polygon) {
	  var i = -1,
	      n = polygon.length,
	      b = polygon[n - 1],
	      xa,
	      ya,
	      xb = b[0],
	      yb = b[1],
	      perimeter = 0;

	  while (++i < n) {
	    xa = xb;
	    ya = yb;
	    b = polygon[i];
	    xb = b[0];
	    yb = b[1];
	    xa -= xb;
	    ya -= yb;
	    perimeter += Math.sqrt(xa * xa + ya * ya);
	  }

	  return perimeter;
	};

	var slice$3 = [].slice;

	var noabort = {};

	function Queue(size) {
	  if (!(size >= 1)) throw new Error;
	  this._size = size;
	  this._call =
	  this._error = null;
	  this._tasks = [];
	  this._data = [];
	  this._waiting =
	  this._active =
	  this._ended =
	  this._start = 0; // inside a synchronous task callback?
	}

	Queue.prototype = queue.prototype = {
	  constructor: Queue,
	  defer: function(callback) {
	    if (typeof callback !== "function" || this._call) throw new Error;
	    if (this._error != null) return this;
	    var t = slice$3.call(arguments, 1);
	    t.push(callback);
	    ++this._waiting, this._tasks.push(t);
	    poke$1(this);
	    return this;
	  },
	  abort: function() {
	    if (this._error == null) abort(this, new Error("abort"));
	    return this;
	  },
	  await: function(callback) {
	    if (typeof callback !== "function" || this._call) throw new Error;
	    this._call = function(error, results) { callback.apply(null, [error].concat(results)); };
	    maybeNotify(this);
	    return this;
	  },
	  awaitAll: function(callback) {
	    if (typeof callback !== "function" || this._call) throw new Error;
	    this._call = callback;
	    maybeNotify(this);
	    return this;
	  }
	};

	function poke$1(q) {
	  if (!q._start) {
	    try { start$1(q); } // let the current task complete
	    catch (e) {
	      if (q._tasks[q._ended + q._active - 1]) abort(q, e); // task errored synchronously
	      else if (!q._data) throw e; // await callback errored synchronously
	    }
	  }
	}

	function start$1(q) {
	  while (q._start = q._waiting && q._active < q._size) {
	    var i = q._ended + q._active,
	        t = q._tasks[i],
	        j = t.length - 1,
	        c = t[j];
	    t[j] = end(q, i);
	    --q._waiting, ++q._active;
	    t = c.apply(null, t);
	    if (!q._tasks[i]) continue; // task finished synchronously
	    q._tasks[i] = t || noabort;
	  }
	}

	function end(q, i) {
	  return function(e, r) {
	    if (!q._tasks[i]) return; // ignore multiple callbacks
	    --q._active, ++q._ended;
	    q._tasks[i] = null;
	    if (q._error != null) return; // ignore secondary errors
	    if (e != null) {
	      abort(q, e);
	    } else {
	      q._data[i] = r;
	      if (q._waiting) poke$1(q);
	      else maybeNotify(q);
	    }
	  };
	}

	function abort(q, e) {
	  var i = q._tasks.length, t;
	  q._error = e; // ignore active callbacks
	  q._data = undefined; // allow gc
	  q._waiting = NaN; // prevent starting

	  while (--i >= 0) {
	    if (t = q._tasks[i]) {
	      q._tasks[i] = null;
	      if (t.abort) {
	        try { t.abort(); }
	        catch (e) { /* ignore */ }
	      }
	    }
	  }

	  q._active = NaN; // allow notification
	  maybeNotify(q);
	}

	function maybeNotify(q) {
	  if (!q._active && q._call) {
	    var d = q._data;
	    q._data = undefined; // allow gc
	    q._call(q._error, d);
	  }
	}

	function queue(concurrency) {
	  return new Queue(arguments.length ? +concurrency : Infinity);
	}

	var uniform = function(min, max) {
	  min = min == null ? 0 : +min;
	  max = max == null ? 1 : +max;
	  if (arguments.length === 1) max = min, min = 0;
	  else max -= min;
	  return function() {
	    return Math.random() * max + min;
	  };
	};

	var normal = function(mu, sigma) {
	  var x, r;
	  mu = mu == null ? 0 : +mu;
	  sigma = sigma == null ? 1 : +sigma;
	  return function() {
	    var y;

	    // If available, use the second previously-generated uniform random.
	    if (x != null) y = x, x = null;

	    // Otherwise, generate a new x and y.
	    else do {
	      x = Math.random() * 2 - 1;
	      y = Math.random() * 2 - 1;
	      r = x * x + y * y;
	    } while (!r || r > 1);

	    return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
	  };
	};

	var logNormal = function() {
	  var randomNormal = normal.apply(this, arguments);
	  return function() {
	    return Math.exp(randomNormal());
	  };
	};

	var irwinHall = function(n) {
	  return function() {
	    for (var sum = 0, i = 0; i < n; ++i) sum += Math.random();
	    return sum;
	  };
	};

	var bates = function(n) {
	  var randomIrwinHall = irwinHall(n);
	  return function() {
	    return randomIrwinHall() / n;
	  };
	};

	var exponential$1 = function(lambda) {
	  return function() {
	    return -Math.log(1 - Math.random()) / lambda;
	  };
	};

	var request = function(url, callback) {
	  var request,
	      event = dispatch("beforesend", "progress", "load", "error"),
	      mimeType,
	      headers = map$1(),
	      xhr = new XMLHttpRequest,
	      user = null,
	      password = null,
	      response,
	      responseType,
	      timeout = 0;

	  // If IE does not support CORS, use XDomainRequest.
	  if (typeof XDomainRequest !== "undefined"
	      && !("withCredentials" in xhr)
	      && /^(http(s)?:)?\/\//.test(url)) xhr = new XDomainRequest;

	  "onload" in xhr
	      ? xhr.onload = xhr.onerror = xhr.ontimeout = respond
	      : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };

	  function respond(o) {
	    var status = xhr.status, result;
	    if (!status && hasResponse(xhr)
	        || status >= 200 && status < 300
	        || status === 304) {
	      if (response) {
	        try {
	          result = response.call(request, xhr);
	        } catch (e) {
	          event.call("error", request, e);
	          return;
	        }
	      } else {
	        result = xhr;
	      }
	      event.call("load", request, result);
	    } else {
	      event.call("error", request, o);
	    }
	  }

	  xhr.onprogress = function(e) {
	    event.call("progress", request, e);
	  };

	  request = {
	    header: function(name, value) {
	      name = (name + "").toLowerCase();
	      if (arguments.length < 2) return headers.get(name);
	      if (value == null) headers.remove(name);
	      else headers.set(name, value + "");
	      return request;
	    },

	    // If mimeType is non-null and no Accept header is set, a default is used.
	    mimeType: function(value) {
	      if (!arguments.length) return mimeType;
	      mimeType = value == null ? null : value + "";
	      return request;
	    },

	    // Specifies what type the response value should take;
	    // for instance, arraybuffer, blob, document, or text.
	    responseType: function(value) {
	      if (!arguments.length) return responseType;
	      responseType = value;
	      return request;
	    },

	    timeout: function(value) {
	      if (!arguments.length) return timeout;
	      timeout = +value;
	      return request;
	    },

	    user: function(value) {
	      return arguments.length < 1 ? user : (user = value == null ? null : value + "", request);
	    },

	    password: function(value) {
	      return arguments.length < 1 ? password : (password = value == null ? null : value + "", request);
	    },

	    // Specify how to convert the response content to a specific type;
	    // changes the callback value on "load" events.
	    response: function(value) {
	      response = value;
	      return request;
	    },

	    // Alias for send("GET", …).
	    get: function(data, callback) {
	      return request.send("GET", data, callback);
	    },

	    // Alias for send("POST", …).
	    post: function(data, callback) {
	      return request.send("POST", data, callback);
	    },

	    // If callback is non-null, it will be used for error and load events.
	    send: function(method, data, callback) {
	      xhr.open(method, url, true, user, password);
	      if (mimeType != null && !headers.has("accept")) headers.set("accept", mimeType + ",*/*");
	      if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });
	      if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);
	      if (responseType != null) xhr.responseType = responseType;
	      if (timeout > 0) xhr.timeout = timeout;
	      if (callback == null && typeof data === "function") callback = data, data = null;
	      if (callback != null && callback.length === 1) callback = fixCallback(callback);
	      if (callback != null) request.on("error", callback).on("load", function(xhr) { callback(null, xhr); });
	      event.call("beforesend", request, xhr);
	      xhr.send(data == null ? null : data);
	      return request;
	    },

	    abort: function() {
	      xhr.abort();
	      return request;
	    },

	    on: function() {
	      var value = event.on.apply(event, arguments);
	      return value === event ? request : value;
	    }
	  };

	  if (callback != null) {
	    if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
	    return request.get(callback);
	  }

	  return request;
	};

	function fixCallback(callback) {
	  return function(error, xhr) {
	    callback(error == null ? xhr : null);
	  };
	}

	function hasResponse(xhr) {
	  var type = xhr.responseType;
	  return type && type !== "text"
	      ? xhr.response // null on error
	      : xhr.responseText; // "" on error
	}

	var type$1 = function(defaultMimeType, response) {
	  return function(url, callback) {
	    var r = request(url).mimeType(defaultMimeType).response(response);
	    if (callback != null) {
	      if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
	      return r.get(callback);
	    }
	    return r;
	  };
	};

	var html = type$1("text/html", function(xhr) {
	  return document.createRange().createContextualFragment(xhr.responseText);
	});

	var json = type$1("application/json", function(xhr) {
	  return JSON.parse(xhr.responseText);
	});

	var text = type$1("text/plain", function(xhr) {
	  return xhr.responseText;
	});

	var xml = type$1("application/xml", function(xhr) {
	  var xml = xhr.responseXML;
	  if (!xml) throw new Error("parse error");
	  return xml;
	});

	var dsv$1 = function(defaultMimeType, parse) {
	  return function(url, row, callback) {
	    if (arguments.length < 3) callback = row, row = null;
	    var r = request(url).mimeType(defaultMimeType);
	    r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };
	    r.row(row);
	    return callback ? r.get(callback) : r;
	  };
	};

	function responseOf(parse, row) {
	  return function(request$$1) {
	    return parse(request$$1.responseText, row);
	  };
	}

	var csv$1 = dsv$1("text/csv", csvParse);

	var tsv$1 = dsv$1("text/tab-separated-values", tsvParse);

	var array$2 = Array.prototype;

	var map$3 = array$2.map;
	var slice$4 = array$2.slice;

	var implicit = {name: "implicit"};

	function ordinal(range) {
	  var index = map$1(),
	      domain = [],
	      unknown = implicit;

	  range = range == null ? [] : slice$4.call(range);

	  function scale(d) {
	    var key = d + "", i = index.get(key);
	    if (!i) {
	      if (unknown !== implicit) return unknown;
	      index.set(key, i = domain.push(d));
	    }
	    return range[(i - 1) % range.length];
	  }

	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [], index = map$1();
	    var i = -1, n = _.length, d, key;
	    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
	    return scale;
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range = slice$4.call(_), scale) : range.slice();
	  };

	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };

	  scale.copy = function() {
	    return ordinal()
	        .domain(domain)
	        .range(range)
	        .unknown(unknown);
	  };

	  return scale;
	}

	function band() {
	  var scale = ordinal().unknown(undefined),
	      domain = scale.domain,
	      ordinalRange = scale.range,
	      range$$1 = [0, 1],
	      step,
	      bandwidth,
	      round = false,
	      paddingInner = 0,
	      paddingOuter = 0,
	      align = 0.5;

	  delete scale.unknown;

	  function rescale() {
	    var n = domain().length,
	        reverse = range$$1[1] < range$$1[0],
	        start = range$$1[reverse - 0],
	        stop = range$$1[1 - reverse];
	    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
	    if (round) step = Math.floor(step);
	    start += (stop - start - step * (n - paddingInner)) * align;
	    bandwidth = step * (1 - paddingInner);
	    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
	    var values = sequence(n).map(function(i) { return start + step * i; });
	    return ordinalRange(reverse ? values.reverse() : values);
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = [+_[0], +_[1]], rescale()) : range$$1.slice();
	  };

	  scale.rangeRound = function(_) {
	    return range$$1 = [+_[0], +_[1]], round = true, rescale();
	  };

	  scale.bandwidth = function() {
	    return bandwidth;
	  };

	  scale.step = function() {
	    return step;
	  };

	  scale.round = function(_) {
	    return arguments.length ? (round = !!_, rescale()) : round;
	  };

	  scale.padding = function(_) {
	    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
	  };

	  scale.paddingInner = function(_) {
	    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
	  };

	  scale.paddingOuter = function(_) {
	    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
	  };

	  scale.align = function(_) {
	    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
	  };

	  scale.copy = function() {
	    return band()
	        .domain(domain())
	        .range(range$$1)
	        .round(round)
	        .paddingInner(paddingInner)
	        .paddingOuter(paddingOuter)
	        .align(align);
	  };

	  return rescale();
	}

	function pointish(scale) {
	  var copy = scale.copy;

	  scale.padding = scale.paddingOuter;
	  delete scale.paddingInner;
	  delete scale.paddingOuter;

	  scale.copy = function() {
	    return pointish(copy());
	  };

	  return scale;
	}

	function point$1() {
	  return pointish(band().paddingInner(1));
	}

	var constant$9 = function(x) {
	  return function() {
	    return x;
	  };
	};

	var number$1 = function(x) {
	  return +x;
	};

	var unit = [0, 1];

	function deinterpolateLinear(a, b) {
	  return (b -= (a = +a))
	      ? function(x) { return (x - a) / b; }
	      : constant$9(b);
	}

	function deinterpolateClamp(deinterpolate) {
	  return function(a, b) {
	    var d = deinterpolate(a = +a, b = +b);
	    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };
	  };
	}

	function reinterpolateClamp(reinterpolate) {
	  return function(a, b) {
	    var r = reinterpolate(a = +a, b = +b);
	    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };
	  };
	}

	function bimap(domain, range$$1, deinterpolate, reinterpolate) {
	  var d0 = domain[0], d1 = domain[1], r0 = range$$1[0], r1 = range$$1[1];
	  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
	  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
	  return function(x) { return r0(d0(x)); };
	}

	function polymap(domain, range$$1, deinterpolate, reinterpolate) {
	  var j = Math.min(domain.length, range$$1.length) - 1,
	      d = new Array(j),
	      r = new Array(j),
	      i = -1;

	  // Reverse descending domains.
	  if (domain[j] < domain[0]) {
	    domain = domain.slice().reverse();
	    range$$1 = range$$1.slice().reverse();
	  }

	  while (++i < j) {
	    d[i] = deinterpolate(domain[i], domain[i + 1]);
	    r[i] = reinterpolate(range$$1[i], range$$1[i + 1]);
	  }

	  return function(x) {
	    var i = bisectRight(domain, x, 1, j) - 1;
	    return r[i](d[i](x));
	  };
	}

	function copy(source, target) {
	  return target
	      .domain(source.domain())
	      .range(source.range())
	      .interpolate(source.interpolate())
	      .clamp(source.clamp());
	}

	// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
	// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
	function continuous(deinterpolate, reinterpolate) {
	  var domain = unit,
	      range$$1 = unit,
	      interpolate$$1 = interpolateValue,
	      clamp = false,
	      piecewise,
	      output,
	      input;

	  function rescale() {
	    piecewise = Math.min(domain.length, range$$1.length) > 2 ? polymap : bimap;
	    output = input = null;
	    return scale;
	  }

	  function scale(x) {
	    return (output || (output = piecewise(domain, range$$1, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x);
	  }

	  scale.invert = function(y) {
	    return (input || (input = piecewise(range$$1, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
	  };

	  scale.domain = function(_) {
	    return arguments.length ? (domain = map$3.call(_, number$1), rescale()) : domain.slice();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice$4.call(_), rescale()) : range$$1.slice();
	  };

	  scale.rangeRound = function(_) {
	    return range$$1 = slice$4.call(_), interpolate$$1 = interpolateRound, rescale();
	  };

	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, rescale()) : clamp;
	  };

	  scale.interpolate = function(_) {
	    return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1;
	  };

	  return rescale();
	}

	var tickFormat = function(domain, count, specifier) {
	  var start = domain[0],
	      stop = domain[domain.length - 1],
	      step = tickStep(start, stop, count == null ? 10 : count),
	      precision;
	  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
	  switch (specifier.type) {
	    case "s": {
	      var value = Math.max(Math.abs(start), Math.abs(stop));
	      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
	      return exports.formatPrefix(specifier, value);
	    }
	    case "":
	    case "e":
	    case "g":
	    case "p":
	    case "r": {
	      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
	      break;
	    }
	    case "f":
	    case "%": {
	      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
	      break;
	    }
	  }
	  return exports.format(specifier);
	};

	function linearish(scale) {
	  var domain = scale.domain;

	  scale.ticks = function(count) {
	    var d = domain();
	    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
	  };

	  scale.tickFormat = function(count, specifier) {
	    return tickFormat(domain(), count, specifier);
	  };

	  scale.nice = function(count) {
	    var d = domain(),
	        i = d.length - 1,
	        n = count == null ? 10 : count,
	        start = d[0],
	        stop = d[i],
	        step = tickStep(start, stop, n);

	    if (step) {
	      step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);
	      d[0] = Math.floor(start / step) * step;
	      d[i] = Math.ceil(stop / step) * step;
	      domain(d);
	    }

	    return scale;
	  };

	  return scale;
	}

	function linear$2() {
	  var scale = continuous(deinterpolateLinear, reinterpolate);

	  scale.copy = function() {
	    return copy(scale, linear$2());
	  };

	  return linearish(scale);
	}

	function identity$6() {
	  var domain = [0, 1];

	  function scale(x) {
	    return +x;
	  }

	  scale.invert = scale;

	  scale.domain = scale.range = function(_) {
	    return arguments.length ? (domain = map$3.call(_, number$1), scale) : domain.slice();
	  };

	  scale.copy = function() {
	    return identity$6().domain(domain);
	  };

	  return linearish(scale);
	}

	var nice = function(domain, interval) {
	  domain = domain.slice();

	  var i0 = 0,
	      i1 = domain.length - 1,
	      x0 = domain[i0],
	      x1 = domain[i1],
	      t;

	  if (x1 < x0) {
	    t = i0, i0 = i1, i1 = t;
	    t = x0, x0 = x1, x1 = t;
	  }

	  domain[i0] = interval.floor(x0);
	  domain[i1] = interval.ceil(x1);
	  return domain;
	};

	function deinterpolate(a, b) {
	  return (b = Math.log(b / a))
	      ? function(x) { return Math.log(x / a) / b; }
	      : constant$9(b);
	}

	function reinterpolate$1(a, b) {
	  return a < 0
	      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }
	      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };
	}

	function pow10(x) {
	  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
	}

	function powp(base) {
	  return base === 10 ? pow10
	      : base === Math.E ? Math.exp
	      : function(x) { return Math.pow(base, x); };
	}

	function logp(base) {
	  return base === Math.E ? Math.log
	      : base === 10 && Math.log10
	      || base === 2 && Math.log2
	      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
	}

	function reflect(f) {
	  return function(x) {
	    return -f(-x);
	  };
	}

	function log$1() {
	  var scale = continuous(deinterpolate, reinterpolate$1).domain([1, 10]),
	      domain = scale.domain,
	      base = 10,
	      logs = logp(10),
	      pows = powp(10);

	  function rescale() {
	    logs = logp(base), pows = powp(base);
	    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
	    return scale;
	  }

	  scale.base = function(_) {
	    return arguments.length ? (base = +_, rescale()) : base;
	  };

	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };

	  scale.ticks = function(count) {
	    var d = domain(),
	        u = d[0],
	        v = d[d.length - 1],
	        r;

	    if (r = v < u) i = u, u = v, v = i;

	    var i = logs(u),
	        j = logs(v),
	        p,
	        k,
	        t,
	        n = count == null ? 10 : +count,
	        z = [];

	    if (!(base % 1) && j - i < n) {
	      i = Math.round(i) - 1, j = Math.round(j) + 1;
	      if (u > 0) for (; i < j; ++i) {
	        for (k = 1, p = pows(i); k < base; ++k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      } else for (; i < j; ++i) {
	        for (k = base - 1, p = pows(i); k >= 1; --k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      }
	    } else {
	      z = ticks(i, j, Math.min(j - i, n)).map(pows);
	    }

	    return r ? z.reverse() : z;
	  };

	  scale.tickFormat = function(count, specifier) {
	    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
	    if (typeof specifier !== "function") specifier = exports.format(specifier);
	    if (count === Infinity) return specifier;
	    if (count == null) count = 10;
	    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
	    return function(d) {
	      var i = d / pows(Math.round(logs(d)));
	      if (i * base < base - 0.5) i *= base;
	      return i <= k ? specifier(d) : "";
	    };
	  };

	  scale.nice = function() {
	    return domain(nice(domain(), {
	      floor: function(x) { return pows(Math.floor(logs(x))); },
	      ceil: function(x) { return pows(Math.ceil(logs(x))); }
	    }));
	  };

	  scale.copy = function() {
	    return copy(scale, log$1().base(base));
	  };

	  return scale;
	}

	function raise$1(x, exponent) {
	  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
	}

	function pow$1() {
	  var exponent = 1,
	      scale = continuous(deinterpolate, reinterpolate),
	      domain = scale.domain;

	  function deinterpolate(a, b) {
	    return (b = raise$1(b, exponent) - (a = raise$1(a, exponent)))
	        ? function(x) { return (raise$1(x, exponent) - a) / b; }
	        : constant$9(b);
	  }

	  function reinterpolate(a, b) {
	    b = raise$1(b, exponent) - (a = raise$1(a, exponent));
	    return function(t) { return raise$1(a + b * t, 1 / exponent); };
	  }

	  scale.exponent = function(_) {
	    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
	  };

	  scale.copy = function() {
	    return copy(scale, pow$1().exponent(exponent));
	  };

	  return linearish(scale);
	}

	function sqrt$1() {
	  return pow$1().exponent(0.5);
	}

	function quantile$$1() {
	  var domain = [],
	      range$$1 = [],
	      thresholds = [];

	  function rescale() {
	    var i = 0, n = Math.max(1, range$$1.length);
	    thresholds = new Array(n - 1);
	    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);
	    return scale;
	  }

	  function scale(x) {
	    if (!isNaN(x = +x)) return range$$1[bisectRight(thresholds, x)];
	  }

	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return i < 0 ? [NaN, NaN] : [
	      i > 0 ? thresholds[i - 1] : domain[0],
	      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
	    ];
	  };

	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [];
	    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
	    domain.sort(ascending);
	    return rescale();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice$4.call(_), rescale()) : range$$1.slice();
	  };

	  scale.quantiles = function() {
	    return thresholds.slice();
	  };

	  scale.copy = function() {
	    return quantile$$1()
	        .domain(domain)
	        .range(range$$1);
	  };

	  return scale;
	}

	function quantize$1() {
	  var x0 = 0,
	      x1 = 1,
	      n = 1,
	      domain = [0.5],
	      range$$1 = [0, 1];

	  function scale(x) {
	    if (x <= x) return range$$1[bisectRight(domain, x, 0, n)];
	  }

	  function rescale() {
	    var i = -1;
	    domain = new Array(n);
	    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
	    return scale;
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
	  };

	  scale.range = function(_) {
	    return arguments.length ? (n = (range$$1 = slice$4.call(_)).length - 1, rescale()) : range$$1.slice();
	  };

	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return i < 0 ? [NaN, NaN]
	        : i < 1 ? [x0, domain[0]]
	        : i >= n ? [domain[n - 1], x1]
	        : [domain[i - 1], domain[i]];
	  };

	  scale.copy = function() {
	    return quantize$1()
	        .domain([x0, x1])
	        .range(range$$1);
	  };

	  return linearish(scale);
	}

	function threshold$1() {
	  var domain = [0.5],
	      range$$1 = [0, 1],
	      n = 1;

	  function scale(x) {
	    if (x <= x) return range$$1[bisectRight(domain, x, 0, n)];
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (domain = slice$4.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : domain.slice();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice$4.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : range$$1.slice();
	  };

	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return [domain[i - 1], domain[i]];
	  };

	  scale.copy = function() {
	    return threshold$1()
	        .domain(domain)
	        .range(range$$1);
	  };

	  return scale;
	}

	var t0$1 = new Date;
	var t1$1 = new Date;

	function newInterval(floori, offseti, count, field) {

	  function interval(date) {
	    return floori(date = new Date(+date)), date;
	  }

	  interval.floor = interval;

	  interval.ceil = function(date) {
	    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
	  };

	  interval.round = function(date) {
	    var d0 = interval(date),
	        d1 = interval.ceil(date);
	    return date - d0 < d1 - date ? d0 : d1;
	  };

	  interval.offset = function(date, step) {
	    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
	  };

	  interval.range = function(start, stop, step) {
	    var range = [];
	    start = interval.ceil(start);
	    step = step == null ? 1 : Math.floor(step);
	    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
	    do range.push(new Date(+start)); while (offseti(start, step), floori(start), start < stop)
	    return range;
	  };

	  interval.filter = function(test) {
	    return newInterval(function(date) {
	      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
	    }, function(date, step) {
	      if (date >= date) while (--step >= 0) while (offseti(date, 1), !test(date)) {} // eslint-disable-line no-empty
	    });
	  };

	  if (count) {
	    interval.count = function(start, end) {
	      t0$1.setTime(+start), t1$1.setTime(+end);
	      floori(t0$1), floori(t1$1);
	      return Math.floor(count(t0$1, t1$1));
	    };

	    interval.every = function(step) {
	      step = Math.floor(step);
	      return !isFinite(step) || !(step > 0) ? null
	          : !(step > 1) ? interval
	          : interval.filter(field
	              ? function(d) { return field(d) % step === 0; }
	              : function(d) { return interval.count(0, d) % step === 0; });
	    };
	  }

	  return interval;
	}

	var millisecond = newInterval(function() {
	  // noop
	}, function(date, step) {
	  date.setTime(+date + step);
	}, function(start, end) {
	  return end - start;
	});

	// An optimized implementation for this simple case.
	millisecond.every = function(k) {
	  k = Math.floor(k);
	  if (!isFinite(k) || !(k > 0)) return null;
	  if (!(k > 1)) return millisecond;
	  return newInterval(function(date) {
	    date.setTime(Math.floor(date / k) * k);
	  }, function(date, step) {
	    date.setTime(+date + step * k);
	  }, function(start, end) {
	    return (end - start) / k;
	  });
	};

	var milliseconds = millisecond.range;

	var durationSecond$1 = 1e3;
	var durationMinute$1 = 6e4;
	var durationHour$1 = 36e5;
	var durationDay$1 = 864e5;
	var durationWeek$1 = 6048e5;

	var second = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationSecond$1) * durationSecond$1);
	}, function(date, step) {
	  date.setTime(+date + step * durationSecond$1);
	}, function(start, end) {
	  return (end - start) / durationSecond$1;
	}, function(date) {
	  return date.getUTCSeconds();
	});

	var seconds = second.range;

	var minute = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationMinute$1) * durationMinute$1);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute$1);
	}, function(start, end) {
	  return (end - start) / durationMinute$1;
	}, function(date) {
	  return date.getMinutes();
	});

	var minutes = minute.range;

	var hour = newInterval(function(date) {
	  var offset = date.getTimezoneOffset() * durationMinute$1 % durationHour$1;
	  if (offset < 0) offset += durationHour$1;
	  date.setTime(Math.floor((+date - offset) / durationHour$1) * durationHour$1 + offset);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour$1);
	}, function(start, end) {
	  return (end - start) / durationHour$1;
	}, function(date) {
	  return date.getHours();
	});

	var hours = hour.range;

	var day = newInterval(function(date) {
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setDate(date.getDate() + step);
	}, function(start, end) {
	  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationDay$1;
	}, function(date) {
	  return date.getDate() - 1;
	});

	var days = day.range;

	function weekday(i) {
	  return newInterval(function(date) {
	    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setDate(date.getDate() + step * 7);
	  }, function(start, end) {
	    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationWeek$1;
	  });
	}

	var sunday = weekday(0);
	var monday = weekday(1);
	var tuesday = weekday(2);
	var wednesday = weekday(3);
	var thursday = weekday(4);
	var friday = weekday(5);
	var saturday = weekday(6);

	var sundays = sunday.range;
	var mondays = monday.range;
	var tuesdays = tuesday.range;
	var wednesdays = wednesday.range;
	var thursdays = thursday.range;
	var fridays = friday.range;
	var saturdays = saturday.range;

	var month = newInterval(function(date) {
	  date.setDate(1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setMonth(date.getMonth() + step);
	}, function(start, end) {
	  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
	}, function(date) {
	  return date.getMonth();
	});

	var months = month.range;

	var year = newInterval(function(date) {
	  date.setMonth(0, 1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setFullYear(date.getFullYear() + step);
	}, function(start, end) {
	  return end.getFullYear() - start.getFullYear();
	}, function(date) {
	  return date.getFullYear();
	});

	// An optimized implementation for this simple case.
	year.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
	    date.setMonth(0, 1);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setFullYear(date.getFullYear() + step * k);
	  });
	};

	var years = year.range;

	var utcMinute = newInterval(function(date) {
	  date.setUTCSeconds(0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute$1);
	}, function(start, end) {
	  return (end - start) / durationMinute$1;
	}, function(date) {
	  return date.getUTCMinutes();
	});

	var utcMinutes = utcMinute.range;

	var utcHour = newInterval(function(date) {
	  date.setUTCMinutes(0, 0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour$1);
	}, function(start, end) {
	  return (end - start) / durationHour$1;
	}, function(date) {
	  return date.getUTCHours();
	});

	var utcHours = utcHour.range;

	var utcDay = newInterval(function(date) {
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCDate(date.getUTCDate() + step);
	}, function(start, end) {
	  return (end - start) / durationDay$1;
	}, function(date) {
	  return date.getUTCDate() - 1;
	});

	var utcDays = utcDay.range;

	function utcWeekday(i) {
	  return newInterval(function(date) {
	    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCDate(date.getUTCDate() + step * 7);
	  }, function(start, end) {
	    return (end - start) / durationWeek$1;
	  });
	}

	var utcSunday = utcWeekday(0);
	var utcMonday = utcWeekday(1);
	var utcTuesday = utcWeekday(2);
	var utcWednesday = utcWeekday(3);
	var utcThursday = utcWeekday(4);
	var utcFriday = utcWeekday(5);
	var utcSaturday = utcWeekday(6);

	var utcSundays = utcSunday.range;
	var utcMondays = utcMonday.range;
	var utcTuesdays = utcTuesday.range;
	var utcWednesdays = utcWednesday.range;
	var utcThursdays = utcThursday.range;
	var utcFridays = utcFriday.range;
	var utcSaturdays = utcSaturday.range;

	var utcMonth = newInterval(function(date) {
	  date.setUTCDate(1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCMonth(date.getUTCMonth() + step);
	}, function(start, end) {
	  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
	}, function(date) {
	  return date.getUTCMonth();
	});

	var utcMonths = utcMonth.range;

	var utcYear = newInterval(function(date) {
	  date.setUTCMonth(0, 1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCFullYear(date.getUTCFullYear() + step);
	}, function(start, end) {
	  return end.getUTCFullYear() - start.getUTCFullYear();
	}, function(date) {
	  return date.getUTCFullYear();
	});

	// An optimized implementation for this simple case.
	utcYear.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
	    date.setUTCMonth(0, 1);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCFullYear(date.getUTCFullYear() + step * k);
	  });
	};

	var utcYears = utcYear.range;

	function localDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
	    date.setFullYear(d.y);
	    return date;
	  }
	  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
	}

	function utcDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
	    date.setUTCFullYear(d.y);
	    return date;
	  }
	  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
	}

	function newYear(y) {
	  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
	}

	function formatLocale$1(locale) {
	  var locale_dateTime = locale.dateTime,
	      locale_date = locale.date,
	      locale_time = locale.time,
	      locale_periods = locale.periods,
	      locale_weekdays = locale.days,
	      locale_shortWeekdays = locale.shortDays,
	      locale_months = locale.months,
	      locale_shortMonths = locale.shortMonths;

	  var periodRe = formatRe(locale_periods),
	      periodLookup = formatLookup(locale_periods),
	      weekdayRe = formatRe(locale_weekdays),
	      weekdayLookup = formatLookup(locale_weekdays),
	      shortWeekdayRe = formatRe(locale_shortWeekdays),
	      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
	      monthRe = formatRe(locale_months),
	      monthLookup = formatLookup(locale_months),
	      shortMonthRe = formatRe(locale_shortMonths),
	      shortMonthLookup = formatLookup(locale_shortMonths);

	  var formats = {
	    "a": formatShortWeekday,
	    "A": formatWeekday,
	    "b": formatShortMonth,
	    "B": formatMonth,
	    "c": null,
	    "d": formatDayOfMonth,
	    "e": formatDayOfMonth,
	    "H": formatHour24,
	    "I": formatHour12,
	    "j": formatDayOfYear,
	    "L": formatMilliseconds,
	    "m": formatMonthNumber,
	    "M": formatMinutes,
	    "p": formatPeriod,
	    "S": formatSeconds,
	    "U": formatWeekNumberSunday,
	    "w": formatWeekdayNumber,
	    "W": formatWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatYear,
	    "Y": formatFullYear,
	    "Z": formatZone,
	    "%": formatLiteralPercent
	  };

	  var utcFormats = {
	    "a": formatUTCShortWeekday,
	    "A": formatUTCWeekday,
	    "b": formatUTCShortMonth,
	    "B": formatUTCMonth,
	    "c": null,
	    "d": formatUTCDayOfMonth,
	    "e": formatUTCDayOfMonth,
	    "H": formatUTCHour24,
	    "I": formatUTCHour12,
	    "j": formatUTCDayOfYear,
	    "L": formatUTCMilliseconds,
	    "m": formatUTCMonthNumber,
	    "M": formatUTCMinutes,
	    "p": formatUTCPeriod,
	    "S": formatUTCSeconds,
	    "U": formatUTCWeekNumberSunday,
	    "w": formatUTCWeekdayNumber,
	    "W": formatUTCWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatUTCYear,
	    "Y": formatUTCFullYear,
	    "Z": formatUTCZone,
	    "%": formatLiteralPercent
	  };

	  var parses = {
	    "a": parseShortWeekday,
	    "A": parseWeekday,
	    "b": parseShortMonth,
	    "B": parseMonth,
	    "c": parseLocaleDateTime,
	    "d": parseDayOfMonth,
	    "e": parseDayOfMonth,
	    "H": parseHour24,
	    "I": parseHour24,
	    "j": parseDayOfYear,
	    "L": parseMilliseconds,
	    "m": parseMonthNumber,
	    "M": parseMinutes,
	    "p": parsePeriod,
	    "S": parseSeconds,
	    "U": parseWeekNumberSunday,
	    "w": parseWeekdayNumber,
	    "W": parseWeekNumberMonday,
	    "x": parseLocaleDate,
	    "X": parseLocaleTime,
	    "y": parseYear,
	    "Y": parseFullYear,
	    "Z": parseZone,
	    "%": parseLiteralPercent
	  };

	  // These recursive directive definitions must be deferred.
	  formats.x = newFormat(locale_date, formats);
	  formats.X = newFormat(locale_time, formats);
	  formats.c = newFormat(locale_dateTime, formats);
	  utcFormats.x = newFormat(locale_date, utcFormats);
	  utcFormats.X = newFormat(locale_time, utcFormats);
	  utcFormats.c = newFormat(locale_dateTime, utcFormats);

	  function newFormat(specifier, formats) {
	    return function(date) {
	      var string = [],
	          i = -1,
	          j = 0,
	          n = specifier.length,
	          c,
	          pad,
	          format;

	      if (!(date instanceof Date)) date = new Date(+date);

	      while (++i < n) {
	        if (specifier.charCodeAt(i) === 37) {
	          string.push(specifier.slice(j, i));
	          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
	          else pad = c === "e" ? " " : "0";
	          if (format = formats[c]) c = format(date, pad);
	          string.push(c);
	          j = i + 1;
	        }
	      }

	      string.push(specifier.slice(j, i));
	      return string.join("");
	    };
	  }

	  function newParse(specifier, newDate) {
	    return function(string) {
	      var d = newYear(1900),
	          i = parseSpecifier(d, specifier, string += "", 0);
	      if (i != string.length) return null;

	      // The am-pm flag is 0 for AM, and 1 for PM.
	      if ("p" in d) d.H = d.H % 12 + d.p * 12;

	      // Convert day-of-week and week-of-year to day-of-year.
	      if ("W" in d || "U" in d) {
	        if (!("w" in d)) d.w = "W" in d ? 1 : 0;
	        var day$$1 = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
	        d.m = 0;
	        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$$1 + 5) % 7 : d.w + d.U * 7 - (day$$1 + 6) % 7;
	      }

	      // If a time zone is specified, all fields are interpreted as UTC and then
	      // offset according to the specified time zone.
	      if ("Z" in d) {
	        d.H += d.Z / 100 | 0;
	        d.M += d.Z % 100;
	        return utcDate(d);
	      }

	      // Otherwise, all fields are in local time.
	      return newDate(d);
	    };
	  }

	  function parseSpecifier(d, specifier, string, j) {
	    var i = 0,
	        n = specifier.length,
	        m = string.length,
	        c,
	        parse;

	    while (i < n) {
	      if (j >= m) return -1;
	      c = specifier.charCodeAt(i++);
	      if (c === 37) {
	        c = specifier.charAt(i++);
	        parse = parses[c in pads ? specifier.charAt(i++) : c];
	        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
	      } else if (c != string.charCodeAt(j++)) {
	        return -1;
	      }
	    }

	    return j;
	  }

	  function parsePeriod(d, string, i) {
	    var n = periodRe.exec(string.slice(i));
	    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseShortWeekday(d, string, i) {
	    var n = shortWeekdayRe.exec(string.slice(i));
	    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseWeekday(d, string, i) {
	    var n = weekdayRe.exec(string.slice(i));
	    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseShortMonth(d, string, i) {
	    var n = shortMonthRe.exec(string.slice(i));
	    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseMonth(d, string, i) {
	    var n = monthRe.exec(string.slice(i));
	    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseLocaleDateTime(d, string, i) {
	    return parseSpecifier(d, locale_dateTime, string, i);
	  }

	  function parseLocaleDate(d, string, i) {
	    return parseSpecifier(d, locale_date, string, i);
	  }

	  function parseLocaleTime(d, string, i) {
	    return parseSpecifier(d, locale_time, string, i);
	  }

	  function formatShortWeekday(d) {
	    return locale_shortWeekdays[d.getDay()];
	  }

	  function formatWeekday(d) {
	    return locale_weekdays[d.getDay()];
	  }

	  function formatShortMonth(d) {
	    return locale_shortMonths[d.getMonth()];
	  }

	  function formatMonth(d) {
	    return locale_months[d.getMonth()];
	  }

	  function formatPeriod(d) {
	    return locale_periods[+(d.getHours() >= 12)];
	  }

	  function formatUTCShortWeekday(d) {
	    return locale_shortWeekdays[d.getUTCDay()];
	  }

	  function formatUTCWeekday(d) {
	    return locale_weekdays[d.getUTCDay()];
	  }

	  function formatUTCShortMonth(d) {
	    return locale_shortMonths[d.getUTCMonth()];
	  }

	  function formatUTCMonth(d) {
	    return locale_months[d.getUTCMonth()];
	  }

	  function formatUTCPeriod(d) {
	    return locale_periods[+(d.getUTCHours() >= 12)];
	  }

	  return {
	    format: function(specifier) {
	      var f = newFormat(specifier += "", formats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    parse: function(specifier) {
	      var p = newParse(specifier += "", localDate);
	      p.toString = function() { return specifier; };
	      return p;
	    },
	    utcFormat: function(specifier) {
	      var f = newFormat(specifier += "", utcFormats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    utcParse: function(specifier) {
	      var p = newParse(specifier, utcDate);
	      p.toString = function() { return specifier; };
	      return p;
	    }
	  };
	}

	var pads = {"-": "", "_": " ", "0": "0"};
	var numberRe = /^\s*\d+/;
	var percentRe = /^%/;
	var requoteRe = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;

	function pad(value, fill, width) {
	  var sign = value < 0 ? "-" : "",
	      string = (sign ? -value : value) + "",
	      length = string.length;
	  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	}

	function requote(s) {
	  return s.replace(requoteRe, "\\$&");
	}

	function formatRe(names) {
	  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
	}

	function formatLookup(names) {
	  var map = {}, i = -1, n = names.length;
	  while (++i < n) map[names[i].toLowerCase()] = i;
	  return map;
	}

	function parseWeekdayNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.w = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.U = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.W = +n[0], i + n[0].length) : -1;
	}

	function parseFullYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 4));
	  return n ? (d.y = +n[0], i + n[0].length) : -1;
	}

	function parseYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
	}

	function parseZone(d, string, i) {
	  var n = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(string.slice(i, i + 6));
	  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
	}

	function parseMonthNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
	}

	function parseDayOfMonth(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.d = +n[0], i + n[0].length) : -1;
	}

	function parseDayOfYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
	}

	function parseHour24(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.H = +n[0], i + n[0].length) : -1;
	}

	function parseMinutes(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.M = +n[0], i + n[0].length) : -1;
	}

	function parseSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.S = +n[0], i + n[0].length) : -1;
	}

	function parseMilliseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.L = +n[0], i + n[0].length) : -1;
	}

	function parseLiteralPercent(d, string, i) {
	  var n = percentRe.exec(string.slice(i, i + 1));
	  return n ? i + n[0].length : -1;
	}

	function formatDayOfMonth(d, p) {
	  return pad(d.getDate(), p, 2);
	}

	function formatHour24(d, p) {
	  return pad(d.getHours(), p, 2);
	}

	function formatHour12(d, p) {
	  return pad(d.getHours() % 12 || 12, p, 2);
	}

	function formatDayOfYear(d, p) {
	  return pad(1 + day.count(year(d), d), p, 3);
	}

	function formatMilliseconds(d, p) {
	  return pad(d.getMilliseconds(), p, 3);
	}

	function formatMonthNumber(d, p) {
	  return pad(d.getMonth() + 1, p, 2);
	}

	function formatMinutes(d, p) {
	  return pad(d.getMinutes(), p, 2);
	}

	function formatSeconds(d, p) {
	  return pad(d.getSeconds(), p, 2);
	}

	function formatWeekNumberSunday(d, p) {
	  return pad(sunday.count(year(d), d), p, 2);
	}

	function formatWeekdayNumber(d) {
	  return d.getDay();
	}

	function formatWeekNumberMonday(d, p) {
	  return pad(monday.count(year(d), d), p, 2);
	}

	function formatYear(d, p) {
	  return pad(d.getFullYear() % 100, p, 2);
	}

	function formatFullYear(d, p) {
	  return pad(d.getFullYear() % 10000, p, 4);
	}

	function formatZone(d) {
	  var z = d.getTimezoneOffset();
	  return (z > 0 ? "-" : (z *= -1, "+"))
	      + pad(z / 60 | 0, "0", 2)
	      + pad(z % 60, "0", 2);
	}

	function formatUTCDayOfMonth(d, p) {
	  return pad(d.getUTCDate(), p, 2);
	}

	function formatUTCHour24(d, p) {
	  return pad(d.getUTCHours(), p, 2);
	}

	function formatUTCHour12(d, p) {
	  return pad(d.getUTCHours() % 12 || 12, p, 2);
	}

	function formatUTCDayOfYear(d, p) {
	  return pad(1 + utcDay.count(utcYear(d), d), p, 3);
	}

	function formatUTCMilliseconds(d, p) {
	  return pad(d.getUTCMilliseconds(), p, 3);
	}

	function formatUTCMonthNumber(d, p) {
	  return pad(d.getUTCMonth() + 1, p, 2);
	}

	function formatUTCMinutes(d, p) {
	  return pad(d.getUTCMinutes(), p, 2);
	}

	function formatUTCSeconds(d, p) {
	  return pad(d.getUTCSeconds(), p, 2);
	}

	function formatUTCWeekNumberSunday(d, p) {
	  return pad(utcSunday.count(utcYear(d), d), p, 2);
	}

	function formatUTCWeekdayNumber(d) {
	  return d.getUTCDay();
	}

	function formatUTCWeekNumberMonday(d, p) {
	  return pad(utcMonday.count(utcYear(d), d), p, 2);
	}

	function formatUTCYear(d, p) {
	  return pad(d.getUTCFullYear() % 100, p, 2);
	}

	function formatUTCFullYear(d, p) {
	  return pad(d.getUTCFullYear() % 10000, p, 4);
	}

	function formatUTCZone() {
	  return "+0000";
	}

	function formatLiteralPercent() {
	  return "%";
	}

	var locale$2;





	defaultLocale$1({
	  dateTime: "%x, %X",
	  date: "%-m/%-d/%Y",
	  time: "%-I:%M:%S %p",
	  periods: ["AM", "PM"],
	  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	});

	function defaultLocale$1(definition) {
	  locale$2 = formatLocale$1(definition);
	  exports.timeFormat = locale$2.format;
	  exports.timeParse = locale$2.parse;
	  exports.utcFormat = locale$2.utcFormat;
	  exports.utcParse = locale$2.utcParse;
	  return locale$2;
	}

	var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

	function formatIsoNative(date) {
	  return date.toISOString();
	}

	var formatIso = Date.prototype.toISOString
	    ? formatIsoNative
	    : exports.utcFormat(isoSpecifier);

	function parseIsoNative(string) {
	  var date = new Date(string);
	  return isNaN(date) ? null : date;
	}

	var parseIso = +new Date("2000-01-01T00:00:00.000Z")
	    ? parseIsoNative
	    : exports.utcParse(isoSpecifier);

	var durationSecond = 1000;
	var durationMinute = durationSecond * 60;
	var durationHour = durationMinute * 60;
	var durationDay = durationHour * 24;
	var durationWeek = durationDay * 7;
	var durationMonth = durationDay * 30;
	var durationYear = durationDay * 365;

	function date$1(t) {
	  return new Date(t);
	}

	function number$2(t) {
	  return t instanceof Date ? +t : +new Date(+t);
	}

	function calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format) {
	  var scale = continuous(deinterpolateLinear, reinterpolate),
	      invert = scale.invert,
	      domain = scale.domain;

	  var formatMillisecond = format(".%L"),
	      formatSecond = format(":%S"),
	      formatMinute = format("%I:%M"),
	      formatHour = format("%I %p"),
	      formatDay = format("%a %d"),
	      formatWeek = format("%b %d"),
	      formatMonth = format("%B"),
	      formatYear = format("%Y");

	  var tickIntervals = [
	    [second$$1,  1,      durationSecond],
	    [second$$1,  5,  5 * durationSecond],
	    [second$$1, 15, 15 * durationSecond],
	    [second$$1, 30, 30 * durationSecond],
	    [minute$$1,  1,      durationMinute],
	    [minute$$1,  5,  5 * durationMinute],
	    [minute$$1, 15, 15 * durationMinute],
	    [minute$$1, 30, 30 * durationMinute],
	    [  hour$$1,  1,      durationHour  ],
	    [  hour$$1,  3,  3 * durationHour  ],
	    [  hour$$1,  6,  6 * durationHour  ],
	    [  hour$$1, 12, 12 * durationHour  ],
	    [   day$$1,  1,      durationDay   ],
	    [   day$$1,  2,  2 * durationDay   ],
	    [  week,  1,      durationWeek  ],
	    [ month$$1,  1,      durationMonth ],
	    [ month$$1,  3,  3 * durationMonth ],
	    [  year$$1,  1,      durationYear  ]
	  ];

	  function tickFormat(date) {
	    return (second$$1(date) < date ? formatMillisecond
	        : minute$$1(date) < date ? formatSecond
	        : hour$$1(date) < date ? formatMinute
	        : day$$1(date) < date ? formatHour
	        : month$$1(date) < date ? (week(date) < date ? formatDay : formatWeek)
	        : year$$1(date) < date ? formatMonth
	        : formatYear)(date);
	  }

	  function tickInterval(interval, start, stop, step) {
	    if (interval == null) interval = 10;

	    // If a desired tick count is specified, pick a reasonable tick interval
	    // based on the extent of the domain and a rough estimate of tick size.
	    // Otherwise, assume interval is already a time interval and use it.
	    if (typeof interval === "number") {
	      var target = Math.abs(stop - start) / interval,
	          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);
	      if (i === tickIntervals.length) {
	        step = tickStep(start / durationYear, stop / durationYear, interval);
	        interval = year$$1;
	      } else if (i) {
	        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
	        step = i[1];
	        interval = i[0];
	      } else {
	        step = tickStep(start, stop, interval);
	        interval = millisecond$$1;
	      }
	    }

	    return step == null ? interval : interval.every(step);
	  }

	  scale.invert = function(y) {
	    return new Date(invert(y));
	  };

	  scale.domain = function(_) {
	    return arguments.length ? domain(map$3.call(_, number$2)) : domain().map(date$1);
	  };

	  scale.ticks = function(interval, step) {
	    var d = domain(),
	        t0 = d[0],
	        t1 = d[d.length - 1],
	        r = t1 < t0,
	        t;
	    if (r) t = t0, t0 = t1, t1 = t;
	    t = tickInterval(interval, t0, t1, step);
	    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
	    return r ? t.reverse() : t;
	  };

	  scale.tickFormat = function(count, specifier) {
	    return specifier == null ? tickFormat : format(specifier);
	  };

	  scale.nice = function(interval, step) {
	    var d = domain();
	    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
	        ? domain(nice(d, interval))
	        : scale;
	  };

	  scale.copy = function() {
	    return copy(scale, calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format));
	  };

	  return scale;
	}

	var time = function() {
	  return calendar(year, month, sunday, day, hour, minute, second, millisecond, exports.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
	};

	var utcTime = function() {
	  return calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
	};

	var colors = function(s) {
	  return s.match(/.{6}/g).map(function(x) {
	    return "#" + x;
	  });
	};

	var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

	var category20b = colors("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");

	var category20c = colors("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");

	var category20 = colors("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");

	var cubehelix$3 = cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));

	var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

	var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

	var rainbow = cubehelix();

	var rainbow$1 = function(t) {
	  if (t < 0 || t > 1) t -= Math.floor(t);
	  var ts = Math.abs(t - 0.5);
	  rainbow.h = 360 * t - 100;
	  rainbow.s = 1.5 - 1.5 * ts;
	  rainbow.l = 0.8 - 0.9 * ts;
	  return rainbow + "";
	};

	function ramp(range) {
	  var n = range.length;
	  return function(t) {
	    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
	  };
	}

	var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

	var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

	var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

	var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

	function sequential(interpolator) {
	  var x0 = 0,
	      x1 = 1,
	      clamp = false;

	  function scale(x) {
	    var t = (x - x0) / (x1 - x0);
	    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];
	  };

	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, scale) : clamp;
	  };

	  scale.interpolator = function(_) {
	    return arguments.length ? (interpolator = _, scale) : interpolator;
	  };

	  scale.copy = function() {
	    return sequential(interpolator).domain([x0, x1]).clamp(clamp);
	  };

	  return linearish(scale);
	}

	var constant$10 = function(x) {
	  return function constant() {
	    return x;
	  };
	};

	var abs$1 = Math.abs;
	var atan2$1 = Math.atan2;
	var cos$2 = Math.cos;
	var max$2 = Math.max;
	var min$1 = Math.min;
	var sin$2 = Math.sin;
	var sqrt$2 = Math.sqrt;

	var epsilon$3 = 1e-12;
	var pi$4 = Math.PI;
	var halfPi$3 = pi$4 / 2;
	var tau$4 = 2 * pi$4;

	function acos$1(x) {
	  return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);
	}

	function asin$1(x) {
	  return x >= 1 ? halfPi$3 : x <= -1 ? -halfPi$3 : Math.asin(x);
	}

	function arcInnerRadius(d) {
	  return d.innerRadius;
	}

	function arcOuterRadius(d) {
	  return d.outerRadius;
	}

	function arcStartAngle(d) {
	  return d.startAngle;
	}

	function arcEndAngle(d) {
	  return d.endAngle;
	}

	function arcPadAngle(d) {
	  return d && d.padAngle; // Note: optional!
	}

	function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
	  var x10 = x1 - x0, y10 = y1 - y0,
	      x32 = x3 - x2, y32 = y3 - y2,
	      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
	  return [x0 + t * x10, y0 + t * y10];
	}

	// Compute perpendicular offset line of length rc.
	// http://mathworld.wolfram.com/Circle-LineIntersection.html
	function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
	  var x01 = x0 - x1,
	      y01 = y0 - y1,
	      lo = (cw ? rc : -rc) / sqrt$2(x01 * x01 + y01 * y01),
	      ox = lo * y01,
	      oy = -lo * x01,
	      x11 = x0 + ox,
	      y11 = y0 + oy,
	      x10 = x1 + ox,
	      y10 = y1 + oy,
	      x00 = (x11 + x10) / 2,
	      y00 = (y11 + y10) / 2,
	      dx = x10 - x11,
	      dy = y10 - y11,
	      d2 = dx * dx + dy * dy,
	      r = r1 - rc,
	      D = x11 * y10 - x10 * y11,
	      d = (dy < 0 ? -1 : 1) * sqrt$2(max$2(0, r * r * d2 - D * D)),
	      cx0 = (D * dy - dx * d) / d2,
	      cy0 = (-D * dx - dy * d) / d2,
	      cx1 = (D * dy + dx * d) / d2,
	      cy1 = (-D * dx + dy * d) / d2,
	      dx0 = cx0 - x00,
	      dy0 = cy0 - y00,
	      dx1 = cx1 - x00,
	      dy1 = cy1 - y00;

	  // Pick the closer of the two intersection points.
	  // TODO Is there a faster way to determine which intersection to use?
	  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

	  return {
	    cx: cx0,
	    cy: cy0,
	    x01: -ox,
	    y01: -oy,
	    x11: cx0 * (r1 / r - 1),
	    y11: cy0 * (r1 / r - 1)
	  };
	}

	var arc = function() {
	  var innerRadius = arcInnerRadius,
	      outerRadius = arcOuterRadius,
	      cornerRadius = constant$10(0),
	      padRadius = null,
	      startAngle = arcStartAngle,
	      endAngle = arcEndAngle,
	      padAngle = arcPadAngle,
	      context = null;

	  function arc() {
	    var buffer,
	        r,
	        r0 = +innerRadius.apply(this, arguments),
	        r1 = +outerRadius.apply(this, arguments),
	        a0 = startAngle.apply(this, arguments) - halfPi$3,
	        a1 = endAngle.apply(this, arguments) - halfPi$3,
	        da = abs$1(a1 - a0),
	        cw = a1 > a0;

	    if (!context) context = buffer = path();

	    // Ensure that the outer radius is always larger than the inner radius.
	    if (r1 < r0) r = r1, r1 = r0, r0 = r;

	    // Is it a point?
	    if (!(r1 > epsilon$3)) context.moveTo(0, 0);

	    // Or is it a circle or annulus?
	    else if (da > tau$4 - epsilon$3) {
	      context.moveTo(r1 * cos$2(a0), r1 * sin$2(a0));
	      context.arc(0, 0, r1, a0, a1, !cw);
	      if (r0 > epsilon$3) {
	        context.moveTo(r0 * cos$2(a1), r0 * sin$2(a1));
	        context.arc(0, 0, r0, a1, a0, cw);
	      }
	    }

	    // Or is it a circular or annular sector?
	    else {
	      var a01 = a0,
	          a11 = a1,
	          a00 = a0,
	          a10 = a1,
	          da0 = da,
	          da1 = da,
	          ap = padAngle.apply(this, arguments) / 2,
	          rp = (ap > epsilon$3) && (padRadius ? +padRadius.apply(this, arguments) : sqrt$2(r0 * r0 + r1 * r1)),
	          rc = min$1(abs$1(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
	          rc0 = rc,
	          rc1 = rc,
	          t0,
	          t1;

	      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
	      if (rp > epsilon$3) {
	        var p0 = asin$1(rp / r0 * sin$2(ap)),
	            p1 = asin$1(rp / r1 * sin$2(ap));
	        if ((da0 -= p0 * 2) > epsilon$3) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
	        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
	        if ((da1 -= p1 * 2) > epsilon$3) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
	        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
	      }

	      var x01 = r1 * cos$2(a01),
	          y01 = r1 * sin$2(a01),
	          x10 = r0 * cos$2(a10),
	          y10 = r0 * sin$2(a10);

	      // Apply rounded corners?
	      if (rc > epsilon$3) {
	        var x11 = r1 * cos$2(a11),
	            y11 = r1 * sin$2(a11),
	            x00 = r0 * cos$2(a00),
	            y00 = r0 * sin$2(a00);

	        // Restrict the corner radius according to the sector angle.
	        if (da < pi$4) {
	          var oc = da0 > epsilon$3 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],
	              ax = x01 - oc[0],
	              ay = y01 - oc[1],
	              bx = x11 - oc[0],
	              by = y11 - oc[1],
	              kc = 1 / sin$2(acos$1((ax * bx + ay * by) / (sqrt$2(ax * ax + ay * ay) * sqrt$2(bx * bx + by * by))) / 2),
	              lc = sqrt$2(oc[0] * oc[0] + oc[1] * oc[1]);
	          rc0 = min$1(rc, (r0 - lc) / (kc - 1));
	          rc1 = min$1(rc, (r1 - lc) / (kc + 1));
	        }
	      }

	      // Is the sector collapsed to a line?
	      if (!(da1 > epsilon$3)) context.moveTo(x01, y01);

	      // Does the sector’s outer ring have rounded corners?
	      else if (rc1 > epsilon$3) {
	        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
	        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

	        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

	        // Have the corners merged?
	        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);

	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r1, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
	          context.arc(t1.cx, t1.cy, rc1, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);
	        }
	      }

	      // Or is the outer ring just a circular arc?
	      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

	      // Is there no inner ring, and it’s a circular sector?
	      // Or perhaps it’s an annular sector collapsed due to padding?
	      if (!(r0 > epsilon$3) || !(da0 > epsilon$3)) context.lineTo(x10, y10);

	      // Does the sector’s inner ring (or point) have rounded corners?
	      else if (rc0 > epsilon$3) {
	        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
	        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

	        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

	        // Have the corners merged?
	        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);

	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r0, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), cw);
	          context.arc(t1.cx, t1.cy, rc0, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);
	        }
	      }

	      // Or is the inner ring just a circular arc?
	      else context.arc(0, 0, r0, a10, a00, cw);
	    }

	    context.closePath();

	    if (buffer) return context = null, buffer + "" || null;
	  }

	  arc.centroid = function() {
	    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
	        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$4 / 2;
	    return [cos$2(a) * r, sin$2(a) * r];
	  };

	  arc.innerRadius = function(_) {
	    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : innerRadius;
	  };

	  arc.outerRadius = function(_) {
	    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : outerRadius;
	  };

	  arc.cornerRadius = function(_) {
	    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : cornerRadius;
	  };

	  arc.padRadius = function(_) {
	    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), arc) : padRadius;
	  };

	  arc.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : startAngle;
	  };

	  arc.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : endAngle;
	  };

	  arc.padAngle = function(_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : padAngle;
	  };

	  arc.context = function(_) {
	    return arguments.length ? ((context = _ == null ? null : _), arc) : context;
	  };

	  return arc;
	};

	function Linear(context) {
	  this._context = context;
	}

	Linear.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: this._context.lineTo(x, y); break;
	    }
	  }
	};

	var curveLinear = function(context) {
	  return new Linear(context);
	};

	function x$3(p) {
	  return p[0];
	}

	function y$3(p) {
	  return p[1];
	}

	var line = function() {
	  var x$$1 = x$3,
	      y$$1 = y$3,
	      defined = constant$10(true),
	      context = null,
	      curve = curveLinear,
	      output = null;

	  function line(data) {
	    var i,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer;

	    if (context == null) output = curve(buffer = path());

	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) output.lineStart();
	        else output.lineEnd();
	      }
	      if (defined0) output.point(+x$$1(d, i, data), +y$$1(d, i, data));
	    }

	    if (buffer) return output = null, buffer + "" || null;
	  }

	  line.x = function(_) {
	    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant$10(+_), line) : x$$1;
	  };

	  line.y = function(_) {
	    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant$10(+_), line) : y$$1;
	  };

	  line.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$10(!!_), line) : defined;
	  };

	  line.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
	  };

	  line.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
	  };

	  return line;
	};

	var area$2 = function() {
	  var x0 = x$3,
	      x1 = null,
	      y0 = constant$10(0),
	      y1 = y$3,
	      defined = constant$10(true),
	      context = null,
	      curve = curveLinear,
	      output = null;

	  function area(data) {
	    var i,
	        j,
	        k,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer,
	        x0z = new Array(n),
	        y0z = new Array(n);

	    if (context == null) output = curve(buffer = path());

	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) {
	          j = i;
	          output.areaStart();
	          output.lineStart();
	        } else {
	          output.lineEnd();
	          output.lineStart();
	          for (k = i - 1; k >= j; --k) {
	            output.point(x0z[k], y0z[k]);
	          }
	          output.lineEnd();
	          output.areaEnd();
	        }
	      }
	      if (defined0) {
	        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
	        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
	      }
	    }

	    if (buffer) return output = null, buffer + "" || null;
	  }

	  function arealine() {
	    return line().defined(defined).curve(curve).context(context);
	  }

	  area.x = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$10(+_), x1 = null, area) : x0;
	  };

	  area.x0 = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$10(+_), area) : x0;
	  };

	  area.x1 = function(_) {
	    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), area) : x1;
	  };

	  area.y = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$10(+_), y1 = null, area) : y0;
	  };

	  area.y0 = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$10(+_), area) : y0;
	  };

	  area.y1 = function(_) {
	    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), area) : y1;
	  };

	  area.lineX0 =
	  area.lineY0 = function() {
	    return arealine().x(x0).y(y0);
	  };

	  area.lineY1 = function() {
	    return arealine().x(x0).y(y1);
	  };

	  area.lineX1 = function() {
	    return arealine().x(x1).y(y0);
	  };

	  area.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$10(!!_), area) : defined;
	  };

	  area.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
	  };

	  area.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
	  };

	  return area;
	};

	var descending$1 = function(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	};

	var identity$7 = function(d) {
	  return d;
	};

	var pie = function() {
	  var value = identity$7,
	      sortValues = descending$1,
	      sort = null,
	      startAngle = constant$10(0),
	      endAngle = constant$10(tau$4),
	      padAngle = constant$10(0);

	  function pie(data) {
	    var i,
	        n = data.length,
	        j,
	        k,
	        sum = 0,
	        index = new Array(n),
	        arcs = new Array(n),
	        a0 = +startAngle.apply(this, arguments),
	        da = Math.min(tau$4, Math.max(-tau$4, endAngle.apply(this, arguments) - a0)),
	        a1,
	        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
	        pa = p * (da < 0 ? -1 : 1),
	        v;

	    for (i = 0; i < n; ++i) {
	      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
	        sum += v;
	      }
	    }

	    // Optionally sort the arcs by previously-computed values or by data.
	    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
	    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

	    // Compute the arcs! They are stored in the original data's order.
	    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
	      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
	        data: data[j],
	        index: i,
	        value: v,
	        startAngle: a0,
	        endAngle: a1,
	        padAngle: p
	      };
	    }

	    return arcs;
	  }

	  pie.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant$10(+_), pie) : value;
	  };

	  pie.sortValues = function(_) {
	    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
	  };

	  pie.sort = function(_) {
	    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
	  };

	  pie.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : startAngle;
	  };

	  pie.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : endAngle;
	  };

	  pie.padAngle = function(_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : padAngle;
	  };

	  return pie;
	};

	var curveRadialLinear = curveRadial(curveLinear);

	function Radial(curve) {
	  this._curve = curve;
	}

	Radial.prototype = {
	  areaStart: function() {
	    this._curve.areaStart();
	  },
	  areaEnd: function() {
	    this._curve.areaEnd();
	  },
	  lineStart: function() {
	    this._curve.lineStart();
	  },
	  lineEnd: function() {
	    this._curve.lineEnd();
	  },
	  point: function(a, r) {
	    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
	  }
	};

	function curveRadial(curve) {

	  function radial(context) {
	    return new Radial(curve(context));
	  }

	  radial._curve = curve;

	  return radial;
	}

	function radialLine(l) {
	  var c = l.curve;

	  l.angle = l.x, delete l.x;
	  l.radius = l.y, delete l.y;

	  l.curve = function(_) {
	    return arguments.length ? c(curveRadial(_)) : c()._curve;
	  };

	  return l;
	}

	var radialLine$1 = function() {
	  return radialLine(line().curve(curveRadialLinear));
	};

	var radialArea = function() {
	  var a = area$2().curve(curveRadialLinear),
	      c = a.curve,
	      x0 = a.lineX0,
	      x1 = a.lineX1,
	      y0 = a.lineY0,
	      y1 = a.lineY1;

	  a.angle = a.x, delete a.x;
	  a.startAngle = a.x0, delete a.x0;
	  a.endAngle = a.x1, delete a.x1;
	  a.radius = a.y, delete a.y;
	  a.innerRadius = a.y0, delete a.y0;
	  a.outerRadius = a.y1, delete a.y1;
	  a.lineStartAngle = function() { return radialLine(x0()); }, delete a.lineX0;
	  a.lineEndAngle = function() { return radialLine(x1()); }, delete a.lineX1;
	  a.lineInnerRadius = function() { return radialLine(y0()); }, delete a.lineY0;
	  a.lineOuterRadius = function() { return radialLine(y1()); }, delete a.lineY1;

	  a.curve = function(_) {
	    return arguments.length ? c(curveRadial(_)) : c()._curve;
	  };

	  return a;
	};

	var circle$2 = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / pi$4);
	    context.moveTo(r, 0);
	    context.arc(0, 0, r, 0, tau$4);
	  }
	};

	var cross$2 = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / 5) / 2;
	    context.moveTo(-3 * r, -r);
	    context.lineTo(-r, -r);
	    context.lineTo(-r, -3 * r);
	    context.lineTo(r, -3 * r);
	    context.lineTo(r, -r);
	    context.lineTo(3 * r, -r);
	    context.lineTo(3 * r, r);
	    context.lineTo(r, r);
	    context.lineTo(r, 3 * r);
	    context.lineTo(-r, 3 * r);
	    context.lineTo(-r, r);
	    context.lineTo(-3 * r, r);
	    context.closePath();
	  }
	};

	var tan30 = Math.sqrt(1 / 3);
	var tan30_2 = tan30 * 2;

	var diamond = {
	  draw: function(context, size) {
	    var y = Math.sqrt(size / tan30_2),
	        x = y * tan30;
	    context.moveTo(0, -y);
	    context.lineTo(x, 0);
	    context.lineTo(0, y);
	    context.lineTo(-x, 0);
	    context.closePath();
	  }
	};

	var ka = 0.89081309152928522810;
	var kr = Math.sin(pi$4 / 10) / Math.sin(7 * pi$4 / 10);
	var kx = Math.sin(tau$4 / 10) * kr;
	var ky = -Math.cos(tau$4 / 10) * kr;

	var star = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size * ka),
	        x = kx * r,
	        y = ky * r;
	    context.moveTo(0, -r);
	    context.lineTo(x, y);
	    for (var i = 1; i < 5; ++i) {
	      var a = tau$4 * i / 5,
	          c = Math.cos(a),
	          s = Math.sin(a);
	      context.lineTo(s * r, -c * r);
	      context.lineTo(c * x - s * y, s * x + c * y);
	    }
	    context.closePath();
	  }
	};

	var square = {
	  draw: function(context, size) {
	    var w = Math.sqrt(size),
	        x = -w / 2;
	    context.rect(x, x, w, w);
	  }
	};

	var sqrt3 = Math.sqrt(3);

	var triangle = {
	  draw: function(context, size) {
	    var y = -Math.sqrt(size / (sqrt3 * 3));
	    context.moveTo(0, y * 2);
	    context.lineTo(-sqrt3 * y, -y);
	    context.lineTo(sqrt3 * y, -y);
	    context.closePath();
	  }
	};

	var c = -0.5;
	var s = Math.sqrt(3) / 2;
	var k = 1 / Math.sqrt(12);
	var a = (k / 2 + 1) * 3;

	var wye = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / a),
	        x0 = r / 2,
	        y0 = r * k,
	        x1 = x0,
	        y1 = r * k + r,
	        x2 = -x1,
	        y2 = y1;
	    context.moveTo(x0, y0);
	    context.lineTo(x1, y1);
	    context.lineTo(x2, y2);
	    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
	    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
	    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
	    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
	    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
	    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
	    context.closePath();
	  }
	};

	var symbols = [
	  circle$2,
	  cross$2,
	  diamond,
	  square,
	  star,
	  triangle,
	  wye
	];

	var symbol = function() {
	  var type = constant$10(circle$2),
	      size = constant$10(64),
	      context = null;

	  function symbol() {
	    var buffer;
	    if (!context) context = buffer = path();
	    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
	    if (buffer) return context = null, buffer + "" || null;
	  }

	  symbol.type = function(_) {
	    return arguments.length ? (type = typeof _ === "function" ? _ : constant$10(_), symbol) : type;
	  };

	  symbol.size = function(_) {
	    return arguments.length ? (size = typeof _ === "function" ? _ : constant$10(+_), symbol) : size;
	  };

	  symbol.context = function(_) {
	    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
	  };

	  return symbol;
	};

	var noop$2 = function() {};

	function point$2(that, x, y) {
	  that._context.bezierCurveTo(
	    (2 * that._x0 + that._x1) / 3,
	    (2 * that._y0 + that._y1) / 3,
	    (that._x0 + 2 * that._x1) / 3,
	    (that._y0 + 2 * that._y1) / 3,
	    (that._x0 + 4 * that._x1 + x) / 6,
	    (that._y0 + 4 * that._y1 + y) / 6
	  );
	}

	function Basis(context) {
	  this._context = context;
	}

	Basis.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 3: point$2(this, this._x1, this._y1); // proceed
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
	      default: point$2(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	var basis$2 = function(context) {
	  return new Basis(context);
	};

	function BasisClosed(context) {
	  this._context = context;
	}

	BasisClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x2, this._y2);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
	        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x2, this._y2);
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
	      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
	      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
	      default: point$2(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	var basisClosed$1 = function(context) {
	  return new BasisClosed(context);
	};

	function BasisOpen(context) {
	  this._context = context;
	}

	BasisOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
	      case 3: this._point = 4; // proceed
	      default: point$2(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	var basisOpen = function(context) {
	  return new BasisOpen(context);
	};

	function Bundle(context, beta) {
	  this._basis = new Basis(context);
	  this._beta = beta;
	}

	Bundle.prototype = {
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	    this._basis.lineStart();
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        j = x.length - 1;

	    if (j > 0) {
	      var x0 = x[0],
	          y0 = y[0],
	          dx = x[j] - x0,
	          dy = y[j] - y0,
	          i = -1,
	          t;

	      while (++i <= j) {
	        t = i / j;
	        this._basis.point(
	          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
	          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
	        );
	      }
	    }

	    this._x = this._y = null;
	    this._basis.lineEnd();
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};

	var bundle = ((function custom(beta) {

	  function bundle(context) {
	    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
	  }

	  bundle.beta = function(beta) {
	    return custom(+beta);
	  };

	  return bundle;
	}))(0.85);

	function point$3(that, x, y) {
	  that._context.bezierCurveTo(
	    that._x1 + that._k * (that._x2 - that._x0),
	    that._y1 + that._k * (that._y2 - that._y0),
	    that._x2 + that._k * (that._x1 - x),
	    that._y2 + that._k * (that._y1 - y),
	    that._x2,
	    that._y2
	  );
	}

	function Cardinal(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}

	Cardinal.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: point$3(this, this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
	      case 2: this._point = 3; // proceed
	      default: point$3(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var cardinal = ((function custom(tension) {

	  function cardinal(context) {
	    return new Cardinal(context, tension);
	  }

	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };

	  return cardinal;
	}))(0);

	function CardinalClosed(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}

	CardinalClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$3(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var cardinalClosed = ((function custom(tension) {

	  function cardinal(context) {
	    return new CardinalClosed(context, tension);
	  }

	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };

	  return cardinal;
	}))(0);

	function CardinalOpen(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}

	CardinalOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$3(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var cardinalOpen = ((function custom(tension) {

	  function cardinal(context) {
	    return new CardinalOpen(context, tension);
	  }

	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };

	  return cardinal;
	}))(0);

	function point$4(that, x, y) {
	  var x1 = that._x1,
	      y1 = that._y1,
	      x2 = that._x2,
	      y2 = that._y2;

	  if (that._l01_a > epsilon$3) {
	    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
	        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
	    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
	    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
	  }

	  if (that._l23_a > epsilon$3) {
	    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
	        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
	    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
	    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
	  }

	  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
	}

	function CatmullRom(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}

	CatmullRom.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: this.point(this._x2, this._y2); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;

	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }

	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; // proceed
	      default: point$4(this, x, y); break;
	    }

	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var catmullRom = ((function custom(alpha) {

	  function catmullRom(context) {
	    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
	  }

	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };

	  return catmullRom;
	}))(0.5);

	function CatmullRomClosed(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}

	CatmullRomClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;

	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }

	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$4(this, x, y); break;
	    }

	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var catmullRomClosed = ((function custom(alpha) {

	  function catmullRom(context) {
	    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
	  }

	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };

	  return catmullRom;
	}))(0.5);

	function CatmullRomOpen(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}

	CatmullRomOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;

	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }

	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$4(this, x, y); break;
	    }

	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var catmullRomOpen = ((function custom(alpha) {

	  function catmullRom(context) {
	    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
	  }

	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };

	  return catmullRom;
	}))(0.5);

	function LinearClosed(context) {
	  this._context = context;
	}

	LinearClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._point) this._context.closePath();
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    if (this._point) this._context.lineTo(x, y);
	    else this._point = 1, this._context.moveTo(x, y);
	  }
	};

	var linearClosed = function(context) {
	  return new LinearClosed(context);
	};

	function sign$1(x) {
	  return x < 0 ? -1 : 1;
	}

	// Calculate the slopes of the tangents (Hermite-type interpolation) based on
	// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
	// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
	// NOV(II), P. 443, 1990.
	function slope3(that, x2, y2) {
	  var h0 = that._x1 - that._x0,
	      h1 = x2 - that._x1,
	      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
	      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
	      p = (s0 * h1 + s1 * h0) / (h0 + h1);
	  return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
	}

	// Calculate a one-sided slope.
	function slope2(that, t) {
	  var h = that._x1 - that._x0;
	  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
	}

	// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
	// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
	// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
	function point$5(that, t0, t1) {
	  var x0 = that._x0,
	      y0 = that._y0,
	      x1 = that._x1,
	      y1 = that._y1,
	      dx = (x1 - x0) / 3;
	  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
	}

	function MonotoneX(context) {
	  this._context = context;
	}

	MonotoneX.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 =
	    this._t0 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	      case 3: point$5(this, this._t0, slope2(this, this._t0)); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    var t1 = NaN;

	    x = +x, y = +y;
	    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; point$5(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
	      default: point$5(this, this._t0, t1 = slope3(this, x, y)); break;
	    }

	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	    this._t0 = t1;
	  }
	};

	function MonotoneY(context) {
	  this._context = new ReflectContext(context);
	}

	(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
	  MonotoneX.prototype.point.call(this, y, x);
	};

	function ReflectContext(context) {
	  this._context = context;
	}

	ReflectContext.prototype = {
	  moveTo: function(x, y) { this._context.moveTo(y, x); },
	  closePath: function() { this._context.closePath(); },
	  lineTo: function(x, y) { this._context.lineTo(y, x); },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
	};

	function monotoneX(context) {
	  return new MonotoneX(context);
	}

	function monotoneY(context) {
	  return new MonotoneY(context);
	}

	function Natural(context) {
	  this._context = context;
	}

	Natural.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        n = x.length;

	    if (n) {
	      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
	      if (n === 2) {
	        this._context.lineTo(x[1], y[1]);
	      } else {
	        var px = controlPoints(x),
	            py = controlPoints(y);
	        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
	          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
	        }
	      }
	    }

	    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	    this._x = this._y = null;
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};

	// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
	function controlPoints(x) {
	  var i,
	      n = x.length - 1,
	      m,
	      a = new Array(n),
	      b = new Array(n),
	      r = new Array(n);
	  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
	  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
	  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
	  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
	  a[n - 1] = r[n - 1] / b[n - 1];
	  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
	  b[n - 1] = (x[n] + a[n - 1]) / 2;
	  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
	  return [a, b];
	}

	var natural = function(context) {
	  return new Natural(context);
	};

	function Step(context, t) {
	  this._context = context;
	  this._t = t;
	}

	Step.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = this._y = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: {
	        if (this._t <= 0) {
	          this._context.lineTo(this._x, y);
	          this._context.lineTo(x, y);
	        } else {
	          var x1 = this._x * (1 - this._t) + x * this._t;
	          this._context.lineTo(x1, this._y);
	          this._context.lineTo(x1, y);
	        }
	        break;
	      }
	    }
	    this._x = x, this._y = y;
	  }
	};

	var step = function(context) {
	  return new Step(context, 0.5);
	};

	function stepBefore(context) {
	  return new Step(context, 0);
	}

	function stepAfter(context) {
	  return new Step(context, 1);
	}

	var slice$5 = Array.prototype.slice;

	var none$1 = function(series, order) {
	  if (!((n = series.length) > 1)) return;
	  for (var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
	    s0 = s1, s1 = series[order[i]];
	    for (var j = 0; j < m; ++j) {
	      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
	    }
	  }
	};

	var none$2 = function(series) {
	  var n = series.length, o = new Array(n);
	  while (--n >= 0) o[n] = n;
	  return o;
	};

	function stackValue(d, key) {
	  return d[key];
	}

	var stack = function() {
	  var keys = constant$10([]),
	      order = none$2,
	      offset = none$1,
	      value = stackValue;

	  function stack(data) {
	    var kz = keys.apply(this, arguments),
	        i,
	        m = data.length,
	        n = kz.length,
	        sz = new Array(n),
	        oz;

	    for (i = 0; i < n; ++i) {
	      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
	        si[j] = sij = [0, +value(data[j], ki, j, data)];
	        sij.data = data[j];
	      }
	      si.key = ki;
	    }

	    for (i = 0, oz = order(sz); i < n; ++i) {
	      sz[oz[i]].index = i;
	    }

	    offset(sz, oz);
	    return sz;
	  }

	  stack.keys = function(_) {
	    return arguments.length ? (keys = typeof _ === "function" ? _ : constant$10(slice$5.call(_)), stack) : keys;
	  };

	  stack.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant$10(+_), stack) : value;
	  };

	  stack.order = function(_) {
	    return arguments.length ? (order = _ == null ? none$2 : typeof _ === "function" ? _ : constant$10(slice$5.call(_)), stack) : order;
	  };

	  stack.offset = function(_) {
	    return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;
	  };

	  return stack;
	};

	var expand = function(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
	    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
	    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
	  }
	  none$1(series, order);
	};

	var silhouette = function(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
	    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
	    s0[j][1] += s0[j][0] = -y / 2;
	  }
	  none$1(series, order);
	};

	var wiggle = function(series, order) {
	  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
	  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
	    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
	      var si = series[order[i]],
	          sij0 = si[j][1] || 0,
	          sij1 = si[j - 1][1] || 0,
	          s3 = (sij0 - sij1) / 2;
	      for (var k = 0; k < i; ++k) {
	        var sk = series[order[k]],
	            skj0 = sk[j][1] || 0,
	            skj1 = sk[j - 1][1] || 0;
	        s3 += skj0 - skj1;
	      }
	      s1 += sij0, s2 += s3 * sij0;
	    }
	    s0[j - 1][1] += s0[j - 1][0] = y;
	    if (s1) y -= s2 / s1;
	  }
	  s0[j - 1][1] += s0[j - 1][0] = y;
	  none$1(series, order);
	};

	var ascending$2 = function(series) {
	  var sums = series.map(sum$2);
	  return none$2(series).sort(function(a, b) { return sums[a] - sums[b]; });
	};

	function sum$2(series) {
	  var s = 0, i = -1, n = series.length, v;
	  while (++i < n) if (v = +series[i][1]) s += v;
	  return s;
	}

	var descending$2 = function(series) {
	  return ascending$2(series).reverse();
	};

	var insideOut = function(series) {
	  var n = series.length,
	      i,
	      j,
	      sums = series.map(sum$2),
	      order = none$2(series).sort(function(a, b) { return sums[b] - sums[a]; }),
	      top = 0,
	      bottom = 0,
	      tops = [],
	      bottoms = [];

	  for (i = 0; i < n; ++i) {
	    j = order[i];
	    if (top < bottom) {
	      top += sums[j];
	      tops.push(j);
	    } else {
	      bottom += sums[j];
	      bottoms.push(j);
	    }
	  }

	  return bottoms.reverse().concat(tops);
	};

	var reverse = function(series) {
	  return none$2(series).reverse();
	};

	var constant$11 = function(x) {
	  return function() {
	    return x;
	  };
	};

	function x$4(d) {
	  return d[0];
	}

	function y$4(d) {
	  return d[1];
	}

	function RedBlackTree() {
	  this._ = null; // root node
	}

	function RedBlackNode(node) {
	  node.U = // parent node
	  node.C = // color - true for red, false for black
	  node.L = // left node
	  node.R = // right node
	  node.P = // previous node
	  node.N = null; // next node
	}

	RedBlackTree.prototype = {
	  constructor: RedBlackTree,

	  insert: function(after, node) {
	    var parent, grandpa, uncle;

	    if (after) {
	      node.P = after;
	      node.N = after.N;
	      if (after.N) after.N.P = node;
	      after.N = node;
	      if (after.R) {
	        after = after.R;
	        while (after.L) after = after.L;
	        after.L = node;
	      } else {
	        after.R = node;
	      }
	      parent = after;
	    } else if (this._) {
	      after = RedBlackFirst(this._);
	      node.P = null;
	      node.N = after;
	      after.P = after.L = node;
	      parent = after;
	    } else {
	      node.P = node.N = null;
	      this._ = node;
	      parent = null;
	    }
	    node.L = node.R = null;
	    node.U = parent;
	    node.C = true;

	    after = node;
	    while (parent && parent.C) {
	      grandpa = parent.U;
	      if (parent === grandpa.L) {
	        uncle = grandpa.R;
	        if (uncle && uncle.C) {
	          parent.C = uncle.C = false;
	          grandpa.C = true;
	          after = grandpa;
	        } else {
	          if (after === parent.R) {
	            RedBlackRotateLeft(this, parent);
	            after = parent;
	            parent = after.U;
	          }
	          parent.C = false;
	          grandpa.C = true;
	          RedBlackRotateRight(this, grandpa);
	        }
	      } else {
	        uncle = grandpa.L;
	        if (uncle && uncle.C) {
	          parent.C = uncle.C = false;
	          grandpa.C = true;
	          after = grandpa;
	        } else {
	          if (after === parent.L) {
	            RedBlackRotateRight(this, parent);
	            after = parent;
	            parent = after.U;
	          }
	          parent.C = false;
	          grandpa.C = true;
	          RedBlackRotateLeft(this, grandpa);
	        }
	      }
	      parent = after.U;
	    }
	    this._.C = false;
	  },

	  remove: function(node) {
	    if (node.N) node.N.P = node.P;
	    if (node.P) node.P.N = node.N;
	    node.N = node.P = null;

	    var parent = node.U,
	        sibling,
	        left = node.L,
	        right = node.R,
	        next,
	        red;

	    if (!left) next = right;
	    else if (!right) next = left;
	    else next = RedBlackFirst(right);

	    if (parent) {
	      if (parent.L === node) parent.L = next;
	      else parent.R = next;
	    } else {
	      this._ = next;
	    }

	    if (left && right) {
	      red = next.C;
	      next.C = node.C;
	      next.L = left;
	      left.U = next;
	      if (next !== right) {
	        parent = next.U;
	        next.U = node.U;
	        node = next.R;
	        parent.L = node;
	        next.R = right;
	        right.U = next;
	      } else {
	        next.U = parent;
	        parent = next;
	        node = next.R;
	      }
	    } else {
	      red = node.C;
	      node = next;
	    }

	    if (node) node.U = parent;
	    if (red) return;
	    if (node && node.C) { node.C = false; return; }

	    do {
	      if (node === this._) break;
	      if (node === parent.L) {
	        sibling = parent.R;
	        if (sibling.C) {
	          sibling.C = false;
	          parent.C = true;
	          RedBlackRotateLeft(this, parent);
	          sibling = parent.R;
	        }
	        if ((sibling.L && sibling.L.C)
	            || (sibling.R && sibling.R.C)) {
	          if (!sibling.R || !sibling.R.C) {
	            sibling.L.C = false;
	            sibling.C = true;
	            RedBlackRotateRight(this, sibling);
	            sibling = parent.R;
	          }
	          sibling.C = parent.C;
	          parent.C = sibling.R.C = false;
	          RedBlackRotateLeft(this, parent);
	          node = this._;
	          break;
	        }
	      } else {
	        sibling = parent.L;
	        if (sibling.C) {
	          sibling.C = false;
	          parent.C = true;
	          RedBlackRotateRight(this, parent);
	          sibling = parent.L;
	        }
	        if ((sibling.L && sibling.L.C)
	          || (sibling.R && sibling.R.C)) {
	          if (!sibling.L || !sibling.L.C) {
	            sibling.R.C = false;
	            sibling.C = true;
	            RedBlackRotateLeft(this, sibling);
	            sibling = parent.L;
	          }
	          sibling.C = parent.C;
	          parent.C = sibling.L.C = false;
	          RedBlackRotateRight(this, parent);
	          node = this._;
	          break;
	        }
	      }
	      sibling.C = true;
	      node = parent;
	      parent = parent.U;
	    } while (!node.C);

	    if (node) node.C = false;
	  }
	};

	function RedBlackRotateLeft(tree, node) {
	  var p = node,
	      q = node.R,
	      parent = p.U;

	  if (parent) {
	    if (parent.L === p) parent.L = q;
	    else parent.R = q;
	  } else {
	    tree._ = q;
	  }

	  q.U = parent;
	  p.U = q;
	  p.R = q.L;
	  if (p.R) p.R.U = p;
	  q.L = p;
	}

	function RedBlackRotateRight(tree, node) {
	  var p = node,
	      q = node.L,
	      parent = p.U;

	  if (parent) {
	    if (parent.L === p) parent.L = q;
	    else parent.R = q;
	  } else {
	    tree._ = q;
	  }

	  q.U = parent;
	  p.U = q;
	  p.L = q.R;
	  if (p.L) p.L.U = p;
	  q.R = p;
	}

	function RedBlackFirst(node) {
	  while (node.L) node = node.L;
	  return node;
	}

	function createEdge(left, right, v0, v1) {
	  var edge = [null, null],
	      index = edges.push(edge) - 1;
	  edge.left = left;
	  edge.right = right;
	  if (v0) setEdgeEnd(edge, left, right, v0);
	  if (v1) setEdgeEnd(edge, right, left, v1);
	  cells[left.index].halfedges.push(index);
	  cells[right.index].halfedges.push(index);
	  return edge;
	}

	function createBorderEdge(left, v0, v1) {
	  var edge = [v0, v1];
	  edge.left = left;
	  return edge;
	}

	function setEdgeEnd(edge, left, right, vertex) {
	  if (!edge[0] && !edge[1]) {
	    edge[0] = vertex;
	    edge.left = left;
	    edge.right = right;
	  } else if (edge.left === right) {
	    edge[1] = vertex;
	  } else {
	    edge[0] = vertex;
	  }
	}

	// Liang–Barsky line clipping.
	function clipEdge(edge, x0, y0, x1, y1) {
	  var a = edge[0],
	      b = edge[1],
	      ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;

	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

	  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
	  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
	  return true;
	}

	function connectEdge(edge, x0, y0, x1, y1) {
	  var v1 = edge[1];
	  if (v1) return true;

	  var v0 = edge[0],
	      left = edge.left,
	      right = edge.right,
	      lx = left[0],
	      ly = left[1],
	      rx = right[0],
	      ry = right[1],
	      fx = (lx + rx) / 2,
	      fy = (ly + ry) / 2,
	      fm,
	      fb;

	  if (ry === ly) {
	    if (fx < x0 || fx >= x1) return;
	    if (lx > rx) {
	      if (!v0) v0 = [fx, y0];
	      else if (v0[1] >= y1) return;
	      v1 = [fx, y1];
	    } else {
	      if (!v0) v0 = [fx, y1];
	      else if (v0[1] < y0) return;
	      v1 = [fx, y0];
	    }
	  } else {
	    fm = (lx - rx) / (ry - ly);
	    fb = fy - fm * fx;
	    if (fm < -1 || fm > 1) {
	      if (lx > rx) {
	        if (!v0) v0 = [(y0 - fb) / fm, y0];
	        else if (v0[1] >= y1) return;
	        v1 = [(y1 - fb) / fm, y1];
	      } else {
	        if (!v0) v0 = [(y1 - fb) / fm, y1];
	        else if (v0[1] < y0) return;
	        v1 = [(y0 - fb) / fm, y0];
	      }
	    } else {
	      if (ly < ry) {
	        if (!v0) v0 = [x0, fm * x0 + fb];
	        else if (v0[0] >= x1) return;
	        v1 = [x1, fm * x1 + fb];
	      } else {
	        if (!v0) v0 = [x1, fm * x1 + fb];
	        else if (v0[0] < x0) return;
	        v1 = [x0, fm * x0 + fb];
	      }
	    }
	  }

	  edge[0] = v0;
	  edge[1] = v1;
	  return true;
	}

	function clipEdges(x0, y0, x1, y1) {
	  var i = edges.length,
	      edge;

	  while (i--) {
	    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)
	        || !clipEdge(edge, x0, y0, x1, y1)
	        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$4
	            || Math.abs(edge[0][1] - edge[1][1]) > epsilon$4)) {
	      delete edges[i];
	    }
	  }
	}

	function createCell(site) {
	  return cells[site.index] = {
	    site: site,
	    halfedges: []
	  };
	}

	function cellHalfedgeAngle(cell, edge) {
	  var site = cell.site,
	      va = edge.left,
	      vb = edge.right;
	  if (site === vb) vb = va, va = site;
	  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
	  if (site === va) va = edge[1], vb = edge[0];
	  else va = edge[0], vb = edge[1];
	  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
	}

	function cellHalfedgeStart(cell, edge) {
	  return edge[+(edge.left !== cell.site)];
	}

	function cellHalfedgeEnd(cell, edge) {
	  return edge[+(edge.left === cell.site)];
	}

	function sortCellHalfedges() {
	  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
	    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
	      var index = new Array(m),
	          array = new Array(m);
	      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
	      index.sort(function(i, j) { return array[j] - array[i]; });
	      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];
	      for (j = 0; j < m; ++j) halfedges[j] = array[j];
	    }
	  }
	}

	function clipCells(x0, y0, x1, y1) {
	  var nCells = cells.length,
	      iCell,
	      cell,
	      site,
	      iHalfedge,
	      halfedges,
	      nHalfedges,
	      start,
	      startX,
	      startY,
	      end,
	      endX,
	      endY,
	      cover = true;

	  for (iCell = 0; iCell < nCells; ++iCell) {
	    if (cell = cells[iCell]) {
	      site = cell.site;
	      halfedges = cell.halfedges;
	      iHalfedge = halfedges.length;

	      // Remove any dangling clipped edges.
	      while (iHalfedge--) {
	        if (!edges[halfedges[iHalfedge]]) {
	          halfedges.splice(iHalfedge, 1);
	        }
	      }

	      // Insert any border edges as necessary.
	      iHalfedge = 0, nHalfedges = halfedges.length;
	      while (iHalfedge < nHalfedges) {
	        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
	        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
	        if (Math.abs(endX - startX) > epsilon$4 || Math.abs(endY - startY) > epsilon$4) {
	          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,
	              Math.abs(endX - x0) < epsilon$4 && y1 - endY > epsilon$4 ? [x0, Math.abs(startX - x0) < epsilon$4 ? startY : y1]
	              : Math.abs(endY - y1) < epsilon$4 && x1 - endX > epsilon$4 ? [Math.abs(startY - y1) < epsilon$4 ? startX : x1, y1]
	              : Math.abs(endX - x1) < epsilon$4 && endY - y0 > epsilon$4 ? [x1, Math.abs(startX - x1) < epsilon$4 ? startY : y0]
	              : Math.abs(endY - y0) < epsilon$4 && endX - x0 > epsilon$4 ? [Math.abs(startY - y0) < epsilon$4 ? startX : x0, y0]
	              : null)) - 1);
	          ++nHalfedges;
	        }
	      }

	      if (nHalfedges) cover = false;
	    }
	  }

	  // If there weren’t any edges, have the closest site cover the extent.
	  // It doesn’t matter which corner of the extent we measure!
	  if (cover) {
	    var dx, dy, d2, dc = Infinity;

	    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
	      if (cell = cells[iCell]) {
	        site = cell.site;
	        dx = site[0] - x0;
	        dy = site[1] - y0;
	        d2 = dx * dx + dy * dy;
	        if (d2 < dc) dc = d2, cover = cell;
	      }
	    }

	    if (cover) {
	      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];
	      cover.halfedges.push(
	        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,
	        edges.push(createBorderEdge(site, v01, v11)) - 1,
	        edges.push(createBorderEdge(site, v11, v10)) - 1,
	        edges.push(createBorderEdge(site, v10, v00)) - 1
	      );
	    }
	  }

	  // Lastly delete any cells with no edges; these were entirely clipped.
	  for (iCell = 0; iCell < nCells; ++iCell) {
	    if (cell = cells[iCell]) {
	      if (!cell.halfedges.length) {
	        delete cells[iCell];
	      }
	    }
	  }
	}

	var circlePool = [];

	var firstCircle;

	function Circle() {
	  RedBlackNode(this);
	  this.x =
	  this.y =
	  this.arc =
	  this.site =
	  this.cy = null;
	}

	function attachCircle(arc) {
	  var lArc = arc.P,
	      rArc = arc.N;

	  if (!lArc || !rArc) return;

	  var lSite = lArc.site,
	      cSite = arc.site,
	      rSite = rArc.site;

	  if (lSite === rSite) return;

	  var bx = cSite[0],
	      by = cSite[1],
	      ax = lSite[0] - bx,
	      ay = lSite[1] - by,
	      cx = rSite[0] - bx,
	      cy = rSite[1] - by;

	  var d = 2 * (ax * cy - ay * cx);
	  if (d >= -epsilon2$2) return;

	  var ha = ax * ax + ay * ay,
	      hc = cx * cx + cy * cy,
	      x = (cy * ha - ay * hc) / d,
	      y = (ax * hc - cx * ha) / d;

	  var circle = circlePool.pop() || new Circle;
	  circle.arc = arc;
	  circle.site = cSite;
	  circle.x = x + bx;
	  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

	  arc.circle = circle;

	  var before = null,
	      node = circles._;

	  while (node) {
	    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {
	      if (node.L) node = node.L;
	      else { before = node.P; break; }
	    } else {
	      if (node.R) node = node.R;
	      else { before = node; break; }
	    }
	  }

	  circles.insert(before, circle);
	  if (!before) firstCircle = circle;
	}

	function detachCircle(arc) {
	  var circle = arc.circle;
	  if (circle) {
	    if (!circle.P) firstCircle = circle.N;
	    circles.remove(circle);
	    circlePool.push(circle);
	    RedBlackNode(circle);
	    arc.circle = null;
	  }
	}

	var beachPool = [];

	function Beach() {
	  RedBlackNode(this);
	  this.edge =
	  this.site =
	  this.circle = null;
	}

	function createBeach(site) {
	  var beach = beachPool.pop() || new Beach;
	  beach.site = site;
	  return beach;
	}

	function detachBeach(beach) {
	  detachCircle(beach);
	  beaches.remove(beach);
	  beachPool.push(beach);
	  RedBlackNode(beach);
	}

	function removeBeach(beach) {
	  var circle = beach.circle,
	      x = circle.x,
	      y = circle.cy,
	      vertex = [x, y],
	      previous = beach.P,
	      next = beach.N,
	      disappearing = [beach];

	  detachBeach(beach);

	  var lArc = previous;
	  while (lArc.circle
	      && Math.abs(x - lArc.circle.x) < epsilon$4
	      && Math.abs(y - lArc.circle.cy) < epsilon$4) {
	    previous = lArc.P;
	    disappearing.unshift(lArc);
	    detachBeach(lArc);
	    lArc = previous;
	  }

	  disappearing.unshift(lArc);
	  detachCircle(lArc);

	  var rArc = next;
	  while (rArc.circle
	      && Math.abs(x - rArc.circle.x) < epsilon$4
	      && Math.abs(y - rArc.circle.cy) < epsilon$4) {
	    next = rArc.N;
	    disappearing.push(rArc);
	    detachBeach(rArc);
	    rArc = next;
	  }

	  disappearing.push(rArc);
	  detachCircle(rArc);

	  var nArcs = disappearing.length,
	      iArc;
	  for (iArc = 1; iArc < nArcs; ++iArc) {
	    rArc = disappearing[iArc];
	    lArc = disappearing[iArc - 1];
	    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	  }

	  lArc = disappearing[0];
	  rArc = disappearing[nArcs - 1];
	  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);

	  attachCircle(lArc);
	  attachCircle(rArc);
	}

	function addBeach(site) {
	  var x = site[0],
	      directrix = site[1],
	      lArc,
	      rArc,
	      dxl,
	      dxr,
	      node = beaches._;

	  while (node) {
	    dxl = leftBreakPoint(node, directrix) - x;
	    if (dxl > epsilon$4) node = node.L; else {
	      dxr = x - rightBreakPoint(node, directrix);
	      if (dxr > epsilon$4) {
	        if (!node.R) {
	          lArc = node;
	          break;
	        }
	        node = node.R;
	      } else {
	        if (dxl > -epsilon$4) {
	          lArc = node.P;
	          rArc = node;
	        } else if (dxr > -epsilon$4) {
	          lArc = node;
	          rArc = node.N;
	        } else {
	          lArc = rArc = node;
	        }
	        break;
	      }
	    }
	  }

	  createCell(site);
	  var newArc = createBeach(site);
	  beaches.insert(lArc, newArc);

	  if (!lArc && !rArc) return;

	  if (lArc === rArc) {
	    detachCircle(lArc);
	    rArc = createBeach(lArc.site);
	    beaches.insert(newArc, rArc);
	    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
	    attachCircle(lArc);
	    attachCircle(rArc);
	    return;
	  }

	  if (!rArc) { // && lArc
	    newArc.edge = createEdge(lArc.site, newArc.site);
	    return;
	  }

	  // else lArc !== rArc
	  detachCircle(lArc);
	  detachCircle(rArc);

	  var lSite = lArc.site,
	      ax = lSite[0],
	      ay = lSite[1],
	      bx = site[0] - ax,
	      by = site[1] - ay,
	      rSite = rArc.site,
	      cx = rSite[0] - ax,
	      cy = rSite[1] - ay,
	      d = 2 * (bx * cy - by * cx),
	      hb = bx * bx + by * by,
	      hc = cx * cx + cy * cy,
	      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];

	  setEdgeEnd(rArc.edge, lSite, rSite, vertex);
	  newArc.edge = createEdge(lSite, site, null, vertex);
	  rArc.edge = createEdge(site, rSite, null, vertex);
	  attachCircle(lArc);
	  attachCircle(rArc);
	}

	function leftBreakPoint(arc, directrix) {
	  var site = arc.site,
	      rfocx = site[0],
	      rfocy = site[1],
	      pby2 = rfocy - directrix;

	  if (!pby2) return rfocx;

	  var lArc = arc.P;
	  if (!lArc) return -Infinity;

	  site = lArc.site;
	  var lfocx = site[0],
	      lfocy = site[1],
	      plby2 = lfocy - directrix;

	  if (!plby2) return lfocx;

	  var hl = lfocx - rfocx,
	      aby2 = 1 / pby2 - 1 / plby2,
	      b = hl / plby2;

	  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;

	  return (rfocx + lfocx) / 2;
	}

	function rightBreakPoint(arc, directrix) {
	  var rArc = arc.N;
	  if (rArc) return leftBreakPoint(rArc, directrix);
	  var site = arc.site;
	  return site[1] === directrix ? site[0] : Infinity;
	}

	var epsilon$4 = 1e-6;
	var epsilon2$2 = 1e-12;
	var beaches;
	var cells;
	var circles;
	var edges;

	function triangleArea(a, b, c) {
	  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
	}

	function lexicographic(a, b) {
	  return b[1] - a[1]
	      || b[0] - a[0];
	}

	function Diagram(sites, extent) {
	  var site = sites.sort(lexicographic).pop(),
	      x,
	      y,
	      circle;

	  edges = [];
	  cells = new Array(sites.length);
	  beaches = new RedBlackTree;
	  circles = new RedBlackTree;

	  while (true) {
	    circle = firstCircle;
	    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {
	      if (site[0] !== x || site[1] !== y) {
	        addBeach(site);
	        x = site[0], y = site[1];
	      }
	      site = sites.pop();
	    } else if (circle) {
	      removeBeach(circle.arc);
	    } else {
	      break;
	    }
	  }

	  sortCellHalfedges();

	  if (extent) {
	    var x0 = +extent[0][0],
	        y0 = +extent[0][1],
	        x1 = +extent[1][0],
	        y1 = +extent[1][1];
	    clipEdges(x0, y0, x1, y1);
	    clipCells(x0, y0, x1, y1);
	  }

	  this.edges = edges;
	  this.cells = cells;

	  beaches =
	  circles =
	  edges =
	  cells = null;
	}

	Diagram.prototype = {
	  constructor: Diagram,

	  polygons: function() {
	    var edges = this.edges;

	    return this.cells.map(function(cell) {
	      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });
	      polygon.data = cell.site.data;
	      return polygon;
	    });
	  },

	  triangles: function() {
	    var triangles = [],
	        edges = this.edges;

	    this.cells.forEach(function(cell, i) {
	      if (!(m = (halfedges = cell.halfedges).length)) return;
	      var site = cell.site,
	          halfedges,
	          j = -1,
	          m,
	          s0,
	          e1 = edges[halfedges[m - 1]],
	          s1 = e1.left === site ? e1.right : e1.left;

	      while (++j < m) {
	        s0 = s1;
	        e1 = edges[halfedges[j]];
	        s1 = e1.left === site ? e1.right : e1.left;
	        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
	          triangles.push([site.data, s0.data, s1.data]);
	        }
	      }
	    });

	    return triangles;
	  },

	  links: function() {
	    return this.edges.filter(function(edge) {
	      return edge.right;
	    }).map(function(edge) {
	      return {
	        source: edge.left.data,
	        target: edge.right.data
	      };
	    });
	  },

	  find: function(x, y, radius) {
	    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;

	    // Use the previously-found cell, or start with an arbitrary one.
	    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;
	    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;

	    // Traverse the half-edges to find a closer cell, if any.
	    do {
	      cell = that.cells[i0 = i1], i1 = null;
	      cell.halfedges.forEach(function(e) {
	        var edge = that.edges[e], v = edge.left;
	        if ((v === cell.site || !v) && !(v = edge.right)) return;
	        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;
	        if (v2 < d2) d2 = v2, i1 = v.index;
	      });
	    } while (i1 !== null);

	    that._found = i0;

	    return radius == null || d2 <= radius * radius ? cell.site : null;
	  }
	};

	var voronoi = function() {
	  var x$$1 = x$4,
	      y$$1 = y$4,
	      extent = null;

	  function voronoi(data) {
	    return new Diagram(data.map(function(d, i) {
	      var s = [Math.round(x$$1(d, i, data) / epsilon$4) * epsilon$4, Math.round(y$$1(d, i, data) / epsilon$4) * epsilon$4];
	      s.index = i;
	      s.data = d;
	      return s;
	    }), extent);
	  }

	  voronoi.polygons = function(data) {
	    return voronoi(data).polygons();
	  };

	  voronoi.links = function(data) {
	    return voronoi(data).links();
	  };

	  voronoi.triangles = function(data) {
	    return voronoi(data).triangles();
	  };

	  voronoi.x = function(_) {
	    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant$11(+_), voronoi) : x$$1;
	  };

	  voronoi.y = function(_) {
	    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant$11(+_), voronoi) : y$$1;
	  };

	  voronoi.extent = function(_) {
	    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
	  };

	  voronoi.size = function(_) {
	    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
	  };

	  return voronoi;
	};

	var constant$12 = function(x) {
	  return function() {
	    return x;
	  };
	};

	function ZoomEvent(target, type, transform) {
	  this.target = target;
	  this.type = type;
	  this.transform = transform;
	}

	function Transform(k, x, y) {
	  this.k = k;
	  this.x = x;
	  this.y = y;
	}

	Transform.prototype = {
	  constructor: Transform,
	  scale: function(k) {
	    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
	  },
	  translate: function(x, y) {
	    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
	  },
	  apply: function(point) {
	    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
	  },
	  applyX: function(x) {
	    return x * this.k + this.x;
	  },
	  applyY: function(y) {
	    return y * this.k + this.y;
	  },
	  invert: function(location) {
	    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
	  },
	  invertX: function(x) {
	    return (x - this.x) / this.k;
	  },
	  invertY: function(y) {
	    return (y - this.y) / this.k;
	  },
	  rescaleX: function(x) {
	    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
	  },
	  rescaleY: function(y) {
	    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
	  },
	  toString: function() {
	    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
	  }
	};

	var identity$8 = new Transform(1, 0, 0);

	transform$1.prototype = Transform.prototype;

	function transform$1(node) {
	  return node.__zoom || identity$8;
	}

	function nopropagation$2() {
	  exports.event.stopImmediatePropagation();
	}

	var noevent$2 = function() {
	  exports.event.preventDefault();
	  exports.event.stopImmediatePropagation();
	};

	// Ignore right-click, since that should open the context menu.
	function defaultFilter$2() {
	  return !exports.event.button;
	}

	function defaultExtent$1() {
	  var e = this, w, h;
	  if (e instanceof SVGElement) {
	    e = e.ownerSVGElement || e;
	    w = e.width.baseVal.value;
	    h = e.height.baseVal.value;
	  } else {
	    w = e.clientWidth;
	    h = e.clientHeight;
	  }
	  return [[0, 0], [w, h]];
	}

	function defaultTransform() {
	  return this.__zoom || identity$8;
	}

	var zoom = function() {
	  var filter = defaultFilter$2,
	      extent = defaultExtent$1,
	      k0 = 0,
	      k1 = Infinity,
	      x0 = -k1,
	      x1 = k1,
	      y0 = x0,
	      y1 = x1,
	      duration = 250,
	      interpolate$$1 = interpolateZoom,
	      gestures = [],
	      listeners = dispatch("start", "zoom", "end"),
	      touchstarting,
	      touchending,
	      touchDelay = 500,
	      wheelDelay = 150;

	  function zoom(selection$$1) {
	    selection$$1
	        .on("wheel.zoom", wheeled)
	        .on("mousedown.zoom", mousedowned)
	        .on("dblclick.zoom", dblclicked)
	        .on("touchstart.zoom", touchstarted)
	        .on("touchmove.zoom", touchmoved)
	        .on("touchend.zoom touchcancel.zoom", touchended)
	        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
	        .property("__zoom", defaultTransform);
	  }

	  zoom.transform = function(collection, transform) {
	    var selection$$1 = collection.selection ? collection.selection() : collection;
	    selection$$1.property("__zoom", defaultTransform);
	    if (collection !== selection$$1) {
	      schedule(collection, transform);
	    } else {
	      selection$$1.interrupt().each(function() {
	        gesture(this, arguments)
	            .start()
	            .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)
	            .end();
	      });
	    }
	  };

	  zoom.scaleBy = function(selection$$1, k) {
	    zoom.scaleTo(selection$$1, function() {
	      var k0 = this.__zoom.k,
	          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
	      return k0 * k1;
	    });
	  };

	  zoom.scaleTo = function(selection$$1, k) {
	    zoom.transform(selection$$1, function() {
	      var e = extent.apply(this, arguments),
	          t0 = this.__zoom,
	          p0 = centroid(e),
	          p1 = t0.invert(p0),
	          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
	      return constrain(translate(scale(t0, k1), p0, p1), e);
	    });
	  };

	  zoom.translateBy = function(selection$$1, x, y) {
	    zoom.transform(selection$$1, function() {
	      return constrain(this.__zoom.translate(
	        typeof x === "function" ? x.apply(this, arguments) : x,
	        typeof y === "function" ? y.apply(this, arguments) : y
	      ), extent.apply(this, arguments));
	    });
	  };

	  function scale(transform, k) {
	    k = Math.max(k0, Math.min(k1, k));
	    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
	  }

	  function translate(transform, p0, p1) {
	    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
	    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
	  }

	  function constrain(transform, extent) {
	    var dx0 = transform.invertX(extent[0][0]) - x0,
	        dx1 = transform.invertX(extent[1][0]) - x1,
	        dy0 = transform.invertY(extent[0][1]) - y0,
	        dy1 = transform.invertY(extent[1][1]) - y1;
	    return transform.translate(
	      dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
	      dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
	    );
	  }

	  function centroid(extent) {
	    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
	  }

	  function schedule(transition$$1, transform, center) {
	    transition$$1
	        .on("start.zoom", function() { gesture(this, arguments).start(); })
	        .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).end(); })
	        .tween("zoom", function() {
	          var that = this,
	              args = arguments,
	              g = gesture(that, args),
	              e = extent.apply(that, args),
	              p = center || centroid(e),
	              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
	              a = that.__zoom,
	              b = typeof transform === "function" ? transform.apply(that, args) : transform,
	              i = interpolate$$1(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
	          return function(t) {
	            if (t === 1) t = b; // Avoid rounding error on end.
	            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
	            g.zoom(null, t);
	          };
	        });
	  }

	  function gesture(that, args) {
	    for (var i = 0, n = gestures.length, g; i < n; ++i) {
	      if ((g = gestures[i]).that === that) {
	        return g;
	      }
	    }
	    return new Gesture(that, args);
	  }

	  function Gesture(that, args) {
	    this.that = that;
	    this.args = args;
	    this.index = -1;
	    this.active = 0;
	    this.extent = extent.apply(that, args);
	  }

	  Gesture.prototype = {
	    start: function() {
	      if (++this.active === 1) {
	        this.index = gestures.push(this) - 1;
	        this.emit("start");
	      }
	      return this;
	    },
	    zoom: function(key, transform) {
	      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
	      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
	      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
	      this.that.__zoom = transform;
	      this.emit("zoom");
	      return this;
	    },
	    end: function() {
	      if (--this.active === 0) {
	        gestures.splice(this.index, 1);
	        this.index = -1;
	        this.emit("end");
	      }
	      return this;
	    },
	    emit: function(type) {
	      customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
	    }
	  };

	  function wheeled() {
	    if (!filter.apply(this, arguments)) return;
	    var g = gesture(this, arguments),
	        t = this.__zoom,
	        k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500))),
	        p = mouse(this);

	    // If the mouse is in the same location as before, reuse it.
	    // If there were recent wheel events, reset the wheel idle timeout.
	    if (g.wheel) {
	      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
	        g.mouse[1] = t.invert(g.mouse[0] = p);
	      }
	      clearTimeout(g.wheel);
	    }

	    // If this wheel event won’t trigger a transform change, ignore it.
	    else if (t.k === k) return;

	    // Otherwise, capture the mouse point and location at the start.
	    else {
	      g.mouse = [p, t.invert(p)];
	      interrupt(this);
	      g.start();
	    }

	    noevent$2();
	    g.wheel = setTimeout(wheelidled, wheelDelay);
	    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));

	    function wheelidled() {
	      g.wheel = null;
	      g.end();
	    }
	  }

	  function mousedowned() {
	    if (touchending || !filter.apply(this, arguments)) return;
	    var g = gesture(this, arguments),
	        v = select(exports.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
	        p = mouse(this);

	    dragDisable(exports.event.view);
	    nopropagation$2();
	    g.mouse = [p, this.__zoom.invert(p)];
	    interrupt(this);
	    g.start();

	    function mousemoved() {
	      noevent$2();
	      g.moved = true;
	      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent));
	    }

	    function mouseupped() {
	      v.on("mousemove.zoom mouseup.zoom", null);
	      yesdrag(exports.event.view, g.moved);
	      noevent$2();
	      g.end();
	    }
	  }

	  function dblclicked() {
	    if (!filter.apply(this, arguments)) return;
	    var t0 = this.__zoom,
	        p0 = mouse(this),
	        p1 = t0.invert(p0),
	        k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2),
	        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));

	    noevent$2();
	    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);
	    else select(this).call(zoom.transform, t1);
	  }

	  function touchstarted() {
	    if (!filter.apply(this, arguments)) return;
	    var g = gesture(this, arguments),
	        touches$$1 = exports.event.changedTouches,
	        started,
	        n = touches$$1.length, i, t, p;

	    nopropagation$2();
	    for (i = 0; i < n; ++i) {
	      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
	      p = [p, this.__zoom.invert(p), t.identifier];
	      if (!g.touch0) g.touch0 = p, started = true;
	      else if (!g.touch1) g.touch1 = p;
	    }

	    // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.
	    if (touchstarting) {
	      touchstarting = clearTimeout(touchstarting);
	      if (!g.touch1) {
	        g.end();
	        p = select(this).on("dblclick.zoom");
	        if (p) p.apply(this, arguments);
	        return;
	      }
	    }

	    if (started) {
	      touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
	      interrupt(this);
	      g.start();
	    }
	  }

	  function touchmoved() {
	    var g = gesture(this, arguments),
	        touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, t, p, l;

	    noevent$2();
	    if (touchstarting) touchstarting = clearTimeout(touchstarting);
	    for (i = 0; i < n; ++i) {
	      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
	      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
	      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
	    }
	    t = g.that.__zoom;
	    if (g.touch1) {
	      var p0 = g.touch0[0], l0 = g.touch0[1],
	          p1 = g.touch1[0], l1 = g.touch1[1],
	          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
	          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
	      t = scale(t, Math.sqrt(dp / dl));
	      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
	      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
	    }
	    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
	    else return;
	    g.zoom("touch", constrain(translate(t, p, l), g.extent));
	  }

	  function touchended() {
	    var g = gesture(this, arguments),
	        touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, t;

	    nopropagation$2();
	    if (touchending) clearTimeout(touchending);
	    touchending = setTimeout(function() { touchending = null; }, touchDelay);
	    for (i = 0; i < n; ++i) {
	      t = touches$$1[i];
	      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
	      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
	    }
	    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
	    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
	    else g.end();
	  }

	  zoom.filter = function(_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$12(!!_), zoom) : filter;
	  };

	  zoom.extent = function(_) {
	    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$12([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
	  };

	  zoom.scaleExtent = function(_) {
	    return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [k0, k1];
	  };

	  zoom.translateExtent = function(_) {
	    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [[x0, y0], [x1, y1]];
	  };

	  zoom.duration = function(_) {
	    return arguments.length ? (duration = +_, zoom) : duration;
	  };

	  zoom.interpolate = function(_) {
	    return arguments.length ? (interpolate$$1 = _, zoom) : interpolate$$1;
	  };

	  zoom.on = function() {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? zoom : value;
	  };

	  return zoom;
	};

	exports.version = version;
	exports.bisect = bisectRight;
	exports.bisectRight = bisectRight;
	exports.bisectLeft = bisectLeft;
	exports.ascending = ascending;
	exports.bisector = bisector;
	exports.cross = cross;
	exports.descending = descending;
	exports.deviation = deviation;
	exports.extent = extent;
	exports.histogram = histogram;
	exports.thresholdFreedmanDiaconis = freedmanDiaconis;
	exports.thresholdScott = scott;
	exports.thresholdSturges = sturges;
	exports.max = max;
	exports.mean = mean;
	exports.median = median;
	exports.merge = merge;
	exports.min = min;
	exports.pairs = pairs;
	exports.permute = permute;
	exports.quantile = threshold;
	exports.range = sequence;
	exports.scan = scan;
	exports.shuffle = shuffle;
	exports.sum = sum;
	exports.ticks = ticks;
	exports.tickStep = tickStep;
	exports.transpose = transpose;
	exports.variance = variance;
	exports.zip = zip;
	exports.axisTop = axisTop;
	exports.axisRight = axisRight;
	exports.axisBottom = axisBottom;
	exports.axisLeft = axisLeft;
	exports.brush = brush;
	exports.brushX = brushX;
	exports.brushY = brushY;
	exports.brushSelection = brushSelection;
	exports.chord = chord;
	exports.ribbon = ribbon;
	exports.nest = nest;
	exports.set = set$2;
	exports.map = map$1;
	exports.keys = keys;
	exports.values = values;
	exports.entries = entries;
	exports.color = color;
	exports.rgb = rgb;
	exports.hsl = hsl;
	exports.lab = lab;
	exports.hcl = hcl;
	exports.cubehelix = cubehelix;
	exports.dispatch = dispatch;
	exports.drag = drag;
	exports.dragDisable = dragDisable;
	exports.dragEnable = yesdrag;
	exports.dsvFormat = dsv;
	exports.csvParse = csvParse;
	exports.csvParseRows = csvParseRows;
	exports.csvFormat = csvFormat;
	exports.csvFormatRows = csvFormatRows;
	exports.tsvParse = tsvParse;
	exports.tsvParseRows = tsvParseRows;
	exports.tsvFormat = tsvFormat;
	exports.tsvFormatRows = tsvFormatRows;
	exports.easeLinear = linear$1;
	exports.easeQuad = quadInOut;
	exports.easeQuadIn = quadIn;
	exports.easeQuadOut = quadOut;
	exports.easeQuadInOut = quadInOut;
	exports.easeCubic = cubicInOut;
	exports.easeCubicIn = cubicIn;
	exports.easeCubicOut = cubicOut;
	exports.easeCubicInOut = cubicInOut;
	exports.easePoly = polyInOut;
	exports.easePolyIn = polyIn;
	exports.easePolyOut = polyOut;
	exports.easePolyInOut = polyInOut;
	exports.easeSin = sinInOut;
	exports.easeSinIn = sinIn;
	exports.easeSinOut = sinOut;
	exports.easeSinInOut = sinInOut;
	exports.easeExp = expInOut;
	exports.easeExpIn = expIn;
	exports.easeExpOut = expOut;
	exports.easeExpInOut = expInOut;
	exports.easeCircle = circleInOut;
	exports.easeCircleIn = circleIn;
	exports.easeCircleOut = circleOut;
	exports.easeCircleInOut = circleInOut;
	exports.easeBounce = bounceOut;
	exports.easeBounceIn = bounceIn;
	exports.easeBounceOut = bounceOut;
	exports.easeBounceInOut = bounceInOut;
	exports.easeBack = backInOut;
	exports.easeBackIn = backIn;
	exports.easeBackOut = backOut;
	exports.easeBackInOut = backInOut;
	exports.easeElastic = elasticOut;
	exports.easeElasticIn = elasticIn;
	exports.easeElasticOut = elasticOut;
	exports.easeElasticInOut = elasticInOut;
	exports.forceCenter = center$1;
	exports.forceCollide = collide;
	exports.forceLink = link;
	exports.forceManyBody = manyBody;
	exports.forceSimulation = simulation;
	exports.forceX = x$2;
	exports.forceY = y$2;
	exports.formatDefaultLocale = defaultLocale;
	exports.formatLocale = formatLocale;
	exports.formatSpecifier = formatSpecifier;
	exports.precisionFixed = precisionFixed;
	exports.precisionPrefix = precisionPrefix;
	exports.precisionRound = precisionRound;
	exports.geoArea = area;
	exports.geoBounds = bounds;
	exports.geoCentroid = centroid;
	exports.geoCircle = circle;
	exports.geoClipExtent = extent$1;
	exports.geoContains = contains;
	exports.geoDistance = distance;
	exports.geoGraticule = graticule;
	exports.geoGraticule10 = graticule10;
	exports.geoInterpolate = interpolate$1;
	exports.geoLength = length$1;
	exports.geoPath = index$1;
	exports.geoAlbers = albers;
	exports.geoAlbersUsa = albersUsa;
	exports.geoAzimuthalEqualArea = azimuthalEqualArea;
	exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
	exports.geoAzimuthalEquidistant = azimuthalEquidistant;
	exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
	exports.geoConicConformal = conicConformal;
	exports.geoConicConformalRaw = conicConformalRaw;
	exports.geoConicEqualArea = conicEqualArea;
	exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
	exports.geoConicEquidistant = conicEquidistant;
	exports.geoConicEquidistantRaw = conicEquidistantRaw;
	exports.geoEquirectangular = equirectangular;
	exports.geoEquirectangularRaw = equirectangularRaw;
	exports.geoGnomonic = gnomonic;
	exports.geoGnomonicRaw = gnomonicRaw;
	exports.geoIdentity = identity$5;
	exports.geoProjection = projection;
	exports.geoProjectionMutator = projectionMutator;
	exports.geoMercator = mercator;
	exports.geoMercatorRaw = mercatorRaw;
	exports.geoOrthographic = orthographic;
	exports.geoOrthographicRaw = orthographicRaw;
	exports.geoStereographic = stereographic;
	exports.geoStereographicRaw = stereographicRaw;
	exports.geoTransverseMercator = transverseMercator;
	exports.geoTransverseMercatorRaw = transverseMercatorRaw;
	exports.geoRotation = rotation;
	exports.geoStream = geoStream;
	exports.geoTransform = transform;
	exports.cluster = cluster;
	exports.hierarchy = hierarchy;
	exports.pack = index$2;
	exports.packSiblings = siblings;
	exports.packEnclose = enclose;
	exports.partition = partition;
	exports.stratify = stratify;
	exports.tree = tree;
	exports.treemap = index$3;
	exports.treemapBinary = binary;
	exports.treemapDice = treemapDice;
	exports.treemapSlice = treemapSlice;
	exports.treemapSliceDice = sliceDice;
	exports.treemapSquarify = squarify;
	exports.treemapResquarify = resquarify;
	exports.interpolate = interpolateValue;
	exports.interpolateArray = array$1;
	exports.interpolateBasis = basis$1;
	exports.interpolateBasisClosed = basisClosed;
	exports.interpolateDate = date;
	exports.interpolateNumber = reinterpolate;
	exports.interpolateObject = object;
	exports.interpolateRound = interpolateRound;
	exports.interpolateString = interpolateString;
	exports.interpolateTransformCss = interpolateTransformCss;
	exports.interpolateTransformSvg = interpolateTransformSvg;
	exports.interpolateZoom = interpolateZoom;
	exports.interpolateRgb = interpolateRgb;
	exports.interpolateRgbBasis = rgbBasis;
	exports.interpolateRgbBasisClosed = rgbBasisClosed;
	exports.interpolateHsl = hsl$2;
	exports.interpolateHslLong = hslLong;
	exports.interpolateLab = lab$1;
	exports.interpolateHcl = hcl$2;
	exports.interpolateHclLong = hclLong;
	exports.interpolateCubehelix = cubehelix$2;
	exports.interpolateCubehelixLong = cubehelixLong;
	exports.quantize = quantize;
	exports.path = path;
	exports.polygonArea = area$1;
	exports.polygonCentroid = centroid$1;
	exports.polygonHull = hull;
	exports.polygonContains = contains$1;
	exports.polygonLength = length$2;
	exports.quadtree = quadtree;
	exports.queue = queue;
	exports.randomUniform = uniform;
	exports.randomNormal = normal;
	exports.randomLogNormal = logNormal;
	exports.randomBates = bates;
	exports.randomIrwinHall = irwinHall;
	exports.randomExponential = exponential$1;
	exports.request = request;
	exports.html = html;
	exports.json = json;
	exports.text = text;
	exports.xml = xml;
	exports.csv = csv$1;
	exports.tsv = tsv$1;
	exports.scaleBand = band;
	exports.scalePoint = point$1;
	exports.scaleIdentity = identity$6;
	exports.scaleLinear = linear$2;
	exports.scaleLog = log$1;
	exports.scaleOrdinal = ordinal;
	exports.scaleImplicit = implicit;
	exports.scalePow = pow$1;
	exports.scaleSqrt = sqrt$1;
	exports.scaleQuantile = quantile$$1;
	exports.scaleQuantize = quantize$1;
	exports.scaleThreshold = threshold$1;
	exports.scaleTime = time;
	exports.scaleUtc = utcTime;
	exports.schemeCategory10 = category10;
	exports.schemeCategory20b = category20b;
	exports.schemeCategory20c = category20c;
	exports.schemeCategory20 = category20;
	exports.interpolateCubehelixDefault = cubehelix$3;
	exports.interpolateRainbow = rainbow$1;
	exports.interpolateWarm = warm;
	exports.interpolateCool = cool;
	exports.interpolateViridis = viridis;
	exports.interpolateMagma = magma;
	exports.interpolateInferno = inferno;
	exports.interpolatePlasma = plasma;
	exports.scaleSequential = sequential;
	exports.creator = creator;
	exports.local = local$1;
	exports.matcher = matcher$1;
	exports.mouse = mouse;
	exports.namespace = namespace;
	exports.namespaces = namespaces;
	exports.select = select;
	exports.selectAll = selectAll;
	exports.selection = selection;
	exports.selector = selector;
	exports.selectorAll = selectorAll;
	exports.touch = touch;
	exports.touches = touches;
	exports.window = window;
	exports.customEvent = customEvent;
	exports.arc = arc;
	exports.area = area$2;
	exports.line = line;
	exports.pie = pie;
	exports.radialArea = radialArea;
	exports.radialLine = radialLine$1;
	exports.symbol = symbol;
	exports.symbols = symbols;
	exports.symbolCircle = circle$2;
	exports.symbolCross = cross$2;
	exports.symbolDiamond = diamond;
	exports.symbolSquare = square;
	exports.symbolStar = star;
	exports.symbolTriangle = triangle;
	exports.symbolWye = wye;
	exports.curveBasisClosed = basisClosed$1;
	exports.curveBasisOpen = basisOpen;
	exports.curveBasis = basis$2;
	exports.curveBundle = bundle;
	exports.curveCardinalClosed = cardinalClosed;
	exports.curveCardinalOpen = cardinalOpen;
	exports.curveCardinal = cardinal;
	exports.curveCatmullRomClosed = catmullRomClosed;
	exports.curveCatmullRomOpen = catmullRomOpen;
	exports.curveCatmullRom = catmullRom;
	exports.curveLinearClosed = linearClosed;
	exports.curveLinear = curveLinear;
	exports.curveMonotoneX = monotoneX;
	exports.curveMonotoneY = monotoneY;
	exports.curveNatural = natural;
	exports.curveStep = step;
	exports.curveStepAfter = stepAfter;
	exports.curveStepBefore = stepBefore;
	exports.stack = stack;
	exports.stackOffsetExpand = expand;
	exports.stackOffsetNone = none$1;
	exports.stackOffsetSilhouette = silhouette;
	exports.stackOffsetWiggle = wiggle;
	exports.stackOrderAscending = ascending$2;
	exports.stackOrderDescending = descending$2;
	exports.stackOrderInsideOut = insideOut;
	exports.stackOrderNone = none$2;
	exports.stackOrderReverse = reverse;
	exports.timeInterval = newInterval;
	exports.timeMillisecond = millisecond;
	exports.timeMilliseconds = milliseconds;
	exports.utcMillisecond = millisecond;
	exports.utcMilliseconds = milliseconds;
	exports.timeSecond = second;
	exports.timeSeconds = seconds;
	exports.utcSecond = second;
	exports.utcSeconds = seconds;
	exports.timeMinute = minute;
	exports.timeMinutes = minutes;
	exports.timeHour = hour;
	exports.timeHours = hours;
	exports.timeDay = day;
	exports.timeDays = days;
	exports.timeWeek = sunday;
	exports.timeWeeks = sundays;
	exports.timeSunday = sunday;
	exports.timeSundays = sundays;
	exports.timeMonday = monday;
	exports.timeMondays = mondays;
	exports.timeTuesday = tuesday;
	exports.timeTuesdays = tuesdays;
	exports.timeWednesday = wednesday;
	exports.timeWednesdays = wednesdays;
	exports.timeThursday = thursday;
	exports.timeThursdays = thursdays;
	exports.timeFriday = friday;
	exports.timeFridays = fridays;
	exports.timeSaturday = saturday;
	exports.timeSaturdays = saturdays;
	exports.timeMonth = month;
	exports.timeMonths = months;
	exports.timeYear = year;
	exports.timeYears = years;
	exports.utcMinute = utcMinute;
	exports.utcMinutes = utcMinutes;
	exports.utcHour = utcHour;
	exports.utcHours = utcHours;
	exports.utcDay = utcDay;
	exports.utcDays = utcDays;
	exports.utcWeek = utcSunday;
	exports.utcWeeks = utcSundays;
	exports.utcSunday = utcSunday;
	exports.utcSundays = utcSundays;
	exports.utcMonday = utcMonday;
	exports.utcMondays = utcMondays;
	exports.utcTuesday = utcTuesday;
	exports.utcTuesdays = utcTuesdays;
	exports.utcWednesday = utcWednesday;
	exports.utcWednesdays = utcWednesdays;
	exports.utcThursday = utcThursday;
	exports.utcThursdays = utcThursdays;
	exports.utcFriday = utcFriday;
	exports.utcFridays = utcFridays;
	exports.utcSaturday = utcSaturday;
	exports.utcSaturdays = utcSaturdays;
	exports.utcMonth = utcMonth;
	exports.utcMonths = utcMonths;
	exports.utcYear = utcYear;
	exports.utcYears = utcYears;
	exports.timeFormatDefaultLocale = defaultLocale$1;
	exports.timeFormatLocale = formatLocale$1;
	exports.isoFormat = formatIso;
	exports.isoParse = parseIso;
	exports.now = now;
	exports.timer = timer;
	exports.timerFlush = timerFlush;
	exports.timeout = timeout$1;
	exports.interval = interval$1;
	exports.transition = transition;
	exports.active = active;
	exports.interrupt = interrupt;
	exports.voronoi = voronoi;
	exports.zoom = zoom;
	exports.zoomTransform = transform$1;
	exports.zoomIdentity = identity$8;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _vue = __webpack_require__(247);

	var _vue2 = _interopRequireDefault(_vue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var CollarView = __webpack_require__(5);

	module.exports = function (selector, name) {
	  var counter = new CollarView(selector, name);

	  var app = null;
	  counter.setRenderer(function (state, done) {
	    app = new _vue2.default({
	      el: selector,
	      template: '<div class="vue-counter">\n  <div class="vue-counter-value"><h1 class="counter-value">{{count}}</h1></div>\n  <button class="vue-counter-dec-btn press" v-on:click="onDecrement">-</button>\n  <button class="vue-counter-inc-btn press" v-on:click="onIncrement">+</button>\n</div>',
	      data: {
	        count: 0
	      },
	      methods: {
	        onIncrement: function onIncrement() {
	          counter.send({
	            actionType: 'INCREMENT'
	          });
	        },
	        onDecrement: function onDecrement() {
	          counter.send({
	            actionType: 'DECREMENT'
	          });
	        }
	      }
	    });

	    done();
	  });

	  counter.setUpdater(function (state, done) {
	    app.count = state.count;
	    done();
	  });

	  return counter;
	};

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * Vue.js v2.2.5
	 * (c) 2014-2017 Evan You
	 * Released under the MIT License.
	 */
	(function (global, factory) {
		 true ? module.exports = factory() :
		typeof define === 'function' && define.amd ? define(factory) :
		(global.Vue = factory());
	}(this, (function () { 'use strict';

	/*  */

	/**
	 * Convert a value to a string that is actually rendered.
	 */
	function _toString (val) {
	  return val == null
	    ? ''
	    : typeof val === 'object'
	      ? JSON.stringify(val, null, 2)
	      : String(val)
	}

	/**
	 * Convert a input value to a number for persistence.
	 * If the conversion fails, return original string.
	 */
	function toNumber (val) {
	  var n = parseFloat(val);
	  return isNaN(n) ? val : n
	}

	/**
	 * Make a map and return a function for checking if a key
	 * is in that map.
	 */
	function makeMap (
	  str,
	  expectsLowerCase
	) {
	  var map = Object.create(null);
	  var list = str.split(',');
	  for (var i = 0; i < list.length; i++) {
	    map[list[i]] = true;
	  }
	  return expectsLowerCase
	    ? function (val) { return map[val.toLowerCase()]; }
	    : function (val) { return map[val]; }
	}

	/**
	 * Check if a tag is a built-in tag.
	 */
	var isBuiltInTag = makeMap('slot,component', true);

	/**
	 * Remove an item from an array
	 */
	function remove (arr, item) {
	  if (arr.length) {
	    var index = arr.indexOf(item);
	    if (index > -1) {
	      return arr.splice(index, 1)
	    }
	  }
	}

	/**
	 * Check whether the object has the property.
	 */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	function hasOwn (obj, key) {
	  return hasOwnProperty.call(obj, key)
	}

	/**
	 * Check if value is primitive
	 */
	function isPrimitive (value) {
	  return typeof value === 'string' || typeof value === 'number'
	}

	/**
	 * Create a cached version of a pure function.
	 */
	function cached (fn) {
	  var cache = Object.create(null);
	  return (function cachedFn (str) {
	    var hit = cache[str];
	    return hit || (cache[str] = fn(str))
	  })
	}

	/**
	 * Camelize a hyphen-delimited string.
	 */
	var camelizeRE = /-(\w)/g;
	var camelize = cached(function (str) {
	  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
	});

	/**
	 * Capitalize a string.
	 */
	var capitalize = cached(function (str) {
	  return str.charAt(0).toUpperCase() + str.slice(1)
	});

	/**
	 * Hyphenate a camelCase string.
	 */
	var hyphenateRE = /([^-])([A-Z])/g;
	var hyphenate = cached(function (str) {
	  return str
	    .replace(hyphenateRE, '$1-$2')
	    .replace(hyphenateRE, '$1-$2')
	    .toLowerCase()
	});

	/**
	 * Simple bind, faster than native
	 */
	function bind (fn, ctx) {
	  function boundFn (a) {
	    var l = arguments.length;
	    return l
	      ? l > 1
	        ? fn.apply(ctx, arguments)
	        : fn.call(ctx, a)
	      : fn.call(ctx)
	  }
	  // record original fn length
	  boundFn._length = fn.length;
	  return boundFn
	}

	/**
	 * Convert an Array-like object to a real Array.
	 */
	function toArray (list, start) {
	  start = start || 0;
	  var i = list.length - start;
	  var ret = new Array(i);
	  while (i--) {
	    ret[i] = list[i + start];
	  }
	  return ret
	}

	/**
	 * Mix properties into target object.
	 */
	function extend (to, _from) {
	  for (var key in _from) {
	    to[key] = _from[key];
	  }
	  return to
	}

	/**
	 * Quick object check - this is primarily used to tell
	 * Objects from primitive values when we know the value
	 * is a JSON-compliant type.
	 */
	function isObject (obj) {
	  return obj !== null && typeof obj === 'object'
	}

	/**
	 * Strict object type check. Only returns true
	 * for plain JavaScript objects.
	 */
	var toString = Object.prototype.toString;
	var OBJECT_STRING = '[object Object]';
	function isPlainObject (obj) {
	  return toString.call(obj) === OBJECT_STRING
	}

	/**
	 * Merge an Array of Objects into a single Object.
	 */
	function toObject (arr) {
	  var res = {};
	  for (var i = 0; i < arr.length; i++) {
	    if (arr[i]) {
	      extend(res, arr[i]);
	    }
	  }
	  return res
	}

	/**
	 * Perform no operation.
	 */
	function noop () {}

	/**
	 * Always return false.
	 */
	var no = function () { return false; };

	/**
	 * Return same value
	 */
	var identity = function (_) { return _; };

	/**
	 * Generate a static keys string from compiler modules.
	 */
	function genStaticKeys (modules) {
	  return modules.reduce(function (keys, m) {
	    return keys.concat(m.staticKeys || [])
	  }, []).join(',')
	}

	/**
	 * Check if two values are loosely equal - that is,
	 * if they are plain objects, do they have the same shape?
	 */
	function looseEqual (a, b) {
	  var isObjectA = isObject(a);
	  var isObjectB = isObject(b);
	  if (isObjectA && isObjectB) {
	    try {
	      return JSON.stringify(a) === JSON.stringify(b)
	    } catch (e) {
	      // possible circular reference
	      return a === b
	    }
	  } else if (!isObjectA && !isObjectB) {
	    return String(a) === String(b)
	  } else {
	    return false
	  }
	}

	function looseIndexOf (arr, val) {
	  for (var i = 0; i < arr.length; i++) {
	    if (looseEqual(arr[i], val)) { return i }
	  }
	  return -1
	}

	/**
	 * Ensure a function is called only once.
	 */
	function once (fn) {
	  var called = false;
	  return function () {
	    if (!called) {
	      called = true;
	      fn();
	    }
	  }
	}

	/*  */

	var config = {
	  /**
	   * Option merge strategies (used in core/util/options)
	   */
	  optionMergeStrategies: Object.create(null),

	  /**
	   * Whether to suppress warnings.
	   */
	  silent: false,

	  /**
	   * Show production mode tip message on boot?
	   */
	  productionTip: "development" !== 'production',

	  /**
	   * Whether to enable devtools
	   */
	  devtools: "development" !== 'production',

	  /**
	   * Whether to record perf
	   */
	  performance: false,

	  /**
	   * Error handler for watcher errors
	   */
	  errorHandler: null,

	  /**
	   * Ignore certain custom elements
	   */
	  ignoredElements: [],

	  /**
	   * Custom user key aliases for v-on
	   */
	  keyCodes: Object.create(null),

	  /**
	   * Check if a tag is reserved so that it cannot be registered as a
	   * component. This is platform-dependent and may be overwritten.
	   */
	  isReservedTag: no,

	  /**
	   * Check if a tag is an unknown element.
	   * Platform-dependent.
	   */
	  isUnknownElement: no,

	  /**
	   * Get the namespace of an element
	   */
	  getTagNamespace: noop,

	  /**
	   * Parse the real tag name for the specific platform.
	   */
	  parsePlatformTagName: identity,

	  /**
	   * Check if an attribute must be bound using property, e.g. value
	   * Platform-dependent.
	   */
	  mustUseProp: no,

	  /**
	   * List of asset types that a component can own.
	   */
	  _assetTypes: [
	    'component',
	    'directive',
	    'filter'
	  ],

	  /**
	   * List of lifecycle hooks.
	   */
	  _lifecycleHooks: [
	    'beforeCreate',
	    'created',
	    'beforeMount',
	    'mounted',
	    'beforeUpdate',
	    'updated',
	    'beforeDestroy',
	    'destroyed',
	    'activated',
	    'deactivated'
	  ],

	  /**
	   * Max circular updates allowed in a scheduler flush cycle.
	   */
	  _maxUpdateCount: 100
	};

	/*  */

	var emptyObject = Object.freeze({});

	/**
	 * Check if a string starts with $ or _
	 */
	function isReserved (str) {
	  var c = (str + '').charCodeAt(0);
	  return c === 0x24 || c === 0x5F
	}

	/**
	 * Define a property.
	 */
	function def (obj, key, val, enumerable) {
	  Object.defineProperty(obj, key, {
	    value: val,
	    enumerable: !!enumerable,
	    writable: true,
	    configurable: true
	  });
	}

	/**
	 * Parse simple path.
	 */
	var bailRE = /[^\w.$]/;
	function parsePath (path) {
	  if (bailRE.test(path)) {
	    return
	  }
	  var segments = path.split('.');
	  return function (obj) {
	    for (var i = 0; i < segments.length; i++) {
	      if (!obj) { return }
	      obj = obj[segments[i]];
	    }
	    return obj
	  }
	}

	/*  */
	/* globals MutationObserver */

	// can we use __proto__?
	var hasProto = '__proto__' in {};

	// Browser environment sniffing
	var inBrowser = typeof window !== 'undefined';
	var UA = inBrowser && window.navigator.userAgent.toLowerCase();
	var isIE = UA && /msie|trident/.test(UA);
	var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
	var isEdge = UA && UA.indexOf('edge/') > 0;
	var isAndroid = UA && UA.indexOf('android') > 0;
	var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
	var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

	// this needs to be lazy-evaled because vue may be required before
	// vue-server-renderer can set VUE_ENV
	var _isServer;
	var isServerRendering = function () {
	  if (_isServer === undefined) {
	    /* istanbul ignore if */
	    if (!inBrowser && typeof global !== 'undefined') {
	      // detect presence of vue-server-renderer and avoid
	      // Webpack shimming the process
	      _isServer = global['process'].env.VUE_ENV === 'server';
	    } else {
	      _isServer = false;
	    }
	  }
	  return _isServer
	};

	// detect devtools
	var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

	/* istanbul ignore next */
	function isNative (Ctor) {
	  return /native code/.test(Ctor.toString())
	}

	var hasSymbol =
	  typeof Symbol !== 'undefined' && isNative(Symbol) &&
	  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

	/**
	 * Defer a task to execute it asynchronously.
	 */
	var nextTick = (function () {
	  var callbacks = [];
	  var pending = false;
	  var timerFunc;

	  function nextTickHandler () {
	    pending = false;
	    var copies = callbacks.slice(0);
	    callbacks.length = 0;
	    for (var i = 0; i < copies.length; i++) {
	      copies[i]();
	    }
	  }

	  // the nextTick behavior leverages the microtask queue, which can be accessed
	  // via either native Promise.then or MutationObserver.
	  // MutationObserver has wider support, however it is seriously bugged in
	  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
	  // completely stops working after triggering a few times... so, if native
	  // Promise is available, we will use it:
	  /* istanbul ignore if */
	  if (typeof Promise !== 'undefined' && isNative(Promise)) {
	    var p = Promise.resolve();
	    var logError = function (err) { console.error(err); };
	    timerFunc = function () {
	      p.then(nextTickHandler).catch(logError);
	      // in problematic UIWebViews, Promise.then doesn't completely break, but
	      // it can get stuck in a weird state where callbacks are pushed into the
	      // microtask queue but the queue isn't being flushed, until the browser
	      // needs to do some other work, e.g. handle a timer. Therefore we can
	      // "force" the microtask queue to be flushed by adding an empty timer.
	      if (isIOS) { setTimeout(noop); }
	    };
	  } else if (typeof MutationObserver !== 'undefined' && (
	    isNative(MutationObserver) ||
	    // PhantomJS and iOS 7.x
	    MutationObserver.toString() === '[object MutationObserverConstructor]'
	  )) {
	    // use MutationObserver where native Promise is not available,
	    // e.g. PhantomJS IE11, iOS7, Android 4.4
	    var counter = 1;
	    var observer = new MutationObserver(nextTickHandler);
	    var textNode = document.createTextNode(String(counter));
	    observer.observe(textNode, {
	      characterData: true
	    });
	    timerFunc = function () {
	      counter = (counter + 1) % 2;
	      textNode.data = String(counter);
	    };
	  } else {
	    // fallback to setTimeout
	    /* istanbul ignore next */
	    timerFunc = function () {
	      setTimeout(nextTickHandler, 0);
	    };
	  }

	  return function queueNextTick (cb, ctx) {
	    var _resolve;
	    callbacks.push(function () {
	      if (cb) { cb.call(ctx); }
	      if (_resolve) { _resolve(ctx); }
	    });
	    if (!pending) {
	      pending = true;
	      timerFunc();
	    }
	    if (!cb && typeof Promise !== 'undefined') {
	      return new Promise(function (resolve) {
	        _resolve = resolve;
	      })
	    }
	  }
	})();

	var _Set;
	/* istanbul ignore if */
	if (typeof Set !== 'undefined' && isNative(Set)) {
	  // use native Set when available.
	  _Set = Set;
	} else {
	  // a non-standard Set polyfill that only works with primitive keys.
	  _Set = (function () {
	    function Set () {
	      this.set = Object.create(null);
	    }
	    Set.prototype.has = function has (key) {
	      return this.set[key] === true
	    };
	    Set.prototype.add = function add (key) {
	      this.set[key] = true;
	    };
	    Set.prototype.clear = function clear () {
	      this.set = Object.create(null);
	    };

	    return Set;
	  }());
	}

	var warn = noop;
	var tip = noop;
	var formatComponentName;

	{
	  var hasConsole = typeof console !== 'undefined';
	  var classifyRE = /(?:^|[-_])(\w)/g;
	  var classify = function (str) { return str
	    .replace(classifyRE, function (c) { return c.toUpperCase(); })
	    .replace(/[-_]/g, ''); };

	  warn = function (msg, vm) {
	    if (hasConsole && (!config.silent)) {
	      console.error("[Vue warn]: " + msg + " " + (
	        vm ? formatLocation(formatComponentName(vm)) : ''
	      ));
	    }
	  };

	  tip = function (msg, vm) {
	    if (hasConsole && (!config.silent)) {
	      console.warn("[Vue tip]: " + msg + " " + (
	        vm ? formatLocation(formatComponentName(vm)) : ''
	      ));
	    }
	  };

	  formatComponentName = function (vm, includeFile) {
	    if (vm.$root === vm) {
	      return '<Root>'
	    }
	    var name = typeof vm === 'string'
	      ? vm
	      : typeof vm === 'function' && vm.options
	        ? vm.options.name
	        : vm._isVue
	          ? vm.$options.name || vm.$options._componentTag
	          : vm.name;

	    var file = vm._isVue && vm.$options.__file;
	    if (!name && file) {
	      var match = file.match(/([^/\\]+)\.vue$/);
	      name = match && match[1];
	    }

	    return (
	      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
	      (file && includeFile !== false ? (" at " + file) : '')
	    )
	  };

	  var formatLocation = function (str) {
	    if (str === "<Anonymous>") {
	      str += " - use the \"name\" option for better debugging messages.";
	    }
	    return ("\n(found in " + str + ")")
	  };
	}

	/*  */


	var uid$1 = 0;

	/**
	 * A dep is an observable that can have multiple
	 * directives subscribing to it.
	 */
	var Dep = function Dep () {
	  this.id = uid$1++;
	  this.subs = [];
	};

	Dep.prototype.addSub = function addSub (sub) {
	  this.subs.push(sub);
	};

	Dep.prototype.removeSub = function removeSub (sub) {
	  remove(this.subs, sub);
	};

	Dep.prototype.depend = function depend () {
	  if (Dep.target) {
	    Dep.target.addDep(this);
	  }
	};

	Dep.prototype.notify = function notify () {
	  // stabilize the subscriber list first
	  var subs = this.subs.slice();
	  for (var i = 0, l = subs.length; i < l; i++) {
	    subs[i].update();
	  }
	};

	// the current target watcher being evaluated.
	// this is globally unique because there could be only one
	// watcher being evaluated at any time.
	Dep.target = null;
	var targetStack = [];

	function pushTarget (_target) {
	  if (Dep.target) { targetStack.push(Dep.target); }
	  Dep.target = _target;
	}

	function popTarget () {
	  Dep.target = targetStack.pop();
	}

	/*
	 * not type checking this file because flow doesn't play well with
	 * dynamically accessing methods on Array prototype
	 */

	var arrayProto = Array.prototype;
	var arrayMethods = Object.create(arrayProto);[
	  'push',
	  'pop',
	  'shift',
	  'unshift',
	  'splice',
	  'sort',
	  'reverse'
	]
	.forEach(function (method) {
	  // cache original method
	  var original = arrayProto[method];
	  def(arrayMethods, method, function mutator () {
	    var arguments$1 = arguments;

	    // avoid leaking arguments:
	    // http://jsperf.com/closure-with-arguments
	    var i = arguments.length;
	    var args = new Array(i);
	    while (i--) {
	      args[i] = arguments$1[i];
	    }
	    var result = original.apply(this, args);
	    var ob = this.__ob__;
	    var inserted;
	    switch (method) {
	      case 'push':
	        inserted = args;
	        break
	      case 'unshift':
	        inserted = args;
	        break
	      case 'splice':
	        inserted = args.slice(2);
	        break
	    }
	    if (inserted) { ob.observeArray(inserted); }
	    // notify change
	    ob.dep.notify();
	    return result
	  });
	});

	/*  */

	var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

	/**
	 * By default, when a reactive property is set, the new value is
	 * also converted to become reactive. However when passing down props,
	 * we don't want to force conversion because the value may be a nested value
	 * under a frozen data structure. Converting it would defeat the optimization.
	 */
	var observerState = {
	  shouldConvert: true,
	  isSettingProps: false
	};

	/**
	 * Observer class that are attached to each observed
	 * object. Once attached, the observer converts target
	 * object's property keys into getter/setters that
	 * collect dependencies and dispatches updates.
	 */
	var Observer = function Observer (value) {
	  this.value = value;
	  this.dep = new Dep();
	  this.vmCount = 0;
	  def(value, '__ob__', this);
	  if (Array.isArray(value)) {
	    var augment = hasProto
	      ? protoAugment
	      : copyAugment;
	    augment(value, arrayMethods, arrayKeys);
	    this.observeArray(value);
	  } else {
	    this.walk(value);
	  }
	};

	/**
	 * Walk through each property and convert them into
	 * getter/setters. This method should only be called when
	 * value type is Object.
	 */
	Observer.prototype.walk = function walk (obj) {
	  var keys = Object.keys(obj);
	  for (var i = 0; i < keys.length; i++) {
	    defineReactive$$1(obj, keys[i], obj[keys[i]]);
	  }
	};

	/**
	 * Observe a list of Array items.
	 */
	Observer.prototype.observeArray = function observeArray (items) {
	  for (var i = 0, l = items.length; i < l; i++) {
	    observe(items[i]);
	  }
	};

	// helpers

	/**
	 * Augment an target Object or Array by intercepting
	 * the prototype chain using __proto__
	 */
	function protoAugment (target, src) {
	  /* eslint-disable no-proto */
	  target.__proto__ = src;
	  /* eslint-enable no-proto */
	}

	/**
	 * Augment an target Object or Array by defining
	 * hidden properties.
	 */
	/* istanbul ignore next */
	function copyAugment (target, src, keys) {
	  for (var i = 0, l = keys.length; i < l; i++) {
	    var key = keys[i];
	    def(target, key, src[key]);
	  }
	}

	/**
	 * Attempt to create an observer instance for a value,
	 * returns the new observer if successfully observed,
	 * or the existing observer if the value already has one.
	 */
	function observe (value, asRootData) {
	  if (!isObject(value)) {
	    return
	  }
	  var ob;
	  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
	    ob = value.__ob__;
	  } else if (
	    observerState.shouldConvert &&
	    !isServerRendering() &&
	    (Array.isArray(value) || isPlainObject(value)) &&
	    Object.isExtensible(value) &&
	    !value._isVue
	  ) {
	    ob = new Observer(value);
	  }
	  if (asRootData && ob) {
	    ob.vmCount++;
	  }
	  return ob
	}

	/**
	 * Define a reactive property on an Object.
	 */
	function defineReactive$$1 (
	  obj,
	  key,
	  val,
	  customSetter
	) {
	  var dep = new Dep();

	  var property = Object.getOwnPropertyDescriptor(obj, key);
	  if (property && property.configurable === false) {
	    return
	  }

	  // cater for pre-defined getter/setters
	  var getter = property && property.get;
	  var setter = property && property.set;

	  var childOb = observe(val);
	  Object.defineProperty(obj, key, {
	    enumerable: true,
	    configurable: true,
	    get: function reactiveGetter () {
	      var value = getter ? getter.call(obj) : val;
	      if (Dep.target) {
	        dep.depend();
	        if (childOb) {
	          childOb.dep.depend();
	        }
	        if (Array.isArray(value)) {
	          dependArray(value);
	        }
	      }
	      return value
	    },
	    set: function reactiveSetter (newVal) {
	      var value = getter ? getter.call(obj) : val;
	      /* eslint-disable no-self-compare */
	      if (newVal === value || (newVal !== newVal && value !== value)) {
	        return
	      }
	      /* eslint-enable no-self-compare */
	      if ("development" !== 'production' && customSetter) {
	        customSetter();
	      }
	      if (setter) {
	        setter.call(obj, newVal);
	      } else {
	        val = newVal;
	      }
	      childOb = observe(newVal);
	      dep.notify();
	    }
	  });
	}

	/**
	 * Set a property on an object. Adds the new property and
	 * triggers change notification if the property doesn't
	 * already exist.
	 */
	function set (target, key, val) {
	  if (Array.isArray(target) && typeof key === 'number') {
	    target.length = Math.max(target.length, key);
	    target.splice(key, 1, val);
	    return val
	  }
	  if (hasOwn(target, key)) {
	    target[key] = val;
	    return val
	  }
	  var ob = (target ).__ob__;
	  if (target._isVue || (ob && ob.vmCount)) {
	    "development" !== 'production' && warn(
	      'Avoid adding reactive properties to a Vue instance or its root $data ' +
	      'at runtime - declare it upfront in the data option.'
	    );
	    return val
	  }
	  if (!ob) {
	    target[key] = val;
	    return val
	  }
	  defineReactive$$1(ob.value, key, val);
	  ob.dep.notify();
	  return val
	}

	/**
	 * Delete a property and trigger change if necessary.
	 */
	function del (target, key) {
	  if (Array.isArray(target) && typeof key === 'number') {
	    target.splice(key, 1);
	    return
	  }
	  var ob = (target ).__ob__;
	  if (target._isVue || (ob && ob.vmCount)) {
	    "development" !== 'production' && warn(
	      'Avoid deleting properties on a Vue instance or its root $data ' +
	      '- just set it to null.'
	    );
	    return
	  }
	  if (!hasOwn(target, key)) {
	    return
	  }
	  delete target[key];
	  if (!ob) {
	    return
	  }
	  ob.dep.notify();
	}

	/**
	 * Collect dependencies on array elements when the array is touched, since
	 * we cannot intercept array element access like property getters.
	 */
	function dependArray (value) {
	  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
	    e = value[i];
	    e && e.__ob__ && e.__ob__.dep.depend();
	    if (Array.isArray(e)) {
	      dependArray(e);
	    }
	  }
	}

	/*  */

	/**
	 * Option overwriting strategies are functions that handle
	 * how to merge a parent option value and a child option
	 * value into the final value.
	 */
	var strats = config.optionMergeStrategies;

	/**
	 * Options with restrictions
	 */
	{
	  strats.el = strats.propsData = function (parent, child, vm, key) {
	    if (!vm) {
	      warn(
	        "option \"" + key + "\" can only be used during instance " +
	        'creation with the `new` keyword.'
	      );
	    }
	    return defaultStrat(parent, child)
	  };
	}

	/**
	 * Helper that recursively merges two data objects together.
	 */
	function mergeData (to, from) {
	  if (!from) { return to }
	  var key, toVal, fromVal;
	  var keys = Object.keys(from);
	  for (var i = 0; i < keys.length; i++) {
	    key = keys[i];
	    toVal = to[key];
	    fromVal = from[key];
	    if (!hasOwn(to, key)) {
	      set(to, key, fromVal);
	    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
	      mergeData(toVal, fromVal);
	    }
	  }
	  return to
	}

	/**
	 * Data
	 */
	strats.data = function (
	  parentVal,
	  childVal,
	  vm
	) {
	  if (!vm) {
	    // in a Vue.extend merge, both should be functions
	    if (!childVal) {
	      return parentVal
	    }
	    if (typeof childVal !== 'function') {
	      "development" !== 'production' && warn(
	        'The "data" option should be a function ' +
	        'that returns a per-instance value in component ' +
	        'definitions.',
	        vm
	      );
	      return parentVal
	    }
	    if (!parentVal) {
	      return childVal
	    }
	    // when parentVal & childVal are both present,
	    // we need to return a function that returns the
	    // merged result of both functions... no need to
	    // check if parentVal is a function here because
	    // it has to be a function to pass previous merges.
	    return function mergedDataFn () {
	      return mergeData(
	        childVal.call(this),
	        parentVal.call(this)
	      )
	    }
	  } else if (parentVal || childVal) {
	    return function mergedInstanceDataFn () {
	      // instance merge
	      var instanceData = typeof childVal === 'function'
	        ? childVal.call(vm)
	        : childVal;
	      var defaultData = typeof parentVal === 'function'
	        ? parentVal.call(vm)
	        : undefined;
	      if (instanceData) {
	        return mergeData(instanceData, defaultData)
	      } else {
	        return defaultData
	      }
	    }
	  }
	};

	/**
	 * Hooks and props are merged as arrays.
	 */
	function mergeHook (
	  parentVal,
	  childVal
	) {
	  return childVal
	    ? parentVal
	      ? parentVal.concat(childVal)
	      : Array.isArray(childVal)
	        ? childVal
	        : [childVal]
	    : parentVal
	}

	config._lifecycleHooks.forEach(function (hook) {
	  strats[hook] = mergeHook;
	});

	/**
	 * Assets
	 *
	 * When a vm is present (instance creation), we need to do
	 * a three-way merge between constructor options, instance
	 * options and parent options.
	 */
	function mergeAssets (parentVal, childVal) {
	  var res = Object.create(parentVal || null);
	  return childVal
	    ? extend(res, childVal)
	    : res
	}

	config._assetTypes.forEach(function (type) {
	  strats[type + 's'] = mergeAssets;
	});

	/**
	 * Watchers.
	 *
	 * Watchers hashes should not overwrite one
	 * another, so we merge them as arrays.
	 */
	strats.watch = function (parentVal, childVal) {
	  /* istanbul ignore if */
	  if (!childVal) { return Object.create(parentVal || null) }
	  if (!parentVal) { return childVal }
	  var ret = {};
	  extend(ret, parentVal);
	  for (var key in childVal) {
	    var parent = ret[key];
	    var child = childVal[key];
	    if (parent && !Array.isArray(parent)) {
	      parent = [parent];
	    }
	    ret[key] = parent
	      ? parent.concat(child)
	      : [child];
	  }
	  return ret
	};

	/**
	 * Other object hashes.
	 */
	strats.props =
	strats.methods =
	strats.computed = function (parentVal, childVal) {
	  if (!childVal) { return Object.create(parentVal || null) }
	  if (!parentVal) { return childVal }
	  var ret = Object.create(null);
	  extend(ret, parentVal);
	  extend(ret, childVal);
	  return ret
	};

	/**
	 * Default strategy.
	 */
	var defaultStrat = function (parentVal, childVal) {
	  return childVal === undefined
	    ? parentVal
	    : childVal
	};

	/**
	 * Validate component names
	 */
	function checkComponents (options) {
	  for (var key in options.components) {
	    var lower = key.toLowerCase();
	    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {
	      warn(
	        'Do not use built-in or reserved HTML elements as component ' +
	        'id: ' + key
	      );
	    }
	  }
	}

	/**
	 * Ensure all props option syntax are normalized into the
	 * Object-based format.
	 */
	function normalizeProps (options) {
	  var props = options.props;
	  if (!props) { return }
	  var res = {};
	  var i, val, name;
	  if (Array.isArray(props)) {
	    i = props.length;
	    while (i--) {
	      val = props[i];
	      if (typeof val === 'string') {
	        name = camelize(val);
	        res[name] = { type: null };
	      } else {
	        warn('props must be strings when using array syntax.');
	      }
	    }
	  } else if (isPlainObject(props)) {
	    for (var key in props) {
	      val = props[key];
	      name = camelize(key);
	      res[name] = isPlainObject(val)
	        ? val
	        : { type: val };
	    }
	  }
	  options.props = res;
	}

	/**
	 * Normalize raw function directives into object format.
	 */
	function normalizeDirectives (options) {
	  var dirs = options.directives;
	  if (dirs) {
	    for (var key in dirs) {
	      var def = dirs[key];
	      if (typeof def === 'function') {
	        dirs[key] = { bind: def, update: def };
	      }
	    }
	  }
	}

	/**
	 * Merge two option objects into a new one.
	 * Core utility used in both instantiation and inheritance.
	 */
	function mergeOptions (
	  parent,
	  child,
	  vm
	) {
	  {
	    checkComponents(child);
	  }
	  normalizeProps(child);
	  normalizeDirectives(child);
	  var extendsFrom = child.extends;
	  if (extendsFrom) {
	    parent = typeof extendsFrom === 'function'
	      ? mergeOptions(parent, extendsFrom.options, vm)
	      : mergeOptions(parent, extendsFrom, vm);
	  }
	  if (child.mixins) {
	    for (var i = 0, l = child.mixins.length; i < l; i++) {
	      var mixin = child.mixins[i];
	      if (mixin.prototype instanceof Vue$3) {
	        mixin = mixin.options;
	      }
	      parent = mergeOptions(parent, mixin, vm);
	    }
	  }
	  var options = {};
	  var key;
	  for (key in parent) {
	    mergeField(key);
	  }
	  for (key in child) {
	    if (!hasOwn(parent, key)) {
	      mergeField(key);
	    }
	  }
	  function mergeField (key) {
	    var strat = strats[key] || defaultStrat;
	    options[key] = strat(parent[key], child[key], vm, key);
	  }
	  return options
	}

	/**
	 * Resolve an asset.
	 * This function is used because child instances need access
	 * to assets defined in its ancestor chain.
	 */
	function resolveAsset (
	  options,
	  type,
	  id,
	  warnMissing
	) {
	  /* istanbul ignore if */
	  if (typeof id !== 'string') {
	    return
	  }
	  var assets = options[type];
	  // check local registration variations first
	  if (hasOwn(assets, id)) { return assets[id] }
	  var camelizedId = camelize(id);
	  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
	  var PascalCaseId = capitalize(camelizedId);
	  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
	  // fallback to prototype chain
	  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
	  if ("development" !== 'production' && warnMissing && !res) {
	    warn(
	      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
	      options
	    );
	  }
	  return res
	}

	/*  */

	function validateProp (
	  key,
	  propOptions,
	  propsData,
	  vm
	) {
	  var prop = propOptions[key];
	  var absent = !hasOwn(propsData, key);
	  var value = propsData[key];
	  // handle boolean props
	  if (isType(Boolean, prop.type)) {
	    if (absent && !hasOwn(prop, 'default')) {
	      value = false;
	    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
	      value = true;
	    }
	  }
	  // check default value
	  if (value === undefined) {
	    value = getPropDefaultValue(vm, prop, key);
	    // since the default value is a fresh copy,
	    // make sure to observe it.
	    var prevShouldConvert = observerState.shouldConvert;
	    observerState.shouldConvert = true;
	    observe(value);
	    observerState.shouldConvert = prevShouldConvert;
	  }
	  {
	    assertProp(prop, key, value, vm, absent);
	  }
	  return value
	}

	/**
	 * Get the default value of a prop.
	 */
	function getPropDefaultValue (vm, prop, key) {
	  // no default, return undefined
	  if (!hasOwn(prop, 'default')) {
	    return undefined
	  }
	  var def = prop.default;
	  // warn against non-factory defaults for Object & Array
	  if ("development" !== 'production' && isObject(def)) {
	    warn(
	      'Invalid default value for prop "' + key + '": ' +
	      'Props with type Object/Array must use a factory function ' +
	      'to return the default value.',
	      vm
	    );
	  }
	  // the raw prop value was also undefined from previous render,
	  // return previous default value to avoid unnecessary watcher trigger
	  if (vm && vm.$options.propsData &&
	    vm.$options.propsData[key] === undefined &&
	    vm._props[key] !== undefined) {
	    return vm._props[key]
	  }
	  // call factory function for non-Function types
	  // a value is Function if its prototype is function even across different execution context
	  return typeof def === 'function' && getType(prop.type) !== 'Function'
	    ? def.call(vm)
	    : def
	}

	/**
	 * Assert whether a prop is valid.
	 */
	function assertProp (
	  prop,
	  name,
	  value,
	  vm,
	  absent
	) {
	  if (prop.required && absent) {
	    warn(
	      'Missing required prop: "' + name + '"',
	      vm
	    );
	    return
	  }
	  if (value == null && !prop.required) {
	    return
	  }
	  var type = prop.type;
	  var valid = !type || type === true;
	  var expectedTypes = [];
	  if (type) {
	    if (!Array.isArray(type)) {
	      type = [type];
	    }
	    for (var i = 0; i < type.length && !valid; i++) {
	      var assertedType = assertType(value, type[i]);
	      expectedTypes.push(assertedType.expectedType || '');
	      valid = assertedType.valid;
	    }
	  }
	  if (!valid) {
	    warn(
	      'Invalid prop: type check failed for prop "' + name + '".' +
	      ' Expected ' + expectedTypes.map(capitalize).join(', ') +
	      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',
	      vm
	    );
	    return
	  }
	  var validator = prop.validator;
	  if (validator) {
	    if (!validator(value)) {
	      warn(
	        'Invalid prop: custom validator check failed for prop "' + name + '".',
	        vm
	      );
	    }
	  }
	}

	/**
	 * Assert the type of a value
	 */
	function assertType (value, type) {
	  var valid;
	  var expectedType = getType(type);
	  if (expectedType === 'String') {
	    valid = typeof value === (expectedType = 'string');
	  } else if (expectedType === 'Number') {
	    valid = typeof value === (expectedType = 'number');
	  } else if (expectedType === 'Boolean') {
	    valid = typeof value === (expectedType = 'boolean');
	  } else if (expectedType === 'Function') {
	    valid = typeof value === (expectedType = 'function');
	  } else if (expectedType === 'Object') {
	    valid = isPlainObject(value);
	  } else if (expectedType === 'Array') {
	    valid = Array.isArray(value);
	  } else {
	    valid = value instanceof type;
	  }
	  return {
	    valid: valid,
	    expectedType: expectedType
	  }
	}

	/**
	 * Use function string name to check built-in types,
	 * because a simple equality check will fail when running
	 * across different vms / iframes.
	 */
	function getType (fn) {
	  var match = fn && fn.toString().match(/^\s*function (\w+)/);
	  return match && match[1]
	}

	function isType (type, fn) {
	  if (!Array.isArray(fn)) {
	    return getType(fn) === getType(type)
	  }
	  for (var i = 0, len = fn.length; i < len; i++) {
	    if (getType(fn[i]) === getType(type)) {
	      return true
	    }
	  }
	  /* istanbul ignore next */
	  return false
	}

	function handleError (err, vm, info) {
	  if (config.errorHandler) {
	    config.errorHandler.call(null, err, vm, info);
	  } else {
	    {
	      warn(("Error in " + info + ":"), vm);
	    }
	    /* istanbul ignore else */
	    if (inBrowser && typeof console !== 'undefined') {
	      console.error(err);
	    } else {
	      throw err
	    }
	  }
	}

	/* not type checking this file because flow doesn't play well with Proxy */

	var initProxy;

	{
	  var allowedGlobals = makeMap(
	    'Infinity,undefined,NaN,isFinite,isNaN,' +
	    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
	    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
	    'require' // for Webpack/Browserify
	  );

	  var warnNonPresent = function (target, key) {
	    warn(
	      "Property or method \"" + key + "\" is not defined on the instance but " +
	      "referenced during render. Make sure to declare reactive data " +
	      "properties in the data option.",
	      target
	    );
	  };

	  var hasProxy =
	    typeof Proxy !== 'undefined' &&
	    Proxy.toString().match(/native code/);

	  if (hasProxy) {
	    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');
	    config.keyCodes = new Proxy(config.keyCodes, {
	      set: function set (target, key, value) {
	        if (isBuiltInModifier(key)) {
	          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
	          return false
	        } else {
	          target[key] = value;
	          return true
	        }
	      }
	    });
	  }

	  var hasHandler = {
	    has: function has (target, key) {
	      var has = key in target;
	      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
	      if (!has && !isAllowed) {
	        warnNonPresent(target, key);
	      }
	      return has || !isAllowed
	    }
	  };

	  var getHandler = {
	    get: function get (target, key) {
	      if (typeof key === 'string' && !(key in target)) {
	        warnNonPresent(target, key);
	      }
	      return target[key]
	    }
	  };

	  initProxy = function initProxy (vm) {
	    if (hasProxy) {
	      // determine which proxy handler to use
	      var options = vm.$options;
	      var handlers = options.render && options.render._withStripped
	        ? getHandler
	        : hasHandler;
	      vm._renderProxy = new Proxy(vm, handlers);
	    } else {
	      vm._renderProxy = vm;
	    }
	  };
	}

	var mark;
	var measure;

	{
	  var perf = inBrowser && window.performance;
	  /* istanbul ignore if */
	  if (
	    perf &&
	    perf.mark &&
	    perf.measure &&
	    perf.clearMarks &&
	    perf.clearMeasures
	  ) {
	    mark = function (tag) { return perf.mark(tag); };
	    measure = function (name, startTag, endTag) {
	      perf.measure(name, startTag, endTag);
	      perf.clearMarks(startTag);
	      perf.clearMarks(endTag);
	      perf.clearMeasures(name);
	    };
	  }
	}

	/*  */

	var VNode = function VNode (
	  tag,
	  data,
	  children,
	  text,
	  elm,
	  context,
	  componentOptions
	) {
	  this.tag = tag;
	  this.data = data;
	  this.children = children;
	  this.text = text;
	  this.elm = elm;
	  this.ns = undefined;
	  this.context = context;
	  this.functionalContext = undefined;
	  this.key = data && data.key;
	  this.componentOptions = componentOptions;
	  this.componentInstance = undefined;
	  this.parent = undefined;
	  this.raw = false;
	  this.isStatic = false;
	  this.isRootInsert = true;
	  this.isComment = false;
	  this.isCloned = false;
	  this.isOnce = false;
	};

	var prototypeAccessors = { child: {} };

	// DEPRECATED: alias for componentInstance for backwards compat.
	/* istanbul ignore next */
	prototypeAccessors.child.get = function () {
	  return this.componentInstance
	};

	Object.defineProperties( VNode.prototype, prototypeAccessors );

	var createEmptyVNode = function () {
	  var node = new VNode();
	  node.text = '';
	  node.isComment = true;
	  return node
	};

	function createTextVNode (val) {
	  return new VNode(undefined, undefined, undefined, String(val))
	}

	// optimized shallow clone
	// used for static nodes and slot nodes because they may be reused across
	// multiple renders, cloning them avoids errors when DOM manipulations rely
	// on their elm reference.
	function cloneVNode (vnode) {
	  var cloned = new VNode(
	    vnode.tag,
	    vnode.data,
	    vnode.children,
	    vnode.text,
	    vnode.elm,
	    vnode.context,
	    vnode.componentOptions
	  );
	  cloned.ns = vnode.ns;
	  cloned.isStatic = vnode.isStatic;
	  cloned.key = vnode.key;
	  cloned.isCloned = true;
	  return cloned
	}

	function cloneVNodes (vnodes) {
	  var len = vnodes.length;
	  var res = new Array(len);
	  for (var i = 0; i < len; i++) {
	    res[i] = cloneVNode(vnodes[i]);
	  }
	  return res
	}

	/*  */

	var normalizeEvent = cached(function (name) {
	  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
	  name = once$$1 ? name.slice(1) : name;
	  var capture = name.charAt(0) === '!';
	  name = capture ? name.slice(1) : name;
	  return {
	    name: name,
	    once: once$$1,
	    capture: capture
	  }
	});

	function createFnInvoker (fns) {
	  function invoker () {
	    var arguments$1 = arguments;

	    var fns = invoker.fns;
	    if (Array.isArray(fns)) {
	      for (var i = 0; i < fns.length; i++) {
	        fns[i].apply(null, arguments$1);
	      }
	    } else {
	      // return handler return value for single handlers
	      return fns.apply(null, arguments)
	    }
	  }
	  invoker.fns = fns;
	  return invoker
	}

	function updateListeners (
	  on,
	  oldOn,
	  add,
	  remove$$1,
	  vm
	) {
	  var name, cur, old, event;
	  for (name in on) {
	    cur = on[name];
	    old = oldOn[name];
	    event = normalizeEvent(name);
	    if (!cur) {
	      "development" !== 'production' && warn(
	        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
	        vm
	      );
	    } else if (!old) {
	      if (!cur.fns) {
	        cur = on[name] = createFnInvoker(cur);
	      }
	      add(event.name, cur, event.once, event.capture);
	    } else if (cur !== old) {
	      old.fns = cur;
	      on[name] = old;
	    }
	  }
	  for (name in oldOn) {
	    if (!on[name]) {
	      event = normalizeEvent(name);
	      remove$$1(event.name, oldOn[name], event.capture);
	    }
	  }
	}

	/*  */

	function mergeVNodeHook (def, hookKey, hook) {
	  var invoker;
	  var oldHook = def[hookKey];

	  function wrappedHook () {
	    hook.apply(this, arguments);
	    // important: remove merged hook to ensure it's called only once
	    // and prevent memory leak
	    remove(invoker.fns, wrappedHook);
	  }

	  if (!oldHook) {
	    // no existing hook
	    invoker = createFnInvoker([wrappedHook]);
	  } else {
	    /* istanbul ignore if */
	    if (oldHook.fns && oldHook.merged) {
	      // already a merged invoker
	      invoker = oldHook;
	      invoker.fns.push(wrappedHook);
	    } else {
	      // existing plain hook
	      invoker = createFnInvoker([oldHook, wrappedHook]);
	    }
	  }

	  invoker.merged = true;
	  def[hookKey] = invoker;
	}

	/*  */

	// The template compiler attempts to minimize the need for normalization by
	// statically analyzing the template at compile time.
	//
	// For plain HTML markup, normalization can be completely skipped because the
	// generated render function is guaranteed to return Array<VNode>. There are
	// two cases where extra normalization is needed:

	// 1. When the children contains components - because a functional component
	// may return an Array instead of a single root. In this case, just a simple
	// normalization is needed - if any child is an Array, we flatten the whole
	// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
	// because functional components already normalize their own children.
	function simpleNormalizeChildren (children) {
	  for (var i = 0; i < children.length; i++) {
	    if (Array.isArray(children[i])) {
	      return Array.prototype.concat.apply([], children)
	    }
	  }
	  return children
	}

	// 2. When the children contains constructs that always generated nested Arrays,
	// e.g. <template>, <slot>, v-for, or when the children is provided by user
	// with hand-written render functions / JSX. In such cases a full normalization
	// is needed to cater to all possible types of children values.
	function normalizeChildren (children) {
	  return isPrimitive(children)
	    ? [createTextVNode(children)]
	    : Array.isArray(children)
	      ? normalizeArrayChildren(children)
	      : undefined
	}

	function normalizeArrayChildren (children, nestedIndex) {
	  var res = [];
	  var i, c, last;
	  for (i = 0; i < children.length; i++) {
	    c = children[i];
	    if (c == null || typeof c === 'boolean') { continue }
	    last = res[res.length - 1];
	    //  nested
	    if (Array.isArray(c)) {
	      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i)));
	    } else if (isPrimitive(c)) {
	      if (last && last.text) {
	        last.text += String(c);
	      } else if (c !== '') {
	        // convert primitive to vnode
	        res.push(createTextVNode(c));
	      }
	    } else {
	      if (c.text && last && last.text) {
	        res[res.length - 1] = createTextVNode(last.text + c.text);
	      } else {
	        // default key for nested array children (likely generated by v-for)
	        if (c.tag && c.key == null && nestedIndex != null) {
	          c.key = "__vlist" + nestedIndex + "_" + i + "__";
	        }
	        res.push(c);
	      }
	    }
	  }
	  return res
	}

	/*  */

	function getFirstComponentChild (children) {
	  return children && children.filter(function (c) { return c && c.componentOptions; })[0]
	}

	/*  */

	function initEvents (vm) {
	  vm._events = Object.create(null);
	  vm._hasHookEvent = false;
	  // init parent attached events
	  var listeners = vm.$options._parentListeners;
	  if (listeners) {
	    updateComponentListeners(vm, listeners);
	  }
	}

	var target;

	function add (event, fn, once$$1) {
	  if (once$$1) {
	    target.$once(event, fn);
	  } else {
	    target.$on(event, fn);
	  }
	}

	function remove$1 (event, fn) {
	  target.$off(event, fn);
	}

	function updateComponentListeners (
	  vm,
	  listeners,
	  oldListeners
	) {
	  target = vm;
	  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
	}

	function eventsMixin (Vue) {
	  var hookRE = /^hook:/;
	  Vue.prototype.$on = function (event, fn) {
	    var this$1 = this;

	    var vm = this;
	    if (Array.isArray(event)) {
	      for (var i = 0, l = event.length; i < l; i++) {
	        this$1.$on(event[i], fn);
	      }
	    } else {
	      (vm._events[event] || (vm._events[event] = [])).push(fn);
	      // optimize hook:event cost by using a boolean flag marked at registration
	      // instead of a hash lookup
	      if (hookRE.test(event)) {
	        vm._hasHookEvent = true;
	      }
	    }
	    return vm
	  };

	  Vue.prototype.$once = function (event, fn) {
	    var vm = this;
	    function on () {
	      vm.$off(event, on);
	      fn.apply(vm, arguments);
	    }
	    on.fn = fn;
	    vm.$on(event, on);
	    return vm
	  };

	  Vue.prototype.$off = function (event, fn) {
	    var this$1 = this;

	    var vm = this;
	    // all
	    if (!arguments.length) {
	      vm._events = Object.create(null);
	      return vm
	    }
	    // array of events
	    if (Array.isArray(event)) {
	      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
	        this$1.$off(event[i$1], fn);
	      }
	      return vm
	    }
	    // specific event
	    var cbs = vm._events[event];
	    if (!cbs) {
	      return vm
	    }
	    if (arguments.length === 1) {
	      vm._events[event] = null;
	      return vm
	    }
	    // specific handler
	    var cb;
	    var i = cbs.length;
	    while (i--) {
	      cb = cbs[i];
	      if (cb === fn || cb.fn === fn) {
	        cbs.splice(i, 1);
	        break
	      }
	    }
	    return vm
	  };

	  Vue.prototype.$emit = function (event) {
	    var vm = this;
	    {
	      var lowerCaseEvent = event.toLowerCase();
	      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
	        tip(
	          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
	          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
	          "Note that HTML attributes are case-insensitive and you cannot use " +
	          "v-on to listen to camelCase events when using in-DOM templates. " +
	          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
	        );
	      }
	    }
	    var cbs = vm._events[event];
	    if (cbs) {
	      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
	      var args = toArray(arguments, 1);
	      for (var i = 0, l = cbs.length; i < l; i++) {
	        cbs[i].apply(vm, args);
	      }
	    }
	    return vm
	  };
	}

	/*  */

	/**
	 * Runtime helper for resolving raw children VNodes into a slot object.
	 */
	function resolveSlots (
	  children,
	  context
	) {
	  var slots = {};
	  if (!children) {
	    return slots
	  }
	  var defaultSlot = [];
	  var name, child;
	  for (var i = 0, l = children.length; i < l; i++) {
	    child = children[i];
	    // named slots should only be respected if the vnode was rendered in the
	    // same context.
	    if ((child.context === context || child.functionalContext === context) &&
	        child.data && (name = child.data.slot)) {
	      var slot = (slots[name] || (slots[name] = []));
	      if (child.tag === 'template') {
	        slot.push.apply(slot, child.children);
	      } else {
	        slot.push(child);
	      }
	    } else {
	      defaultSlot.push(child);
	    }
	  }
	  // ignore whitespace
	  if (!defaultSlot.every(isWhitespace)) {
	    slots.default = defaultSlot;
	  }
	  return slots
	}

	function isWhitespace (node) {
	  return node.isComment || node.text === ' '
	}

	function resolveScopedSlots (
	  fns
	) {
	  var res = {};
	  for (var i = 0; i < fns.length; i++) {
	    res[fns[i][0]] = fns[i][1];
	  }
	  return res
	}

	/*  */

	var activeInstance = null;

	function initLifecycle (vm) {
	  var options = vm.$options;

	  // locate first non-abstract parent
	  var parent = options.parent;
	  if (parent && !options.abstract) {
	    while (parent.$options.abstract && parent.$parent) {
	      parent = parent.$parent;
	    }
	    parent.$children.push(vm);
	  }

	  vm.$parent = parent;
	  vm.$root = parent ? parent.$root : vm;

	  vm.$children = [];
	  vm.$refs = {};

	  vm._watcher = null;
	  vm._inactive = null;
	  vm._directInactive = false;
	  vm._isMounted = false;
	  vm._isDestroyed = false;
	  vm._isBeingDestroyed = false;
	}

	function lifecycleMixin (Vue) {
	  Vue.prototype._update = function (vnode, hydrating) {
	    var vm = this;
	    if (vm._isMounted) {
	      callHook(vm, 'beforeUpdate');
	    }
	    var prevEl = vm.$el;
	    var prevVnode = vm._vnode;
	    var prevActiveInstance = activeInstance;
	    activeInstance = vm;
	    vm._vnode = vnode;
	    // Vue.prototype.__patch__ is injected in entry points
	    // based on the rendering backend used.
	    if (!prevVnode) {
	      // initial render
	      vm.$el = vm.__patch__(
	        vm.$el, vnode, hydrating, false /* removeOnly */,
	        vm.$options._parentElm,
	        vm.$options._refElm
	      );
	    } else {
	      // updates
	      vm.$el = vm.__patch__(prevVnode, vnode);
	    }
	    activeInstance = prevActiveInstance;
	    // update __vue__ reference
	    if (prevEl) {
	      prevEl.__vue__ = null;
	    }
	    if (vm.$el) {
	      vm.$el.__vue__ = vm;
	    }
	    // if parent is an HOC, update its $el as well
	    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
	      vm.$parent.$el = vm.$el;
	    }
	    // updated hook is called by the scheduler to ensure that children are
	    // updated in a parent's updated hook.
	  };

	  Vue.prototype.$forceUpdate = function () {
	    var vm = this;
	    if (vm._watcher) {
	      vm._watcher.update();
	    }
	  };

	  Vue.prototype.$destroy = function () {
	    var vm = this;
	    if (vm._isBeingDestroyed) {
	      return
	    }
	    callHook(vm, 'beforeDestroy');
	    vm._isBeingDestroyed = true;
	    // remove self from parent
	    var parent = vm.$parent;
	    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
	      remove(parent.$children, vm);
	    }
	    // teardown watchers
	    if (vm._watcher) {
	      vm._watcher.teardown();
	    }
	    var i = vm._watchers.length;
	    while (i--) {
	      vm._watchers[i].teardown();
	    }
	    // remove reference from data ob
	    // frozen object may not have observer.
	    if (vm._data.__ob__) {
	      vm._data.__ob__.vmCount--;
	    }
	    // call the last hook...
	    vm._isDestroyed = true;
	    callHook(vm, 'destroyed');
	    // turn off all instance listeners.
	    vm.$off();
	    // remove __vue__ reference
	    if (vm.$el) {
	      vm.$el.__vue__ = null;
	    }
	    // invoke destroy hooks on current rendered tree
	    vm.__patch__(vm._vnode, null);
	  };
	}

	function mountComponent (
	  vm,
	  el,
	  hydrating
	) {
	  vm.$el = el;
	  if (!vm.$options.render) {
	    vm.$options.render = createEmptyVNode;
	    {
	      /* istanbul ignore if */
	      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
	        vm.$options.el || el) {
	        warn(
	          'You are using the runtime-only build of Vue where the template ' +
	          'compiler is not available. Either pre-compile the templates into ' +
	          'render functions, or use the compiler-included build.',
	          vm
	        );
	      } else {
	        warn(
	          'Failed to mount component: template or render function not defined.',
	          vm
	        );
	      }
	    }
	  }
	  callHook(vm, 'beforeMount');

	  var updateComponent;
	  /* istanbul ignore if */
	  if ("development" !== 'production' && config.performance && mark) {
	    updateComponent = function () {
	      var name = vm._name;
	      var id = vm._uid;
	      var startTag = "vue-perf-start:" + id;
	      var endTag = "vue-perf-end:" + id;

	      mark(startTag);
	      var vnode = vm._render();
	      mark(endTag);
	      measure((name + " render"), startTag, endTag);

	      mark(startTag);
	      vm._update(vnode, hydrating);
	      mark(endTag);
	      measure((name + " patch"), startTag, endTag);
	    };
	  } else {
	    updateComponent = function () {
	      vm._update(vm._render(), hydrating);
	    };
	  }

	  vm._watcher = new Watcher(vm, updateComponent, noop);
	  hydrating = false;

	  // manually mounted instance, call mounted on self
	  // mounted is called for render-created child components in its inserted hook
	  if (vm.$vnode == null) {
	    vm._isMounted = true;
	    callHook(vm, 'mounted');
	  }
	  return vm
	}

	function updateChildComponent (
	  vm,
	  propsData,
	  listeners,
	  parentVnode,
	  renderChildren
	) {
	  // determine whether component has slot children
	  // we need to do this before overwriting $options._renderChildren
	  var hasChildren = !!(
	    renderChildren ||               // has new static slots
	    vm.$options._renderChildren ||  // has old static slots
	    parentVnode.data.scopedSlots || // has new scoped slots
	    vm.$scopedSlots !== emptyObject // has old scoped slots
	  );

	  vm.$options._parentVnode = parentVnode;
	  vm.$vnode = parentVnode; // update vm's placeholder node without re-render
	  if (vm._vnode) { // update child tree's parent
	    vm._vnode.parent = parentVnode;
	  }
	  vm.$options._renderChildren = renderChildren;

	  // update props
	  if (propsData && vm.$options.props) {
	    observerState.shouldConvert = false;
	    {
	      observerState.isSettingProps = true;
	    }
	    var props = vm._props;
	    var propKeys = vm.$options._propKeys || [];
	    for (var i = 0; i < propKeys.length; i++) {
	      var key = propKeys[i];
	      props[key] = validateProp(key, vm.$options.props, propsData, vm);
	    }
	    observerState.shouldConvert = true;
	    {
	      observerState.isSettingProps = false;
	    }
	    // keep a copy of raw propsData
	    vm.$options.propsData = propsData;
	  }
	  // update listeners
	  if (listeners) {
	    var oldListeners = vm.$options._parentListeners;
	    vm.$options._parentListeners = listeners;
	    updateComponentListeners(vm, listeners, oldListeners);
	  }
	  // resolve slots + force update if has children
	  if (hasChildren) {
	    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
	    vm.$forceUpdate();
	  }
	}

	function isInInactiveTree (vm) {
	  while (vm && (vm = vm.$parent)) {
	    if (vm._inactive) { return true }
	  }
	  return false
	}

	function activateChildComponent (vm, direct) {
	  if (direct) {
	    vm._directInactive = false;
	    if (isInInactiveTree(vm)) {
	      return
	    }
	  } else if (vm._directInactive) {
	    return
	  }
	  if (vm._inactive || vm._inactive == null) {
	    vm._inactive = false;
	    for (var i = 0; i < vm.$children.length; i++) {
	      activateChildComponent(vm.$children[i]);
	    }
	    callHook(vm, 'activated');
	  }
	}

	function deactivateChildComponent (vm, direct) {
	  if (direct) {
	    vm._directInactive = true;
	    if (isInInactiveTree(vm)) {
	      return
	    }
	  }
	  if (!vm._inactive) {
	    vm._inactive = true;
	    for (var i = 0; i < vm.$children.length; i++) {
	      deactivateChildComponent(vm.$children[i]);
	    }
	    callHook(vm, 'deactivated');
	  }
	}

	function callHook (vm, hook) {
	  var handlers = vm.$options[hook];
	  if (handlers) {
	    for (var i = 0, j = handlers.length; i < j; i++) {
	      try {
	        handlers[i].call(vm);
	      } catch (e) {
	        handleError(e, vm, (hook + " hook"));
	      }
	    }
	  }
	  if (vm._hasHookEvent) {
	    vm.$emit('hook:' + hook);
	  }
	}

	/*  */


	var queue = [];
	var has = {};
	var circular = {};
	var waiting = false;
	var flushing = false;
	var index = 0;

	/**
	 * Reset the scheduler's state.
	 */
	function resetSchedulerState () {
	  queue.length = 0;
	  has = {};
	  {
	    circular = {};
	  }
	  waiting = flushing = false;
	}

	/**
	 * Flush both queues and run the watchers.
	 */
	function flushSchedulerQueue () {
	  flushing = true;
	  var watcher, id, vm;

	  // Sort queue before flush.
	  // This ensures that:
	  // 1. Components are updated from parent to child. (because parent is always
	  //    created before the child)
	  // 2. A component's user watchers are run before its render watcher (because
	  //    user watchers are created before the render watcher)
	  // 3. If a component is destroyed during a parent component's watcher run,
	  //    its watchers can be skipped.
	  queue.sort(function (a, b) { return a.id - b.id; });

	  // do not cache length because more watchers might be pushed
	  // as we run existing watchers
	  for (index = 0; index < queue.length; index++) {
	    watcher = queue[index];
	    id = watcher.id;
	    has[id] = null;
	    watcher.run();
	    // in dev build, check and stop circular updates.
	    if ("development" !== 'production' && has[id] != null) {
	      circular[id] = (circular[id] || 0) + 1;
	      if (circular[id] > config._maxUpdateCount) {
	        warn(
	          'You may have an infinite update loop ' + (
	            watcher.user
	              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
	              : "in a component render function."
	          ),
	          watcher.vm
	        );
	        break
	      }
	    }
	  }

	  // reset scheduler before updated hook called
	  var oldQueue = queue.slice();
	  resetSchedulerState();

	  // call updated hooks
	  index = oldQueue.length;
	  while (index--) {
	    watcher = oldQueue[index];
	    vm = watcher.vm;
	    if (vm._watcher === watcher && vm._isMounted) {
	      callHook(vm, 'updated');
	    }
	  }

	  // devtool hook
	  /* istanbul ignore if */
	  if (devtools && config.devtools) {
	    devtools.emit('flush');
	  }
	}

	/**
	 * Push a watcher into the watcher queue.
	 * Jobs with duplicate IDs will be skipped unless it's
	 * pushed when the queue is being flushed.
	 */
	function queueWatcher (watcher) {
	  var id = watcher.id;
	  if (has[id] == null) {
	    has[id] = true;
	    if (!flushing) {
	      queue.push(watcher);
	    } else {
	      // if already flushing, splice the watcher based on its id
	      // if already past its id, it will be run next immediately.
	      var i = queue.length - 1;
	      while (i >= 0 && queue[i].id > watcher.id) {
	        i--;
	      }
	      queue.splice(Math.max(i, index) + 1, 0, watcher);
	    }
	    // queue the flush
	    if (!waiting) {
	      waiting = true;
	      nextTick(flushSchedulerQueue);
	    }
	  }
	}

	/*  */

	var uid$2 = 0;

	/**
	 * A watcher parses an expression, collects dependencies,
	 * and fires callback when the expression value changes.
	 * This is used for both the $watch() api and directives.
	 */
	var Watcher = function Watcher (
	  vm,
	  expOrFn,
	  cb,
	  options
	) {
	  this.vm = vm;
	  vm._watchers.push(this);
	  // options
	  if (options) {
	    this.deep = !!options.deep;
	    this.user = !!options.user;
	    this.lazy = !!options.lazy;
	    this.sync = !!options.sync;
	  } else {
	    this.deep = this.user = this.lazy = this.sync = false;
	  }
	  this.cb = cb;
	  this.id = ++uid$2; // uid for batching
	  this.active = true;
	  this.dirty = this.lazy; // for lazy watchers
	  this.deps = [];
	  this.newDeps = [];
	  this.depIds = new _Set();
	  this.newDepIds = new _Set();
	  this.expression = expOrFn.toString();
	  // parse expression for getter
	  if (typeof expOrFn === 'function') {
	    this.getter = expOrFn;
	  } else {
	    this.getter = parsePath(expOrFn);
	    if (!this.getter) {
	      this.getter = function () {};
	      "development" !== 'production' && warn(
	        "Failed watching path: \"" + expOrFn + "\" " +
	        'Watcher only accepts simple dot-delimited paths. ' +
	        'For full control, use a function instead.',
	        vm
	      );
	    }
	  }
	  this.value = this.lazy
	    ? undefined
	    : this.get();
	};

	/**
	 * Evaluate the getter, and re-collect dependencies.
	 */
	Watcher.prototype.get = function get () {
	  pushTarget(this);
	  var value;
	  var vm = this.vm;
	  if (this.user) {
	    try {
	      value = this.getter.call(vm, vm);
	    } catch (e) {
	      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
	    }
	  } else {
	    value = this.getter.call(vm, vm);
	  }
	  // "touch" every property so they are all tracked as
	  // dependencies for deep watching
	  if (this.deep) {
	    traverse(value);
	  }
	  popTarget();
	  this.cleanupDeps();
	  return value
	};

	/**
	 * Add a dependency to this directive.
	 */
	Watcher.prototype.addDep = function addDep (dep) {
	  var id = dep.id;
	  if (!this.newDepIds.has(id)) {
	    this.newDepIds.add(id);
	    this.newDeps.push(dep);
	    if (!this.depIds.has(id)) {
	      dep.addSub(this);
	    }
	  }
	};

	/**
	 * Clean up for dependency collection.
	 */
	Watcher.prototype.cleanupDeps = function cleanupDeps () {
	    var this$1 = this;

	  var i = this.deps.length;
	  while (i--) {
	    var dep = this$1.deps[i];
	    if (!this$1.newDepIds.has(dep.id)) {
	      dep.removeSub(this$1);
	    }
	  }
	  var tmp = this.depIds;
	  this.depIds = this.newDepIds;
	  this.newDepIds = tmp;
	  this.newDepIds.clear();
	  tmp = this.deps;
	  this.deps = this.newDeps;
	  this.newDeps = tmp;
	  this.newDeps.length = 0;
	};

	/**
	 * Subscriber interface.
	 * Will be called when a dependency changes.
	 */
	Watcher.prototype.update = function update () {
	  /* istanbul ignore else */
	  if (this.lazy) {
	    this.dirty = true;
	  } else if (this.sync) {
	    this.run();
	  } else {
	    queueWatcher(this);
	  }
	};

	/**
	 * Scheduler job interface.
	 * Will be called by the scheduler.
	 */
	Watcher.prototype.run = function run () {
	  if (this.active) {
	    var value = this.get();
	    if (
	      value !== this.value ||
	      // Deep watchers and watchers on Object/Arrays should fire even
	      // when the value is the same, because the value may
	      // have mutated.
	      isObject(value) ||
	      this.deep
	    ) {
	      // set new value
	      var oldValue = this.value;
	      this.value = value;
	      if (this.user) {
	        try {
	          this.cb.call(this.vm, value, oldValue);
	        } catch (e) {
	          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
	        }
	      } else {
	        this.cb.call(this.vm, value, oldValue);
	      }
	    }
	  }
	};

	/**
	 * Evaluate the value of the watcher.
	 * This only gets called for lazy watchers.
	 */
	Watcher.prototype.evaluate = function evaluate () {
	  this.value = this.get();
	  this.dirty = false;
	};

	/**
	 * Depend on all deps collected by this watcher.
	 */
	Watcher.prototype.depend = function depend () {
	    var this$1 = this;

	  var i = this.deps.length;
	  while (i--) {
	    this$1.deps[i].depend();
	  }
	};

	/**
	 * Remove self from all dependencies' subscriber list.
	 */
	Watcher.prototype.teardown = function teardown () {
	    var this$1 = this;

	  if (this.active) {
	    // remove self from vm's watcher list
	    // this is a somewhat expensive operation so we skip it
	    // if the vm is being destroyed.
	    if (!this.vm._isBeingDestroyed) {
	      remove(this.vm._watchers, this);
	    }
	    var i = this.deps.length;
	    while (i--) {
	      this$1.deps[i].removeSub(this$1);
	    }
	    this.active = false;
	  }
	};

	/**
	 * Recursively traverse an object to evoke all converted
	 * getters, so that every nested property inside the object
	 * is collected as a "deep" dependency.
	 */
	var seenObjects = new _Set();
	function traverse (val) {
	  seenObjects.clear();
	  _traverse(val, seenObjects);
	}

	function _traverse (val, seen) {
	  var i, keys;
	  var isA = Array.isArray(val);
	  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {
	    return
	  }
	  if (val.__ob__) {
	    var depId = val.__ob__.dep.id;
	    if (seen.has(depId)) {
	      return
	    }
	    seen.add(depId);
	  }
	  if (isA) {
	    i = val.length;
	    while (i--) { _traverse(val[i], seen); }
	  } else {
	    keys = Object.keys(val);
	    i = keys.length;
	    while (i--) { _traverse(val[keys[i]], seen); }
	  }
	}

	/*  */

	var sharedPropertyDefinition = {
	  enumerable: true,
	  configurable: true,
	  get: noop,
	  set: noop
	};

	function proxy (target, sourceKey, key) {
	  sharedPropertyDefinition.get = function proxyGetter () {
	    return this[sourceKey][key]
	  };
	  sharedPropertyDefinition.set = function proxySetter (val) {
	    this[sourceKey][key] = val;
	  };
	  Object.defineProperty(target, key, sharedPropertyDefinition);
	}

	function initState (vm) {
	  vm._watchers = [];
	  var opts = vm.$options;
	  if (opts.props) { initProps(vm, opts.props); }
	  if (opts.methods) { initMethods(vm, opts.methods); }
	  if (opts.data) {
	    initData(vm);
	  } else {
	    observe(vm._data = {}, true /* asRootData */);
	  }
	  if (opts.computed) { initComputed(vm, opts.computed); }
	  if (opts.watch) { initWatch(vm, opts.watch); }
	}

	var isReservedProp = { key: 1, ref: 1, slot: 1 };

	function initProps (vm, propsOptions) {
	  var propsData = vm.$options.propsData || {};
	  var props = vm._props = {};
	  // cache prop keys so that future props updates can iterate using Array
	  // instead of dynamic object key enumeration.
	  var keys = vm.$options._propKeys = [];
	  var isRoot = !vm.$parent;
	  // root instance props should be converted
	  observerState.shouldConvert = isRoot;
	  var loop = function ( key ) {
	    keys.push(key);
	    var value = validateProp(key, propsOptions, propsData, vm);
	    /* istanbul ignore else */
	    {
	      if (isReservedProp[key]) {
	        warn(
	          ("\"" + key + "\" is a reserved attribute and cannot be used as component prop."),
	          vm
	        );
	      }
	      defineReactive$$1(props, key, value, function () {
	        if (vm.$parent && !observerState.isSettingProps) {
	          warn(
	            "Avoid mutating a prop directly since the value will be " +
	            "overwritten whenever the parent component re-renders. " +
	            "Instead, use a data or computed property based on the prop's " +
	            "value. Prop being mutated: \"" + key + "\"",
	            vm
	          );
	        }
	      });
	    }
	    // static props are already proxied on the component's prototype
	    // during Vue.extend(). We only need to proxy props defined at
	    // instantiation here.
	    if (!(key in vm)) {
	      proxy(vm, "_props", key);
	    }
	  };

	  for (var key in propsOptions) loop( key );
	  observerState.shouldConvert = true;
	}

	function initData (vm) {
	  var data = vm.$options.data;
	  data = vm._data = typeof data === 'function'
	    ? getData(data, vm)
	    : data || {};
	  if (!isPlainObject(data)) {
	    data = {};
	    "development" !== 'production' && warn(
	      'data functions should return an object:\n' +
	      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
	      vm
	    );
	  }
	  // proxy data on instance
	  var keys = Object.keys(data);
	  var props = vm.$options.props;
	  var i = keys.length;
	  while (i--) {
	    if (props && hasOwn(props, keys[i])) {
	      "development" !== 'production' && warn(
	        "The data property \"" + (keys[i]) + "\" is already declared as a prop. " +
	        "Use prop default value instead.",
	        vm
	      );
	    } else if (!isReserved(keys[i])) {
	      proxy(vm, "_data", keys[i]);
	    }
	  }
	  // observe data
	  observe(data, true /* asRootData */);
	}

	function getData (data, vm) {
	  try {
	    return data.call(vm)
	  } catch (e) {
	    handleError(e, vm, "data()");
	    return {}
	  }
	}

	var computedWatcherOptions = { lazy: true };

	function initComputed (vm, computed) {
	  var watchers = vm._computedWatchers = Object.create(null);

	  for (var key in computed) {
	    var userDef = computed[key];
	    var getter = typeof userDef === 'function' ? userDef : userDef.get;
	    // create internal watcher for the computed property.
	    watchers[key] = new Watcher(vm, getter, noop, computedWatcherOptions);

	    // component-defined computed properties are already defined on the
	    // component prototype. We only need to define computed properties defined
	    // at instantiation here.
	    if (!(key in vm)) {
	      defineComputed(vm, key, userDef);
	    }
	  }
	}

	function defineComputed (target, key, userDef) {
	  if (typeof userDef === 'function') {
	    sharedPropertyDefinition.get = createComputedGetter(key);
	    sharedPropertyDefinition.set = noop;
	  } else {
	    sharedPropertyDefinition.get = userDef.get
	      ? userDef.cache !== false
	        ? createComputedGetter(key)
	        : userDef.get
	      : noop;
	    sharedPropertyDefinition.set = userDef.set
	      ? userDef.set
	      : noop;
	  }
	  Object.defineProperty(target, key, sharedPropertyDefinition);
	}

	function createComputedGetter (key) {
	  return function computedGetter () {
	    var watcher = this._computedWatchers && this._computedWatchers[key];
	    if (watcher) {
	      if (watcher.dirty) {
	        watcher.evaluate();
	      }
	      if (Dep.target) {
	        watcher.depend();
	      }
	      return watcher.value
	    }
	  }
	}

	function initMethods (vm, methods) {
	  var props = vm.$options.props;
	  for (var key in methods) {
	    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
	    {
	      if (methods[key] == null) {
	        warn(
	          "method \"" + key + "\" has an undefined value in the component definition. " +
	          "Did you reference the function correctly?",
	          vm
	        );
	      }
	      if (props && hasOwn(props, key)) {
	        warn(
	          ("method \"" + key + "\" has already been defined as a prop."),
	          vm
	        );
	      }
	    }
	  }
	}

	function initWatch (vm, watch) {
	  for (var key in watch) {
	    var handler = watch[key];
	    if (Array.isArray(handler)) {
	      for (var i = 0; i < handler.length; i++) {
	        createWatcher(vm, key, handler[i]);
	      }
	    } else {
	      createWatcher(vm, key, handler);
	    }
	  }
	}

	function createWatcher (vm, key, handler) {
	  var options;
	  if (isPlainObject(handler)) {
	    options = handler;
	    handler = handler.handler;
	  }
	  if (typeof handler === 'string') {
	    handler = vm[handler];
	  }
	  vm.$watch(key, handler, options);
	}

	function stateMixin (Vue) {
	  // flow somehow has problems with directly declared definition object
	  // when using Object.defineProperty, so we have to procedurally build up
	  // the object here.
	  var dataDef = {};
	  dataDef.get = function () { return this._data };
	  var propsDef = {};
	  propsDef.get = function () { return this._props };
	  {
	    dataDef.set = function (newData) {
	      warn(
	        'Avoid replacing instance root $data. ' +
	        'Use nested data properties instead.',
	        this
	      );
	    };
	    propsDef.set = function () {
	      warn("$props is readonly.", this);
	    };
	  }
	  Object.defineProperty(Vue.prototype, '$data', dataDef);
	  Object.defineProperty(Vue.prototype, '$props', propsDef);

	  Vue.prototype.$set = set;
	  Vue.prototype.$delete = del;

	  Vue.prototype.$watch = function (
	    expOrFn,
	    cb,
	    options
	  ) {
	    var vm = this;
	    options = options || {};
	    options.user = true;
	    var watcher = new Watcher(vm, expOrFn, cb, options);
	    if (options.immediate) {
	      cb.call(vm, watcher.value);
	    }
	    return function unwatchFn () {
	      watcher.teardown();
	    }
	  };
	}

	/*  */

	// hooks to be invoked on component VNodes during patch
	var componentVNodeHooks = {
	  init: function init (
	    vnode,
	    hydrating,
	    parentElm,
	    refElm
	  ) {
	    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {
	      var child = vnode.componentInstance = createComponentInstanceForVnode(
	        vnode,
	        activeInstance,
	        parentElm,
	        refElm
	      );
	      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
	    } else if (vnode.data.keepAlive) {
	      // kept-alive components, treat as a patch
	      var mountedNode = vnode; // work around flow
	      componentVNodeHooks.prepatch(mountedNode, mountedNode);
	    }
	  },

	  prepatch: function prepatch (oldVnode, vnode) {
	    var options = vnode.componentOptions;
	    var child = vnode.componentInstance = oldVnode.componentInstance;
	    updateChildComponent(
	      child,
	      options.propsData, // updated props
	      options.listeners, // updated listeners
	      vnode, // new parent vnode
	      options.children // new children
	    );
	  },

	  insert: function insert (vnode) {
	    if (!vnode.componentInstance._isMounted) {
	      vnode.componentInstance._isMounted = true;
	      callHook(vnode.componentInstance, 'mounted');
	    }
	    if (vnode.data.keepAlive) {
	      activateChildComponent(vnode.componentInstance, true /* direct */);
	    }
	  },

	  destroy: function destroy (vnode) {
	    if (!vnode.componentInstance._isDestroyed) {
	      if (!vnode.data.keepAlive) {
	        vnode.componentInstance.$destroy();
	      } else {
	        deactivateChildComponent(vnode.componentInstance, true /* direct */);
	      }
	    }
	  }
	};

	var hooksToMerge = Object.keys(componentVNodeHooks);

	function createComponent (
	  Ctor,
	  data,
	  context,
	  children,
	  tag
	) {
	  if (!Ctor) {
	    return
	  }

	  var baseCtor = context.$options._base;
	  if (isObject(Ctor)) {
	    Ctor = baseCtor.extend(Ctor);
	  }

	  if (typeof Ctor !== 'function') {
	    {
	      warn(("Invalid Component definition: " + (String(Ctor))), context);
	    }
	    return
	  }

	  // async component
	  if (!Ctor.cid) {
	    if (Ctor.resolved) {
	      Ctor = Ctor.resolved;
	    } else {
	      Ctor = resolveAsyncComponent(Ctor, baseCtor, function () {
	        // it's ok to queue this on every render because
	        // $forceUpdate is buffered by the scheduler.
	        context.$forceUpdate();
	      });
	      if (!Ctor) {
	        // return nothing if this is indeed an async component
	        // wait for the callback to trigger parent update.
	        return
	      }
	    }
	  }

	  // resolve constructor options in case global mixins are applied after
	  // component constructor creation
	  resolveConstructorOptions(Ctor);

	  data = data || {};

	  // transform component v-model data into props & events
	  if (data.model) {
	    transformModel(Ctor.options, data);
	  }

	  // extract props
	  var propsData = extractProps(data, Ctor, tag);

	  // functional component
	  if (Ctor.options.functional) {
	    return createFunctionalComponent(Ctor, propsData, data, context, children)
	  }

	  // extract listeners, since these needs to be treated as
	  // child component listeners instead of DOM listeners
	  var listeners = data.on;
	  // replace with listeners with .native modifier
	  data.on = data.nativeOn;

	  if (Ctor.options.abstract) {
	    // abstract components do not keep anything
	    // other than props & listeners
	    data = {};
	  }

	  // merge component management hooks onto the placeholder node
	  mergeHooks(data);

	  // return a placeholder vnode
	  var name = Ctor.options.name || tag;
	  var vnode = new VNode(
	    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
	    data, undefined, undefined, undefined, context,
	    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }
	  );
	  return vnode
	}

	function createFunctionalComponent (
	  Ctor,
	  propsData,
	  data,
	  context,
	  children
	) {
	  var props = {};
	  var propOptions = Ctor.options.props;
	  if (propOptions) {
	    for (var key in propOptions) {
	      props[key] = validateProp(key, propOptions, propsData);
	    }
	  }
	  // ensure the createElement function in functional components
	  // gets a unique context - this is necessary for correct named slot check
	  var _context = Object.create(context);
	  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };
	  var vnode = Ctor.options.render.call(null, h, {
	    props: props,
	    data: data,
	    parent: context,
	    children: children,
	    slots: function () { return resolveSlots(children, context); }
	  });
	  if (vnode instanceof VNode) {
	    vnode.functionalContext = context;
	    if (data.slot) {
	      (vnode.data || (vnode.data = {})).slot = data.slot;
	    }
	  }
	  return vnode
	}

	function createComponentInstanceForVnode (
	  vnode, // we know it's MountedComponentVNode but flow doesn't
	  parent, // activeInstance in lifecycle state
	  parentElm,
	  refElm
	) {
	  var vnodeComponentOptions = vnode.componentOptions;
	  var options = {
	    _isComponent: true,
	    parent: parent,
	    propsData: vnodeComponentOptions.propsData,
	    _componentTag: vnodeComponentOptions.tag,
	    _parentVnode: vnode,
	    _parentListeners: vnodeComponentOptions.listeners,
	    _renderChildren: vnodeComponentOptions.children,
	    _parentElm: parentElm || null,
	    _refElm: refElm || null
	  };
	  // check inline-template render functions
	  var inlineTemplate = vnode.data.inlineTemplate;
	  if (inlineTemplate) {
	    options.render = inlineTemplate.render;
	    options.staticRenderFns = inlineTemplate.staticRenderFns;
	  }
	  return new vnodeComponentOptions.Ctor(options)
	}

	function resolveAsyncComponent (
	  factory,
	  baseCtor,
	  cb
	) {
	  if (factory.requested) {
	    // pool callbacks
	    factory.pendingCallbacks.push(cb);
	  } else {
	    factory.requested = true;
	    var cbs = factory.pendingCallbacks = [cb];
	    var sync = true;

	    var resolve = function (res) {
	      if (isObject(res)) {
	        res = baseCtor.extend(res);
	      }
	      // cache resolved
	      factory.resolved = res;
	      // invoke callbacks only if this is not a synchronous resolve
	      // (async resolves are shimmed as synchronous during SSR)
	      if (!sync) {
	        for (var i = 0, l = cbs.length; i < l; i++) {
	          cbs[i](res);
	        }
	      }
	    };

	    var reject = function (reason) {
	      "development" !== 'production' && warn(
	        "Failed to resolve async component: " + (String(factory)) +
	        (reason ? ("\nReason: " + reason) : '')
	      );
	    };

	    var res = factory(resolve, reject);

	    // handle promise
	    if (res && typeof res.then === 'function' && !factory.resolved) {
	      res.then(resolve, reject);
	    }

	    sync = false;
	    // return in case resolved synchronously
	    return factory.resolved
	  }
	}

	function extractProps (data, Ctor, tag) {
	  // we are only extracting raw values here.
	  // validation and default values are handled in the child
	  // component itself.
	  var propOptions = Ctor.options.props;
	  if (!propOptions) {
	    return
	  }
	  var res = {};
	  var attrs = data.attrs;
	  var props = data.props;
	  var domProps = data.domProps;
	  if (attrs || props || domProps) {
	    for (var key in propOptions) {
	      var altKey = hyphenate(key);
	      {
	        var keyInLowerCase = key.toLowerCase();
	        if (
	          key !== keyInLowerCase &&
	          attrs && attrs.hasOwnProperty(keyInLowerCase)
	        ) {
	          tip(
	            "Prop \"" + keyInLowerCase + "\" is passed to component " +
	            (formatComponentName(tag || Ctor)) + ", but the delared prop name is" +
	            " \"" + key + "\". " +
	            "Note that HTML attributes are case-insensitive and camelCased " +
	            "props need to use their kebab-case equivalents when using in-DOM " +
	            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
	          );
	        }
	      }
	      checkProp(res, props, key, altKey, true) ||
	      checkProp(res, attrs, key, altKey) ||
	      checkProp(res, domProps, key, altKey);
	    }
	  }
	  return res
	}

	function checkProp (
	  res,
	  hash,
	  key,
	  altKey,
	  preserve
	) {
	  if (hash) {
	    if (hasOwn(hash, key)) {
	      res[key] = hash[key];
	      if (!preserve) {
	        delete hash[key];
	      }
	      return true
	    } else if (hasOwn(hash, altKey)) {
	      res[key] = hash[altKey];
	      if (!preserve) {
	        delete hash[altKey];
	      }
	      return true
	    }
	  }
	  return false
	}

	function mergeHooks (data) {
	  if (!data.hook) {
	    data.hook = {};
	  }
	  for (var i = 0; i < hooksToMerge.length; i++) {
	    var key = hooksToMerge[i];
	    var fromParent = data.hook[key];
	    var ours = componentVNodeHooks[key];
	    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;
	  }
	}

	function mergeHook$1 (one, two) {
	  return function (a, b, c, d) {
	    one(a, b, c, d);
	    two(a, b, c, d);
	  }
	}

	// transform component v-model info (value and callback) into
	// prop and event handler respectively.
	function transformModel (options, data) {
	  var prop = (options.model && options.model.prop) || 'value';
	  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
	  var on = data.on || (data.on = {});
	  if (on[event]) {
	    on[event] = [data.model.callback].concat(on[event]);
	  } else {
	    on[event] = data.model.callback;
	  }
	}

	/*  */

	var SIMPLE_NORMALIZE = 1;
	var ALWAYS_NORMALIZE = 2;

	// wrapper function for providing a more flexible interface
	// without getting yelled at by flow
	function createElement (
	  context,
	  tag,
	  data,
	  children,
	  normalizationType,
	  alwaysNormalize
	) {
	  if (Array.isArray(data) || isPrimitive(data)) {
	    normalizationType = children;
	    children = data;
	    data = undefined;
	  }
	  if (alwaysNormalize) { normalizationType = ALWAYS_NORMALIZE; }
	  return _createElement(context, tag, data, children, normalizationType)
	}

	function _createElement (
	  context,
	  tag,
	  data,
	  children,
	  normalizationType
	) {
	  if (data && data.__ob__) {
	    "development" !== 'production' && warn(
	      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
	      'Always create fresh vnode data objects in each render!',
	      context
	    );
	    return createEmptyVNode()
	  }
	  if (!tag) {
	    // in case of component :is set to falsy value
	    return createEmptyVNode()
	  }
	  // support single function children as default scoped slot
	  if (Array.isArray(children) &&
	      typeof children[0] === 'function') {
	    data = data || {};
	    data.scopedSlots = { default: children[0] };
	    children.length = 0;
	  }
	  if (normalizationType === ALWAYS_NORMALIZE) {
	    children = normalizeChildren(children);
	  } else if (normalizationType === SIMPLE_NORMALIZE) {
	    children = simpleNormalizeChildren(children);
	  }
	  var vnode, ns;
	  if (typeof tag === 'string') {
	    var Ctor;
	    ns = config.getTagNamespace(tag);
	    if (config.isReservedTag(tag)) {
	      // platform built-in elements
	      vnode = new VNode(
	        config.parsePlatformTagName(tag), data, children,
	        undefined, undefined, context
	      );
	    } else if ((Ctor = resolveAsset(context.$options, 'components', tag))) {
	      // component
	      vnode = createComponent(Ctor, data, context, children, tag);
	    } else {
	      // unknown or unlisted namespaced elements
	      // check at runtime because it may get assigned a namespace when its
	      // parent normalizes children
	      vnode = new VNode(
	        tag, data, children,
	        undefined, undefined, context
	      );
	    }
	  } else {
	    // direct component options / constructor
	    vnode = createComponent(tag, data, context, children);
	  }
	  if (vnode) {
	    if (ns) { applyNS(vnode, ns); }
	    return vnode
	  } else {
	    return createEmptyVNode()
	  }
	}

	function applyNS (vnode, ns) {
	  vnode.ns = ns;
	  if (vnode.tag === 'foreignObject') {
	    // use default namespace inside foreignObject
	    return
	  }
	  if (vnode.children) {
	    for (var i = 0, l = vnode.children.length; i < l; i++) {
	      var child = vnode.children[i];
	      if (child.tag && !child.ns) {
	        applyNS(child, ns);
	      }
	    }
	  }
	}

	/*  */

	/**
	 * Runtime helper for rendering v-for lists.
	 */
	function renderList (
	  val,
	  render
	) {
	  var ret, i, l, keys, key;
	  if (Array.isArray(val) || typeof val === 'string') {
	    ret = new Array(val.length);
	    for (i = 0, l = val.length; i < l; i++) {
	      ret[i] = render(val[i], i);
	    }
	  } else if (typeof val === 'number') {
	    ret = new Array(val);
	    for (i = 0; i < val; i++) {
	      ret[i] = render(i + 1, i);
	    }
	  } else if (isObject(val)) {
	    keys = Object.keys(val);
	    ret = new Array(keys.length);
	    for (i = 0, l = keys.length; i < l; i++) {
	      key = keys[i];
	      ret[i] = render(val[key], key, i);
	    }
	  }
	  return ret
	}

	/*  */

	/**
	 * Runtime helper for rendering <slot>
	 */
	function renderSlot (
	  name,
	  fallback,
	  props,
	  bindObject
	) {
	  var scopedSlotFn = this.$scopedSlots[name];
	  if (scopedSlotFn) { // scoped slot
	    props = props || {};
	    if (bindObject) {
	      extend(props, bindObject);
	    }
	    return scopedSlotFn(props) || fallback
	  } else {
	    var slotNodes = this.$slots[name];
	    // warn duplicate slot usage
	    if (slotNodes && "development" !== 'production') {
	      slotNodes._rendered && warn(
	        "Duplicate presence of slot \"" + name + "\" found in the same render tree " +
	        "- this will likely cause render errors.",
	        this
	      );
	      slotNodes._rendered = true;
	    }
	    return slotNodes || fallback
	  }
	}

	/*  */

	/**
	 * Runtime helper for resolving filters
	 */
	function resolveFilter (id) {
	  return resolveAsset(this.$options, 'filters', id, true) || identity
	}

	/*  */

	/**
	 * Runtime helper for checking keyCodes from config.
	 */
	function checkKeyCodes (
	  eventKeyCode,
	  key,
	  builtInAlias
	) {
	  var keyCodes = config.keyCodes[key] || builtInAlias;
	  if (Array.isArray(keyCodes)) {
	    return keyCodes.indexOf(eventKeyCode) === -1
	  } else {
	    return keyCodes !== eventKeyCode
	  }
	}

	/*  */

	/**
	 * Runtime helper for merging v-bind="object" into a VNode's data.
	 */
	function bindObjectProps (
	  data,
	  tag,
	  value,
	  asProp
	) {
	  if (value) {
	    if (!isObject(value)) {
	      "development" !== 'production' && warn(
	        'v-bind without argument expects an Object or Array value',
	        this
	      );
	    } else {
	      if (Array.isArray(value)) {
	        value = toObject(value);
	      }
	      var hash;
	      for (var key in value) {
	        if (key === 'class' || key === 'style') {
	          hash = data;
	        } else {
	          var type = data.attrs && data.attrs.type;
	          hash = asProp || config.mustUseProp(tag, type, key)
	            ? data.domProps || (data.domProps = {})
	            : data.attrs || (data.attrs = {});
	        }
	        if (!(key in hash)) {
	          hash[key] = value[key];
	        }
	      }
	    }
	  }
	  return data
	}

	/*  */

	/**
	 * Runtime helper for rendering static trees.
	 */
	function renderStatic (
	  index,
	  isInFor
	) {
	  var tree = this._staticTrees[index];
	  // if has already-rendered static tree and not inside v-for,
	  // we can reuse the same tree by doing a shallow clone.
	  if (tree && !isInFor) {
	    return Array.isArray(tree)
	      ? cloneVNodes(tree)
	      : cloneVNode(tree)
	  }
	  // otherwise, render a fresh tree.
	  tree = this._staticTrees[index] =
	    this.$options.staticRenderFns[index].call(this._renderProxy);
	  markStatic(tree, ("__static__" + index), false);
	  return tree
	}

	/**
	 * Runtime helper for v-once.
	 * Effectively it means marking the node as static with a unique key.
	 */
	function markOnce (
	  tree,
	  index,
	  key
	) {
	  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
	  return tree
	}

	function markStatic (
	  tree,
	  key,
	  isOnce
	) {
	  if (Array.isArray(tree)) {
	    for (var i = 0; i < tree.length; i++) {
	      if (tree[i] && typeof tree[i] !== 'string') {
	        markStaticNode(tree[i], (key + "_" + i), isOnce);
	      }
	    }
	  } else {
	    markStaticNode(tree, key, isOnce);
	  }
	}

	function markStaticNode (node, key, isOnce) {
	  node.isStatic = true;
	  node.key = key;
	  node.isOnce = isOnce;
	}

	/*  */

	function initRender (vm) {
	  vm.$vnode = null; // the placeholder node in parent tree
	  vm._vnode = null; // the root of the child tree
	  vm._staticTrees = null;
	  var parentVnode = vm.$options._parentVnode;
	  var renderContext = parentVnode && parentVnode.context;
	  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);
	  vm.$scopedSlots = emptyObject;
	  // bind the createElement fn to this instance
	  // so that we get proper render context inside it.
	  // args order: tag, data, children, normalizationType, alwaysNormalize
	  // internal version is used by render functions compiled from templates
	  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
	  // normalization is always applied for the public version, used in
	  // user-written render functions.
	  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };
	}

	function renderMixin (Vue) {
	  Vue.prototype.$nextTick = function (fn) {
	    return nextTick(fn, this)
	  };

	  Vue.prototype._render = function () {
	    var vm = this;
	    var ref = vm.$options;
	    var render = ref.render;
	    var staticRenderFns = ref.staticRenderFns;
	    var _parentVnode = ref._parentVnode;

	    if (vm._isMounted) {
	      // clone slot nodes on re-renders
	      for (var key in vm.$slots) {
	        vm.$slots[key] = cloneVNodes(vm.$slots[key]);
	      }
	    }

	    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;

	    if (staticRenderFns && !vm._staticTrees) {
	      vm._staticTrees = [];
	    }
	    // set parent vnode. this allows render functions to have access
	    // to the data on the placeholder node.
	    vm.$vnode = _parentVnode;
	    // render self
	    var vnode;
	    try {
	      vnode = render.call(vm._renderProxy, vm.$createElement);
	    } catch (e) {
	      handleError(e, vm, "render function");
	      // return error render result,
	      // or previous vnode to prevent render error causing blank component
	      /* istanbul ignore else */
	      {
	        vnode = vm.$options.renderError
	          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)
	          : vm._vnode;
	      }
	    }
	    // return empty vnode in case the render function errored out
	    if (!(vnode instanceof VNode)) {
	      if ("development" !== 'production' && Array.isArray(vnode)) {
	        warn(
	          'Multiple root nodes returned from render function. Render function ' +
	          'should return a single root node.',
	          vm
	        );
	      }
	      vnode = createEmptyVNode();
	    }
	    // set parent
	    vnode.parent = _parentVnode;
	    return vnode
	  };

	  // internal render helpers.
	  // these are exposed on the instance prototype to reduce generated render
	  // code size.
	  Vue.prototype._o = markOnce;
	  Vue.prototype._n = toNumber;
	  Vue.prototype._s = _toString;
	  Vue.prototype._l = renderList;
	  Vue.prototype._t = renderSlot;
	  Vue.prototype._q = looseEqual;
	  Vue.prototype._i = looseIndexOf;
	  Vue.prototype._m = renderStatic;
	  Vue.prototype._f = resolveFilter;
	  Vue.prototype._k = checkKeyCodes;
	  Vue.prototype._b = bindObjectProps;
	  Vue.prototype._v = createTextVNode;
	  Vue.prototype._e = createEmptyVNode;
	  Vue.prototype._u = resolveScopedSlots;
	}

	/*  */

	function initProvide (vm) {
	  var provide = vm.$options.provide;
	  if (provide) {
	    vm._provided = typeof provide === 'function'
	      ? provide.call(vm)
	      : provide;
	  }
	}

	function initInjections (vm) {
	  var inject = vm.$options.inject;
	  if (inject) {
	    // inject is :any because flow is not smart enough to figure out cached
	    // isArray here
	    var isArray = Array.isArray(inject);
	    var keys = isArray
	      ? inject
	      : hasSymbol
	        ? Reflect.ownKeys(inject)
	        : Object.keys(inject);

	    var loop = function ( i ) {
	      var key = keys[i];
	      var provideKey = isArray ? key : inject[key];
	      var source = vm;
	      while (source) {
	        if (source._provided && provideKey in source._provided) {
	          /* istanbul ignore else */
	          {
	            defineReactive$$1(vm, key, source._provided[provideKey], function () {
	              warn(
	                "Avoid mutating an injected value directly since the changes will be " +
	                "overwritten whenever the provided component re-renders. " +
	                "injection being mutated: \"" + key + "\"",
	                vm
	              );
	            });
	          }
	          break
	        }
	        source = source.$parent;
	      }
	    };

	    for (var i = 0; i < keys.length; i++) loop( i );
	  }
	}

	/*  */

	var uid = 0;

	function initMixin (Vue) {
	  Vue.prototype._init = function (options) {
	    var vm = this;
	    // a uid
	    vm._uid = uid++;

	    var startTag, endTag;
	    /* istanbul ignore if */
	    if ("development" !== 'production' && config.performance && mark) {
	      startTag = "vue-perf-init:" + (vm._uid);
	      endTag = "vue-perf-end:" + (vm._uid);
	      mark(startTag);
	    }

	    // a flag to avoid this being observed
	    vm._isVue = true;
	    // merge options
	    if (options && options._isComponent) {
	      // optimize internal component instantiation
	      // since dynamic options merging is pretty slow, and none of the
	      // internal component options needs special treatment.
	      initInternalComponent(vm, options);
	    } else {
	      vm.$options = mergeOptions(
	        resolveConstructorOptions(vm.constructor),
	        options || {},
	        vm
	      );
	    }
	    /* istanbul ignore else */
	    {
	      initProxy(vm);
	    }
	    // expose real self
	    vm._self = vm;
	    initLifecycle(vm);
	    initEvents(vm);
	    initRender(vm);
	    callHook(vm, 'beforeCreate');
	    initInjections(vm); // resolve injections before data/props
	    initState(vm);
	    initProvide(vm); // resolve provide after data/props
	    callHook(vm, 'created');

	    /* istanbul ignore if */
	    if ("development" !== 'production' && config.performance && mark) {
	      vm._name = formatComponentName(vm, false);
	      mark(endTag);
	      measure(((vm._name) + " init"), startTag, endTag);
	    }

	    if (vm.$options.el) {
	      vm.$mount(vm.$options.el);
	    }
	  };
	}

	function initInternalComponent (vm, options) {
	  var opts = vm.$options = Object.create(vm.constructor.options);
	  // doing this because it's faster than dynamic enumeration.
	  opts.parent = options.parent;
	  opts.propsData = options.propsData;
	  opts._parentVnode = options._parentVnode;
	  opts._parentListeners = options._parentListeners;
	  opts._renderChildren = options._renderChildren;
	  opts._componentTag = options._componentTag;
	  opts._parentElm = options._parentElm;
	  opts._refElm = options._refElm;
	  if (options.render) {
	    opts.render = options.render;
	    opts.staticRenderFns = options.staticRenderFns;
	  }
	}

	function resolveConstructorOptions (Ctor) {
	  var options = Ctor.options;
	  if (Ctor.super) {
	    var superOptions = resolveConstructorOptions(Ctor.super);
	    var cachedSuperOptions = Ctor.superOptions;
	    if (superOptions !== cachedSuperOptions) {
	      // super option changed,
	      // need to resolve new options.
	      Ctor.superOptions = superOptions;
	      // check if there are any late-modified/attached options (#4976)
	      var modifiedOptions = resolveModifiedOptions(Ctor);
	      // update base extend options
	      if (modifiedOptions) {
	        extend(Ctor.extendOptions, modifiedOptions);
	      }
	      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
	      if (options.name) {
	        options.components[options.name] = Ctor;
	      }
	    }
	  }
	  return options
	}

	function resolveModifiedOptions (Ctor) {
	  var modified;
	  var latest = Ctor.options;
	  var sealed = Ctor.sealedOptions;
	  for (var key in latest) {
	    if (latest[key] !== sealed[key]) {
	      if (!modified) { modified = {}; }
	      modified[key] = dedupe(latest[key], sealed[key]);
	    }
	  }
	  return modified
	}

	function dedupe (latest, sealed) {
	  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
	  // between merges
	  if (Array.isArray(latest)) {
	    var res = [];
	    sealed = Array.isArray(sealed) ? sealed : [sealed];
	    for (var i = 0; i < latest.length; i++) {
	      if (sealed.indexOf(latest[i]) < 0) {
	        res.push(latest[i]);
	      }
	    }
	    return res
	  } else {
	    return latest
	  }
	}

	function Vue$3 (options) {
	  if ("development" !== 'production' &&
	    !(this instanceof Vue$3)) {
	    warn('Vue is a constructor and should be called with the `new` keyword');
	  }
	  this._init(options);
	}

	initMixin(Vue$3);
	stateMixin(Vue$3);
	eventsMixin(Vue$3);
	lifecycleMixin(Vue$3);
	renderMixin(Vue$3);

	/*  */

	function initUse (Vue) {
	  Vue.use = function (plugin) {
	    /* istanbul ignore if */
	    if (plugin.installed) {
	      return
	    }
	    // additional parameters
	    var args = toArray(arguments, 1);
	    args.unshift(this);
	    if (typeof plugin.install === 'function') {
	      plugin.install.apply(plugin, args);
	    } else if (typeof plugin === 'function') {
	      plugin.apply(null, args);
	    }
	    plugin.installed = true;
	    return this
	  };
	}

	/*  */

	function initMixin$1 (Vue) {
	  Vue.mixin = function (mixin) {
	    this.options = mergeOptions(this.options, mixin);
	  };
	}

	/*  */

	function initExtend (Vue) {
	  /**
	   * Each instance constructor, including Vue, has a unique
	   * cid. This enables us to create wrapped "child
	   * constructors" for prototypal inheritance and cache them.
	   */
	  Vue.cid = 0;
	  var cid = 1;

	  /**
	   * Class inheritance
	   */
	  Vue.extend = function (extendOptions) {
	    extendOptions = extendOptions || {};
	    var Super = this;
	    var SuperId = Super.cid;
	    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
	    if (cachedCtors[SuperId]) {
	      return cachedCtors[SuperId]
	    }

	    var name = extendOptions.name || Super.options.name;
	    {
	      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
	        warn(
	          'Invalid component name: "' + name + '". Component names ' +
	          'can only contain alphanumeric characters and the hyphen, ' +
	          'and must start with a letter.'
	        );
	      }
	    }

	    var Sub = function VueComponent (options) {
	      this._init(options);
	    };
	    Sub.prototype = Object.create(Super.prototype);
	    Sub.prototype.constructor = Sub;
	    Sub.cid = cid++;
	    Sub.options = mergeOptions(
	      Super.options,
	      extendOptions
	    );
	    Sub['super'] = Super;

	    // For props and computed properties, we define the proxy getters on
	    // the Vue instances at extension time, on the extended prototype. This
	    // avoids Object.defineProperty calls for each instance created.
	    if (Sub.options.props) {
	      initProps$1(Sub);
	    }
	    if (Sub.options.computed) {
	      initComputed$1(Sub);
	    }

	    // allow further extension/mixin/plugin usage
	    Sub.extend = Super.extend;
	    Sub.mixin = Super.mixin;
	    Sub.use = Super.use;

	    // create asset registers, so extended classes
	    // can have their private assets too.
	    config._assetTypes.forEach(function (type) {
	      Sub[type] = Super[type];
	    });
	    // enable recursive self-lookup
	    if (name) {
	      Sub.options.components[name] = Sub;
	    }

	    // keep a reference to the super options at extension time.
	    // later at instantiation we can check if Super's options have
	    // been updated.
	    Sub.superOptions = Super.options;
	    Sub.extendOptions = extendOptions;
	    Sub.sealedOptions = extend({}, Sub.options);

	    // cache constructor
	    cachedCtors[SuperId] = Sub;
	    return Sub
	  };
	}

	function initProps$1 (Comp) {
	  var props = Comp.options.props;
	  for (var key in props) {
	    proxy(Comp.prototype, "_props", key);
	  }
	}

	function initComputed$1 (Comp) {
	  var computed = Comp.options.computed;
	  for (var key in computed) {
	    defineComputed(Comp.prototype, key, computed[key]);
	  }
	}

	/*  */

	function initAssetRegisters (Vue) {
	  /**
	   * Create asset registration methods.
	   */
	  config._assetTypes.forEach(function (type) {
	    Vue[type] = function (
	      id,
	      definition
	    ) {
	      if (!definition) {
	        return this.options[type + 's'][id]
	      } else {
	        /* istanbul ignore if */
	        {
	          if (type === 'component' && config.isReservedTag(id)) {
	            warn(
	              'Do not use built-in or reserved HTML elements as component ' +
	              'id: ' + id
	            );
	          }
	        }
	        if (type === 'component' && isPlainObject(definition)) {
	          definition.name = definition.name || id;
	          definition = this.options._base.extend(definition);
	        }
	        if (type === 'directive' && typeof definition === 'function') {
	          definition = { bind: definition, update: definition };
	        }
	        this.options[type + 's'][id] = definition;
	        return definition
	      }
	    };
	  });
	}

	/*  */

	var patternTypes = [String, RegExp];

	function getComponentName (opts) {
	  return opts && (opts.Ctor.options.name || opts.tag)
	}

	function matches (pattern, name) {
	  if (typeof pattern === 'string') {
	    return pattern.split(',').indexOf(name) > -1
	  } else if (pattern instanceof RegExp) {
	    return pattern.test(name)
	  }
	  /* istanbul ignore next */
	  return false
	}

	function pruneCache (cache, filter) {
	  for (var key in cache) {
	    var cachedNode = cache[key];
	    if (cachedNode) {
	      var name = getComponentName(cachedNode.componentOptions);
	      if (name && !filter(name)) {
	        pruneCacheEntry(cachedNode);
	        cache[key] = null;
	      }
	    }
	  }
	}

	function pruneCacheEntry (vnode) {
	  if (vnode) {
	    if (!vnode.componentInstance._inactive) {
	      callHook(vnode.componentInstance, 'deactivated');
	    }
	    vnode.componentInstance.$destroy();
	  }
	}

	var KeepAlive = {
	  name: 'keep-alive',
	  abstract: true,

	  props: {
	    include: patternTypes,
	    exclude: patternTypes
	  },

	  created: function created () {
	    this.cache = Object.create(null);
	  },

	  destroyed: function destroyed () {
	    var this$1 = this;

	    for (var key in this$1.cache) {
	      pruneCacheEntry(this$1.cache[key]);
	    }
	  },

	  watch: {
	    include: function include (val) {
	      pruneCache(this.cache, function (name) { return matches(val, name); });
	    },
	    exclude: function exclude (val) {
	      pruneCache(this.cache, function (name) { return !matches(val, name); });
	    }
	  },

	  render: function render () {
	    var vnode = getFirstComponentChild(this.$slots.default);
	    var componentOptions = vnode && vnode.componentOptions;
	    if (componentOptions) {
	      // check pattern
	      var name = getComponentName(componentOptions);
	      if (name && (
	        (this.include && !matches(this.include, name)) ||
	        (this.exclude && matches(this.exclude, name))
	      )) {
	        return vnode
	      }
	      var key = vnode.key == null
	        // same constructor may get registered as different local components
	        // so cid alone is not enough (#3269)
	        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
	        : vnode.key;
	      if (this.cache[key]) {
	        vnode.componentInstance = this.cache[key].componentInstance;
	      } else {
	        this.cache[key] = vnode;
	      }
	      vnode.data.keepAlive = true;
	    }
	    return vnode
	  }
	};

	var builtInComponents = {
	  KeepAlive: KeepAlive
	};

	/*  */

	function initGlobalAPI (Vue) {
	  // config
	  var configDef = {};
	  configDef.get = function () { return config; };
	  {
	    configDef.set = function () {
	      warn(
	        'Do not replace the Vue.config object, set individual fields instead.'
	      );
	    };
	  }
	  Object.defineProperty(Vue, 'config', configDef);

	  // exposed util methods.
	  // NOTE: these are not considered part of the public API - avoid relying on
	  // them unless you are aware of the risk.
	  Vue.util = {
	    warn: warn,
	    extend: extend,
	    mergeOptions: mergeOptions,
	    defineReactive: defineReactive$$1
	  };

	  Vue.set = set;
	  Vue.delete = del;
	  Vue.nextTick = nextTick;

	  Vue.options = Object.create(null);
	  config._assetTypes.forEach(function (type) {
	    Vue.options[type + 's'] = Object.create(null);
	  });

	  // this is used to identify the "base" constructor to extend all plain-object
	  // components with in Weex's multi-instance scenarios.
	  Vue.options._base = Vue;

	  extend(Vue.options.components, builtInComponents);

	  initUse(Vue);
	  initMixin$1(Vue);
	  initExtend(Vue);
	  initAssetRegisters(Vue);
	}

	initGlobalAPI(Vue$3);

	Object.defineProperty(Vue$3.prototype, '$isServer', {
	  get: isServerRendering
	});

	Vue$3.version = '2.2.5';

	/*  */

	// attributes that should be using props for binding
	var acceptValue = makeMap('input,textarea,option,select');
	var mustUseProp = function (tag, type, attr) {
	  return (
	    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
	    (attr === 'selected' && tag === 'option') ||
	    (attr === 'checked' && tag === 'input') ||
	    (attr === 'muted' && tag === 'video')
	  )
	};

	var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

	var isBooleanAttr = makeMap(
	  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
	  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
	  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
	  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
	  'required,reversed,scoped,seamless,selected,sortable,translate,' +
	  'truespeed,typemustmatch,visible'
	);

	var xlinkNS = 'http://www.w3.org/1999/xlink';

	var isXlink = function (name) {
	  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
	};

	var getXlinkProp = function (name) {
	  return isXlink(name) ? name.slice(6, name.length) : ''
	};

	var isFalsyAttrValue = function (val) {
	  return val == null || val === false
	};

	/*  */

	function genClassForVnode (vnode) {
	  var data = vnode.data;
	  var parentNode = vnode;
	  var childNode = vnode;
	  while (childNode.componentInstance) {
	    childNode = childNode.componentInstance._vnode;
	    if (childNode.data) {
	      data = mergeClassData(childNode.data, data);
	    }
	  }
	  while ((parentNode = parentNode.parent)) {
	    if (parentNode.data) {
	      data = mergeClassData(data, parentNode.data);
	    }
	  }
	  return genClassFromData(data)
	}

	function mergeClassData (child, parent) {
	  return {
	    staticClass: concat(child.staticClass, parent.staticClass),
	    class: child.class
	      ? [child.class, parent.class]
	      : parent.class
	  }
	}

	function genClassFromData (data) {
	  var dynamicClass = data.class;
	  var staticClass = data.staticClass;
	  if (staticClass || dynamicClass) {
	    return concat(staticClass, stringifyClass(dynamicClass))
	  }
	  /* istanbul ignore next */
	  return ''
	}

	function concat (a, b) {
	  return a ? b ? (a + ' ' + b) : a : (b || '')
	}

	function stringifyClass (value) {
	  var res = '';
	  if (!value) {
	    return res
	  }
	  if (typeof value === 'string') {
	    return value
	  }
	  if (Array.isArray(value)) {
	    var stringified;
	    for (var i = 0, l = value.length; i < l; i++) {
	      if (value[i]) {
	        if ((stringified = stringifyClass(value[i]))) {
	          res += stringified + ' ';
	        }
	      }
	    }
	    return res.slice(0, -1)
	  }
	  if (isObject(value)) {
	    for (var key in value) {
	      if (value[key]) { res += key + ' '; }
	    }
	    return res.slice(0, -1)
	  }
	  /* istanbul ignore next */
	  return res
	}

	/*  */

	var namespaceMap = {
	  svg: 'http://www.w3.org/2000/svg',
	  math: 'http://www.w3.org/1998/Math/MathML'
	};

	var isHTMLTag = makeMap(
	  'html,body,base,head,link,meta,style,title,' +
	  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
	  'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' +
	  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
	  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
	  'embed,object,param,source,canvas,script,noscript,del,ins,' +
	  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
	  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
	  'output,progress,select,textarea,' +
	  'details,dialog,menu,menuitem,summary,' +
	  'content,element,shadow,template'
	);

	// this map is intentionally selective, only covering SVG elements that may
	// contain child elements.
	var isSVG = makeMap(
	  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
	  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
	  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
	  true
	);

	var isPreTag = function (tag) { return tag === 'pre'; };

	var isReservedTag = function (tag) {
	  return isHTMLTag(tag) || isSVG(tag)
	};

	function getTagNamespace (tag) {
	  if (isSVG(tag)) {
	    return 'svg'
	  }
	  // basic support for MathML
	  // note it doesn't support other MathML elements being component roots
	  if (tag === 'math') {
	    return 'math'
	  }
	}

	var unknownElementCache = Object.create(null);
	function isUnknownElement (tag) {
	  /* istanbul ignore if */
	  if (!inBrowser) {
	    return true
	  }
	  if (isReservedTag(tag)) {
	    return false
	  }
	  tag = tag.toLowerCase();
	  /* istanbul ignore if */
	  if (unknownElementCache[tag] != null) {
	    return unknownElementCache[tag]
	  }
	  var el = document.createElement(tag);
	  if (tag.indexOf('-') > -1) {
	    // http://stackoverflow.com/a/28210364/1070244
	    return (unknownElementCache[tag] = (
	      el.constructor === window.HTMLUnknownElement ||
	      el.constructor === window.HTMLElement
	    ))
	  } else {
	    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
	  }
	}

	/*  */

	/**
	 * Query an element selector if it's not an element already.
	 */
	function query (el) {
	  if (typeof el === 'string') {
	    var selected = document.querySelector(el);
	    if (!selected) {
	      "development" !== 'production' && warn(
	        'Cannot find element: ' + el
	      );
	      return document.createElement('div')
	    }
	    return selected
	  } else {
	    return el
	  }
	}

	/*  */

	function createElement$1 (tagName, vnode) {
	  var elm = document.createElement(tagName);
	  if (tagName !== 'select') {
	    return elm
	  }
	  // false or null will remove the attribute but undefined will not
	  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
	    elm.setAttribute('multiple', 'multiple');
	  }
	  return elm
	}

	function createElementNS (namespace, tagName) {
	  return document.createElementNS(namespaceMap[namespace], tagName)
	}

	function createTextNode (text) {
	  return document.createTextNode(text)
	}

	function createComment (text) {
	  return document.createComment(text)
	}

	function insertBefore (parentNode, newNode, referenceNode) {
	  parentNode.insertBefore(newNode, referenceNode);
	}

	function removeChild (node, child) {
	  node.removeChild(child);
	}

	function appendChild (node, child) {
	  node.appendChild(child);
	}

	function parentNode (node) {
	  return node.parentNode
	}

	function nextSibling (node) {
	  return node.nextSibling
	}

	function tagName (node) {
	  return node.tagName
	}

	function setTextContent (node, text) {
	  node.textContent = text;
	}

	function setAttribute (node, key, val) {
	  node.setAttribute(key, val);
	}


	var nodeOps = Object.freeze({
		createElement: createElement$1,
		createElementNS: createElementNS,
		createTextNode: createTextNode,
		createComment: createComment,
		insertBefore: insertBefore,
		removeChild: removeChild,
		appendChild: appendChild,
		parentNode: parentNode,
		nextSibling: nextSibling,
		tagName: tagName,
		setTextContent: setTextContent,
		setAttribute: setAttribute
	});

	/*  */

	var ref = {
	  create: function create (_, vnode) {
	    registerRef(vnode);
	  },
	  update: function update (oldVnode, vnode) {
	    if (oldVnode.data.ref !== vnode.data.ref) {
	      registerRef(oldVnode, true);
	      registerRef(vnode);
	    }
	  },
	  destroy: function destroy (vnode) {
	    registerRef(vnode, true);
	  }
	};

	function registerRef (vnode, isRemoval) {
	  var key = vnode.data.ref;
	  if (!key) { return }

	  var vm = vnode.context;
	  var ref = vnode.componentInstance || vnode.elm;
	  var refs = vm.$refs;
	  if (isRemoval) {
	    if (Array.isArray(refs[key])) {
	      remove(refs[key], ref);
	    } else if (refs[key] === ref) {
	      refs[key] = undefined;
	    }
	  } else {
	    if (vnode.data.refInFor) {
	      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {
	        refs[key].push(ref);
	      } else {
	        refs[key] = [ref];
	      }
	    } else {
	      refs[key] = ref;
	    }
	  }
	}

	/**
	 * Virtual DOM patching algorithm based on Snabbdom by
	 * Simon Friis Vindum (@paldepind)
	 * Licensed under the MIT License
	 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
	 *
	 * modified by Evan You (@yyx990803)
	 *

	/*
	 * Not type-checking this because this file is perf-critical and the cost
	 * of making flow understand it is not worth it.
	 */

	var emptyNode = new VNode('', {}, []);

	var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

	function isUndef (v) {
	  return v === undefined || v === null
	}

	function isDef (v) {
	  return v !== undefined && v !== null
	}

	function isTrue (v) {
	  return v === true
	}

	function sameVnode (a, b) {
	  return (
	    a.key === b.key &&
	    a.tag === b.tag &&
	    a.isComment === b.isComment &&
	    isDef(a.data) === isDef(b.data) &&
	    sameInputType(a, b)
	  )
	}

	// Some browsers do not support dynamically changing type for <input>
	// so they need to be treated as different nodes
	function sameInputType (a, b) {
	  if (a.tag !== 'input') { return true }
	  var i;
	  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
	  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
	  return typeA === typeB
	}

	function createKeyToOldIdx (children, beginIdx, endIdx) {
	  var i, key;
	  var map = {};
	  for (i = beginIdx; i <= endIdx; ++i) {
	    key = children[i].key;
	    if (isDef(key)) { map[key] = i; }
	  }
	  return map
	}

	function createPatchFunction (backend) {
	  var i, j;
	  var cbs = {};

	  var modules = backend.modules;
	  var nodeOps = backend.nodeOps;

	  for (i = 0; i < hooks.length; ++i) {
	    cbs[hooks[i]] = [];
	    for (j = 0; j < modules.length; ++j) {
	      if (isDef(modules[j][hooks[i]])) {
	        cbs[hooks[i]].push(modules[j][hooks[i]]);
	      }
	    }
	  }

	  function emptyNodeAt (elm) {
	    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
	  }

	  function createRmCb (childElm, listeners) {
	    function remove$$1 () {
	      if (--remove$$1.listeners === 0) {
	        removeNode(childElm);
	      }
	    }
	    remove$$1.listeners = listeners;
	    return remove$$1
	  }

	  function removeNode (el) {
	    var parent = nodeOps.parentNode(el);
	    // element may have already been removed due to v-html / v-text
	    if (isDef(parent)) {
	      nodeOps.removeChild(parent, el);
	    }
	  }

	  var inPre = 0;
	  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {
	    vnode.isRootInsert = !nested; // for transition enter check
	    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
	      return
	    }

	    var data = vnode.data;
	    var children = vnode.children;
	    var tag = vnode.tag;
	    if (isDef(tag)) {
	      {
	        if (data && data.pre) {
	          inPre++;
	        }
	        if (
	          !inPre &&
	          !vnode.ns &&
	          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&
	          config.isUnknownElement(tag)
	        ) {
	          warn(
	            'Unknown custom element: <' + tag + '> - did you ' +
	            'register the component correctly? For recursive components, ' +
	            'make sure to provide the "name" option.',
	            vnode.context
	          );
	        }
	      }
	      vnode.elm = vnode.ns
	        ? nodeOps.createElementNS(vnode.ns, tag)
	        : nodeOps.createElement(tag, vnode);
	      setScope(vnode);

	      /* istanbul ignore if */
	      {
	        createChildren(vnode, children, insertedVnodeQueue);
	        if (isDef(data)) {
	          invokeCreateHooks(vnode, insertedVnodeQueue);
	        }
	        insert(parentElm, vnode.elm, refElm);
	      }

	      if ("development" !== 'production' && data && data.pre) {
	        inPre--;
	      }
	    } else if (isTrue(vnode.isComment)) {
	      vnode.elm = nodeOps.createComment(vnode.text);
	      insert(parentElm, vnode.elm, refElm);
	    } else {
	      vnode.elm = nodeOps.createTextNode(vnode.text);
	      insert(parentElm, vnode.elm, refElm);
	    }
	  }

	  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
	    var i = vnode.data;
	    if (isDef(i)) {
	      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
	      if (isDef(i = i.hook) && isDef(i = i.init)) {
	        i(vnode, false /* hydrating */, parentElm, refElm);
	      }
	      // after calling the init hook, if the vnode is a child component
	      // it should've created a child instance and mounted it. the child
	      // component also has set the placeholder vnode's elm.
	      // in that case we can just return the element and be done.
	      if (isDef(vnode.componentInstance)) {
	        initComponent(vnode, insertedVnodeQueue);
	        if (isTrue(isReactivated)) {
	          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
	        }
	        return true
	      }
	    }
	  }

	  function initComponent (vnode, insertedVnodeQueue) {
	    if (isDef(vnode.data.pendingInsert)) {
	      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
	    }
	    vnode.elm = vnode.componentInstance.$el;
	    if (isPatchable(vnode)) {
	      invokeCreateHooks(vnode, insertedVnodeQueue);
	      setScope(vnode);
	    } else {
	      // empty component root.
	      // skip all element-related modules except for ref (#3455)
	      registerRef(vnode);
	      // make sure to invoke the insert hook
	      insertedVnodeQueue.push(vnode);
	    }
	  }

	  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
	    var i;
	    // hack for #4339: a reactivated component with inner transition
	    // does not trigger because the inner node's created hooks are not called
	    // again. It's not ideal to involve module-specific logic in here but
	    // there doesn't seem to be a better way to do it.
	    var innerNode = vnode;
	    while (innerNode.componentInstance) {
	      innerNode = innerNode.componentInstance._vnode;
	      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
	        for (i = 0; i < cbs.activate.length; ++i) {
	          cbs.activate[i](emptyNode, innerNode);
	        }
	        insertedVnodeQueue.push(innerNode);
	        break
	      }
	    }
	    // unlike a newly created component,
	    // a reactivated keep-alive component doesn't insert itself
	    insert(parentElm, vnode.elm, refElm);
	  }

	  function insert (parent, elm, ref) {
	    if (isDef(parent)) {
	      if (isDef(ref)) {
	        nodeOps.insertBefore(parent, elm, ref);
	      } else {
	        nodeOps.appendChild(parent, elm);
	      }
	    }
	  }

	  function createChildren (vnode, children, insertedVnodeQueue) {
	    if (Array.isArray(children)) {
	      for (var i = 0; i < children.length; ++i) {
	        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);
	      }
	    } else if (isPrimitive(vnode.text)) {
	      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));
	    }
	  }

	  function isPatchable (vnode) {
	    while (vnode.componentInstance) {
	      vnode = vnode.componentInstance._vnode;
	    }
	    return isDef(vnode.tag)
	  }

	  function invokeCreateHooks (vnode, insertedVnodeQueue) {
	    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
	      cbs.create[i$1](emptyNode, vnode);
	    }
	    i = vnode.data.hook; // Reuse variable
	    if (isDef(i)) {
	      if (isDef(i.create)) { i.create(emptyNode, vnode); }
	      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
	    }
	  }

	  // set scope id attribute for scoped CSS.
	  // this is implemented as a special case to avoid the overhead
	  // of going through the normal attribute patching process.
	  function setScope (vnode) {
	    var i;
	    var ancestor = vnode;
	    while (ancestor) {
	      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
	        nodeOps.setAttribute(vnode.elm, i, '');
	      }
	      ancestor = ancestor.parent;
	    }
	    // for slot content they should also get the scopeId from the host instance.
	    if (isDef(i = activeInstance) &&
	        i !== vnode.context &&
	        isDef(i = i.$options._scopeId)) {
	      nodeOps.setAttribute(vnode.elm, i, '');
	    }
	  }

	  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
	    for (; startIdx <= endIdx; ++startIdx) {
	      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);
	    }
	  }

	  function invokeDestroyHook (vnode) {
	    var i, j;
	    var data = vnode.data;
	    if (isDef(data)) {
	      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
	      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
	    }
	    if (isDef(i = vnode.children)) {
	      for (j = 0; j < vnode.children.length; ++j) {
	        invokeDestroyHook(vnode.children[j]);
	      }
	    }
	  }

	  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
	    for (; startIdx <= endIdx; ++startIdx) {
	      var ch = vnodes[startIdx];
	      if (isDef(ch)) {
	        if (isDef(ch.tag)) {
	          removeAndInvokeRemoveHook(ch);
	          invokeDestroyHook(ch);
	        } else { // Text node
	          removeNode(ch.elm);
	        }
	      }
	    }
	  }

	  function removeAndInvokeRemoveHook (vnode, rm) {
	    if (isDef(rm) || isDef(vnode.data)) {
	      var listeners = cbs.remove.length + 1;
	      if (isDef(rm)) {
	        // we have a recursively passed down rm callback
	        // increase the listeners count
	        rm.listeners += listeners;
	      } else {
	        // directly removing
	        rm = createRmCb(vnode.elm, listeners);
	      }
	      // recursively invoke hooks on child component root node
	      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
	        removeAndInvokeRemoveHook(i, rm);
	      }
	      for (i = 0; i < cbs.remove.length; ++i) {
	        cbs.remove[i](vnode, rm);
	      }
	      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
	        i(vnode, rm);
	      } else {
	        rm();
	      }
	    } else {
	      removeNode(vnode.elm);
	    }
	  }

	  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
	    var oldStartIdx = 0;
	    var newStartIdx = 0;
	    var oldEndIdx = oldCh.length - 1;
	    var oldStartVnode = oldCh[0];
	    var oldEndVnode = oldCh[oldEndIdx];
	    var newEndIdx = newCh.length - 1;
	    var newStartVnode = newCh[0];
	    var newEndVnode = newCh[newEndIdx];
	    var oldKeyToIdx, idxInOld, elmToMove, refElm;

	    // removeOnly is a special flag used only by <transition-group>
	    // to ensure removed elements stay in correct relative positions
	    // during leaving transitions
	    var canMove = !removeOnly;

	    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
	      if (isUndef(oldStartVnode)) {
	        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
	      } else if (isUndef(oldEndVnode)) {
	        oldEndVnode = oldCh[--oldEndIdx];
	      } else if (sameVnode(oldStartVnode, newStartVnode)) {
	        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
	        oldStartVnode = oldCh[++oldStartIdx];
	        newStartVnode = newCh[++newStartIdx];
	      } else if (sameVnode(oldEndVnode, newEndVnode)) {
	        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
	        oldEndVnode = oldCh[--oldEndIdx];
	        newEndVnode = newCh[--newEndIdx];
	      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
	        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
	        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
	        oldStartVnode = oldCh[++oldStartIdx];
	        newEndVnode = newCh[--newEndIdx];
	      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
	        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
	        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
	        oldEndVnode = oldCh[--oldEndIdx];
	        newStartVnode = newCh[++newStartIdx];
	      } else {
	        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
	        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;
	        if (isUndef(idxInOld)) { // New element
	          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
	          newStartVnode = newCh[++newStartIdx];
	        } else {
	          elmToMove = oldCh[idxInOld];
	          /* istanbul ignore if */
	          if ("development" !== 'production' && !elmToMove) {
	            warn(
	              'It seems there are duplicate keys that is causing an update error. ' +
	              'Make sure each v-for item has a unique key.'
	            );
	          }
	          if (sameVnode(elmToMove, newStartVnode)) {
	            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
	            oldCh[idxInOld] = undefined;
	            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);
	            newStartVnode = newCh[++newStartIdx];
	          } else {
	            // same key but different element. treat as new element
	            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
	            newStartVnode = newCh[++newStartIdx];
	          }
	        }
	      }
	    }
	    if (oldStartIdx > oldEndIdx) {
	      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
	      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
	    } else if (newStartIdx > newEndIdx) {
	      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
	    }
	  }

	  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {
	    if (oldVnode === vnode) {
	      return
	    }
	    // reuse element for static trees.
	    // note we only do this if the vnode is cloned -
	    // if the new node is not cloned it means the render functions have been
	    // reset by the hot-reload-api and we need to do a proper re-render.
	    if (isTrue(vnode.isStatic) &&
	        isTrue(oldVnode.isStatic) &&
	        vnode.key === oldVnode.key &&
	        (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
	      vnode.elm = oldVnode.elm;
	      vnode.componentInstance = oldVnode.componentInstance;
	      return
	    }
	    var i;
	    var data = vnode.data;
	    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
	      i(oldVnode, vnode);
	    }
	    var elm = vnode.elm = oldVnode.elm;
	    var oldCh = oldVnode.children;
	    var ch = vnode.children;
	    if (isDef(data) && isPatchable(vnode)) {
	      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
	      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
	    }
	    if (isUndef(vnode.text)) {
	      if (isDef(oldCh) && isDef(ch)) {
	        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
	      } else if (isDef(ch)) {
	        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
	        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
	      } else if (isDef(oldCh)) {
	        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
	      } else if (isDef(oldVnode.text)) {
	        nodeOps.setTextContent(elm, '');
	      }
	    } else if (oldVnode.text !== vnode.text) {
	      nodeOps.setTextContent(elm, vnode.text);
	    }
	    if (isDef(data)) {
	      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
	    }
	  }

	  function invokeInsertHook (vnode, queue, initial) {
	    // delay insert hooks for component root nodes, invoke them after the
	    // element is really inserted
	    if (isTrue(initial) && isDef(vnode.parent)) {
	      vnode.parent.data.pendingInsert = queue;
	    } else {
	      for (var i = 0; i < queue.length; ++i) {
	        queue[i].data.hook.insert(queue[i]);
	      }
	    }
	  }

	  var bailed = false;
	  // list of modules that can skip create hook during hydration because they
	  // are already rendered on the client or has no need for initialization
	  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');

	  // Note: this is a browser-only function so we can assume elms are DOM nodes.
	  function hydrate (elm, vnode, insertedVnodeQueue) {
	    {
	      if (!assertNodeMatch(elm, vnode)) {
	        return false
	      }
	    }
	    vnode.elm = elm;
	    var tag = vnode.tag;
	    var data = vnode.data;
	    var children = vnode.children;
	    if (isDef(data)) {
	      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
	      if (isDef(i = vnode.componentInstance)) {
	        // child component. it should have hydrated its own tree.
	        initComponent(vnode, insertedVnodeQueue);
	        return true
	      }
	    }
	    if (isDef(tag)) {
	      if (isDef(children)) {
	        // empty element, allow client to pick up and populate children
	        if (!elm.hasChildNodes()) {
	          createChildren(vnode, children, insertedVnodeQueue);
	        } else {
	          var childrenMatch = true;
	          var childNode = elm.firstChild;
	          for (var i$1 = 0; i$1 < children.length; i$1++) {
	            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {
	              childrenMatch = false;
	              break
	            }
	            childNode = childNode.nextSibling;
	          }
	          // if childNode is not null, it means the actual childNodes list is
	          // longer than the virtual children list.
	          if (!childrenMatch || childNode) {
	            if ("development" !== 'production' &&
	                typeof console !== 'undefined' &&
	                !bailed) {
	              bailed = true;
	              console.warn('Parent: ', elm);
	              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
	            }
	            return false
	          }
	        }
	      }
	      if (isDef(data)) {
	        for (var key in data) {
	          if (!isRenderedModule(key)) {
	            invokeCreateHooks(vnode, insertedVnodeQueue);
	            break
	          }
	        }
	      }
	    } else if (elm.data !== vnode.text) {
	      elm.data = vnode.text;
	    }
	    return true
	  }

	  function assertNodeMatch (node, vnode) {
	    if (isDef(vnode.tag)) {
	      return (
	        vnode.tag.indexOf('vue-component') === 0 ||
	        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
	      )
	    } else {
	      return node.nodeType === (vnode.isComment ? 8 : 3)
	    }
	  }

	  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
	    if (isUndef(vnode)) {
	      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
	      return
	    }

	    var isInitialPatch = false;
	    var insertedVnodeQueue = [];

	    if (isUndef(oldVnode)) {
	      // empty mount (likely as component), create new root element
	      isInitialPatch = true;
	      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
	    } else {
	      var isRealElement = isDef(oldVnode.nodeType);
	      if (!isRealElement && sameVnode(oldVnode, vnode)) {
	        // patch existing root node
	        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
	      } else {
	        if (isRealElement) {
	          // mounting to a real element
	          // check if this is server-rendered content and if we can perform
	          // a successful hydration.
	          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute('server-rendered')) {
	            oldVnode.removeAttribute('server-rendered');
	            hydrating = true;
	          }
	          if (isTrue(hydrating)) {
	            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
	              invokeInsertHook(vnode, insertedVnodeQueue, true);
	              return oldVnode
	            } else {
	              warn(
	                'The client-side rendered virtual DOM tree is not matching ' +
	                'server-rendered content. This is likely caused by incorrect ' +
	                'HTML markup, for example nesting block-level elements inside ' +
	                '<p>, or missing <tbody>. Bailing hydration and performing ' +
	                'full client-side render.'
	              );
	            }
	          }
	          // either not server-rendered, or hydration failed.
	          // create an empty node and replace it
	          oldVnode = emptyNodeAt(oldVnode);
	        }
	        // replacing existing element
	        var oldElm = oldVnode.elm;
	        var parentElm$1 = nodeOps.parentNode(oldElm);
	        createElm(
	          vnode,
	          insertedVnodeQueue,
	          // extremely rare edge case: do not insert if old element is in a
	          // leaving transition. Only happens when combining transition +
	          // keep-alive + HOCs. (#4590)
	          oldElm._leaveCb ? null : parentElm$1,
	          nodeOps.nextSibling(oldElm)
	        );

	        if (isDef(vnode.parent)) {
	          // component root element replaced.
	          // update parent placeholder node element, recursively
	          var ancestor = vnode.parent;
	          while (ancestor) {
	            ancestor.elm = vnode.elm;
	            ancestor = ancestor.parent;
	          }
	          if (isPatchable(vnode)) {
	            for (var i = 0; i < cbs.create.length; ++i) {
	              cbs.create[i](emptyNode, vnode.parent);
	            }
	          }
	        }

	        if (isDef(parentElm$1)) {
	          removeVnodes(parentElm$1, [oldVnode], 0, 0);
	        } else if (isDef(oldVnode.tag)) {
	          invokeDestroyHook(oldVnode);
	        }
	      }
	    }

	    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
	    return vnode.elm
	  }
	}

	/*  */

	var directives = {
	  create: updateDirectives,
	  update: updateDirectives,
	  destroy: function unbindDirectives (vnode) {
	    updateDirectives(vnode, emptyNode);
	  }
	};

	function updateDirectives (oldVnode, vnode) {
	  if (oldVnode.data.directives || vnode.data.directives) {
	    _update(oldVnode, vnode);
	  }
	}

	function _update (oldVnode, vnode) {
	  var isCreate = oldVnode === emptyNode;
	  var isDestroy = vnode === emptyNode;
	  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
	  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

	  var dirsWithInsert = [];
	  var dirsWithPostpatch = [];

	  var key, oldDir, dir;
	  for (key in newDirs) {
	    oldDir = oldDirs[key];
	    dir = newDirs[key];
	    if (!oldDir) {
	      // new directive, bind
	      callHook$1(dir, 'bind', vnode, oldVnode);
	      if (dir.def && dir.def.inserted) {
	        dirsWithInsert.push(dir);
	      }
	    } else {
	      // existing directive, update
	      dir.oldValue = oldDir.value;
	      callHook$1(dir, 'update', vnode, oldVnode);
	      if (dir.def && dir.def.componentUpdated) {
	        dirsWithPostpatch.push(dir);
	      }
	    }
	  }

	  if (dirsWithInsert.length) {
	    var callInsert = function () {
	      for (var i = 0; i < dirsWithInsert.length; i++) {
	        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
	      }
	    };
	    if (isCreate) {
	      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);
	    } else {
	      callInsert();
	    }
	  }

	  if (dirsWithPostpatch.length) {
	    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {
	      for (var i = 0; i < dirsWithPostpatch.length; i++) {
	        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
	      }
	    });
	  }

	  if (!isCreate) {
	    for (key in oldDirs) {
	      if (!newDirs[key]) {
	        // no longer present, unbind
	        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
	      }
	    }
	  }
	}

	var emptyModifiers = Object.create(null);

	function normalizeDirectives$1 (
	  dirs,
	  vm
	) {
	  var res = Object.create(null);
	  if (!dirs) {
	    return res
	  }
	  var i, dir;
	  for (i = 0; i < dirs.length; i++) {
	    dir = dirs[i];
	    if (!dir.modifiers) {
	      dir.modifiers = emptyModifiers;
	    }
	    res[getRawDirName(dir)] = dir;
	    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
	  }
	  return res
	}

	function getRawDirName (dir) {
	  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
	}

	function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
	  var fn = dir.def && dir.def[hook];
	  if (fn) {
	    fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
	  }
	}

	var baseModules = [
	  ref,
	  directives
	];

	/*  */

	function updateAttrs (oldVnode, vnode) {
	  if (!oldVnode.data.attrs && !vnode.data.attrs) {
	    return
	  }
	  var key, cur, old;
	  var elm = vnode.elm;
	  var oldAttrs = oldVnode.data.attrs || {};
	  var attrs = vnode.data.attrs || {};
	  // clone observed objects, as the user probably wants to mutate it
	  if (attrs.__ob__) {
	    attrs = vnode.data.attrs = extend({}, attrs);
	  }

	  for (key in attrs) {
	    cur = attrs[key];
	    old = oldAttrs[key];
	    if (old !== cur) {
	      setAttr(elm, key, cur);
	    }
	  }
	  // #4391: in IE9, setting type can reset value for input[type=radio]
	  /* istanbul ignore if */
	  if (isIE9 && attrs.value !== oldAttrs.value) {
	    setAttr(elm, 'value', attrs.value);
	  }
	  for (key in oldAttrs) {
	    if (attrs[key] == null) {
	      if (isXlink(key)) {
	        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
	      } else if (!isEnumeratedAttr(key)) {
	        elm.removeAttribute(key);
	      }
	    }
	  }
	}

	function setAttr (el, key, value) {
	  if (isBooleanAttr(key)) {
	    // set attribute for blank value
	    // e.g. <option disabled>Select one</option>
	    if (isFalsyAttrValue(value)) {
	      el.removeAttribute(key);
	    } else {
	      el.setAttribute(key, key);
	    }
	  } else if (isEnumeratedAttr(key)) {
	    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
	  } else if (isXlink(key)) {
	    if (isFalsyAttrValue(value)) {
	      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
	    } else {
	      el.setAttributeNS(xlinkNS, key, value);
	    }
	  } else {
	    if (isFalsyAttrValue(value)) {
	      el.removeAttribute(key);
	    } else {
	      el.setAttribute(key, value);
	    }
	  }
	}

	var attrs = {
	  create: updateAttrs,
	  update: updateAttrs
	};

	/*  */

	function updateClass (oldVnode, vnode) {
	  var el = vnode.elm;
	  var data = vnode.data;
	  var oldData = oldVnode.data;
	  if (!data.staticClass && !data.class &&
	      (!oldData || (!oldData.staticClass && !oldData.class))) {
	    return
	  }

	  var cls = genClassForVnode(vnode);

	  // handle transition classes
	  var transitionClass = el._transitionClasses;
	  if (transitionClass) {
	    cls = concat(cls, stringifyClass(transitionClass));
	  }

	  // set the class
	  if (cls !== el._prevClass) {
	    el.setAttribute('class', cls);
	    el._prevClass = cls;
	  }
	}

	var klass = {
	  create: updateClass,
	  update: updateClass
	};

	/*  */

	var validDivisionCharRE = /[\w).+\-_$\]]/;

	function parseFilters (exp) {
	  var inSingle = false;
	  var inDouble = false;
	  var inTemplateString = false;
	  var inRegex = false;
	  var curly = 0;
	  var square = 0;
	  var paren = 0;
	  var lastFilterIndex = 0;
	  var c, prev, i, expression, filters;

	  for (i = 0; i < exp.length; i++) {
	    prev = c;
	    c = exp.charCodeAt(i);
	    if (inSingle) {
	      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
	    } else if (inDouble) {
	      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
	    } else if (inTemplateString) {
	      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
	    } else if (inRegex) {
	      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
	    } else if (
	      c === 0x7C && // pipe
	      exp.charCodeAt(i + 1) !== 0x7C &&
	      exp.charCodeAt(i - 1) !== 0x7C &&
	      !curly && !square && !paren
	    ) {
	      if (expression === undefined) {
	        // first filter, end of expression
	        lastFilterIndex = i + 1;
	        expression = exp.slice(0, i).trim();
	      } else {
	        pushFilter();
	      }
	    } else {
	      switch (c) {
	        case 0x22: inDouble = true; break         // "
	        case 0x27: inSingle = true; break         // '
	        case 0x60: inTemplateString = true; break // `
	        case 0x28: paren++; break                 // (
	        case 0x29: paren--; break                 // )
	        case 0x5B: square++; break                // [
	        case 0x5D: square--; break                // ]
	        case 0x7B: curly++; break                 // {
	        case 0x7D: curly--; break                 // }
	      }
	      if (c === 0x2f) { // /
	        var j = i - 1;
	        var p = (void 0);
	        // find first non-whitespace prev char
	        for (; j >= 0; j--) {
	          p = exp.charAt(j);
	          if (p !== ' ') { break }
	        }
	        if (!p || !validDivisionCharRE.test(p)) {
	          inRegex = true;
	        }
	      }
	    }
	  }

	  if (expression === undefined) {
	    expression = exp.slice(0, i).trim();
	  } else if (lastFilterIndex !== 0) {
	    pushFilter();
	  }

	  function pushFilter () {
	    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
	    lastFilterIndex = i + 1;
	  }

	  if (filters) {
	    for (i = 0; i < filters.length; i++) {
	      expression = wrapFilter(expression, filters[i]);
	    }
	  }

	  return expression
	}

	function wrapFilter (exp, filter) {
	  var i = filter.indexOf('(');
	  if (i < 0) {
	    // _f: resolveFilter
	    return ("_f(\"" + filter + "\")(" + exp + ")")
	  } else {
	    var name = filter.slice(0, i);
	    var args = filter.slice(i + 1);
	    return ("_f(\"" + name + "\")(" + exp + "," + args)
	  }
	}

	/*  */

	function baseWarn (msg) {
	  console.error(("[Vue compiler]: " + msg));
	}

	function pluckModuleFunction (
	  modules,
	  key
	) {
	  return modules
	    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
	    : []
	}

	function addProp (el, name, value) {
	  (el.props || (el.props = [])).push({ name: name, value: value });
	}

	function addAttr (el, name, value) {
	  (el.attrs || (el.attrs = [])).push({ name: name, value: value });
	}

	function addDirective (
	  el,
	  name,
	  rawName,
	  value,
	  arg,
	  modifiers
	) {
	  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });
	}

	function addHandler (
	  el,
	  name,
	  value,
	  modifiers,
	  important
	) {
	  // check capture modifier
	  if (modifiers && modifiers.capture) {
	    delete modifiers.capture;
	    name = '!' + name; // mark the event as captured
	  }
	  if (modifiers && modifiers.once) {
	    delete modifiers.once;
	    name = '~' + name; // mark the event as once
	  }
	  var events;
	  if (modifiers && modifiers.native) {
	    delete modifiers.native;
	    events = el.nativeEvents || (el.nativeEvents = {});
	  } else {
	    events = el.events || (el.events = {});
	  }
	  var newHandler = { value: value, modifiers: modifiers };
	  var handlers = events[name];
	  /* istanbul ignore if */
	  if (Array.isArray(handlers)) {
	    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
	  } else if (handlers) {
	    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
	  } else {
	    events[name] = newHandler;
	  }
	}

	function getBindingAttr (
	  el,
	  name,
	  getStatic
	) {
	  var dynamicValue =
	    getAndRemoveAttr(el, ':' + name) ||
	    getAndRemoveAttr(el, 'v-bind:' + name);
	  if (dynamicValue != null) {
	    return parseFilters(dynamicValue)
	  } else if (getStatic !== false) {
	    var staticValue = getAndRemoveAttr(el, name);
	    if (staticValue != null) {
	      return JSON.stringify(staticValue)
	    }
	  }
	}

	function getAndRemoveAttr (el, name) {
	  var val;
	  if ((val = el.attrsMap[name]) != null) {
	    var list = el.attrsList;
	    for (var i = 0, l = list.length; i < l; i++) {
	      if (list[i].name === name) {
	        list.splice(i, 1);
	        break
	      }
	    }
	  }
	  return val
	}

	/*  */

	/**
	 * Cross-platform code generation for component v-model
	 */
	function genComponentModel (
	  el,
	  value,
	  modifiers
	) {
	  var ref = modifiers || {};
	  var number = ref.number;
	  var trim = ref.trim;

	  var baseValueExpression = '$$v';
	  var valueExpression = baseValueExpression;
	  if (trim) {
	    valueExpression =
	      "(typeof " + baseValueExpression + " === 'string'" +
	        "? " + baseValueExpression + ".trim()" +
	        ": " + baseValueExpression + ")";
	  }
	  if (number) {
	    valueExpression = "_n(" + valueExpression + ")";
	  }
	  var assignment = genAssignmentCode(value, valueExpression);

	  el.model = {
	    value: ("(" + value + ")"),
	    expression: ("\"" + value + "\""),
	    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
	  };
	}

	/**
	 * Cross-platform codegen helper for generating v-model value assignment code.
	 */
	function genAssignmentCode (
	  value,
	  assignment
	) {
	  var modelRs = parseModel(value);
	  if (modelRs.idx === null) {
	    return (value + "=" + assignment)
	  } else {
	    return "var $$exp = " + (modelRs.exp) + ", $$idx = " + (modelRs.idx) + ";" +
	      "if (!Array.isArray($$exp)){" +
	        value + "=" + assignment + "}" +
	      "else{$$exp.splice($$idx, 1, " + assignment + ")}"
	  }
	}

	/**
	 * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)
	 *
	 * for loop possible cases:
	 *
	 * - test
	 * - test[idx]
	 * - test[test1[idx]]
	 * - test["a"][idx]
	 * - xxx.test[a[a].test1[idx]]
	 * - test.xxx.a["asa"][test1[idx]]
	 *
	 */

	var len;
	var str;
	var chr;
	var index$1;
	var expressionPos;
	var expressionEndPos;

	function parseModel (val) {
	  str = val;
	  len = str.length;
	  index$1 = expressionPos = expressionEndPos = 0;

	  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
	    return {
	      exp: val,
	      idx: null
	    }
	  }

	  while (!eof()) {
	    chr = next();
	    /* istanbul ignore if */
	    if (isStringStart(chr)) {
	      parseString(chr);
	    } else if (chr === 0x5B) {
	      parseBracket(chr);
	    }
	  }

	  return {
	    exp: val.substring(0, expressionPos),
	    idx: val.substring(expressionPos + 1, expressionEndPos)
	  }
	}

	function next () {
	  return str.charCodeAt(++index$1)
	}

	function eof () {
	  return index$1 >= len
	}

	function isStringStart (chr) {
	  return chr === 0x22 || chr === 0x27
	}

	function parseBracket (chr) {
	  var inBracket = 1;
	  expressionPos = index$1;
	  while (!eof()) {
	    chr = next();
	    if (isStringStart(chr)) {
	      parseString(chr);
	      continue
	    }
	    if (chr === 0x5B) { inBracket++; }
	    if (chr === 0x5D) { inBracket--; }
	    if (inBracket === 0) {
	      expressionEndPos = index$1;
	      break
	    }
	  }
	}

	function parseString (chr) {
	  var stringQuote = chr;
	  while (!eof()) {
	    chr = next();
	    if (chr === stringQuote) {
	      break
	    }
	  }
	}

	/*  */

	var warn$1;

	// in some cases, the event used has to be determined at runtime
	// so we used some reserved tokens during compile.
	var RANGE_TOKEN = '__r';
	var CHECKBOX_RADIO_TOKEN = '__c';

	function model (
	  el,
	  dir,
	  _warn
	) {
	  warn$1 = _warn;
	  var value = dir.value;
	  var modifiers = dir.modifiers;
	  var tag = el.tag;
	  var type = el.attrsMap.type;

	  {
	    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
	    if (tag === 'input' && dynamicType) {
	      warn$1(
	        "<input :type=\"" + dynamicType + "\" v-model=\"" + value + "\">:\n" +
	        "v-model does not support dynamic input types. Use v-if branches instead."
	      );
	    }
	    // inputs with type="file" are read only and setting the input's
	    // value will throw an error.
	    if (tag === 'input' && type === 'file') {
	      warn$1(
	        "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
	        "File inputs are read only. Use a v-on:change listener instead."
	      );
	    }
	  }

	  if (tag === 'select') {
	    genSelect(el, value, modifiers);
	  } else if (tag === 'input' && type === 'checkbox') {
	    genCheckboxModel(el, value, modifiers);
	  } else if (tag === 'input' && type === 'radio') {
	    genRadioModel(el, value, modifiers);
	  } else if (tag === 'input' || tag === 'textarea') {
	    genDefaultModel(el, value, modifiers);
	  } else if (!config.isReservedTag(tag)) {
	    genComponentModel(el, value, modifiers);
	    // component v-model doesn't need extra runtime
	    return false
	  } else {
	    warn$1(
	      "<" + (el.tag) + " v-model=\"" + value + "\">: " +
	      "v-model is not supported on this element type. " +
	      'If you are working with contenteditable, it\'s recommended to ' +
	      'wrap a library dedicated for that purpose inside a custom component.'
	    );
	  }

	  // ensure runtime directive metadata
	  return true
	}

	function genCheckboxModel (
	  el,
	  value,
	  modifiers
	) {
	  var number = modifiers && modifiers.number;
	  var valueBinding = getBindingAttr(el, 'value') || 'null';
	  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
	  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
	  addProp(el, 'checked',
	    "Array.isArray(" + value + ")" +
	      "?_i(" + value + "," + valueBinding + ")>-1" + (
	        trueValueBinding === 'true'
	          ? (":(" + value + ")")
	          : (":_q(" + value + "," + trueValueBinding + ")")
	      )
	  );
	  addHandler(el, CHECKBOX_RADIO_TOKEN,
	    "var $$a=" + value + "," +
	        '$$el=$event.target,' +
	        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
	    'if(Array.isArray($$a)){' +
	      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
	          '$$i=_i($$a,$$v);' +
	      "if($$c){$$i<0&&(" + value + "=$$a.concat($$v))}" +
	      "else{$$i>-1&&(" + value + "=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}" +
	    "}else{" + value + "=$$c}",
	    null, true
	  );
	}

	function genRadioModel (
	    el,
	    value,
	    modifiers
	) {
	  var number = modifiers && modifiers.number;
	  var valueBinding = getBindingAttr(el, 'value') || 'null';
	  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
	  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
	  addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);
	}

	function genSelect (
	    el,
	    value,
	    modifiers
	) {
	  var number = modifiers && modifiers.number;
	  var selectedVal = "Array.prototype.filter" +
	    ".call($event.target.options,function(o){return o.selected})" +
	    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
	    "return " + (number ? '_n(val)' : 'val') + "})";

	  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
	  var code = "var $$selectedVal = " + selectedVal + ";";
	  code = code + " " + (genAssignmentCode(value, assignment));
	  addHandler(el, 'change', code, null, true);
	}

	function genDefaultModel (
	  el,
	  value,
	  modifiers
	) {
	  var type = el.attrsMap.type;
	  var ref = modifiers || {};
	  var lazy = ref.lazy;
	  var number = ref.number;
	  var trim = ref.trim;
	  var needCompositionGuard = !lazy && type !== 'range';
	  var event = lazy
	    ? 'change'
	    : type === 'range'
	      ? RANGE_TOKEN
	      : 'input';

	  var valueExpression = '$event.target.value';
	  if (trim) {
	    valueExpression = "$event.target.value.trim()";
	  }
	  if (number) {
	    valueExpression = "_n(" + valueExpression + ")";
	  }

	  var code = genAssignmentCode(value, valueExpression);
	  if (needCompositionGuard) {
	    code = "if($event.target.composing)return;" + code;
	  }

	  addProp(el, 'value', ("(" + value + ")"));
	  addHandler(el, event, code, null, true);
	  if (trim || number || type === 'number') {
	    addHandler(el, 'blur', '$forceUpdate()');
	  }
	}

	/*  */

	// normalize v-model event tokens that can only be determined at runtime.
	// it's important to place the event as the first in the array because
	// the whole point is ensuring the v-model callback gets called before
	// user-attached handlers.
	function normalizeEvents (on) {
	  var event;
	  /* istanbul ignore if */
	  if (on[RANGE_TOKEN]) {
	    // IE input[type=range] only supports `change` event
	    event = isIE ? 'change' : 'input';
	    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
	    delete on[RANGE_TOKEN];
	  }
	  if (on[CHECKBOX_RADIO_TOKEN]) {
	    // Chrome fires microtasks in between click/change, leads to #4521
	    event = isChrome ? 'click' : 'change';
	    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);
	    delete on[CHECKBOX_RADIO_TOKEN];
	  }
	}

	var target$1;

	function add$1 (
	  event,
	  handler,
	  once,
	  capture
	) {
	  if (once) {
	    var oldHandler = handler;
	    var _target = target$1; // save current target element in closure
	    handler = function (ev) {
	      var res = arguments.length === 1
	        ? oldHandler(ev)
	        : oldHandler.apply(null, arguments);
	      if (res !== null) {
	        remove$2(event, handler, capture, _target);
	      }
	    };
	  }
	  target$1.addEventListener(event, handler, capture);
	}

	function remove$2 (
	  event,
	  handler,
	  capture,
	  _target
	) {
	  (_target || target$1).removeEventListener(event, handler, capture);
	}

	function updateDOMListeners (oldVnode, vnode) {
	  if (!oldVnode.data.on && !vnode.data.on) {
	    return
	  }
	  var on = vnode.data.on || {};
	  var oldOn = oldVnode.data.on || {};
	  target$1 = vnode.elm;
	  normalizeEvents(on);
	  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
	}

	var events = {
	  create: updateDOMListeners,
	  update: updateDOMListeners
	};

	/*  */

	function updateDOMProps (oldVnode, vnode) {
	  if (!oldVnode.data.domProps && !vnode.data.domProps) {
	    return
	  }
	  var key, cur;
	  var elm = vnode.elm;
	  var oldProps = oldVnode.data.domProps || {};
	  var props = vnode.data.domProps || {};
	  // clone observed objects, as the user probably wants to mutate it
	  if (props.__ob__) {
	    props = vnode.data.domProps = extend({}, props);
	  }

	  for (key in oldProps) {
	    if (props[key] == null) {
	      elm[key] = '';
	    }
	  }
	  for (key in props) {
	    cur = props[key];
	    // ignore children if the node has textContent or innerHTML,
	    // as these will throw away existing DOM nodes and cause removal errors
	    // on subsequent patches (#3360)
	    if (key === 'textContent' || key === 'innerHTML') {
	      if (vnode.children) { vnode.children.length = 0; }
	      if (cur === oldProps[key]) { continue }
	    }

	    if (key === 'value') {
	      // store value as _value as well since
	      // non-string values will be stringified
	      elm._value = cur;
	      // avoid resetting cursor position when value is the same
	      var strCur = cur == null ? '' : String(cur);
	      if (shouldUpdateValue(elm, vnode, strCur)) {
	        elm.value = strCur;
	      }
	    } else {
	      elm[key] = cur;
	    }
	  }
	}

	// check platforms/web/util/attrs.js acceptValue


	function shouldUpdateValue (
	  elm,
	  vnode,
	  checkVal
	) {
	  return (!elm.composing && (
	    vnode.tag === 'option' ||
	    isDirty(elm, checkVal) ||
	    isInputChanged(elm, checkVal)
	  ))
	}

	function isDirty (elm, checkVal) {
	  // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value
	  return document.activeElement !== elm && elm.value !== checkVal
	}

	function isInputChanged (elm, newVal) {
	  var value = elm.value;
	  var modifiers = elm._vModifiers; // injected by v-model runtime
	  if ((modifiers && modifiers.number) || elm.type === 'number') {
	    return toNumber(value) !== toNumber(newVal)
	  }
	  if (modifiers && modifiers.trim) {
	    return value.trim() !== newVal.trim()
	  }
	  return value !== newVal
	}

	var domProps = {
	  create: updateDOMProps,
	  update: updateDOMProps
	};

	/*  */

	var parseStyleText = cached(function (cssText) {
	  var res = {};
	  var listDelimiter = /;(?![^(]*\))/g;
	  var propertyDelimiter = /:(.+)/;
	  cssText.split(listDelimiter).forEach(function (item) {
	    if (item) {
	      var tmp = item.split(propertyDelimiter);
	      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
	    }
	  });
	  return res
	});

	// merge static and dynamic style data on the same vnode
	function normalizeStyleData (data) {
	  var style = normalizeStyleBinding(data.style);
	  // static style is pre-processed into an object during compilation
	  // and is always a fresh object, so it's safe to merge into it
	  return data.staticStyle
	    ? extend(data.staticStyle, style)
	    : style
	}

	// normalize possible array / string values into Object
	function normalizeStyleBinding (bindingStyle) {
	  if (Array.isArray(bindingStyle)) {
	    return toObject(bindingStyle)
	  }
	  if (typeof bindingStyle === 'string') {
	    return parseStyleText(bindingStyle)
	  }
	  return bindingStyle
	}

	/**
	 * parent component style should be after child's
	 * so that parent component's style could override it
	 */
	function getStyle (vnode, checkChild) {
	  var res = {};
	  var styleData;

	  if (checkChild) {
	    var childNode = vnode;
	    while (childNode.componentInstance) {
	      childNode = childNode.componentInstance._vnode;
	      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {
	        extend(res, styleData);
	      }
	    }
	  }

	  if ((styleData = normalizeStyleData(vnode.data))) {
	    extend(res, styleData);
	  }

	  var parentNode = vnode;
	  while ((parentNode = parentNode.parent)) {
	    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
	      extend(res, styleData);
	    }
	  }
	  return res
	}

	/*  */

	var cssVarRE = /^--/;
	var importantRE = /\s*!important$/;
	var setProp = function (el, name, val) {
	  /* istanbul ignore if */
	  if (cssVarRE.test(name)) {
	    el.style.setProperty(name, val);
	  } else if (importantRE.test(val)) {
	    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
	  } else {
	    el.style[normalize(name)] = val;
	  }
	};

	var prefixes = ['Webkit', 'Moz', 'ms'];

	var testEl;
	var normalize = cached(function (prop) {
	  testEl = testEl || document.createElement('div');
	  prop = camelize(prop);
	  if (prop !== 'filter' && (prop in testEl.style)) {
	    return prop
	  }
	  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);
	  for (var i = 0; i < prefixes.length; i++) {
	    var prefixed = prefixes[i] + upper;
	    if (prefixed in testEl.style) {
	      return prefixed
	    }
	  }
	});

	function updateStyle (oldVnode, vnode) {
	  var data = vnode.data;
	  var oldData = oldVnode.data;

	  if (!data.staticStyle && !data.style &&
	      !oldData.staticStyle && !oldData.style) {
	    return
	  }

	  var cur, name;
	  var el = vnode.elm;
	  var oldStaticStyle = oldVnode.data.staticStyle;
	  var oldStyleBinding = oldVnode.data.style || {};

	  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
	  var oldStyle = oldStaticStyle || oldStyleBinding;

	  var style = normalizeStyleBinding(vnode.data.style) || {};

	  vnode.data.style = style.__ob__ ? extend({}, style) : style;

	  var newStyle = getStyle(vnode, true);

	  for (name in oldStyle) {
	    if (newStyle[name] == null) {
	      setProp(el, name, '');
	    }
	  }
	  for (name in newStyle) {
	    cur = newStyle[name];
	    if (cur !== oldStyle[name]) {
	      // ie9 setting to null has no effect, must use empty string
	      setProp(el, name, cur == null ? '' : cur);
	    }
	  }
	}

	var style = {
	  create: updateStyle,
	  update: updateStyle
	};

	/*  */

	/**
	 * Add class with compatibility for SVG since classList is not supported on
	 * SVG elements in IE
	 */
	function addClass (el, cls) {
	  /* istanbul ignore if */
	  if (!cls || !(cls = cls.trim())) {
	    return
	  }

	  /* istanbul ignore else */
	  if (el.classList) {
	    if (cls.indexOf(' ') > -1) {
	      cls.split(/\s+/).forEach(function (c) { return el.classList.add(c); });
	    } else {
	      el.classList.add(cls);
	    }
	  } else {
	    var cur = " " + (el.getAttribute('class') || '') + " ";
	    if (cur.indexOf(' ' + cls + ' ') < 0) {
	      el.setAttribute('class', (cur + cls).trim());
	    }
	  }
	}

	/**
	 * Remove class with compatibility for SVG since classList is not supported on
	 * SVG elements in IE
	 */
	function removeClass (el, cls) {
	  /* istanbul ignore if */
	  if (!cls || !(cls = cls.trim())) {
	    return
	  }

	  /* istanbul ignore else */
	  if (el.classList) {
	    if (cls.indexOf(' ') > -1) {
	      cls.split(/\s+/).forEach(function (c) { return el.classList.remove(c); });
	    } else {
	      el.classList.remove(cls);
	    }
	  } else {
	    var cur = " " + (el.getAttribute('class') || '') + " ";
	    var tar = ' ' + cls + ' ';
	    while (cur.indexOf(tar) >= 0) {
	      cur = cur.replace(tar, ' ');
	    }
	    el.setAttribute('class', cur.trim());
	  }
	}

	/*  */

	function resolveTransition (def$$1) {
	  if (!def$$1) {
	    return
	  }
	  /* istanbul ignore else */
	  if (typeof def$$1 === 'object') {
	    var res = {};
	    if (def$$1.css !== false) {
	      extend(res, autoCssTransition(def$$1.name || 'v'));
	    }
	    extend(res, def$$1);
	    return res
	  } else if (typeof def$$1 === 'string') {
	    return autoCssTransition(def$$1)
	  }
	}

	var autoCssTransition = cached(function (name) {
	  return {
	    enterClass: (name + "-enter"),
	    enterToClass: (name + "-enter-to"),
	    enterActiveClass: (name + "-enter-active"),
	    leaveClass: (name + "-leave"),
	    leaveToClass: (name + "-leave-to"),
	    leaveActiveClass: (name + "-leave-active")
	  }
	});

	var hasTransition = inBrowser && !isIE9;
	var TRANSITION = 'transition';
	var ANIMATION = 'animation';

	// Transition property/event sniffing
	var transitionProp = 'transition';
	var transitionEndEvent = 'transitionend';
	var animationProp = 'animation';
	var animationEndEvent = 'animationend';
	if (hasTransition) {
	  /* istanbul ignore if */
	  if (window.ontransitionend === undefined &&
	    window.onwebkittransitionend !== undefined) {
	    transitionProp = 'WebkitTransition';
	    transitionEndEvent = 'webkitTransitionEnd';
	  }
	  if (window.onanimationend === undefined &&
	    window.onwebkitanimationend !== undefined) {
	    animationProp = 'WebkitAnimation';
	    animationEndEvent = 'webkitAnimationEnd';
	  }
	}

	// binding to window is necessary to make hot reload work in IE in strict mode
	var raf = inBrowser && window.requestAnimationFrame
	  ? window.requestAnimationFrame.bind(window)
	  : setTimeout;

	function nextFrame (fn) {
	  raf(function () {
	    raf(fn);
	  });
	}

	function addTransitionClass (el, cls) {
	  (el._transitionClasses || (el._transitionClasses = [])).push(cls);
	  addClass(el, cls);
	}

	function removeTransitionClass (el, cls) {
	  if (el._transitionClasses) {
	    remove(el._transitionClasses, cls);
	  }
	  removeClass(el, cls);
	}

	function whenTransitionEnds (
	  el,
	  expectedType,
	  cb
	) {
	  var ref = getTransitionInfo(el, expectedType);
	  var type = ref.type;
	  var timeout = ref.timeout;
	  var propCount = ref.propCount;
	  if (!type) { return cb() }
	  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
	  var ended = 0;
	  var end = function () {
	    el.removeEventListener(event, onEnd);
	    cb();
	  };
	  var onEnd = function (e) {
	    if (e.target === el) {
	      if (++ended >= propCount) {
	        end();
	      }
	    }
	  };
	  setTimeout(function () {
	    if (ended < propCount) {
	      end();
	    }
	  }, timeout + 1);
	  el.addEventListener(event, onEnd);
	}

	var transformRE = /\b(transform|all)(,|$)/;

	function getTransitionInfo (el, expectedType) {
	  var styles = window.getComputedStyle(el);
	  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
	  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
	  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
	  var animationDelays = styles[animationProp + 'Delay'].split(', ');
	  var animationDurations = styles[animationProp + 'Duration'].split(', ');
	  var animationTimeout = getTimeout(animationDelays, animationDurations);

	  var type;
	  var timeout = 0;
	  var propCount = 0;
	  /* istanbul ignore if */
	  if (expectedType === TRANSITION) {
	    if (transitionTimeout > 0) {
	      type = TRANSITION;
	      timeout = transitionTimeout;
	      propCount = transitionDurations.length;
	    }
	  } else if (expectedType === ANIMATION) {
	    if (animationTimeout > 0) {
	      type = ANIMATION;
	      timeout = animationTimeout;
	      propCount = animationDurations.length;
	    }
	  } else {
	    timeout = Math.max(transitionTimeout, animationTimeout);
	    type = timeout > 0
	      ? transitionTimeout > animationTimeout
	        ? TRANSITION
	        : ANIMATION
	      : null;
	    propCount = type
	      ? type === TRANSITION
	        ? transitionDurations.length
	        : animationDurations.length
	      : 0;
	  }
	  var hasTransform =
	    type === TRANSITION &&
	    transformRE.test(styles[transitionProp + 'Property']);
	  return {
	    type: type,
	    timeout: timeout,
	    propCount: propCount,
	    hasTransform: hasTransform
	  }
	}

	function getTimeout (delays, durations) {
	  /* istanbul ignore next */
	  while (delays.length < durations.length) {
	    delays = delays.concat(delays);
	  }

	  return Math.max.apply(null, durations.map(function (d, i) {
	    return toMs(d) + toMs(delays[i])
	  }))
	}

	function toMs (s) {
	  return Number(s.slice(0, -1)) * 1000
	}

	/*  */

	function enter (vnode, toggleDisplay) {
	  var el = vnode.elm;

	  // call leave callback now
	  if (el._leaveCb) {
	    el._leaveCb.cancelled = true;
	    el._leaveCb();
	  }

	  var data = resolveTransition(vnode.data.transition);
	  if (!data) {
	    return
	  }

	  /* istanbul ignore if */
	  if (el._enterCb || el.nodeType !== 1) {
	    return
	  }

	  var css = data.css;
	  var type = data.type;
	  var enterClass = data.enterClass;
	  var enterToClass = data.enterToClass;
	  var enterActiveClass = data.enterActiveClass;
	  var appearClass = data.appearClass;
	  var appearToClass = data.appearToClass;
	  var appearActiveClass = data.appearActiveClass;
	  var beforeEnter = data.beforeEnter;
	  var enter = data.enter;
	  var afterEnter = data.afterEnter;
	  var enterCancelled = data.enterCancelled;
	  var beforeAppear = data.beforeAppear;
	  var appear = data.appear;
	  var afterAppear = data.afterAppear;
	  var appearCancelled = data.appearCancelled;
	  var duration = data.duration;

	  // activeInstance will always be the <transition> component managing this
	  // transition. One edge case to check is when the <transition> is placed
	  // as the root node of a child component. In that case we need to check
	  // <transition>'s parent for appear check.
	  var context = activeInstance;
	  var transitionNode = activeInstance.$vnode;
	  while (transitionNode && transitionNode.parent) {
	    transitionNode = transitionNode.parent;
	    context = transitionNode.context;
	  }

	  var isAppear = !context._isMounted || !vnode.isRootInsert;

	  if (isAppear && !appear && appear !== '') {
	    return
	  }

	  var startClass = isAppear && appearClass
	    ? appearClass
	    : enterClass;
	  var activeClass = isAppear && appearActiveClass
	    ? appearActiveClass
	    : enterActiveClass;
	  var toClass = isAppear && appearToClass
	    ? appearToClass
	    : enterToClass;

	  var beforeEnterHook = isAppear
	    ? (beforeAppear || beforeEnter)
	    : beforeEnter;
	  var enterHook = isAppear
	    ? (typeof appear === 'function' ? appear : enter)
	    : enter;
	  var afterEnterHook = isAppear
	    ? (afterAppear || afterEnter)
	    : afterEnter;
	  var enterCancelledHook = isAppear
	    ? (appearCancelled || enterCancelled)
	    : enterCancelled;

	  var explicitEnterDuration = toNumber(
	    isObject(duration)
	      ? duration.enter
	      : duration
	  );

	  if ("development" !== 'production' && explicitEnterDuration != null) {
	    checkDuration(explicitEnterDuration, 'enter', vnode);
	  }

	  var expectsCSS = css !== false && !isIE9;
	  var userWantsControl = getHookArgumentsLength(enterHook);

	  var cb = el._enterCb = once(function () {
	    if (expectsCSS) {
	      removeTransitionClass(el, toClass);
	      removeTransitionClass(el, activeClass);
	    }
	    if (cb.cancelled) {
	      if (expectsCSS) {
	        removeTransitionClass(el, startClass);
	      }
	      enterCancelledHook && enterCancelledHook(el);
	    } else {
	      afterEnterHook && afterEnterHook(el);
	    }
	    el._enterCb = null;
	  });

	  if (!vnode.data.show) {
	    // remove pending leave element on enter by injecting an insert hook
	    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {
	      var parent = el.parentNode;
	      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
	      if (pendingNode &&
	          pendingNode.tag === vnode.tag &&
	          pendingNode.elm._leaveCb) {
	        pendingNode.elm._leaveCb();
	      }
	      enterHook && enterHook(el, cb);
	    });
	  }

	  // start enter transition
	  beforeEnterHook && beforeEnterHook(el);
	  if (expectsCSS) {
	    addTransitionClass(el, startClass);
	    addTransitionClass(el, activeClass);
	    nextFrame(function () {
	      addTransitionClass(el, toClass);
	      removeTransitionClass(el, startClass);
	      if (!cb.cancelled && !userWantsControl) {
	        if (isValidDuration(explicitEnterDuration)) {
	          setTimeout(cb, explicitEnterDuration);
	        } else {
	          whenTransitionEnds(el, type, cb);
	        }
	      }
	    });
	  }

	  if (vnode.data.show) {
	    toggleDisplay && toggleDisplay();
	    enterHook && enterHook(el, cb);
	  }

	  if (!expectsCSS && !userWantsControl) {
	    cb();
	  }
	}

	function leave (vnode, rm) {
	  var el = vnode.elm;

	  // call enter callback now
	  if (el._enterCb) {
	    el._enterCb.cancelled = true;
	    el._enterCb();
	  }

	  var data = resolveTransition(vnode.data.transition);
	  if (!data) {
	    return rm()
	  }

	  /* istanbul ignore if */
	  if (el._leaveCb || el.nodeType !== 1) {
	    return
	  }

	  var css = data.css;
	  var type = data.type;
	  var leaveClass = data.leaveClass;
	  var leaveToClass = data.leaveToClass;
	  var leaveActiveClass = data.leaveActiveClass;
	  var beforeLeave = data.beforeLeave;
	  var leave = data.leave;
	  var afterLeave = data.afterLeave;
	  var leaveCancelled = data.leaveCancelled;
	  var delayLeave = data.delayLeave;
	  var duration = data.duration;

	  var expectsCSS = css !== false && !isIE9;
	  var userWantsControl = getHookArgumentsLength(leave);

	  var explicitLeaveDuration = toNumber(
	    isObject(duration)
	      ? duration.leave
	      : duration
	  );

	  if ("development" !== 'production' && explicitLeaveDuration != null) {
	    checkDuration(explicitLeaveDuration, 'leave', vnode);
	  }

	  var cb = el._leaveCb = once(function () {
	    if (el.parentNode && el.parentNode._pending) {
	      el.parentNode._pending[vnode.key] = null;
	    }
	    if (expectsCSS) {
	      removeTransitionClass(el, leaveToClass);
	      removeTransitionClass(el, leaveActiveClass);
	    }
	    if (cb.cancelled) {
	      if (expectsCSS) {
	        removeTransitionClass(el, leaveClass);
	      }
	      leaveCancelled && leaveCancelled(el);
	    } else {
	      rm();
	      afterLeave && afterLeave(el);
	    }
	    el._leaveCb = null;
	  });

	  if (delayLeave) {
	    delayLeave(performLeave);
	  } else {
	    performLeave();
	  }

	  function performLeave () {
	    // the delayed leave may have already been cancelled
	    if (cb.cancelled) {
	      return
	    }
	    // record leaving element
	    if (!vnode.data.show) {
	      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
	    }
	    beforeLeave && beforeLeave(el);
	    if (expectsCSS) {
	      addTransitionClass(el, leaveClass);
	      addTransitionClass(el, leaveActiveClass);
	      nextFrame(function () {
	        addTransitionClass(el, leaveToClass);
	        removeTransitionClass(el, leaveClass);
	        if (!cb.cancelled && !userWantsControl) {
	          if (isValidDuration(explicitLeaveDuration)) {
	            setTimeout(cb, explicitLeaveDuration);
	          } else {
	            whenTransitionEnds(el, type, cb);
	          }
	        }
	      });
	    }
	    leave && leave(el, cb);
	    if (!expectsCSS && !userWantsControl) {
	      cb();
	    }
	  }
	}

	// only used in dev mode
	function checkDuration (val, name, vnode) {
	  if (typeof val !== 'number') {
	    warn(
	      "<transition> explicit " + name + " duration is not a valid number - " +
	      "got " + (JSON.stringify(val)) + ".",
	      vnode.context
	    );
	  } else if (isNaN(val)) {
	    warn(
	      "<transition> explicit " + name + " duration is NaN - " +
	      'the duration expression might be incorrect.',
	      vnode.context
	    );
	  }
	}

	function isValidDuration (val) {
	  return typeof val === 'number' && !isNaN(val)
	}

	/**
	 * Normalize a transition hook's argument length. The hook may be:
	 * - a merged hook (invoker) with the original in .fns
	 * - a wrapped component method (check ._length)
	 * - a plain function (.length)
	 */
	function getHookArgumentsLength (fn) {
	  if (!fn) { return false }
	  var invokerFns = fn.fns;
	  if (invokerFns) {
	    // invoker
	    return getHookArgumentsLength(
	      Array.isArray(invokerFns)
	        ? invokerFns[0]
	        : invokerFns
	    )
	  } else {
	    return (fn._length || fn.length) > 1
	  }
	}

	function _enter (_, vnode) {
	  if (!vnode.data.show) {
	    enter(vnode);
	  }
	}

	var transition = inBrowser ? {
	  create: _enter,
	  activate: _enter,
	  remove: function remove$$1 (vnode, rm) {
	    /* istanbul ignore else */
	    if (!vnode.data.show) {
	      leave(vnode, rm);
	    } else {
	      rm();
	    }
	  }
	} : {};

	var platformModules = [
	  attrs,
	  klass,
	  events,
	  domProps,
	  style,
	  transition
	];

	/*  */

	// the directive module should be applied last, after all
	// built-in modules have been applied.
	var modules = platformModules.concat(baseModules);

	var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

	/**
	 * Not type checking this file because flow doesn't like attaching
	 * properties to Elements.
	 */

	/* istanbul ignore if */
	if (isIE9) {
	  // http://www.matts411.com/post/internet-explorer-9-oninput/
	  document.addEventListener('selectionchange', function () {
	    var el = document.activeElement;
	    if (el && el.vmodel) {
	      trigger(el, 'input');
	    }
	  });
	}

	var model$1 = {
	  inserted: function inserted (el, binding, vnode) {
	    if (vnode.tag === 'select') {
	      var cb = function () {
	        setSelected(el, binding, vnode.context);
	      };
	      cb();
	      /* istanbul ignore if */
	      if (isIE || isEdge) {
	        setTimeout(cb, 0);
	      }
	    } else if (vnode.tag === 'textarea' || el.type === 'text' || el.type === 'password') {
	      el._vModifiers = binding.modifiers;
	      if (!binding.modifiers.lazy) {
	        if (!isAndroid) {
	          el.addEventListener('compositionstart', onCompositionStart);
	          el.addEventListener('compositionend', onCompositionEnd);
	        }
	        /* istanbul ignore if */
	        if (isIE9) {
	          el.vmodel = true;
	        }
	      }
	    }
	  },
	  componentUpdated: function componentUpdated (el, binding, vnode) {
	    if (vnode.tag === 'select') {
	      setSelected(el, binding, vnode.context);
	      // in case the options rendered by v-for have changed,
	      // it's possible that the value is out-of-sync with the rendered options.
	      // detect such cases and filter out values that no longer has a matching
	      // option in the DOM.
	      var needReset = el.multiple
	        ? binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })
	        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);
	      if (needReset) {
	        trigger(el, 'change');
	      }
	    }
	  }
	};

	function setSelected (el, binding, vm) {
	  var value = binding.value;
	  var isMultiple = el.multiple;
	  if (isMultiple && !Array.isArray(value)) {
	    "development" !== 'production' && warn(
	      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
	      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
	      vm
	    );
	    return
	  }
	  var selected, option;
	  for (var i = 0, l = el.options.length; i < l; i++) {
	    option = el.options[i];
	    if (isMultiple) {
	      selected = looseIndexOf(value, getValue(option)) > -1;
	      if (option.selected !== selected) {
	        option.selected = selected;
	      }
	    } else {
	      if (looseEqual(getValue(option), value)) {
	        if (el.selectedIndex !== i) {
	          el.selectedIndex = i;
	        }
	        return
	      }
	    }
	  }
	  if (!isMultiple) {
	    el.selectedIndex = -1;
	  }
	}

	function hasNoMatchingOption (value, options) {
	  for (var i = 0, l = options.length; i < l; i++) {
	    if (looseEqual(getValue(options[i]), value)) {
	      return false
	    }
	  }
	  return true
	}

	function getValue (option) {
	  return '_value' in option
	    ? option._value
	    : option.value
	}

	function onCompositionStart (e) {
	  e.target.composing = true;
	}

	function onCompositionEnd (e) {
	  e.target.composing = false;
	  trigger(e.target, 'input');
	}

	function trigger (el, type) {
	  var e = document.createEvent('HTMLEvents');
	  e.initEvent(type, true, true);
	  el.dispatchEvent(e);
	}

	/*  */

	// recursively search for possible transition defined inside the component root
	function locateNode (vnode) {
	  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
	    ? locateNode(vnode.componentInstance._vnode)
	    : vnode
	}

	var show = {
	  bind: function bind (el, ref, vnode) {
	    var value = ref.value;

	    vnode = locateNode(vnode);
	    var transition = vnode.data && vnode.data.transition;
	    var originalDisplay = el.__vOriginalDisplay =
	      el.style.display === 'none' ? '' : el.style.display;
	    if (value && transition && !isIE9) {
	      vnode.data.show = true;
	      enter(vnode, function () {
	        el.style.display = originalDisplay;
	      });
	    } else {
	      el.style.display = value ? originalDisplay : 'none';
	    }
	  },

	  update: function update (el, ref, vnode) {
	    var value = ref.value;
	    var oldValue = ref.oldValue;

	    /* istanbul ignore if */
	    if (value === oldValue) { return }
	    vnode = locateNode(vnode);
	    var transition = vnode.data && vnode.data.transition;
	    if (transition && !isIE9) {
	      vnode.data.show = true;
	      if (value) {
	        enter(vnode, function () {
	          el.style.display = el.__vOriginalDisplay;
	        });
	      } else {
	        leave(vnode, function () {
	          el.style.display = 'none';
	        });
	      }
	    } else {
	      el.style.display = value ? el.__vOriginalDisplay : 'none';
	    }
	  },

	  unbind: function unbind (
	    el,
	    binding,
	    vnode,
	    oldVnode,
	    isDestroy
	  ) {
	    if (!isDestroy) {
	      el.style.display = el.__vOriginalDisplay;
	    }
	  }
	};

	var platformDirectives = {
	  model: model$1,
	  show: show
	};

	/*  */

	// Provides transition support for a single element/component.
	// supports transition mode (out-in / in-out)

	var transitionProps = {
	  name: String,
	  appear: Boolean,
	  css: Boolean,
	  mode: String,
	  type: String,
	  enterClass: String,
	  leaveClass: String,
	  enterToClass: String,
	  leaveToClass: String,
	  enterActiveClass: String,
	  leaveActiveClass: String,
	  appearClass: String,
	  appearActiveClass: String,
	  appearToClass: String,
	  duration: [Number, String, Object]
	};

	// in case the child is also an abstract component, e.g. <keep-alive>
	// we want to recursively retrieve the real component to be rendered
	function getRealChild (vnode) {
	  var compOptions = vnode && vnode.componentOptions;
	  if (compOptions && compOptions.Ctor.options.abstract) {
	    return getRealChild(getFirstComponentChild(compOptions.children))
	  } else {
	    return vnode
	  }
	}

	function extractTransitionData (comp) {
	  var data = {};
	  var options = comp.$options;
	  // props
	  for (var key in options.propsData) {
	    data[key] = comp[key];
	  }
	  // events.
	  // extract listeners and pass them directly to the transition methods
	  var listeners = options._parentListeners;
	  for (var key$1 in listeners) {
	    data[camelize(key$1)] = listeners[key$1];
	  }
	  return data
	}

	function placeholder (h, rawChild) {
	  return /\d-keep-alive$/.test(rawChild.tag)
	    ? h('keep-alive')
	    : null
	}

	function hasParentTransition (vnode) {
	  while ((vnode = vnode.parent)) {
	    if (vnode.data.transition) {
	      return true
	    }
	  }
	}

	function isSameChild (child, oldChild) {
	  return oldChild.key === child.key && oldChild.tag === child.tag
	}

	var Transition = {
	  name: 'transition',
	  props: transitionProps,
	  abstract: true,

	  render: function render (h) {
	    var this$1 = this;

	    var children = this.$slots.default;
	    if (!children) {
	      return
	    }

	    // filter out text nodes (possible whitespaces)
	    children = children.filter(function (c) { return c.tag; });
	    /* istanbul ignore if */
	    if (!children.length) {
	      return
	    }

	    // warn multiple elements
	    if ("development" !== 'production' && children.length > 1) {
	      warn(
	        '<transition> can only be used on a single element. Use ' +
	        '<transition-group> for lists.',
	        this.$parent
	      );
	    }

	    var mode = this.mode;

	    // warn invalid mode
	    if ("development" !== 'production' &&
	        mode && mode !== 'in-out' && mode !== 'out-in') {
	      warn(
	        'invalid <transition> mode: ' + mode,
	        this.$parent
	      );
	    }

	    var rawChild = children[0];

	    // if this is a component root node and the component's
	    // parent container node also has transition, skip.
	    if (hasParentTransition(this.$vnode)) {
	      return rawChild
	    }

	    // apply transition data to child
	    // use getRealChild() to ignore abstract components e.g. keep-alive
	    var child = getRealChild(rawChild);
	    /* istanbul ignore if */
	    if (!child) {
	      return rawChild
	    }

	    if (this._leaving) {
	      return placeholder(h, rawChild)
	    }

	    // ensure a key that is unique to the vnode type and to this transition
	    // component instance. This key will be used to remove pending leaving nodes
	    // during entering.
	    var id = "__transition-" + (this._uid) + "-";
	    child.key = child.key == null
	      ? id + child.tag
	      : isPrimitive(child.key)
	        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
	        : child.key;

	    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
	    var oldRawChild = this._vnode;
	    var oldChild = getRealChild(oldRawChild);

	    // mark v-show
	    // so that the transition module can hand over the control to the directive
	    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {
	      child.data.show = true;
	    }

	    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {
	      // replace old child transition data with fresh one
	      // important for dynamic transitions!
	      var oldData = oldChild && (oldChild.data.transition = extend({}, data));
	      // handle transition mode
	      if (mode === 'out-in') {
	        // return placeholder node and queue update when leave finishes
	        this._leaving = true;
	        mergeVNodeHook(oldData, 'afterLeave', function () {
	          this$1._leaving = false;
	          this$1.$forceUpdate();
	        });
	        return placeholder(h, rawChild)
	      } else if (mode === 'in-out') {
	        var delayedLeave;
	        var performLeave = function () { delayedLeave(); };
	        mergeVNodeHook(data, 'afterEnter', performLeave);
	        mergeVNodeHook(data, 'enterCancelled', performLeave);
	        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
	      }
	    }

	    return rawChild
	  }
	};

	/*  */

	// Provides transition support for list items.
	// supports move transitions using the FLIP technique.

	// Because the vdom's children update algorithm is "unstable" - i.e.
	// it doesn't guarantee the relative positioning of removed elements,
	// we force transition-group to update its children into two passes:
	// in the first pass, we remove all nodes that need to be removed,
	// triggering their leaving transition; in the second pass, we insert/move
	// into the final desired state. This way in the second pass removed
	// nodes will remain where they should be.

	var props = extend({
	  tag: String,
	  moveClass: String
	}, transitionProps);

	delete props.mode;

	var TransitionGroup = {
	  props: props,

	  render: function render (h) {
	    var tag = this.tag || this.$vnode.data.tag || 'span';
	    var map = Object.create(null);
	    var prevChildren = this.prevChildren = this.children;
	    var rawChildren = this.$slots.default || [];
	    var children = this.children = [];
	    var transitionData = extractTransitionData(this);

	    for (var i = 0; i < rawChildren.length; i++) {
	      var c = rawChildren[i];
	      if (c.tag) {
	        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
	          children.push(c);
	          map[c.key] = c
	          ;(c.data || (c.data = {})).transition = transitionData;
	        } else {
	          var opts = c.componentOptions;
	          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
	          warn(("<transition-group> children must be keyed: <" + name + ">"));
	        }
	      }
	    }

	    if (prevChildren) {
	      var kept = [];
	      var removed = [];
	      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
	        var c$1 = prevChildren[i$1];
	        c$1.data.transition = transitionData;
	        c$1.data.pos = c$1.elm.getBoundingClientRect();
	        if (map[c$1.key]) {
	          kept.push(c$1);
	        } else {
	          removed.push(c$1);
	        }
	      }
	      this.kept = h(tag, null, kept);
	      this.removed = removed;
	    }

	    return h(tag, null, children)
	  },

	  beforeUpdate: function beforeUpdate () {
	    // force removing pass
	    this.__patch__(
	      this._vnode,
	      this.kept,
	      false, // hydrating
	      true // removeOnly (!important, avoids unnecessary moves)
	    );
	    this._vnode = this.kept;
	  },

	  updated: function updated () {
	    var children = this.prevChildren;
	    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
	    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
	      return
	    }

	    // we divide the work into three loops to avoid mixing DOM reads and writes
	    // in each iteration - which helps prevent layout thrashing.
	    children.forEach(callPendingCbs);
	    children.forEach(recordPosition);
	    children.forEach(applyTranslation);

	    // force reflow to put everything in position
	    var body = document.body;
	    var f = body.offsetHeight; // eslint-disable-line

	    children.forEach(function (c) {
	      if (c.data.moved) {
	        var el = c.elm;
	        var s = el.style;
	        addTransitionClass(el, moveClass);
	        s.transform = s.WebkitTransform = s.transitionDuration = '';
	        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
	          if (!e || /transform$/.test(e.propertyName)) {
	            el.removeEventListener(transitionEndEvent, cb);
	            el._moveCb = null;
	            removeTransitionClass(el, moveClass);
	          }
	        });
	      }
	    });
	  },

	  methods: {
	    hasMove: function hasMove (el, moveClass) {
	      /* istanbul ignore if */
	      if (!hasTransition) {
	        return false
	      }
	      if (this._hasMove != null) {
	        return this._hasMove
	      }
	      // Detect whether an element with the move class applied has
	      // CSS transitions. Since the element may be inside an entering
	      // transition at this very moment, we make a clone of it and remove
	      // all other transition classes applied to ensure only the move class
	      // is applied.
	      var clone = el.cloneNode();
	      if (el._transitionClasses) {
	        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
	      }
	      addClass(clone, moveClass);
	      clone.style.display = 'none';
	      this.$el.appendChild(clone);
	      var info = getTransitionInfo(clone);
	      this.$el.removeChild(clone);
	      return (this._hasMove = info.hasTransform)
	    }
	  }
	};

	function callPendingCbs (c) {
	  /* istanbul ignore if */
	  if (c.elm._moveCb) {
	    c.elm._moveCb();
	  }
	  /* istanbul ignore if */
	  if (c.elm._enterCb) {
	    c.elm._enterCb();
	  }
	}

	function recordPosition (c) {
	  c.data.newPos = c.elm.getBoundingClientRect();
	}

	function applyTranslation (c) {
	  var oldPos = c.data.pos;
	  var newPos = c.data.newPos;
	  var dx = oldPos.left - newPos.left;
	  var dy = oldPos.top - newPos.top;
	  if (dx || dy) {
	    c.data.moved = true;
	    var s = c.elm.style;
	    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
	    s.transitionDuration = '0s';
	  }
	}

	var platformComponents = {
	  Transition: Transition,
	  TransitionGroup: TransitionGroup
	};

	/*  */

	// install platform specific utils
	Vue$3.config.mustUseProp = mustUseProp;
	Vue$3.config.isReservedTag = isReservedTag;
	Vue$3.config.getTagNamespace = getTagNamespace;
	Vue$3.config.isUnknownElement = isUnknownElement;

	// install platform runtime directives & components
	extend(Vue$3.options.directives, platformDirectives);
	extend(Vue$3.options.components, platformComponents);

	// install platform patch function
	Vue$3.prototype.__patch__ = inBrowser ? patch : noop;

	// public mount method
	Vue$3.prototype.$mount = function (
	  el,
	  hydrating
	) {
	  el = el && inBrowser ? query(el) : undefined;
	  return mountComponent(this, el, hydrating)
	};

	// devtools global hook
	/* istanbul ignore next */
	setTimeout(function () {
	  if (config.devtools) {
	    if (devtools) {
	      devtools.emit('init', Vue$3);
	    } else if ("development" !== 'production' && isChrome) {
	      console[console.info ? 'info' : 'log'](
	        'Download the Vue Devtools extension for a better development experience:\n' +
	        'https://github.com/vuejs/vue-devtools'
	      );
	    }
	  }
	  if ("development" !== 'production' &&
	      config.productionTip !== false &&
	      inBrowser && typeof console !== 'undefined') {
	    console[console.info ? 'info' : 'log'](
	      "You are running Vue in development mode.\n" +
	      "Make sure to turn on production mode when deploying for production.\n" +
	      "See more tips at https://vuejs.org/guide/deployment.html"
	    );
	  }
	}, 0);

	/*  */

	// check whether current browser encodes a char inside attribute values
	function shouldDecode (content, encoded) {
	  var div = document.createElement('div');
	  div.innerHTML = "<div a=\"" + content + "\">";
	  return div.innerHTML.indexOf(encoded) > 0
	}

	// #3663
	// IE encodes newlines inside attribute values while other browsers don't
	var shouldDecodeNewlines = inBrowser ? shouldDecode('\n', '&#10;') : false;

	/*  */

	var isUnaryTag = makeMap(
	  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
	  'link,meta,param,source,track,wbr'
	);

	// Elements that you can, intentionally, leave open
	// (and which close themselves)
	var canBeLeftOpenTag = makeMap(
	  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
	);

	// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
	// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
	var isNonPhrasingTag = makeMap(
	  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
	  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
	  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
	  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
	  'title,tr,track'
	);

	/*  */

	var decoder;

	function decode (html) {
	  decoder = decoder || document.createElement('div');
	  decoder.innerHTML = html;
	  return decoder.textContent
	}

	/**
	 * Not type-checking this file because it's mostly vendor code.
	 */

	/*!
	 * HTML Parser By John Resig (ejohn.org)
	 * Modified by Juriy "kangax" Zaytsev
	 * Original code by Erik Arvidsson, Mozilla Public License
	 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
	 */

	// Regular Expressions for parsing tags and attributes
	var singleAttrIdentifier = /([^\s"'<>/=]+)/;
	var singleAttrAssign = /(?:=)/;
	var singleAttrValues = [
	  // attr value double quotes
	  /"([^"]*)"+/.source,
	  // attr value, single quotes
	  /'([^']*)'+/.source,
	  // attr value, no quotes
	  /([^\s"'=<>`]+)/.source
	];
	var attribute = new RegExp(
	  '^\\s*' + singleAttrIdentifier.source +
	  '(?:\\s*(' + singleAttrAssign.source + ')' +
	  '\\s*(?:' + singleAttrValues.join('|') + '))?'
	);

	// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName
	// but for Vue templates we can enforce a simple charset
	var ncname = '[a-zA-Z_][\\w\\-\\.]*';
	var qnameCapture = '((?:' + ncname + '\\:)?' + ncname + ')';
	var startTagOpen = new RegExp('^<' + qnameCapture);
	var startTagClose = /^\s*(\/?)>/;
	var endTag = new RegExp('^<\\/' + qnameCapture + '[^>]*>');
	var doctype = /^<!DOCTYPE [^>]+>/i;
	var comment = /^<!--/;
	var conditionalComment = /^<!\[/;

	var IS_REGEX_CAPTURING_BROKEN = false;
	'x'.replace(/x(.)?/g, function (m, g) {
	  IS_REGEX_CAPTURING_BROKEN = g === '';
	});

	// Special Elements (can contain anything)
	var isPlainTextElement = makeMap('script,style,textarea', true);
	var reCache = {};

	var decodingMap = {
	  '&lt;': '<',
	  '&gt;': '>',
	  '&quot;': '"',
	  '&amp;': '&',
	  '&#10;': '\n'
	};
	var encodedAttr = /&(?:lt|gt|quot|amp);/g;
	var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;

	function decodeAttr (value, shouldDecodeNewlines) {
	  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
	  return value.replace(re, function (match) { return decodingMap[match]; })
	}

	function parseHTML (html, options) {
	  var stack = [];
	  var expectHTML = options.expectHTML;
	  var isUnaryTag$$1 = options.isUnaryTag || no;
	  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
	  var index = 0;
	  var last, lastTag;
	  while (html) {
	    last = html;
	    // Make sure we're not in a plaintext content element like script/style
	    if (!lastTag || !isPlainTextElement(lastTag)) {
	      var textEnd = html.indexOf('<');
	      if (textEnd === 0) {
	        // Comment:
	        if (comment.test(html)) {
	          var commentEnd = html.indexOf('-->');

	          if (commentEnd >= 0) {
	            advance(commentEnd + 3);
	            continue
	          }
	        }

	        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
	        if (conditionalComment.test(html)) {
	          var conditionalEnd = html.indexOf(']>');

	          if (conditionalEnd >= 0) {
	            advance(conditionalEnd + 2);
	            continue
	          }
	        }

	        // Doctype:
	        var doctypeMatch = html.match(doctype);
	        if (doctypeMatch) {
	          advance(doctypeMatch[0].length);
	          continue
	        }

	        // End tag:
	        var endTagMatch = html.match(endTag);
	        if (endTagMatch) {
	          var curIndex = index;
	          advance(endTagMatch[0].length);
	          parseEndTag(endTagMatch[1], curIndex, index);
	          continue
	        }

	        // Start tag:
	        var startTagMatch = parseStartTag();
	        if (startTagMatch) {
	          handleStartTag(startTagMatch);
	          continue
	        }
	      }

	      var text = (void 0), rest$1 = (void 0), next = (void 0);
	      if (textEnd >= 0) {
	        rest$1 = html.slice(textEnd);
	        while (
	          !endTag.test(rest$1) &&
	          !startTagOpen.test(rest$1) &&
	          !comment.test(rest$1) &&
	          !conditionalComment.test(rest$1)
	        ) {
	          // < in plain text, be forgiving and treat it as text
	          next = rest$1.indexOf('<', 1);
	          if (next < 0) { break }
	          textEnd += next;
	          rest$1 = html.slice(textEnd);
	        }
	        text = html.substring(0, textEnd);
	        advance(textEnd);
	      }

	      if (textEnd < 0) {
	        text = html;
	        html = '';
	      }

	      if (options.chars && text) {
	        options.chars(text);
	      }
	    } else {
	      var stackedTag = lastTag.toLowerCase();
	      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
	      var endTagLength = 0;
	      var rest = html.replace(reStackedTag, function (all, text, endTag) {
	        endTagLength = endTag.length;
	        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
	          text = text
	            .replace(/<!--([\s\S]*?)-->/g, '$1')
	            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
	        }
	        if (options.chars) {
	          options.chars(text);
	        }
	        return ''
	      });
	      index += html.length - rest.length;
	      html = rest;
	      parseEndTag(stackedTag, index - endTagLength, index);
	    }

	    if (html === last) {
	      options.chars && options.chars(html);
	      if ("development" !== 'production' && !stack.length && options.warn) {
	        options.warn(("Mal-formatted tag at end of template: \"" + html + "\""));
	      }
	      break
	    }
	  }

	  // Clean up any remaining tags
	  parseEndTag();

	  function advance (n) {
	    index += n;
	    html = html.substring(n);
	  }

	  function parseStartTag () {
	    var start = html.match(startTagOpen);
	    if (start) {
	      var match = {
	        tagName: start[1],
	        attrs: [],
	        start: index
	      };
	      advance(start[0].length);
	      var end, attr;
	      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {
	        advance(attr[0].length);
	        match.attrs.push(attr);
	      }
	      if (end) {
	        match.unarySlash = end[1];
	        advance(end[0].length);
	        match.end = index;
	        return match
	      }
	    }
	  }

	  function handleStartTag (match) {
	    var tagName = match.tagName;
	    var unarySlash = match.unarySlash;

	    if (expectHTML) {
	      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
	        parseEndTag(lastTag);
	      }
	      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
	        parseEndTag(tagName);
	      }
	    }

	    var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;

	    var l = match.attrs.length;
	    var attrs = new Array(l);
	    for (var i = 0; i < l; i++) {
	      var args = match.attrs[i];
	      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778
	      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('""') === -1) {
	        if (args[3] === '') { delete args[3]; }
	        if (args[4] === '') { delete args[4]; }
	        if (args[5] === '') { delete args[5]; }
	      }
	      var value = args[3] || args[4] || args[5] || '';
	      attrs[i] = {
	        name: args[1],
	        value: decodeAttr(
	          value,
	          options.shouldDecodeNewlines
	        )
	      };
	    }

	    if (!unary) {
	      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });
	      lastTag = tagName;
	    }

	    if (options.start) {
	      options.start(tagName, attrs, unary, match.start, match.end);
	    }
	  }

	  function parseEndTag (tagName, start, end) {
	    var pos, lowerCasedTagName;
	    if (start == null) { start = index; }
	    if (end == null) { end = index; }

	    if (tagName) {
	      lowerCasedTagName = tagName.toLowerCase();
	    }

	    // Find the closest opened tag of the same type
	    if (tagName) {
	      for (pos = stack.length - 1; pos >= 0; pos--) {
	        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
	          break
	        }
	      }
	    } else {
	      // If no tag name is provided, clean shop
	      pos = 0;
	    }

	    if (pos >= 0) {
	      // Close all the open elements, up the stack
	      for (var i = stack.length - 1; i >= pos; i--) {
	        if ("development" !== 'production' &&
	            (i > pos || !tagName) &&
	            options.warn) {
	          options.warn(
	            ("tag <" + (stack[i].tag) + "> has no matching end tag.")
	          );
	        }
	        if (options.end) {
	          options.end(stack[i].tag, start, end);
	        }
	      }

	      // Remove the open elements from the stack
	      stack.length = pos;
	      lastTag = pos && stack[pos - 1].tag;
	    } else if (lowerCasedTagName === 'br') {
	      if (options.start) {
	        options.start(tagName, [], true, start, end);
	      }
	    } else if (lowerCasedTagName === 'p') {
	      if (options.start) {
	        options.start(tagName, [], false, start, end);
	      }
	      if (options.end) {
	        options.end(tagName, start, end);
	      }
	    }
	  }
	}

	/*  */

	var defaultTagRE = /\{\{((?:.|\n)+?)\}\}/g;
	var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

	var buildRegex = cached(function (delimiters) {
	  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
	  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
	  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
	});

	function parseText (
	  text,
	  delimiters
	) {
	  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
	  if (!tagRE.test(text)) {
	    return
	  }
	  var tokens = [];
	  var lastIndex = tagRE.lastIndex = 0;
	  var match, index;
	  while ((match = tagRE.exec(text))) {
	    index = match.index;
	    // push text token
	    if (index > lastIndex) {
	      tokens.push(JSON.stringify(text.slice(lastIndex, index)));
	    }
	    // tag token
	    var exp = parseFilters(match[1].trim());
	    tokens.push(("_s(" + exp + ")"));
	    lastIndex = index + match[0].length;
	  }
	  if (lastIndex < text.length) {
	    tokens.push(JSON.stringify(text.slice(lastIndex)));
	  }
	  return tokens.join('+')
	}

	/*  */

	var onRE = /^@|^v-on:/;
	var dirRE = /^v-|^@|^:/;
	var forAliasRE = /(.*?)\s+(?:in|of)\s+(.*)/;
	var forIteratorRE = /\((\{[^}]*\}|[^,]*),([^,]*)(?:,([^,]*))?\)/;

	var argRE = /:(.*)$/;
	var bindRE = /^:|^v-bind:/;
	var modifierRE = /\.[^.]+/g;

	var decodeHTMLCached = cached(decode);

	// configurable state
	var warn$2;
	var delimiters;
	var transforms;
	var preTransforms;
	var postTransforms;
	var platformIsPreTag;
	var platformMustUseProp;
	var platformGetTagNamespace;

	/**
	 * Convert HTML string to AST.
	 */
	function parse (
	  template,
	  options
	) {
	  warn$2 = options.warn || baseWarn;
	  platformGetTagNamespace = options.getTagNamespace || no;
	  platformMustUseProp = options.mustUseProp || no;
	  platformIsPreTag = options.isPreTag || no;
	  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
	  transforms = pluckModuleFunction(options.modules, 'transformNode');
	  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');
	  delimiters = options.delimiters;

	  var stack = [];
	  var preserveWhitespace = options.preserveWhitespace !== false;
	  var root;
	  var currentParent;
	  var inVPre = false;
	  var inPre = false;
	  var warned = false;

	  function warnOnce (msg) {
	    if (!warned) {
	      warned = true;
	      warn$2(msg);
	    }
	  }

	  function endPre (element) {
	    // check pre state
	    if (element.pre) {
	      inVPre = false;
	    }
	    if (platformIsPreTag(element.tag)) {
	      inPre = false;
	    }
	  }

	  parseHTML(template, {
	    warn: warn$2,
	    expectHTML: options.expectHTML,
	    isUnaryTag: options.isUnaryTag,
	    canBeLeftOpenTag: options.canBeLeftOpenTag,
	    shouldDecodeNewlines: options.shouldDecodeNewlines,
	    start: function start (tag, attrs, unary) {
	      // check namespace.
	      // inherit parent ns if there is one
	      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

	      // handle IE svg bug
	      /* istanbul ignore if */
	      if (isIE && ns === 'svg') {
	        attrs = guardIESVGBug(attrs);
	      }

	      var element = {
	        type: 1,
	        tag: tag,
	        attrsList: attrs,
	        attrsMap: makeAttrsMap(attrs),
	        parent: currentParent,
	        children: []
	      };
	      if (ns) {
	        element.ns = ns;
	      }

	      if (isForbiddenTag(element) && !isServerRendering()) {
	        element.forbidden = true;
	        "development" !== 'production' && warn$2(
	          'Templates should only be responsible for mapping the state to the ' +
	          'UI. Avoid placing tags with side-effects in your templates, such as ' +
	          "<" + tag + ">" + ', as they will not be parsed.'
	        );
	      }

	      // apply pre-transforms
	      for (var i = 0; i < preTransforms.length; i++) {
	        preTransforms[i](element, options);
	      }

	      if (!inVPre) {
	        processPre(element);
	        if (element.pre) {
	          inVPre = true;
	        }
	      }
	      if (platformIsPreTag(element.tag)) {
	        inPre = true;
	      }
	      if (inVPre) {
	        processRawAttrs(element);
	      } else {
	        processFor(element);
	        processIf(element);
	        processOnce(element);
	        processKey(element);

	        // determine whether this is a plain element after
	        // removing structural attributes
	        element.plain = !element.key && !attrs.length;

	        processRef(element);
	        processSlot(element);
	        processComponent(element);
	        for (var i$1 = 0; i$1 < transforms.length; i$1++) {
	          transforms[i$1](element, options);
	        }
	        processAttrs(element);
	      }

	      function checkRootConstraints (el) {
	        {
	          if (el.tag === 'slot' || el.tag === 'template') {
	            warnOnce(
	              "Cannot use <" + (el.tag) + "> as component root element because it may " +
	              'contain multiple nodes.'
	            );
	          }
	          if (el.attrsMap.hasOwnProperty('v-for')) {
	            warnOnce(
	              'Cannot use v-for on stateful component root element because ' +
	              'it renders multiple elements.'
	            );
	          }
	        }
	      }

	      // tree management
	      if (!root) {
	        root = element;
	        checkRootConstraints(root);
	      } else if (!stack.length) {
	        // allow root elements with v-if, v-else-if and v-else
	        if (root.if && (element.elseif || element.else)) {
	          checkRootConstraints(element);
	          addIfCondition(root, {
	            exp: element.elseif,
	            block: element
	          });
	        } else {
	          warnOnce(
	            "Component template should contain exactly one root element. " +
	            "If you are using v-if on multiple elements, " +
	            "use v-else-if to chain them instead."
	          );
	        }
	      }
	      if (currentParent && !element.forbidden) {
	        if (element.elseif || element.else) {
	          processIfConditions(element, currentParent);
	        } else if (element.slotScope) { // scoped slot
	          currentParent.plain = false;
	          var name = element.slotTarget || '"default"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
	        } else {
	          currentParent.children.push(element);
	          element.parent = currentParent;
	        }
	      }
	      if (!unary) {
	        currentParent = element;
	        stack.push(element);
	      } else {
	        endPre(element);
	      }
	      // apply post-transforms
	      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {
	        postTransforms[i$2](element, options);
	      }
	    },

	    end: function end () {
	      // remove trailing whitespace
	      var element = stack[stack.length - 1];
	      var lastNode = element.children[element.children.length - 1];
	      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {
	        element.children.pop();
	      }
	      // pop stack
	      stack.length -= 1;
	      currentParent = stack[stack.length - 1];
	      endPre(element);
	    },

	    chars: function chars (text) {
	      if (!currentParent) {
	        {
	          if (text === template) {
	            warnOnce(
	              'Component template requires a root element, rather than just text.'
	            );
	          } else if ((text = text.trim())) {
	            warnOnce(
	              ("text \"" + text + "\" outside root element will be ignored.")
	            );
	          }
	        }
	        return
	      }
	      // IE textarea placeholder bug
	      /* istanbul ignore if */
	      if (isIE &&
	          currentParent.tag === 'textarea' &&
	          currentParent.attrsMap.placeholder === text) {
	        return
	      }
	      var children = currentParent.children;
	      text = inPre || text.trim()
	        ? decodeHTMLCached(text)
	        // only preserve whitespace if its not right after a starting tag
	        : preserveWhitespace && children.length ? ' ' : '';
	      if (text) {
	        var expression;
	        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {
	          children.push({
	            type: 2,
	            expression: expression,
	            text: text
	          });
	        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
	          children.push({
	            type: 3,
	            text: text
	          });
	        }
	      }
	    }
	  });
	  return root
	}

	function processPre (el) {
	  if (getAndRemoveAttr(el, 'v-pre') != null) {
	    el.pre = true;
	  }
	}

	function processRawAttrs (el) {
	  var l = el.attrsList.length;
	  if (l) {
	    var attrs = el.attrs = new Array(l);
	    for (var i = 0; i < l; i++) {
	      attrs[i] = {
	        name: el.attrsList[i].name,
	        value: JSON.stringify(el.attrsList[i].value)
	      };
	    }
	  } else if (!el.pre) {
	    // non root node in pre blocks with no attributes
	    el.plain = true;
	  }
	}

	function processKey (el) {
	  var exp = getBindingAttr(el, 'key');
	  if (exp) {
	    if ("development" !== 'production' && el.tag === 'template') {
	      warn$2("<template> cannot be keyed. Place the key on real elements instead.");
	    }
	    el.key = exp;
	  }
	}

	function processRef (el) {
	  var ref = getBindingAttr(el, 'ref');
	  if (ref) {
	    el.ref = ref;
	    el.refInFor = checkInFor(el);
	  }
	}

	function processFor (el) {
	  var exp;
	  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
	    var inMatch = exp.match(forAliasRE);
	    if (!inMatch) {
	      "development" !== 'production' && warn$2(
	        ("Invalid v-for expression: " + exp)
	      );
	      return
	    }
	    el.for = inMatch[2].trim();
	    var alias = inMatch[1].trim();
	    var iteratorMatch = alias.match(forIteratorRE);
	    if (iteratorMatch) {
	      el.alias = iteratorMatch[1].trim();
	      el.iterator1 = iteratorMatch[2].trim();
	      if (iteratorMatch[3]) {
	        el.iterator2 = iteratorMatch[3].trim();
	      }
	    } else {
	      el.alias = alias;
	    }
	  }
	}

	function processIf (el) {
	  var exp = getAndRemoveAttr(el, 'v-if');
	  if (exp) {
	    el.if = exp;
	    addIfCondition(el, {
	      exp: exp,
	      block: el
	    });
	  } else {
	    if (getAndRemoveAttr(el, 'v-else') != null) {
	      el.else = true;
	    }
	    var elseif = getAndRemoveAttr(el, 'v-else-if');
	    if (elseif) {
	      el.elseif = elseif;
	    }
	  }
	}

	function processIfConditions (el, parent) {
	  var prev = findPrevElement(parent.children);
	  if (prev && prev.if) {
	    addIfCondition(prev, {
	      exp: el.elseif,
	      block: el
	    });
	  } else {
	    warn$2(
	      "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
	      "used on element <" + (el.tag) + "> without corresponding v-if."
	    );
	  }
	}

	function findPrevElement (children) {
	  var i = children.length;
	  while (i--) {
	    if (children[i].type === 1) {
	      return children[i]
	    } else {
	      if ("development" !== 'production' && children[i].text !== ' ') {
	        warn$2(
	          "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
	          "will be ignored."
	        );
	      }
	      children.pop();
	    }
	  }
	}

	function addIfCondition (el, condition) {
	  if (!el.ifConditions) {
	    el.ifConditions = [];
	  }
	  el.ifConditions.push(condition);
	}

	function processOnce (el) {
	  var once$$1 = getAndRemoveAttr(el, 'v-once');
	  if (once$$1 != null) {
	    el.once = true;
	  }
	}

	function processSlot (el) {
	  if (el.tag === 'slot') {
	    el.slotName = getBindingAttr(el, 'name');
	    if ("development" !== 'production' && el.key) {
	      warn$2(
	        "`key` does not work on <slot> because slots are abstract outlets " +
	        "and can possibly expand into multiple elements. " +
	        "Use the key on a wrapping element instead."
	      );
	    }
	  } else {
	    var slotTarget = getBindingAttr(el, 'slot');
	    if (slotTarget) {
	      el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
	    }
	    if (el.tag === 'template') {
	      el.slotScope = getAndRemoveAttr(el, 'scope');
	    }
	  }
	}

	function processComponent (el) {
	  var binding;
	  if ((binding = getBindingAttr(el, 'is'))) {
	    el.component = binding;
	  }
	  if (getAndRemoveAttr(el, 'inline-template') != null) {
	    el.inlineTemplate = true;
	  }
	}

	function processAttrs (el) {
	  var list = el.attrsList;
	  var i, l, name, rawName, value, modifiers, isProp;
	  for (i = 0, l = list.length; i < l; i++) {
	    name = rawName = list[i].name;
	    value = list[i].value;
	    if (dirRE.test(name)) {
	      // mark element as dynamic
	      el.hasBindings = true;
	      // modifiers
	      modifiers = parseModifiers(name);
	      if (modifiers) {
	        name = name.replace(modifierRE, '');
	      }
	      if (bindRE.test(name)) { // v-bind
	        name = name.replace(bindRE, '');
	        value = parseFilters(value);
	        isProp = false;
	        if (modifiers) {
	          if (modifiers.prop) {
	            isProp = true;
	            name = camelize(name);
	            if (name === 'innerHtml') { name = 'innerHTML'; }
	          }
	          if (modifiers.camel) {
	            name = camelize(name);
	          }
	        }
	        if (isProp || platformMustUseProp(el.tag, el.attrsMap.type, name)) {
	          addProp(el, name, value);
	        } else {
	          addAttr(el, name, value);
	        }
	      } else if (onRE.test(name)) { // v-on
	        name = name.replace(onRE, '');
	        addHandler(el, name, value, modifiers);
	      } else { // normal directives
	        name = name.replace(dirRE, '');
	        // parse arg
	        var argMatch = name.match(argRE);
	        var arg = argMatch && argMatch[1];
	        if (arg) {
	          name = name.slice(0, -(arg.length + 1));
	        }
	        addDirective(el, name, rawName, value, arg, modifiers);
	        if ("development" !== 'production' && name === 'model') {
	          checkForAliasModel(el, value);
	        }
	      }
	    } else {
	      // literal attribute
	      {
	        var expression = parseText(value, delimiters);
	        if (expression) {
	          warn$2(
	            name + "=\"" + value + "\": " +
	            'Interpolation inside attributes has been removed. ' +
	            'Use v-bind or the colon shorthand instead. For example, ' +
	            'instead of <div id="{{ val }}">, use <div :id="val">.'
	          );
	        }
	      }
	      addAttr(el, name, JSON.stringify(value));
	    }
	  }
	}

	function checkInFor (el) {
	  var parent = el;
	  while (parent) {
	    if (parent.for !== undefined) {
	      return true
	    }
	    parent = parent.parent;
	  }
	  return false
	}

	function parseModifiers (name) {
	  var match = name.match(modifierRE);
	  if (match) {
	    var ret = {};
	    match.forEach(function (m) { ret[m.slice(1)] = true; });
	    return ret
	  }
	}

	function makeAttrsMap (attrs) {
	  var map = {};
	  for (var i = 0, l = attrs.length; i < l; i++) {
	    if ("development" !== 'production' && map[attrs[i].name] && !isIE) {
	      warn$2('duplicate attribute: ' + attrs[i].name);
	    }
	    map[attrs[i].name] = attrs[i].value;
	  }
	  return map
	}

	function isForbiddenTag (el) {
	  return (
	    el.tag === 'style' ||
	    (el.tag === 'script' && (
	      !el.attrsMap.type ||
	      el.attrsMap.type === 'text/javascript'
	    ))
	  )
	}

	var ieNSBug = /^xmlns:NS\d+/;
	var ieNSPrefix = /^NS\d+:/;

	/* istanbul ignore next */
	function guardIESVGBug (attrs) {
	  var res = [];
	  for (var i = 0; i < attrs.length; i++) {
	    var attr = attrs[i];
	    if (!ieNSBug.test(attr.name)) {
	      attr.name = attr.name.replace(ieNSPrefix, '');
	      res.push(attr);
	    }
	  }
	  return res
	}

	function checkForAliasModel (el, value) {
	  var _el = el;
	  while (_el) {
	    if (_el.for && _el.alias === value) {
	      warn$2(
	        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
	        "You are binding v-model directly to a v-for iteration alias. " +
	        "This will not be able to modify the v-for source array because " +
	        "writing to the alias is like modifying a function local variable. " +
	        "Consider using an array of objects and use v-model on an object property instead."
	      );
	    }
	    _el = _el.parent;
	  }
	}

	/*  */

	var isStaticKey;
	var isPlatformReservedTag;

	var genStaticKeysCached = cached(genStaticKeys$1);

	/**
	 * Goal of the optimizer: walk the generated template AST tree
	 * and detect sub-trees that are purely static, i.e. parts of
	 * the DOM that never needs to change.
	 *
	 * Once we detect these sub-trees, we can:
	 *
	 * 1. Hoist them into constants, so that we no longer need to
	 *    create fresh nodes for them on each re-render;
	 * 2. Completely skip them in the patching process.
	 */
	function optimize (root, options) {
	  if (!root) { return }
	  isStaticKey = genStaticKeysCached(options.staticKeys || '');
	  isPlatformReservedTag = options.isReservedTag || no;
	  // first pass: mark all non-static nodes.
	  markStatic$1(root);
	  // second pass: mark static roots.
	  markStaticRoots(root, false);
	}

	function genStaticKeys$1 (keys) {
	  return makeMap(
	    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +
	    (keys ? ',' + keys : '')
	  )
	}

	function markStatic$1 (node) {
	  node.static = isStatic(node);
	  if (node.type === 1) {
	    // do not make component slot content static. this avoids
	    // 1. components not able to mutate slot nodes
	    // 2. static slot content fails for hot-reloading
	    if (
	      !isPlatformReservedTag(node.tag) &&
	      node.tag !== 'slot' &&
	      node.attrsMap['inline-template'] == null
	    ) {
	      return
	    }
	    for (var i = 0, l = node.children.length; i < l; i++) {
	      var child = node.children[i];
	      markStatic$1(child);
	      if (!child.static) {
	        node.static = false;
	      }
	    }
	  }
	}

	function markStaticRoots (node, isInFor) {
	  if (node.type === 1) {
	    if (node.static || node.once) {
	      node.staticInFor = isInFor;
	    }
	    // For a node to qualify as a static root, it should have children that
	    // are not just static text. Otherwise the cost of hoisting out will
	    // outweigh the benefits and it's better off to just always render it fresh.
	    if (node.static && node.children.length && !(
	      node.children.length === 1 &&
	      node.children[0].type === 3
	    )) {
	      node.staticRoot = true;
	      return
	    } else {
	      node.staticRoot = false;
	    }
	    if (node.children) {
	      for (var i = 0, l = node.children.length; i < l; i++) {
	        markStaticRoots(node.children[i], isInFor || !!node.for);
	      }
	    }
	    if (node.ifConditions) {
	      walkThroughConditionsBlocks(node.ifConditions, isInFor);
	    }
	  }
	}

	function walkThroughConditionsBlocks (conditionBlocks, isInFor) {
	  for (var i = 1, len = conditionBlocks.length; i < len; i++) {
	    markStaticRoots(conditionBlocks[i].block, isInFor);
	  }
	}

	function isStatic (node) {
	  if (node.type === 2) { // expression
	    return false
	  }
	  if (node.type === 3) { // text
	    return true
	  }
	  return !!(node.pre || (
	    !node.hasBindings && // no dynamic bindings
	    !node.if && !node.for && // not v-if or v-for or v-else
	    !isBuiltInTag(node.tag) && // not a built-in
	    isPlatformReservedTag(node.tag) && // not a component
	    !isDirectChildOfTemplateFor(node) &&
	    Object.keys(node).every(isStaticKey)
	  ))
	}

	function isDirectChildOfTemplateFor (node) {
	  while (node.parent) {
	    node = node.parent;
	    if (node.tag !== 'template') {
	      return false
	    }
	    if (node.for) {
	      return true
	    }
	  }
	  return false
	}

	/*  */

	var fnExpRE = /^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/;
	var simplePathRE = /^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/;

	// keyCode aliases
	var keyCodes = {
	  esc: 27,
	  tab: 9,
	  enter: 13,
	  space: 32,
	  up: 38,
	  left: 37,
	  right: 39,
	  down: 40,
	  'delete': [8, 46]
	};

	// #4868: modifiers that prevent the execution of the listener
	// need to explicitly return null so that we can determine whether to remove
	// the listener for .once
	var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

	var modifierCode = {
	  stop: '$event.stopPropagation();',
	  prevent: '$event.preventDefault();',
	  self: genGuard("$event.target !== $event.currentTarget"),
	  ctrl: genGuard("!$event.ctrlKey"),
	  shift: genGuard("!$event.shiftKey"),
	  alt: genGuard("!$event.altKey"),
	  meta: genGuard("!$event.metaKey"),
	  left: genGuard("'button' in $event && $event.button !== 0"),
	  middle: genGuard("'button' in $event && $event.button !== 1"),
	  right: genGuard("'button' in $event && $event.button !== 2")
	};

	function genHandlers (events, native) {
	  var res = native ? 'nativeOn:{' : 'on:{';
	  for (var name in events) {
	    res += "\"" + name + "\":" + (genHandler(name, events[name])) + ",";
	  }
	  return res.slice(0, -1) + '}'
	}

	function genHandler (
	  name,
	  handler
	) {
	  if (!handler) {
	    return 'function(){}'
	  }

	  if (Array.isArray(handler)) {
	    return ("[" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + "]")
	  }

	  var isMethodPath = simplePathRE.test(handler.value);
	  var isFunctionExpression = fnExpRE.test(handler.value);

	  if (!handler.modifiers) {
	    return isMethodPath || isFunctionExpression
	      ? handler.value
	      : ("function($event){" + (handler.value) + "}") // inline statement
	  } else {
	    var code = '';
	    var genModifierCode = '';
	    var keys = [];
	    for (var key in handler.modifiers) {
	      if (modifierCode[key]) {
	        genModifierCode += modifierCode[key];
	        // left/right
	        if (keyCodes[key]) {
	          keys.push(key);
	        }
	      } else {
	        keys.push(key);
	      }
	    }
	    if (keys.length) {
	      code += genKeyFilter(keys);
	    }
	    // Make sure modifiers like prevent and stop get executed after key filtering
	    if (genModifierCode) {
	      code += genModifierCode;
	    }
	    var handlerCode = isMethodPath
	      ? handler.value + '($event)'
	      : isFunctionExpression
	        ? ("(" + (handler.value) + ")($event)")
	        : handler.value;
	    return ("function($event){" + code + handlerCode + "}")
	  }
	}

	function genKeyFilter (keys) {
	  return ("if(!('button' in $event)&&" + (keys.map(genFilterCode).join('&&')) + ")return null;")
	}

	function genFilterCode (key) {
	  var keyVal = parseInt(key, 10);
	  if (keyVal) {
	    return ("$event.keyCode!==" + keyVal)
	  }
	  var alias = keyCodes[key];
	  return ("_k($event.keyCode," + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + ")")
	}

	/*  */

	function bind$1 (el, dir) {
	  el.wrapData = function (code) {
	    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + ")")
	  };
	}

	/*  */

	var baseDirectives = {
	  bind: bind$1,
	  cloak: noop
	};

	/*  */

	// configurable state
	var warn$3;
	var transforms$1;
	var dataGenFns;
	var platformDirectives$1;
	var isPlatformReservedTag$1;
	var staticRenderFns;
	var onceCount;
	var currentOptions;

	function generate (
	  ast,
	  options
	) {
	  // save previous staticRenderFns so generate calls can be nested
	  var prevStaticRenderFns = staticRenderFns;
	  var currentStaticRenderFns = staticRenderFns = [];
	  var prevOnceCount = onceCount;
	  onceCount = 0;
	  currentOptions = options;
	  warn$3 = options.warn || baseWarn;
	  transforms$1 = pluckModuleFunction(options.modules, 'transformCode');
	  dataGenFns = pluckModuleFunction(options.modules, 'genData');
	  platformDirectives$1 = options.directives || {};
	  isPlatformReservedTag$1 = options.isReservedTag || no;
	  var code = ast ? genElement(ast) : '_c("div")';
	  staticRenderFns = prevStaticRenderFns;
	  onceCount = prevOnceCount;
	  return {
	    render: ("with(this){return " + code + "}"),
	    staticRenderFns: currentStaticRenderFns
	  }
	}

	function genElement (el) {
	  if (el.staticRoot && !el.staticProcessed) {
	    return genStatic(el)
	  } else if (el.once && !el.onceProcessed) {
	    return genOnce(el)
	  } else if (el.for && !el.forProcessed) {
	    return genFor(el)
	  } else if (el.if && !el.ifProcessed) {
	    return genIf(el)
	  } else if (el.tag === 'template' && !el.slotTarget) {
	    return genChildren(el) || 'void 0'
	  } else if (el.tag === 'slot') {
	    return genSlot(el)
	  } else {
	    // component or element
	    var code;
	    if (el.component) {
	      code = genComponent(el.component, el);
	    } else {
	      var data = el.plain ? undefined : genData(el);

	      var children = el.inlineTemplate ? null : genChildren(el, true);
	      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
	    }
	    // module transforms
	    for (var i = 0; i < transforms$1.length; i++) {
	      code = transforms$1[i](el, code);
	    }
	    return code
	  }
	}

	// hoist static sub-trees out
	function genStatic (el) {
	  el.staticProcessed = true;
	  staticRenderFns.push(("with(this){return " + (genElement(el)) + "}"));
	  return ("_m(" + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
	}

	// v-once
	function genOnce (el) {
	  el.onceProcessed = true;
	  if (el.if && !el.ifProcessed) {
	    return genIf(el)
	  } else if (el.staticInFor) {
	    var key = '';
	    var parent = el.parent;
	    while (parent) {
	      if (parent.for) {
	        key = parent.key;
	        break
	      }
	      parent = parent.parent;
	    }
	    if (!key) {
	      "development" !== 'production' && warn$3(
	        "v-once can only be used inside v-for that is keyed. "
	      );
	      return genElement(el)
	    }
	    return ("_o(" + (genElement(el)) + "," + (onceCount++) + (key ? ("," + key) : "") + ")")
	  } else {
	    return genStatic(el)
	  }
	}

	function genIf (el) {
	  el.ifProcessed = true; // avoid recursion
	  return genIfConditions(el.ifConditions.slice())
	}

	function genIfConditions (conditions) {
	  if (!conditions.length) {
	    return '_e()'
	  }

	  var condition = conditions.shift();
	  if (condition.exp) {
	    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions)))
	  } else {
	    return ("" + (genTernaryExp(condition.block)))
	  }

	  // v-if with v-once should generate code like (a)?_m(0):_m(1)
	  function genTernaryExp (el) {
	    return el.once ? genOnce(el) : genElement(el)
	  }
	}

	function genFor (el) {
	  var exp = el.for;
	  var alias = el.alias;
	  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
	  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

	  if (
	    "development" !== 'production' &&
	    maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key
	  ) {
	    warn$3(
	      "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
	      "v-for should have explicit keys. " +
	      "See https://vuejs.org/guide/list.html#key for more info.",
	      true /* tip */
	    );
	  }

	  el.forProcessed = true; // avoid recursion
	  return "_l((" + exp + ")," +
	    "function(" + alias + iterator1 + iterator2 + "){" +
	      "return " + (genElement(el)) +
	    '})'
	}

	function genData (el) {
	  var data = '{';

	  // directives first.
	  // directives may mutate the el's other properties before they are generated.
	  var dirs = genDirectives(el);
	  if (dirs) { data += dirs + ','; }

	  // key
	  if (el.key) {
	    data += "key:" + (el.key) + ",";
	  }
	  // ref
	  if (el.ref) {
	    data += "ref:" + (el.ref) + ",";
	  }
	  if (el.refInFor) {
	    data += "refInFor:true,";
	  }
	  // pre
	  if (el.pre) {
	    data += "pre:true,";
	  }
	  // record original tag name for components using "is" attribute
	  if (el.component) {
	    data += "tag:\"" + (el.tag) + "\",";
	  }
	  // module data generation functions
	  for (var i = 0; i < dataGenFns.length; i++) {
	    data += dataGenFns[i](el);
	  }
	  // attributes
	  if (el.attrs) {
	    data += "attrs:{" + (genProps(el.attrs)) + "},";
	  }
	  // DOM props
	  if (el.props) {
	    data += "domProps:{" + (genProps(el.props)) + "},";
	  }
	  // event handlers
	  if (el.events) {
	    data += (genHandlers(el.events)) + ",";
	  }
	  if (el.nativeEvents) {
	    data += (genHandlers(el.nativeEvents, true)) + ",";
	  }
	  // slot target
	  if (el.slotTarget) {
	    data += "slot:" + (el.slotTarget) + ",";
	  }
	  // scoped slots
	  if (el.scopedSlots) {
	    data += (genScopedSlots(el.scopedSlots)) + ",";
	  }
	  // component v-model
	  if (el.model) {
	    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
	  }
	  // inline-template
	  if (el.inlineTemplate) {
	    var inlineTemplate = genInlineTemplate(el);
	    if (inlineTemplate) {
	      data += inlineTemplate + ",";
	    }
	  }
	  data = data.replace(/,$/, '') + '}';
	  // v-bind data wrap
	  if (el.wrapData) {
	    data = el.wrapData(data);
	  }
	  return data
	}

	function genDirectives (el) {
	  var dirs = el.directives;
	  if (!dirs) { return }
	  var res = 'directives:[';
	  var hasRuntime = false;
	  var i, l, dir, needRuntime;
	  for (i = 0, l = dirs.length; i < l; i++) {
	    dir = dirs[i];
	    needRuntime = true;
	    var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];
	    if (gen) {
	      // compile-time directive that manipulates AST.
	      // returns true if it also needs a runtime counterpart.
	      needRuntime = !!gen(el, dir, warn$3);
	    }
	    if (needRuntime) {
	      hasRuntime = true;
	      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:\"" + (dir.arg) + "\"") : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
	    }
	  }
	  if (hasRuntime) {
	    return res.slice(0, -1) + ']'
	  }
	}

	function genInlineTemplate (el) {
	  var ast = el.children[0];
	  if ("development" !== 'production' && (
	    el.children.length > 1 || ast.type !== 1
	  )) {
	    warn$3('Inline-template components must have exactly one child element.');
	  }
	  if (ast.type === 1) {
	    var inlineRenderFns = generate(ast, currentOptions);
	    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
	  }
	}

	function genScopedSlots (slots) {
	  return ("scopedSlots:_u([" + (Object.keys(slots).map(function (key) { return genScopedSlot(key, slots[key]); }).join(',')) + "])")
	}

	function genScopedSlot (key, el) {
	  return "[" + key + ",function(" + (String(el.attrsMap.scope)) + "){" +
	    "return " + (el.tag === 'template'
	      ? genChildren(el) || 'void 0'
	      : genElement(el)) + "}]"
	}

	function genChildren (el, checkSkip) {
	  var children = el.children;
	  if (children.length) {
	    var el$1 = children[0];
	    // optimize single v-for
	    if (children.length === 1 &&
	        el$1.for &&
	        el$1.tag !== 'template' &&
	        el$1.tag !== 'slot') {
	      return genElement(el$1)
	    }
	    var normalizationType = checkSkip ? getNormalizationType(children) : 0;
	    return ("[" + (children.map(genNode).join(',')) + "]" + (normalizationType ? ("," + normalizationType) : ''))
	  }
	}

	// determine the normalization needed for the children array.
	// 0: no normalization needed
	// 1: simple normalization needed (possible 1-level deep nested array)
	// 2: full normalization needed
	function getNormalizationType (children) {
	  var res = 0;
	  for (var i = 0; i < children.length; i++) {
	    var el = children[i];
	    if (el.type !== 1) {
	      continue
	    }
	    if (needsNormalization(el) ||
	        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
	      res = 2;
	      break
	    }
	    if (maybeComponent(el) ||
	        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
	      res = 1;
	    }
	  }
	  return res
	}

	function needsNormalization (el) {
	  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
	}

	function maybeComponent (el) {
	  return !isPlatformReservedTag$1(el.tag)
	}

	function genNode (node) {
	  if (node.type === 1) {
	    return genElement(node)
	  } else {
	    return genText(node)
	  }
	}

	function genText (text) {
	  return ("_v(" + (text.type === 2
	    ? text.expression // no need for () because already wrapped in _s()
	    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
	}

	function genSlot (el) {
	  var slotName = el.slotName || '"default"';
	  var children = genChildren(el);
	  var res = "_t(" + slotName + (children ? ("," + children) : '');
	  var attrs = el.attrs && ("{" + (el.attrs.map(function (a) { return ((camelize(a.name)) + ":" + (a.value)); }).join(',')) + "}");
	  var bind$$1 = el.attrsMap['v-bind'];
	  if ((attrs || bind$$1) && !children) {
	    res += ",null";
	  }
	  if (attrs) {
	    res += "," + attrs;
	  }
	  if (bind$$1) {
	    res += (attrs ? '' : ',null') + "," + bind$$1;
	  }
	  return res + ')'
	}

	// componentName is el.component, take it as argument to shun flow's pessimistic refinement
	function genComponent (componentName, el) {
	  var children = el.inlineTemplate ? null : genChildren(el, true);
	  return ("_c(" + componentName + "," + (genData(el)) + (children ? ("," + children) : '') + ")")
	}

	function genProps (props) {
	  var res = '';
	  for (var i = 0; i < props.length; i++) {
	    var prop = props[i];
	    res += "\"" + (prop.name) + "\":" + (transformSpecialNewlines(prop.value)) + ",";
	  }
	  return res.slice(0, -1)
	}

	// #3895, #4268
	function transformSpecialNewlines (text) {
	  return text
	    .replace(/\u2028/g, '\\u2028')
	    .replace(/\u2029/g, '\\u2029')
	}

	/*  */

	// these keywords should not appear inside expressions, but operators like
	// typeof, instanceof and in are allowed
	var prohibitedKeywordRE = new RegExp('\\b' + (
	  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
	  'super,throw,while,yield,delete,export,import,return,switch,default,' +
	  'extends,finally,continue,debugger,function,arguments'
	).split(',').join('\\b|\\b') + '\\b');

	// these unary operators should not be used as property/method names
	var unaryOperatorsRE = new RegExp('\\b' + (
	  'delete,typeof,void'
	).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

	// check valid identifier for v-for
	var identRE = /[A-Za-z_$][\w$]*/;

	// strip strings in expressions
	var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

	// detect problematic expressions in a template
	function detectErrors (ast) {
	  var errors = [];
	  if (ast) {
	    checkNode(ast, errors);
	  }
	  return errors
	}

	function checkNode (node, errors) {
	  if (node.type === 1) {
	    for (var name in node.attrsMap) {
	      if (dirRE.test(name)) {
	        var value = node.attrsMap[name];
	        if (value) {
	          if (name === 'v-for') {
	            checkFor(node, ("v-for=\"" + value + "\""), errors);
	          } else if (onRE.test(name)) {
	            checkEvent(value, (name + "=\"" + value + "\""), errors);
	          } else {
	            checkExpression(value, (name + "=\"" + value + "\""), errors);
	          }
	        }
	      }
	    }
	    if (node.children) {
	      for (var i = 0; i < node.children.length; i++) {
	        checkNode(node.children[i], errors);
	      }
	    }
	  } else if (node.type === 2) {
	    checkExpression(node.expression, node.text, errors);
	  }
	}

	function checkEvent (exp, text, errors) {
	  var keywordMatch = exp.replace(stripStringRE, '').match(unaryOperatorsRE);
	  if (keywordMatch) {
	    errors.push(
	      "avoid using JavaScript unary operator as property name: " +
	      "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim())
	    );
	  }
	  checkExpression(exp, text, errors);
	}

	function checkFor (node, text, errors) {
	  checkExpression(node.for || '', text, errors);
	  checkIdentifier(node.alias, 'v-for alias', text, errors);
	  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);
	  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);
	}

	function checkIdentifier (ident, type, text, errors) {
	  if (typeof ident === 'string' && !identRE.test(ident)) {
	    errors.push(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())));
	  }
	}

	function checkExpression (exp, text, errors) {
	  try {
	    new Function(("return " + exp));
	  } catch (e) {
	    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
	    if (keywordMatch) {
	      errors.push(
	        "avoid using JavaScript keyword as property name: " +
	        "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim())
	      );
	    } else {
	      errors.push(("invalid expression: " + (text.trim())));
	    }
	  }
	}

	/*  */

	function baseCompile (
	  template,
	  options
	) {
	  var ast = parse(template.trim(), options);
	  optimize(ast, options);
	  var code = generate(ast, options);
	  return {
	    ast: ast,
	    render: code.render,
	    staticRenderFns: code.staticRenderFns
	  }
	}

	function makeFunction (code, errors) {
	  try {
	    return new Function(code)
	  } catch (err) {
	    errors.push({ err: err, code: code });
	    return noop
	  }
	}

	function createCompiler (baseOptions) {
	  var functionCompileCache = Object.create(null);

	  function compile (
	    template,
	    options
	  ) {
	    var finalOptions = Object.create(baseOptions);
	    var errors = [];
	    var tips = [];
	    finalOptions.warn = function (msg, tip$$1) {
	      (tip$$1 ? tips : errors).push(msg);
	    };

	    if (options) {
	      // merge custom modules
	      if (options.modules) {
	        finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
	      }
	      // merge custom directives
	      if (options.directives) {
	        finalOptions.directives = extend(
	          Object.create(baseOptions.directives),
	          options.directives
	        );
	      }
	      // copy other options
	      for (var key in options) {
	        if (key !== 'modules' && key !== 'directives') {
	          finalOptions[key] = options[key];
	        }
	      }
	    }

	    var compiled = baseCompile(template, finalOptions);
	    {
	      errors.push.apply(errors, detectErrors(compiled.ast));
	    }
	    compiled.errors = errors;
	    compiled.tips = tips;
	    return compiled
	  }

	  function compileToFunctions (
	    template,
	    options,
	    vm
	  ) {
	    options = options || {};

	    /* istanbul ignore if */
	    {
	      // detect possible CSP restriction
	      try {
	        new Function('return 1');
	      } catch (e) {
	        if (e.toString().match(/unsafe-eval|CSP/)) {
	          warn(
	            'It seems you are using the standalone build of Vue.js in an ' +
	            'environment with Content Security Policy that prohibits unsafe-eval. ' +
	            'The template compiler cannot work in this environment. Consider ' +
	            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
	            'templates into render functions.'
	          );
	        }
	      }
	    }

	    // check cache
	    var key = options.delimiters
	      ? String(options.delimiters) + template
	      : template;
	    if (functionCompileCache[key]) {
	      return functionCompileCache[key]
	    }

	    // compile
	    var compiled = compile(template, options);

	    // check compilation errors/tips
	    {
	      if (compiled.errors && compiled.errors.length) {
	        warn(
	          "Error compiling template:\n\n" + template + "\n\n" +
	          compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',
	          vm
	        );
	      }
	      if (compiled.tips && compiled.tips.length) {
	        compiled.tips.forEach(function (msg) { return tip(msg, vm); });
	      }
	    }

	    // turn code into functions
	    var res = {};
	    var fnGenErrors = [];
	    res.render = makeFunction(compiled.render, fnGenErrors);
	    var l = compiled.staticRenderFns.length;
	    res.staticRenderFns = new Array(l);
	    for (var i = 0; i < l; i++) {
	      res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i], fnGenErrors);
	    }

	    // check function generation errors.
	    // this should only happen if there is a bug in the compiler itself.
	    // mostly for codegen development use
	    /* istanbul ignore if */
	    {
	      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
	        warn(
	          "Failed to generate render function:\n\n" +
	          fnGenErrors.map(function (ref) {
	            var err = ref.err;
	            var code = ref.code;

	            return ((err.toString()) + " in\n\n" + code + "\n");
	        }).join('\n'),
	          vm
	        );
	      }
	    }

	    return (functionCompileCache[key] = res)
	  }

	  return {
	    compile: compile,
	    compileToFunctions: compileToFunctions
	  }
	}

	/*  */

	function transformNode (el, options) {
	  var warn = options.warn || baseWarn;
	  var staticClass = getAndRemoveAttr(el, 'class');
	  if ("development" !== 'production' && staticClass) {
	    var expression = parseText(staticClass, options.delimiters);
	    if (expression) {
	      warn(
	        "class=\"" + staticClass + "\": " +
	        'Interpolation inside attributes has been removed. ' +
	        'Use v-bind or the colon shorthand instead. For example, ' +
	        'instead of <div class="{{ val }}">, use <div :class="val">.'
	      );
	    }
	  }
	  if (staticClass) {
	    el.staticClass = JSON.stringify(staticClass);
	  }
	  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
	  if (classBinding) {
	    el.classBinding = classBinding;
	  }
	}

	function genData$1 (el) {
	  var data = '';
	  if (el.staticClass) {
	    data += "staticClass:" + (el.staticClass) + ",";
	  }
	  if (el.classBinding) {
	    data += "class:" + (el.classBinding) + ",";
	  }
	  return data
	}

	var klass$1 = {
	  staticKeys: ['staticClass'],
	  transformNode: transformNode,
	  genData: genData$1
	};

	/*  */

	function transformNode$1 (el, options) {
	  var warn = options.warn || baseWarn;
	  var staticStyle = getAndRemoveAttr(el, 'style');
	  if (staticStyle) {
	    /* istanbul ignore if */
	    {
	      var expression = parseText(staticStyle, options.delimiters);
	      if (expression) {
	        warn(
	          "style=\"" + staticStyle + "\": " +
	          'Interpolation inside attributes has been removed. ' +
	          'Use v-bind or the colon shorthand instead. For example, ' +
	          'instead of <div style="{{ val }}">, use <div :style="val">.'
	        );
	      }
	    }
	    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
	  }

	  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
	  if (styleBinding) {
	    el.styleBinding = styleBinding;
	  }
	}

	function genData$2 (el) {
	  var data = '';
	  if (el.staticStyle) {
	    data += "staticStyle:" + (el.staticStyle) + ",";
	  }
	  if (el.styleBinding) {
	    data += "style:(" + (el.styleBinding) + "),";
	  }
	  return data
	}

	var style$1 = {
	  staticKeys: ['staticStyle'],
	  transformNode: transformNode$1,
	  genData: genData$2
	};

	var modules$1 = [
	  klass$1,
	  style$1
	];

	/*  */

	function text (el, dir) {
	  if (dir.value) {
	    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"));
	  }
	}

	/*  */

	function html (el, dir) {
	  if (dir.value) {
	    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"));
	  }
	}

	var directives$1 = {
	  model: model,
	  text: text,
	  html: html
	};

	/*  */

	var baseOptions = {
	  expectHTML: true,
	  modules: modules$1,
	  directives: directives$1,
	  isPreTag: isPreTag,
	  isUnaryTag: isUnaryTag,
	  mustUseProp: mustUseProp,
	  canBeLeftOpenTag: canBeLeftOpenTag,
	  isReservedTag: isReservedTag,
	  getTagNamespace: getTagNamespace,
	  staticKeys: genStaticKeys(modules$1)
	};

	var ref$1 = createCompiler(baseOptions);
	var compileToFunctions = ref$1.compileToFunctions;

	/*  */

	var idToTemplate = cached(function (id) {
	  var el = query(id);
	  return el && el.innerHTML
	});

	var mount = Vue$3.prototype.$mount;
	Vue$3.prototype.$mount = function (
	  el,
	  hydrating
	) {
	  el = el && query(el);

	  /* istanbul ignore if */
	  if (el === document.body || el === document.documentElement) {
	    "development" !== 'production' && warn(
	      "Do not mount Vue to <html> or <body> - mount to normal elements instead."
	    );
	    return this
	  }

	  var options = this.$options;
	  // resolve template/el and convert to render function
	  if (!options.render) {
	    var template = options.template;
	    if (template) {
	      if (typeof template === 'string') {
	        if (template.charAt(0) === '#') {
	          template = idToTemplate(template);
	          /* istanbul ignore if */
	          if ("development" !== 'production' && !template) {
	            warn(
	              ("Template element not found or is empty: " + (options.template)),
	              this
	            );
	          }
	        }
	      } else if (template.nodeType) {
	        template = template.innerHTML;
	      } else {
	        {
	          warn('invalid template option:' + template, this);
	        }
	        return this
	      }
	    } else if (el) {
	      template = getOuterHTML(el);
	    }
	    if (template) {
	      /* istanbul ignore if */
	      if ("development" !== 'production' && config.performance && mark) {
	        mark('compile');
	      }

	      var ref = compileToFunctions(template, {
	        shouldDecodeNewlines: shouldDecodeNewlines,
	        delimiters: options.delimiters
	      }, this);
	      var render = ref.render;
	      var staticRenderFns = ref.staticRenderFns;
	      options.render = render;
	      options.staticRenderFns = staticRenderFns;

	      /* istanbul ignore if */
	      if ("development" !== 'production' && config.performance && mark) {
	        mark('compile end');
	        measure(((this._name) + " compile"), 'compile', 'compile end');
	      }
	    }
	  }
	  return mount.call(this, el, hydrating)
	};

	/**
	 * Get outerHTML of elements, taking care
	 * of SVG elements in IE as well.
	 */
	function getOuterHTML (el) {
	  if (el.outerHTML) {
	    return el.outerHTML
	  } else {
	    var container = document.createElement('div');
	    container.appendChild(el.cloneNode(true));
	    return container.innerHTML
	  }
	}

	Vue$3.compile = compileToFunctions;

	return Vue$3;

	})));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Store2 = __webpack_require__(249);

	var _Store3 = _interopRequireDefault(_Store2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SimpleStore = function (_Store) {
	  _inherits(SimpleStore, _Store);

	  function SimpleStore(name, state) {
	    _classCallCheck(this, SimpleStore);

	    var _this = _possibleConstructorReturn(this, (SimpleStore.__proto__ || Object.getPrototypeOf(SimpleStore)).call(this, name, state));

	    _this.views = new Map();
	    _this.handlers = new Map();
	    return _this;
	  }

	  _createClass(SimpleStore, [{
	    key: 'dispatch',
	    value: function dispatch(action) {
	      var _this2 = this;

	      var actionType = action.actionType;

	      if (!this.handlers.has(actionType)) {
	        return;
	      }

	      var handlers = this.handlers.get(actionType);

	      handlers.forEach(function (handler) {
	        handler.call(_this2, action);
	      });

	      var views = this.views.values();
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = views[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var view = _step.value;

	          view.update(this.state);
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      ;
	    }
	  }, {
	    key: 'handleAction',
	    value: function handleAction(actionType, handler) {
	      var _this3 = this;

	      if (!this.handlers.has(actionType)) this.handlers.set(actionType, []);

	      this.handlers.get(actionType).push(handler);

	      var views = this.views.values();
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = views[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var view = _step2.value;

	          view.addActionHandler(actionType, function (msg) {
	            _this3.dispatch(msg);
	          });
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }
	    }
	  }, {
	    key: 'reduce',
	    value: function reduce(actionType, reducer) {
	      var _this4 = this;

	      this.handleAction(actionType, function (action) {
	        _this4.state = reducer(_this4.state, action);
	      });
	    }
	  }, {
	    key: 'registerView',
	    value: function registerView(name, view) {
	      this.views.set(name, view);
	    }
	  }]);

	  return SimpleStore;
	}(_Store3.default);

	exports.default = SimpleStore;

/***/ },
/* 249 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Store = function () {
	  function Store(name, state) {
	    _classCallCheck(this, Store);

	    this.name = name;
	    this.state = state;
	  }

	  /* dispatch an action to the store */


	  _createClass(Store, [{
	    key: "dispatch",
	    value: function dispatch(action) {}

	    /* register an action handler */

	  }, {
	    key: "handleAction",
	    value: function handleAction(actionType, handler) {}

	    /* register a view with a name */

	  }, {
	    key: "registerView",
	    value: function registerView(name, view) {}
	  }]);

	  return Store;
	}();

	exports.default = Store;

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Store2 = __webpack_require__(249);

	var _Store3 = _interopRequireDefault(_Store2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var collar = __webpack_require__(6);

	var CollarStore = function (_Store) {
	  _inherits(CollarStore, _Store);

	  function CollarStore(name, state) {
	    _classCallCheck(this, CollarStore);

	    var _this = _possibleConstructorReturn(this, (CollarStore.__proto__ || Object.getPrototypeOf(CollarStore)).call(this, name, state));

	    _this.ns = collar.ns(name, {
	      component: '' + name,
	      arch: 'store.' + name
	    });

	    _this.input = _this.ns.input(name + ' store input');
	    _this.output = _this.ns.output(name + ' store output');
	    return _this;
	  }

	  _createClass(CollarStore, [{
	    key: 'dispatch',
	    value: function dispatch(action) {
	      this.input.push(action);
	    }
	  }, {
	    key: 'handleAction',
	    value: function handleAction(actionType, handler) {
	      var _this2 = this;

	      this.input.when('' + actionType, function (s) {
	        return s.get('actionType') === actionType;
	      }).do('handle ' + actionType, function (s) {
	        handler.call(_this2, s.payload);
	      }).map('prepare new state', function (s) {
	        return s.new({
	          msgType: 'UPDATE',
	          state: _this2.state
	        });
	      }).to(this.output);
	    }
	  }, {
	    key: 'reduce',
	    value: function reduce(actionType, reducer) {
	      var _this3 = this;

	      this.input.when('' + actionType, function (s) {
	        return s.get('actionType') === actionType;
	      }).do('handle ' + actionType, function (s) {
	        console.log(_this3.state);
	        _this3.state = reducer(_this3.state, s.payload);
	        console.log(_this3.state);
	      }).map('prepare new state', function (s) {
	        return s.new({
	          msgType: 'UPDATE',
	          state: _this3.state
	        });
	      }).to(this.output);
	    }
	  }, {
	    key: 'registerView',
	    value: function registerView(name, view) {
	      view.sensor.to(this.input);
	      this.output.to(view.input);
	    }
	  }]);

	  return CollarStore;
	}(_Store3.default);

	exports.default = CollarStore;

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(252);



/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	!function(e,t){if(true)module.exports=t(__webpack_require__(253));else if("function"==typeof define&&define.amd)define(["node-uuid"],t);else{var n=t("object"==typeof exports?require("node-uuid"):e["node-uuid"]);for(var o in n)("object"==typeof exports?exports:e)[o]=n[o]}}(this,function(__WEBPACK_EXTERNAL_MODULE_4__){return function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return e[o].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";e.exports=n(1)},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function s(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],n=t.style||{shape:"circle"},o=t.classes||[],r=t.label||e._comment||e.type||e.constructor.name,i=t.data||{};e.hasFeature("todo")?o.push("todo"):o.push("impl");var s=(new Error).stack.split("\n");s.shift();for(var a=!0;a&&s.length>0;){a=!1;for(var c=0;c<b.length;c++)if(s[0].indexOf(b[c])>=0){s.shift(),a=!0;break}}for(var u=!0;u&&s.length>0;){u=!1;for(var l=0;l<m.length;l++)if(s[s.length-1].indexOf(m[l])>=0){s.pop(),u=!0;break}}for(var f=0;f<s.length;f++)s[f]=s[f].replace(" at "," "),s[f].length>60&&(s[f]="... "+s[f].slice(-57));var d={group:"nodes",data:{id:e.id,model:e.type||e.constructor.name,fullName:e.fullName,label:r,inputs:e.inputs,outputs:e.outputs,stack:s,meta:e.meta,tags:e.tags},style:n,classes:o.join(" ")};for(var p in i)d.data[p]=i[p];if(e._type&&0===e._type.indexOf("transport")&&"function"==typeof e.getTransportId){var h=e.getTransportId();if(!h)return d;d.data.transport=h}return d}function a(e,t){t.push(s(e))}function c(e,t,n){if("to"===t&&(a(e,h),a(n,h),v.hasOwnProperty(e.id)||(v[e.id]=e),v.hasOwnProperty(n.id)||(v[n.id]=n),h.push({group:"edges",data:{id:d.v1(),source:e.id,target:n.id}}),"delegator"===e._type)){var o=e._inputDelegation,r=e._outputDelegation;v.hasOwnProperty(o.id)||(v[o.id]=o,a(o,h)),v.hasOwnProperty(r.id)||(v[r.id]=r,a(r,h)),h.push({group:"edges",data:{id:d.v1(),source:e.id,target:o.id,type:"delegation",direction:"request"}}),h.push({group:"edges",data:{id:d.v1(),source:r.id,target:e.id,type:"delegation",direction:"response"}})}}function u(e,t,o){if(JSON.decycle||n(2)(),"onReceive"===t||"send"===t){var r=null;if(o.error){r={};for(var i in o.error)o.error.hasOwnProperty(i)&&(r[i]=o.error[i]);r.name=o.error.name,r.message=o.error.message,r.stack=o.error.stack.split("\n")}var s=(new Date).getTime();if(y.push({when:t,time:s,nodeId:e.id,seq:o.seq,payload:JSON.decycle(o.payload,!0),error:r,end:o.end}),"onReceive"==t&&"delegator"===e._type){var a=(new Date).getTime();y.push({when:"send",time:a,nodeId:e.id,seq:o.seq,payload:JSON.decycle(o.payload,!0),error:r,end:o.end})}}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();n(2)();var f=n(3),d=n(4),p=n(5),h=[],y=[],v={},b=["invokeObservers","observers.js","node_modules","collar.js","collar.min","collar-dev-client.min"],m=["Module._compile","Object.Module._extensions","Module.load","tryModuleLoad","Function.Module._load","Module.runMain","run (node.js","startup (node.js","node.js:"],g=function(e){function t(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];o(this,t);var n=r(this,Object.getPrototypeOf(t).call(this,e));return n.running=!1,n.options.topology!==!1&&n.addObserver("staticTopologyObserver",c),n.options.signalflow!==!1&&n.addObserver("signalFlowObserver",u),n.clientId=n.options.clientId||"collar-dev-client"+(new Date).getTime(),n.clientSecret=n.options.clientSecret||"",n}return i(t,e),l(t,[{key:"run",value:function(){var e=this;if(!this.running){this.running=!0;var t=this.options.url||"ws://localhost:7500";"/"===t.charAt(t.length-1)&&(t=t.slice(0,-1));var n=(this.options.interval||1e3,this.options.framesize||10),o=new p(t+"/app",this.clientId,this.clientSecret);o.on("unauthorized",function(){console.error("Unauthorized socket io connection:")}),o.on("authorized",function(t){function o(e,n){t.emit(e,n)}console.log("connected to dev server"),o("new model",{process:e.options.process});var r=setInterval(function(){var t=[],r=[];h.length>=n?(t=h.splice(0,n),t.forEach(function(t){t.data.process=e.options.process||"__anonymous__"})):(h.forEach(function(n){n.data.process=e.options.process||"__anonymous__",t.push(n)}),h=[]),y.length>n?r=y.splice(0,n):(y.forEach(function(e){r.push(e)}),y=[]),t.length>0&&o("append elements",{elements:t}),r.length>0&&o("append signals",{signals:r})},r);t.on("push",function(e){var t=e.nodeId;v.hasOwnProperty(t)?v[t].push(e.signal.payload):console.error("[DEV] Failed to push signal to node, node id does not exist:",t)}),t.on("send",function(e){var t=e.nodeId;v.hasOwnProperty(t)?v[t].send(e.signal.payload):console.error("[DEV] Failed to emit signal from node, node id does not exist:",t)})}),o.connect()}}}]),t}(f);e.exports=g},function(module,exports){"use strict";function decycle(){"function"!=typeof JSON.decycle&&!function(){function e(e){var t="";switch(e.nodeType){case e.ELEMENT_NODE:t=e.nodeName.toLowerCase(),e.id.length?t+="#"+e.id:(e.className.length&&(t+="."+e.className.replace(/ /,".")),"textContent"in e&&(t+="{textContent:"+(e.textContent.length<20?e.textContent:e.textContent.substr(0,20)+"...")+"}"));break;default:t=e.nodeName,null!==e.nodeValue&&(t+="{value:"+(e.nodeValue.length<20?e.nodeValue:e.nodeValue.substr(0,20)+"...")+"}")}return t}JSON.decycle=function(t,n){var o=[],n="undefined"!=typeof n&&n,r=[];return function i(t,s){var a,c,u;if(n&&"object"===("undefined"==typeof t?"undefined":_typeof(t))&&null!==t&&"nodeType"in t)return e(t);if(!("object"!==("undefined"==typeof t?"undefined":_typeof(t))||null===t||t instanceof Boolean||t instanceof Date||t instanceof Number||t instanceof RegExp||t instanceof String)){for(a=0;a<o.length;a+=1)if(o[a]===t)return{$ref:r[a]};if(o.push(t),r.push(s),"[object Array]"===Object.prototype.toString.apply(t))for(u=[],a=0;a<t.length;a+=1)u[a]=i(t[a],s+"["+a+"]");else{u={};for(c in t)Object.prototype.hasOwnProperty.call(t,c)&&(u[c]=i(t[c],s+"["+JSON.stringify(c)+"]"))}return u}return t}(t,"$")}}(),"function"!=typeof JSON.retrocycle&&(JSON.retrocycle=function retrocycle($){var px=/^\$(?:\[(?:\d+|\"(?:[^\\\"\u0000-\u001f]|\\([\\\"\/bfnrt]|u[0-9a-zA-Z]{4}))*\")\])*$/;return function rez(value){var i,item,name,path;if(value&&"object"===("undefined"==typeof value?"undefined":_typeof(value)))if("[object Array]"===Object.prototype.toString.apply(value))for(i=0;i<value.length;i+=1)item=value[i],item&&"object"===("undefined"==typeof item?"undefined":_typeof(item))&&(path=item.$ref,"string"==typeof path&&px.test(path)?value[i]=eval(path):rez(item));else for(name in value)"object"===_typeof(value[name])&&(item=value[name],item&&(path=item.$ref,"string"==typeof path&&px.test(path)?value[name]=eval(path):rez(item)))}($),$})}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};module.exports=decycle},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=function(){function e(t){n(this,e),this.options=t,this._observers={}}return o(e,[{key:"addObserver",value:function(e,t){return this._observers[e]=t,this}},{key:"addObservers",value:function(e){for(var t in e)e.hasOwnProperty(t)&&this.addObserver(t,e[t])}},{key:"observers",value:function(){return this._observers}},{key:"run",value:function(){}}]),e}();e.exports=r},function(e,t){e.exports=__webpack_require__(253)},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),s=n(6),a=WebSocket,c=function(){function e(t,n,i,s,a){if(o(this,e),"string"==typeof t)this.url=t,this.clientId=n,this.clientSecret=i,this.retryTimeout=s||5e3,this.maxRetry=a||1/0;else if("object"===("undefined"==typeof t?"undefined":r(t))){var c=t;this.url=c.url,this.clientId=c.clientId,this.clientSecret=c.clientSecret,this.retryTimeout=c.retryTimeout||5e3,this.maxRetry=c.maxRetry||1/0}this.clientInfo=null,this.retry=0,this.enableRetry=!0,this.client=null,this.listeners=new Map,this.socket=null,this.authCb=null,this.unauthCb=null,this.retryCb=null,this.connected=!1}return i(e,[{key:"connect",value:function(){var e=this;this.client=null,this.clientInfo=null,this.client=new a(this.url),this.client.addEventListener("error",function(t){e.connected=!1,!e.enableRetry||e.retry>=e.maxRetry||(e.retryCb&&e.retryCb(),setTimeout(function(){e.doConnect()},e.retryTimeout))}),this.client.addEventListener("open",function(){e.connected=!0,e.socket?e.socket.reset(e.clientId,e.client):e.socket=new s(e.clientId,e.client),e.socket.on("authorized",function(t){e.authCb&&e.authCb(e.socket),e.clientInfo=t}),e.socket.on("unauthorized",function(){e.connected=!1,e.unauthCb&&e.unauthCb()}),e.socket.on("close",function(){e.connected=!1,!e.enableRetry||e.retry>=e.maxRetry||setTimeout(function(){e.retryCb&&e.retryCb(),e.doConnect()},e.retryTimeout)}),e.emit("authentication",{clientId:e.clientId,clientSecret:e.clientSecret})})}},{key:"doConnect",value:function(){this.connected||this.connect()}},{key:"on",value:function(e,t){"authorized"===e&&(this.authCb=t),"unauthorized"===e&&(this.unauthCb=t),"retry"===e&&(this.retryCb=t)}},{key:"emit",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];this.connected?this.socket.emit(e,t):console.warn("Can't send message, socket disconnected.",e,t)}},{key:"toggleRetry",value:function(e){this.enableRetry=e}}]),e}();e.exports=c},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i={MSG_TYPE:"type",CLIENT_ID:"id",DATA:"data"},s=function(){function e(t,o){n(this,e),this.reset(t,o)}return r(e,[{key:"setClientId",value:function(e){this.clientId=e}},{key:"reset",value:function(e,t){var n=this;this.clientId=e,this.conn=t,this.closeHandler=null,this.connected=!0,this.listeners=new Map,this.conn.addEventListener("message",function(e){n.handle(e.data)}),this.conn.addEventListener("close",function(e){n.connected=!1,n.closeHandler&&n.closeHandler()})}},{key:"setClientInfo",value:function(e){this.clientInfo=e}},{key:"on",value:function(e,t){return"close"===e?void(this.closeHandler=t):(this.listeners.has(e)||this.listeners.set(e,[]),void this.listeners.get(e).push(t))}},{key:"handle",value:function(e){var t=this;try{var n=function(){var n=JSON.parse(e),o=n[i.MSG_TYPE],r=n[i.DATA],s=t.listeners.get(o);return s?void s.forEach(function(e){e(r)}):{v:void 0}}();if("object"===("undefined"==typeof n?"undefined":o(n)))return n.v}catch(r){return void console.error(r)}}},{key:"emit",value:function(e,t){if(this.connected){var n={};n[i.MSG_TYPE]=e,n[i.CLIENT_ID]=this.clientId,n[i.DATA]=t,this.conn.send(JSON.stringify(n))}}},{key:"close",value:function(){this.conn.close()}}]),e}();e.exports=s}])});

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Buffer) {//     uuid.js
	//
	//     Copyright (c) 2010-2012 Robert Kieffer
	//     MIT License - http://opensource.org/licenses/mit-license.php

	/*global window, require, define */
	(function(_window) {
	  'use strict';

	  // Unique ID creation requires a high quality random # generator.  We feature
	  // detect to determine the best RNG source, normalizing to a function that
	  // returns 128-bits of randomness, since that's what's usually required
	  var _rng, _mathRNG, _nodeRNG, _whatwgRNG, _previousRoot;

	  function setupBrowser() {
	    // Allow for MSIE11 msCrypto
	    var _crypto = _window.crypto || _window.msCrypto;

	    if (!_rng && _crypto && _crypto.getRandomValues) {
	      // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
	      //
	      // Moderately fast, high quality
	      try {
	        var _rnds8 = new Uint8Array(16);
	        _whatwgRNG = _rng = function whatwgRNG() {
	          _crypto.getRandomValues(_rnds8);
	          return _rnds8;
	        };
	        _rng();
	      } catch(e) {}
	    }

	    if (!_rng) {
	      // Math.random()-based (RNG)
	      //
	      // If all else fails, use Math.random().  It's fast, but is of unspecified
	      // quality.
	      var  _rnds = new Array(16);
	      _mathRNG = _rng = function() {
	        for (var i = 0, r; i < 16; i++) {
	          if ((i & 0x03) === 0) { r = Math.random() * 0x100000000; }
	          _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	        }

	        return _rnds;
	      };
	      if ('undefined' !== typeof console && console.warn) {
	        console.warn("[SECURITY] node-uuid: crypto not usable, falling back to insecure Math.random()");
	      }
	    }
	  }

	  function setupNode() {
	    // Node.js crypto-based RNG - http://nodejs.org/docs/v0.6.2/api/crypto.html
	    //
	    // Moderately fast, high quality
	    if (true) {
	      try {
	        var _rb = __webpack_require__(258).randomBytes;
	        _nodeRNG = _rng = _rb && function() {return _rb(16);};
	        _rng();
	      } catch(e) {}
	    }
	  }

	  if (_window) {
	    setupBrowser();
	  } else {
	    setupNode();
	  }

	  // Buffer class to use
	  var BufferClass = ('function' === typeof Buffer) ? Buffer : Array;

	  // Maps for number <-> hex string conversion
	  var _byteToHex = [];
	  var _hexToByte = {};
	  for (var i = 0; i < 256; i++) {
	    _byteToHex[i] = (i + 0x100).toString(16).substr(1);
	    _hexToByte[_byteToHex[i]] = i;
	  }

	  // **`parse()` - Parse a UUID into it's component bytes**
	  function parse(s, buf, offset) {
	    var i = (buf && offset) || 0, ii = 0;

	    buf = buf || [];
	    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
	      if (ii < 16) { // Don't overflow!
	        buf[i + ii++] = _hexToByte[oct];
	      }
	    });

	    // Zero out remaining bytes if string was short
	    while (ii < 16) {
	      buf[i + ii++] = 0;
	    }

	    return buf;
	  }

	  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
	  function unparse(buf, offset) {
	    var i = offset || 0, bth = _byteToHex;
	    return  bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]];
	  }

	  // **`v1()` - Generate time-based UUID**
	  //
	  // Inspired by https://github.com/LiosK/UUID.js
	  // and http://docs.python.org/library/uuid.html

	  // random #'s we need to init node and clockseq
	  var _seedBytes = _rng();

	  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	  var _nodeId = [
	    _seedBytes[0] | 0x01,
	    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
	  ];

	  // Per 4.2.2, randomize (14 bit) clockseq
	  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

	  // Previous uuid creation time
	  var _lastMSecs = 0, _lastNSecs = 0;

	  // See https://github.com/broofa/node-uuid for API details
	  function v1(options, buf, offset) {
	    var i = buf && offset || 0;
	    var b = buf || [];

	    options = options || {};

	    var clockseq = (options.clockseq != null) ? options.clockseq : _clockseq;

	    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	    var msecs = (options.msecs != null) ? options.msecs : new Date().getTime();

	    // Per 4.2.1.2, use count of uuid's generated during the current clock
	    // cycle to simulate higher resolution clock
	    var nsecs = (options.nsecs != null) ? options.nsecs : _lastNSecs + 1;

	    // Time since last uuid creation (in msecs)
	    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

	    // Per 4.2.1.2, Bump clockseq on clock regression
	    if (dt < 0 && options.clockseq == null) {
	      clockseq = clockseq + 1 & 0x3fff;
	    }

	    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	    // time interval
	    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {
	      nsecs = 0;
	    }

	    // Per 4.2.1.2 Throw error if too many uuids are requested
	    if (nsecs >= 10000) {
	      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	    }

	    _lastMSecs = msecs;
	    _lastNSecs = nsecs;
	    _clockseq = clockseq;

	    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	    msecs += 12219292800000;

	    // `time_low`
	    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	    b[i++] = tl >>> 24 & 0xff;
	    b[i++] = tl >>> 16 & 0xff;
	    b[i++] = tl >>> 8 & 0xff;
	    b[i++] = tl & 0xff;

	    // `time_mid`
	    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
	    b[i++] = tmh >>> 8 & 0xff;
	    b[i++] = tmh & 0xff;

	    // `time_high_and_version`
	    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	    b[i++] = tmh >>> 16 & 0xff;

	    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	    b[i++] = clockseq >>> 8 | 0x80;

	    // `clock_seq_low`
	    b[i++] = clockseq & 0xff;

	    // `node`
	    var node = options.node || _nodeId;
	    for (var n = 0; n < 6; n++) {
	      b[i + n] = node[n];
	    }

	    return buf ? buf : unparse(b);
	  }

	  // **`v4()` - Generate random UUID**

	  // See https://github.com/broofa/node-uuid for API details
	  function v4(options, buf, offset) {
	    // Deprecated - 'format' argument, as supported in v1.2
	    var i = buf && offset || 0;

	    if (typeof(options) === 'string') {
	      buf = (options === 'binary') ? new BufferClass(16) : null;
	      options = null;
	    }
	    options = options || {};

	    var rnds = options.random || (options.rng || _rng)();

	    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	    rnds[6] = (rnds[6] & 0x0f) | 0x40;
	    rnds[8] = (rnds[8] & 0x3f) | 0x80;

	    // Copy bytes to buffer, if provided
	    if (buf) {
	      for (var ii = 0; ii < 16; ii++) {
	        buf[i + ii] = rnds[ii];
	      }
	    }

	    return buf || unparse(rnds);
	  }

	  // Export public API
	  var uuid = v4;
	  uuid.v1 = v1;
	  uuid.v4 = v4;
	  uuid.parse = parse;
	  uuid.unparse = unparse;
	  uuid.BufferClass = BufferClass;
	  uuid._rng = _rng;
	  uuid._mathRNG = _mathRNG;
	  uuid._nodeRNG = _nodeRNG;
	  uuid._whatwgRNG = _whatwgRNG;

	  if (('undefined' !== typeof module) && module.exports) {
	    // Publish as node.js module
	    module.exports = uuid;
	  } else if (true) {
	    // Publish as AMD module
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {return uuid;}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


	  } else {
	    // Publish as global (in browsers)
	    _previousRoot = _window.uuid;

	    // **`noConflict()` - (browser only) to reset global 'uuid' var**
	    uuid.noConflict = function() {
	      _window.uuid = _previousRoot;
	      return uuid;
	    };

	    _window.uuid = uuid;
	  }
	})('undefined' !== typeof window ? window : null);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(255)
	var ieee754 = __webpack_require__(256)
	var isArray = __webpack_require__(257)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 255 */
/***/ function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}

	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}

	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)

	  arr = new Arr(len * 3 / 4 - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ },
/* 256 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 257 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(259)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(261)

	exports.createHmac = __webpack_require__(273)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(274)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync
	__webpack_require__(276)(exports, module.exports);

	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(260)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(254).Buffer))

/***/ },
/* 260 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(262)

	var md5 = toConstructor(__webpack_require__(270))
	var rmd160 = toConstructor(__webpack_require__(272))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(254).Buffer
	var Hash   = __webpack_require__(263)(Buffer)

	exports.sha1 = __webpack_require__(264)(Buffer, Hash)
	exports.sha256 = __webpack_require__(268)(Buffer, Hash)
	exports.sha512 = __webpack_require__(269)(Buffer, Hash)


/***/ },
/* 263 */
/***/ function(module, exports) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(265).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(266);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(267);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(2)))

/***/ },
/* 266 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 267 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(265).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(265).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(271);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(261)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(275)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (crypto, exports) {
	  exports = exports || {};
	  var ciphers = __webpack_require__(277)(crypto);
	  exports.createCipher = ciphers.createCipher;
	  exports.createCipheriv = ciphers.createCipheriv;
	  var deciphers = __webpack_require__(312)(crypto);
	  exports.createDecipher = deciphers.createDecipher;
	  exports.createDecipheriv = deciphers.createDecipheriv;
	  var modes = __webpack_require__(303);
	  function listCiphers () {
	    return Object.keys(modes);
	  }
	  exports.listCiphers = listCiphers;
	};



/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(278);
	var Transform = __webpack_require__(279);
	var inherits = __webpack_require__(302);
	var modes = __webpack_require__(303);
	var ebtk = __webpack_require__(304);
	var StreamCipher = __webpack_require__(305);
	inherits(Cipher, Transform);
	function Cipher(mode, key, iv) {
	  if (!(this instanceof Cipher)) {
	    return new Cipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cache = new Splitter();
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	Cipher.prototype._transform = function (data, _, next) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  while ((chunk = this._cache.get())) {
	    thing = this._mode.encrypt(this, chunk);
	    this.push(thing);
	  }
	  next();
	};
	Cipher.prototype._flush = function (next) {
	  var chunk = this._cache.flush();
	  this.push(this._mode.encrypt(this, chunk));
	  this._cipher.scrub();
	  next();
	};


	function Splitter() {
	   if (!(this instanceof Splitter)) {
	    return new Splitter();
	  }
	  this.cache = new Buffer('');
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data]);
	};

	Splitter.prototype.get = function () {
	  if (this.cache.length > 15) {
	    var out = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    return out;
	  }
	  return null;
	};
	Splitter.prototype.flush = function () {
	  var len = 16 - this.cache.length;
	  var padBuff = new Buffer(len);

	  var i = -1;
	  while (++i < len) {
	    padBuff.writeUInt8(len, i);
	  }
	  var out = Buffer.concat([this.cache, padBuff]);
	  return out;
	};
	var modelist = {
	  ECB: __webpack_require__(306),
	  CBC: __webpack_require__(307),
	  CFB: __webpack_require__(309),
	  OFB: __webpack_require__(310),
	  CTR: __webpack_require__(311)
	};
	module.exports = function (crypto) {
	  function createCipheriv(suite, password, iv) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    if (typeof iv === 'string') {
	      iv = new Buffer(iv);
	    }
	    if (typeof password === 'string') {
	      password = new Buffer(password);
	    }
	    if (password.length !== config.key/8) {
	      throw new TypeError('invalid key length ' + password.length);
	    }
	    if (iv.length !== config.iv) {
	      throw new TypeError('invalid iv length ' + iv.length);
	    }
	    if (config.type === 'stream') {
	      return new StreamCipher(modelist[config.mode], password, iv);
	    }
	    return new Cipher(modelist[config.mode], password, iv);
	  }
	  function createCipher (suite, password) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    var keys = ebtk(crypto, password, config.key, config.iv);
	    return createCipheriv(suite, keys.key, keys.iv);
	  }
	  return {
	    createCipher: createCipher,
	    createCipheriv: createCipheriv
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var uint_max = Math.pow(2, 32);
	function fixup_uint32(x) {
	    var ret, x_pos;
	    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;
	    return ret;
	}
	function scrub_vec(v) {
	  var i, _i, _ref;
	  for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
	    v[i] = 0;
	  }
	  return false;
	}

	function Global() {
	  var i;
	  this.SBOX = [];
	  this.INV_SBOX = [];
	  this.SUB_MIX = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 4; i = ++_i) {
	      _results.push([]);
	    }
	    return _results;
	  })();
	  this.INV_SUB_MIX = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 4; i = ++_i) {
	      _results.push([]);
	    }
	    return _results;
	  })();
	  this.init();
	  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
	}

	Global.prototype.init = function() {
	  var d, i, sx, t, x, x2, x4, x8, xi, _i;
	  d = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 256; i = ++_i) {
	      if (i < 128) {
	        _results.push(i << 1);
	      } else {
	        _results.push((i << 1) ^ 0x11b);
	      }
	    }
	    return _results;
	  })();
	  x = 0;
	  xi = 0;
	  for (i = _i = 0; _i < 256; i = ++_i) {
	    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	    this.SBOX[x] = sx;
	    this.INV_SBOX[sx] = x;
	    x2 = d[x];
	    x4 = d[x2];
	    x8 = d[x4];
	    t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8);
	    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16);
	    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24);
	    this.SUB_MIX[3][x] = t;
	    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);
	    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);
	    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);
	    this.INV_SUB_MIX[3][sx] = t;
	    if (x === 0) {
	      x = xi = 1;
	    } else {
	      x = x2 ^ d[d[d[x8 ^ x2]]];
	      xi ^= d[d[xi]];
	    }
	  }
	  return true;
	};

	var G = new Global();


	AES.blockSize = 4 * 4;

	AES.prototype.blockSize = AES.blockSize;

	AES.keySize = 256 / 8;

	AES.prototype.keySize = AES.keySize;

	AES.ivSize = AES.blockSize;

	AES.prototype.ivSize = AES.ivSize;

	 function bufferToArray(buf) {
	  var len = buf.length/4;
	  var out = new Array(len);
	  var i = -1;
	  while (++i < len) {
	    out[i] = buf.readUInt32BE(i * 4);
	  }
	  return out;
	 }
	function AES(key) {
	  this._key = bufferToArray(key);
	  this._doReset();
	}

	AES.prototype._doReset = function() {
	  var invKsRow, keySize, keyWords, ksRow, ksRows, t, _i, _j;
	  keyWords = this._key;
	  keySize = keyWords.length;
	  this._nRounds = keySize + 6;
	  ksRows = (this._nRounds + 1) * 4;
	  this._keySchedule = [];
	  for (ksRow = _i = 0; 0 <= ksRows ? _i < ksRows : _i > ksRows; ksRow = 0 <= ksRows ? ++_i : --_i) {
	    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);
	  }
	  this._invKeySchedule = [];
	  for (invKsRow = _j = 0; 0 <= ksRows ? _j < ksRows : _j > ksRows; invKsRow = 0 <= ksRows ? ++_j : --_j) {
	    ksRow = ksRows - invKsRow;
	    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];
	    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];
	  }
	  return true;
	};

	AES.prototype.encryptBlock = function(M) {
	  M = bufferToArray(new Buffer(M));
	  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX);
	  var buf = new Buffer(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[1], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[3], 12);
	  return buf;
	};

	AES.prototype.decryptBlock = function(M) {
	  M = bufferToArray(new Buffer(M));
	  var temp = [M[3], M[1]];
	  M[1] = temp[0];
	  M[3] = temp[1];
	  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);
	  var buf = new Buffer(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[3], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[1], 12);
	  return buf;
	};

	AES.prototype.scrub = function() {
	  scrub_vec(this._keySchedule);
	  scrub_vec(this._invKeySchedule);
	  scrub_vec(this._key);
	};

	AES.prototype._doCryptBlock = function(M, keySchedule, SUB_MIX, SBOX) {
	  var ksRow, round, s0, s1, s2, s3, t0, t1, t2, t3, _i, _ref;

	  s0 = M[0] ^ keySchedule[0];
	  s1 = M[1] ^ keySchedule[1];
	  s2 = M[2] ^ keySchedule[2];
	  s3 = M[3] ^ keySchedule[3];
	  ksRow = 4;
	  for (round = _i = 1, _ref = this._nRounds; 1 <= _ref ? _i < _ref : _i > _ref; round = 1 <= _ref ? ++_i : --_i) {
	    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];
	    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];
	    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];
	    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];
	    s0 = t0;
	    s1 = t1;
	    s2 = t2;
	    s3 = t3;
	  }
	  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
	  return [
	    fixup_uint32(t0),
	    fixup_uint32(t1),
	    fixup_uint32(t2),
	    fixup_uint32(t3)
	  ];

	};




	  exports.AES = AES;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Transform = __webpack_require__(280).Transform;
	var inherits = __webpack_require__(302);

	module.exports = CipherBase;
	inherits(CipherBase, Transform);
	function CipherBase() {
	  Transform.call(this);
	}
	CipherBase.prototype.update = function (data, inputEnd, outputEnc) {
	  this.write(data, inputEnd);
	  var outData = new Buffer('');
	  var chunk;
	  while ((chunk = this.read())) {
	    outData = Buffer.concat([outData, chunk]);
	  }
	  if (outputEnc) {
	    outData = outData.toString(outputEnc);
	  }
	  return outData;
	};
	CipherBase.prototype.final = function (outputEnc) {
	  this.end();
	  var outData = new Buffer('');
	  var chunk;
	  while ((chunk = this.read())) {
	    outData = Buffer.concat([outData, chunk]);
	  }
	  if (outputEnc) {
	    outData = outData.toString(outputEnc);
	  }
	  return outData;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(281).EventEmitter;
	var inherits = __webpack_require__(282);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(283);
	Stream.Writable = __webpack_require__(298);
	Stream.Duplex = __webpack_require__(299);
	Stream.Transform = __webpack_require__(300);
	Stream.PassThrough = __webpack_require__(301);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 281 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 282 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Stream = (function (){
	  try {
	    return __webpack_require__(280); // hack to fix a circular dependency issue when used with browserify
	  } catch(_){}
	}());
	exports = module.exports = __webpack_require__(284);
	exports.Stream = Stream || exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(293);
	exports.Duplex = __webpack_require__(292);
	exports.Transform = __webpack_require__(296);
	exports.PassThrough = __webpack_require__(297);

	if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
	  module.exports = Stream;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	module.exports = Readable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(285);
	/*</replacement>*/

	/*<replacement>*/
	var isArray = __webpack_require__(286);
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	/*<replacement>*/
	var EE = __webpack_require__(281).EventEmitter;

	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(280);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(281).EventEmitter;
	  }
	})();
	/*</replacement>*/

	var Buffer = __webpack_require__(254).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(287);
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(288);
	util.inherits = __webpack_require__(289);
	/*</replacement>*/

	/*<replacement>*/
	var debugUtil = __webpack_require__(290);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/

	var BufferList = __webpack_require__(291);
	var StringDecoder;

	util.inherits(Readable, Stream);

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}

	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(292);

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(295).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(292);

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function') this._read = options.read;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = bufferShim.from(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }

	      if (!addToFront) state.reading = false;

	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	          if (state.needReadable) emitReadable(stream);
	        }
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(295).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this);
	    }return this;
	  }

	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;

	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = bufferShim.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}

	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 286 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var buffer = __webpack_require__(254);
	var Buffer = buffer.Buffer;
	var SlowBuffer = buffer.SlowBuffer;
	var MAX_LEN = buffer.kMaxLength || 2147483647;
	exports.alloc = function alloc(size, fill, encoding) {
	  if (typeof Buffer.alloc === 'function') {
	    return Buffer.alloc(size, fill, encoding);
	  }
	  if (typeof encoding === 'number') {
	    throw new TypeError('encoding must not be number');
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  var enc = encoding;
	  var _fill = fill;
	  if (_fill === undefined) {
	    enc = undefined;
	    _fill = 0;
	  }
	  var buf = new Buffer(size);
	  if (typeof _fill === 'string') {
	    var fillBuf = new Buffer(_fill, enc);
	    var flen = fillBuf.length;
	    var i = -1;
	    while (++i < size) {
	      buf[i] = fillBuf[i % flen];
	    }
	  } else {
	    buf.fill(_fill);
	  }
	  return buf;
	}
	exports.allocUnsafe = function allocUnsafe(size) {
	  if (typeof Buffer.allocUnsafe === 'function') {
	    return Buffer.allocUnsafe(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new Buffer(size);
	}
	exports.from = function from(value, encodingOrOffset, length) {
	  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
	    return Buffer.from(value, encodingOrOffset, length);
	  }
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }
	  if (typeof value === 'string') {
	    return new Buffer(value, encodingOrOffset);
	  }
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    var offset = encodingOrOffset;
	    if (arguments.length === 1) {
	      return new Buffer(value);
	    }
	    if (typeof offset === 'undefined') {
	      offset = 0;
	    }
	    var len = length;
	    if (typeof len === 'undefined') {
	      len = value.byteLength - offset;
	    }
	    if (offset >= value.byteLength) {
	      throw new RangeError('\'offset\' is out of bounds');
	    }
	    if (len > value.byteLength - offset) {
	      throw new RangeError('\'length\' is out of bounds');
	    }
	    return new Buffer(value.slice(offset, offset + len));
	  }
	  if (Buffer.isBuffer(value)) {
	    var out = new Buffer(value.length);
	    value.copy(out, 0, 0, value.length);
	    return out;
	  }
	  if (value) {
	    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
	      return new Buffer(value);
	    }
	    if (value.type === 'Buffer' && Array.isArray(value.data)) {
	      return new Buffer(value.data);
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
	}
	exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
	  if (typeof Buffer.allocUnsafeSlow === 'function') {
	    return Buffer.allocUnsafeSlow(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size >= MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new SlowBuffer(size);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 289 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 290 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Buffer = __webpack_require__(254).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(287);
	/*</replacement>*/

	module.exports = BufferList;

	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}

	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};

	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};

	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};

	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};

	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};

	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return bufferShim.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = bufferShim.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	'use strict';

	/*<replacement>*/

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/

	module.exports = Duplex;

	/*<replacement>*/
	var processNextTick = __webpack_require__(285);
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(288);
	util.inherits = __webpack_require__(289);
	/*</replacement>*/

	var Readable = __webpack_require__(284);
	var Writable = __webpack_require__(293);

	util.inherits(Duplex, Readable);

	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}

	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.

	'use strict';

	module.exports = Writable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(285);
	/*</replacement>*/

	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Writable.WritableState = WritableState;

	/*<replacement>*/
	var util = __webpack_require__(288);
	util.inherits = __webpack_require__(289);
	/*</replacement>*/

	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(294)
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(280);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(281).EventEmitter;
	  }
	})();
	/*</replacement>*/

	var Buffer = __webpack_require__(254).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(287);
	/*</replacement>*/

	util.inherits(Writable, Stream);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(292);

	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};

	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	    });
	  } catch (_) {}
	})();

	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance.call(this, object)) return true;

	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function (object) {
	    return object instanceof this;
	  };
	}

	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(292);

	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.

	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}

	// Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;

	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  var isBuf = Buffer.isBuffer(chunk);

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = bufferShim.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    chunk = decodeChunk(state, chunk, encoding);
	    if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  }
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) processNextTick(cb, er);else cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;
	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(8).setImmediate))

/***/ },
/* 294 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */

	module.exports = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(254).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	'use strict';

	module.exports = Transform;

	var Duplex = __webpack_require__(292);

	/*<replacement>*/
	var util = __webpack_require__(288);
	util.inherits = __webpack_require__(289);
	/*</replacement>*/

	util.inherits(Transform, Duplex);

	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined) stream.push(data);

	  cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}

	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  // When the writable side finishes, then flush out anything remaining.
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er, data) {
	      done(stream, er, data);
	    });else done(stream);
	  });
	}

	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};

	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);

	  if (data !== null && data !== undefined) stream.push(data);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

	  if (ts.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	'use strict';

	module.exports = PassThrough;

	var Transform = __webpack_require__(296);

	/*<replacement>*/
	var util = __webpack_require__(288);
	util.inherits = __webpack_require__(289);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(293)


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(292)


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(296)


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(297)


/***/ },
/* 302 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 303 */
/***/ function(module, exports) {

	exports['aes-128-ecb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-192-ecb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-256-ecb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-128-cbc'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes-192-cbc'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes-256-cbc'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes128'] = exports['aes-128-cbc'];
	exports['aes192'] = exports['aes-192-cbc'];
	exports['aes256'] = exports['aes-256-cbc'];
	exports['aes-128-cfb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-192-cfb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-256-cfb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-128-ofb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-192-ofb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-256-ofb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-128-ctr'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};
	exports['aes-192-ctr'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};
	exports['aes-256-ctr'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = function (crypto, password, keyLen, ivLen) {
	  keyLen = keyLen/8;
	  ivLen = ivLen || 0;
	  var ki = 0;
	  var ii = 0;
	  var key = new Buffer(keyLen);
	  var iv = new Buffer(ivLen);
	  var addmd = 0;
	  var md, md_buf;
	  var i;
	  while (true) {
	    md = crypto.createHash('md5');
	    if(addmd++ > 0) {
	       md.update(md_buf);
	    }
	    md.update(password);
	    md_buf = md.digest();
	    i = 0;
	    if(keyLen > 0) {
	      while(true) {
	        if(keyLen === 0) {
	          break;
	        }
	        if(i === md_buf.length) {
	          break;
	        }
	        key[ki++] = md_buf[i];
	        keyLen--;
	        i++;
	       }
	    }
	    if(ivLen > 0 && i !== md_buf.length) {
	      while(true) {
	        if(ivLen === 0) {
	          break;
	        }
	        if(i === md_buf.length) {
	          break;
	        }
	       iv[ii++] = md_buf[i];
	       ivLen--;
	       i++;
	     }
	   }
	   if(keyLen === 0 && ivLen === 0) {
	      break;
	    }
	  }
	  for(i=0;i<md_buf.length;i++) {
	    md_buf[i] = 0;
	  }
	  return {
	    key: key,
	    iv: iv
	  };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(278);
	var Transform = __webpack_require__(279);
	var inherits = __webpack_require__(302);

	inherits(StreamCipher, Transform);
	module.exports = StreamCipher;
	function StreamCipher(mode, key, iv, decrypt) {
	  if (!(this instanceof StreamCipher)) {
	    return new StreamCipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  this._cache = new Buffer('');
	  this._secCache = new Buffer('');
	  this._decrypt = decrypt;
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	StreamCipher.prototype._transform = function (chunk, _, next) {
	  next(null, this._mode.encrypt(this, chunk, this._decrypt));
	};
	StreamCipher.prototype._flush = function (next) {
	  this._cipher.scrub();
	  next();
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 306 */
/***/ function(module, exports) {

	exports.encrypt = function (self, block) {
	  return self._cipher.encryptBlock(block);
	};
	exports.decrypt = function (self, block) {
	  return self._cipher.decryptBlock(block);
	};

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	var xor = __webpack_require__(308);
	exports.encrypt = function (self, block) {
	  var data = xor(block, self._prev);
	  self._prev = self._cipher.encryptBlock(data);
	  return self._prev;
	};
	exports.decrypt = function (self, block) {
	  var pad = self._prev;
	  self._prev = block;
	  var out = self._cipher.decryptBlock(block);
	  return xor(out, pad);
	};

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = xor;
	function xor(a, b) {
	  var len = Math.min(a.length, b.length);
	  var out = new Buffer(len);
	  var i = -1;
	  while (++i < len) {
	    out.writeUInt8(a[i] ^ b[i], i);
	  }
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(308);
	exports.encrypt = function (self, data, decrypt) {
	  var out = new Buffer('');
	  var len;
	  while (data.length) {
	    if (self._cache.length === 0) {
	      self._cache = self._cipher.encryptBlock(self._prev);
	      self._prev = new Buffer('');
	    }
	    if (self._cache.length <= data.length) {
	      len = self._cache.length;
	      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
	      data = data.slice(len);
	    } else {
	      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
	      break;
	    }
	  }
	  return out;
	};
	function encryptStart(self, data, decrypt) {
	  var len = data.length;
	  var out = xor(data, self._cache);
	  self._cache = self._cache.slice(len);
	  self._prev = Buffer.concat([self._prev, decrypt?data:out]);
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(308);
	function getBlock(self) {
	  self._prev = self._cipher.encryptBlock(self._prev);
	  return self._prev;
	}
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)]);
	  }
	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor(chunk, pad);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(308);
	function getBlock(self) {
	  var out = self._cipher.encryptBlock(self._prev);
	  incr32(self._prev);
	  return out;
	}
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)]);
	  }
	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor(chunk, pad);
	};
	function incr32(iv) {
	  var len = iv.length;
	  var item;
	  while (len--) {
	    item = iv.readUInt8(len);
	    if (item === 255) {
	      iv.writeUInt8(0, len);
	    } else {
	      item++;
	      iv.writeUInt8(item, len);
	      break;
	    }
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(278);
	var Transform = __webpack_require__(279);
	var inherits = __webpack_require__(302);
	var modes = __webpack_require__(303);
	var StreamCipher = __webpack_require__(305);
	var ebtk = __webpack_require__(304);

	inherits(Decipher, Transform);
	function Decipher(mode, key, iv) {
	  if (!(this instanceof Decipher)) {
	    return new Decipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cache = new Splitter();
	  this._last = void 0;
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	Decipher.prototype._transform = function (data, _, next) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  while ((chunk = this._cache.get())) {
	    thing = this._mode.decrypt(this, chunk);
	    this.push(thing);
	  }
	  next();
	};
	Decipher.prototype._flush = function (next) {
	  var chunk = this._cache.flush();
	  if (!chunk) {
	    return next;
	  }

	  this.push(unpad(this._mode.decrypt(this, chunk)));

	  next();
	};

	function Splitter() {
	   if (!(this instanceof Splitter)) {
	    return new Splitter();
	  }
	  this.cache = new Buffer('');
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data]);
	};

	Splitter.prototype.get = function () {
	  if (this.cache.length > 16) {
	    var out = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    return out;
	  }
	  return null;
	};
	Splitter.prototype.flush = function () {
	  if (this.cache.length) {
	    return this.cache;
	  }
	};
	function unpad(last) {
	  var padded = last[15];
	  if (padded === 16) {
	    return;
	  }
	  return last.slice(0, 16 - padded);
	}

	var modelist = {
	  ECB: __webpack_require__(306),
	  CBC: __webpack_require__(307),
	  CFB: __webpack_require__(309),
	  OFB: __webpack_require__(310),
	  CTR: __webpack_require__(311)
	};

	module.exports = function (crypto) {
	  function createDecipheriv(suite, password, iv) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    if (typeof iv === 'string') {
	      iv = new Buffer(iv);
	    }
	    if (typeof password === 'string') {
	      password = new Buffer(password);
	    }
	    if (password.length !== config.key/8) {
	      throw new TypeError('invalid key length ' + password.length);
	    }
	    if (iv.length !== config.iv) {
	      throw new TypeError('invalid iv length ' + iv.length);
	    }
	    if (config.type === 'stream') {
	      return new StreamCipher(modelist[config.mode], password, iv, true);
	    }
	    return new Decipher(modelist[config.mode], password, iv);
	  }

	  function createDecipher (suite, password) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    var keys = ebtk(crypto, password, config.key, config.iv);
	    return createDecipheriv(suite, keys.key, keys.iv);
	  }
	  return {
	    createDecipher: createDecipher,
	    createDecipheriv: createDecipheriv
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254).Buffer))

/***/ }
/******/ ]);